
I2C_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006810  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800694c  0800694c  0001694c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006b04  08006b04  00016b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006b0c  08006b0c  00016b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  20000004  08006b14  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001c8  2000008c  08006b9c  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000254  08006b9c  00020254  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013d8c  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002905  00000000  00000000  00033e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016b0  00000000  00000000  00036750  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001578  00000000  00000000  00037e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00022dba  00000000  00000000  00039378  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e31f  00000000  00000000  0005c132  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d922f  00000000  00000000  0006a451  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00143680  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006464  00000000  00000000  001436fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000008c 	.word	0x2000008c
 8000158:	00000000 	.word	0x00000000
 800015c:	08006934 	.word	0x08006934

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000090 	.word	0x20000090
 8000178:	08006934 	.word	0x08006934

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	4688      	mov	r8, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0803 	orr.w	r8, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e4:	fa1f fc85 	uxth.w	ip, r5
 80001e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f0:	fb07 f10c 	mul.w	r1, r7, ip
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80001fe:	f080 811b 	bcs.w	8000438 <__udivmoddi4+0x28c>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8118 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000220:	45a4      	cmp	ip, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	192c      	adds	r4, r5, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8107 	bcs.w	800043c <__udivmoddi4+0x290>
 800022e:	45a4      	cmp	ip, r4
 8000230:	f240 8104 	bls.w	800043c <__udivmoddi4+0x290>
 8000234:	3802      	subs	r0, #2
 8000236:	442c      	add	r4, r5
 8000238:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023c:	eba4 040c 	sub.w	r4, r4, ip
 8000240:	2700      	movs	r7, #0
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80eb 	beq.w	8000432 <__udivmoddi4+0x286>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d147      	bne.n	8000302 <__udivmoddi4+0x156>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fa 	bhi.w	8000470 <__udivmoddi4+0x2c4>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	1b49      	subs	r1, r1, r5
 80002a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a4:	fa1f f885 	uxth.w	r8, r5
 80002a8:	2701      	movs	r7, #1
 80002aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002ae:	0c23      	lsrs	r3, r4, #16
 80002b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b8:	fb08 f10c 	mul.w	r1, r8, ip
 80002bc:	4299      	cmp	r1, r3
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002c0:	18eb      	adds	r3, r5, r3
 80002c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4299      	cmp	r1, r3
 80002ca:	f200 80cd 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002ce:	4684      	mov	ip, r0
 80002d0:	1a59      	subs	r1, r3, r1
 80002d2:	b2a3      	uxth	r3, r4
 80002d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e0:	fb08 f800 	mul.w	r8, r8, r0
 80002e4:	45a0      	cmp	r8, r4
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0x14c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x14a>
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	f200 80b6 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002f6:	4618      	mov	r0, r3
 80002f8:	eba4 0408 	sub.w	r4, r4, r8
 80002fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000300:	e79f      	b.n	8000242 <__udivmoddi4+0x96>
 8000302:	f1c7 0c20 	rsb	ip, r7, #32
 8000306:	40bb      	lsls	r3, r7
 8000308:	fa22 fe0c 	lsr.w	lr, r2, ip
 800030c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000310:	fa01 f407 	lsl.w	r4, r1, r7
 8000314:	fa20 f50c 	lsr.w	r5, r0, ip
 8000318:	fa21 f30c 	lsr.w	r3, r1, ip
 800031c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000320:	4325      	orrs	r5, r4
 8000322:	fbb3 f9f8 	udiv	r9, r3, r8
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	fb08 3319 	mls	r3, r8, r9, r3
 800032c:	fa1f fa8e 	uxth.w	sl, lr
 8000330:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000334:	fb09 f40a 	mul.w	r4, r9, sl
 8000338:	429c      	cmp	r4, r3
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f107 	lsl.w	r1, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1e 0303 	adds.w	r3, lr, r3
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8087 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000350:	429c      	cmp	r4, r3
 8000352:	f240 8084 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4473      	add	r3, lr
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	b2ad      	uxth	r5, r5
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800036c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000370:	45a2      	cmp	sl, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1e 0404 	adds.w	r4, lr, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295
 800037c:	d26b      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 800037e:	45a2      	cmp	sl, r4
 8000380:	d969      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000382:	3802      	subs	r0, #2
 8000384:	4474      	add	r4, lr
 8000386:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038a:	fba0 8902 	umull	r8, r9, r0, r2
 800038e:	eba4 040a 	sub.w	r4, r4, sl
 8000392:	454c      	cmp	r4, r9
 8000394:	46c2      	mov	sl, r8
 8000396:	464b      	mov	r3, r9
 8000398:	d354      	bcc.n	8000444 <__udivmoddi4+0x298>
 800039a:	d051      	beq.n	8000440 <__udivmoddi4+0x294>
 800039c:	2e00      	cmp	r6, #0
 800039e:	d069      	beq.n	8000474 <__udivmoddi4+0x2c8>
 80003a0:	ebb1 050a 	subs.w	r5, r1, sl
 80003a4:	eb64 0403 	sbc.w	r4, r4, r3
 80003a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003ac:	40fd      	lsrs	r5, r7
 80003ae:	40fc      	lsrs	r4, r7
 80003b0:	ea4c 0505 	orr.w	r5, ip, r5
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f703 	lsr.w	r7, r0, r3
 80003c4:	4095      	lsls	r5, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	fa21 f303 	lsr.w	r3, r1, r3
 80003ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d2:	4338      	orrs	r0, r7
 80003d4:	0c01      	lsrs	r1, r0, #16
 80003d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003da:	fa1f f885 	uxth.w	r8, r5
 80003de:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e6:	fb07 f308 	mul.w	r3, r7, r8
 80003ea:	428b      	cmp	r3, r1
 80003ec:	fa04 f402 	lsl.w	r4, r4, r2
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f2:	1869      	adds	r1, r5, r1
 80003f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3f02      	subs	r7, #2
 8000400:	4429      	add	r1, r5
 8000402:	1acb      	subs	r3, r1, r3
 8000404:	b281      	uxth	r1, r0
 8000406:	fbb3 f0fe 	udiv	r0, r3, lr
 800040a:	fb0e 3310 	mls	r3, lr, r0, r3
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb00 f308 	mul.w	r3, r0, r8
 8000416:	428b      	cmp	r3, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000420:	d217      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000422:	428b      	cmp	r3, r1
 8000424:	d915      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	1ac9      	subs	r1, r1, r3
 800042c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000430:	e73b      	b.n	80002aa <__udivmoddi4+0xfe>
 8000432:	4637      	mov	r7, r6
 8000434:	4630      	mov	r0, r6
 8000436:	e709      	b.n	800024c <__udivmoddi4+0xa0>
 8000438:	4607      	mov	r7, r0
 800043a:	e6e7      	b.n	800020c <__udivmoddi4+0x60>
 800043c:	4618      	mov	r0, r3
 800043e:	e6fb      	b.n	8000238 <__udivmoddi4+0x8c>
 8000440:	4541      	cmp	r1, r8
 8000442:	d2ab      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000444:	ebb8 0a02 	subs.w	sl, r8, r2
 8000448:	eb69 020e 	sbc.w	r2, r9, lr
 800044c:	3801      	subs	r0, #1
 800044e:	4613      	mov	r3, r2
 8000450:	e7a4      	b.n	800039c <__udivmoddi4+0x1f0>
 8000452:	4660      	mov	r0, ip
 8000454:	e7e9      	b.n	800042a <__udivmoddi4+0x27e>
 8000456:	4618      	mov	r0, r3
 8000458:	e795      	b.n	8000386 <__udivmoddi4+0x1da>
 800045a:	4667      	mov	r7, ip
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	4681      	mov	r9, r0
 8000460:	e77c      	b.n	800035c <__udivmoddi4+0x1b0>
 8000462:	3802      	subs	r0, #2
 8000464:	442c      	add	r4, r5
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0x14c>
 8000468:	f1ac 0c02 	sub.w	ip, ip, #2
 800046c:	442b      	add	r3, r5
 800046e:	e72f      	b.n	80002d0 <__udivmoddi4+0x124>
 8000470:	4638      	mov	r0, r7
 8000472:	e708      	b.n	8000286 <__udivmoddi4+0xda>
 8000474:	4637      	mov	r7, r6
 8000476:	e6e9      	b.n	800024c <__udivmoddi4+0xa0>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b085      	sub	sp, #20
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4013      	ands	r3, r2
 80004d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d2:	68fb      	ldr	r3, [r7, #12]
}
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fda0 	bl	8001028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f850 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f968 	bl	80007c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f0:	f000 f94c 	bl	800078c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f8fe 	bl	80006f4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80004f8:	f000 f8bc 	bl	8000674 <MX_I2C1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("!!! Start !!! \n");
 80004fc:	481b      	ldr	r0, [pc, #108]	; (800056c <main+0x8c>)
 80004fe:	f005 fe0d 	bl	800611c <puts>

#define MASTER
#define I2C_ADDRESS 0x30F

#ifdef MASTER
	  HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
 8000502:	2120      	movs	r1, #32
 8000504:	481a      	ldr	r0, [pc, #104]	; (8000570 <main+0x90>)
 8000506:	f001 fb0f 	bl	8001b28 <HAL_GPIO_TogglePin>
	  while (HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) != GPIO_PIN_RESET) {}
 800050a:	bf00      	nop
 800050c:	2110      	movs	r1, #16
 800050e:	4819      	ldr	r0, [pc, #100]	; (8000574 <main+0x94>)
 8000510:	f001 fada 	bl	8001ac8 <HAL_GPIO_ReadPin>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1f8      	bne.n	800050c <main+0x2c>

	  while(HAL_I2C_Master_Transmit_IT(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)MessageSend, sizeof MessageSend)!= HAL_OK){}
 800051a:	bf00      	nop
 800051c:	2308      	movs	r3, #8
 800051e:	4a16      	ldr	r2, [pc, #88]	; (8000578 <main+0x98>)
 8000520:	f240 310f 	movw	r1, #783	; 0x30f
 8000524:	4815      	ldr	r0, [pc, #84]	; (800057c <main+0x9c>)
 8000526:	f001 fbcd 	bl	8001cc4 <HAL_I2C_Master_Transmit_IT>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d1f5      	bne.n	800051c <main+0x3c>
	  HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 8000530:	2101      	movs	r1, #1
 8000532:	480f      	ldr	r0, [pc, #60]	; (8000570 <main+0x90>)
 8000534:	f001 faf8 	bl	8001b28 <HAL_GPIO_TogglePin>
	  while(HAL_I2C_Master_Receive_IT (&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t *)MasterRxBuffer, sizeof MasterRxBuffer)!= HAL_OK){}
 8000538:	bf00      	nop
 800053a:	2308      	movs	r3, #8
 800053c:	4a10      	ldr	r2, [pc, #64]	; (8000580 <main+0xa0>)
 800053e:	f240 310f 	movw	r1, #783	; 0x30f
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <main+0x9c>)
 8000544:	f001 fc2e 	bl	8001da4 <HAL_I2C_Master_Receive_IT>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1f5      	bne.n	800053a <main+0x5a>

#endif

	  while (1)
	  {
		  HAL_Delay(1000);
 800054e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000552:	f000 fdef 	bl	8001134 <HAL_Delay>
		  printf("!!! Loop !!! \n");
 8000556:	480b      	ldr	r0, [pc, #44]	; (8000584 <main+0xa4>)
 8000558:	f005 fde0 	bl	800611c <puts>
		#ifdef MASTER
		  HAL_UART_Transmit(&huart1,MasterRxBuffer,sizeof MasterRxBuffer,1000);
 800055c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000560:	2208      	movs	r2, #8
 8000562:	4907      	ldr	r1, [pc, #28]	; (8000580 <main+0xa0>)
 8000564:	4808      	ldr	r0, [pc, #32]	; (8000588 <main+0xa8>)
 8000566:	f004 fe1a 	bl	800519e <HAL_UART_Transmit>
		  HAL_Delay(1000);
 800056a:	e7f0      	b.n	800054e <main+0x6e>
 800056c:	0800694c 	.word	0x0800694c
 8000570:	48000400 	.word	0x48000400
 8000574:	48000800 	.word	0x48000800
 8000578:	20000014 	.word	0x20000014
 800057c:	200000b4 	.word	0x200000b4
 8000580:	20000004 	.word	0x20000004
 8000584:	0800695c 	.word	0x0800695c
 8000588:	200001c0 	.word	0x200001c0

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b0ae      	sub	sp, #184	; 0xb8
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000596:	2248      	movs	r2, #72	; 0x48
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f005 fd5a 	bl	8006054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]
 80005b0:	615a      	str	r2, [r3, #20]
 80005b2:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	2250      	movs	r2, #80	; 0x50
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 fd4a 	bl	8006054 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	4b2b      	ldr	r3, [pc, #172]	; (8000670 <SystemClock_Config+0xe4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005c8:	4a29      	ldr	r2, [pc, #164]	; (8000670 <SystemClock_Config+0xe4>)
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b27      	ldr	r3, [pc, #156]	; (8000670 <SystemClock_Config+0xe4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005dc:	2303      	movs	r3, #3
 80005de:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2340      	movs	r3, #64	; 0x40
 80005ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005fc:	4618      	mov	r0, r3
 80005fe:	f003 fb09 	bl	8003c14 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000608:	f000 f984 	bl	8000914 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800060c:	236f      	movs	r3, #111	; 0x6f
 800060e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000610:	2302      	movs	r3, #2
 8000612:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000628:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800062c:	2101      	movs	r1, #1
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fe84 	bl	800433c <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800063a:	f000 f96b 	bl	8000914 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 800063e:	f242 0305 	movw	r3, #8197	; 0x2005
 8000642:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000648:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800064e:	2302      	movs	r3, #2
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000652:	2300      	movs	r3, #0
 8000654:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	4618      	mov	r0, r3
 800065a:	f004 faaa 	bl	8004bb2 <HAL_RCCEx_PeriphCLKConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8000664:	f000 f956 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000668:	bf00      	nop
 800066a:	37b8      	adds	r7, #184	; 0xb8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	58000400 	.word	0x58000400

08000674 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_I2C1_Init+0x74>)
 800067a:	4a1c      	ldr	r2, [pc, #112]	; (80006ec <MX_I2C1_Init+0x78>)
 800067c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800067e:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_I2C1_Init+0x74>)
 8000680:	4a1b      	ldr	r2, [pc, #108]	; (80006f0 <MX_I2C1_Init+0x7c>)
 8000682:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = SLAVE_ADDRESS;
 8000684:	4b18      	ldr	r3, [pc, #96]	; (80006e8 <MX_I2C1_Init+0x74>)
 8000686:	f240 320f 	movw	r2, #783	; 0x30f
 800068a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068c:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_I2C1_Init+0x74>)
 800068e:	2201      	movs	r2, #1
 8000690:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a4:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006b2:	f001 fa77 	bl	8001ba4 <HAL_I2C_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006bc:	f000 f92a 	bl	8000914 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4809      	ldr	r0, [pc, #36]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006c4:	f002 fe5c 	bl	8003380 <HAL_I2CEx_ConfigAnalogFilter>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006ce:	f000 f921 	bl	8000914 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006d2:	2100      	movs	r1, #0
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <MX_I2C1_Init+0x74>)
 80006d6:	f002 fe9e 	bl	8003416 <HAL_I2CEx_ConfigDigitalFilter>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006e0:	f000 f918 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000b4 	.word	0x200000b4
 80006ec:	40005400 	.word	0x40005400
 80006f0:	00707cbb 	.word	0x00707cbb

080006f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006f8:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_USART1_UART_Init+0x90>)
 80006fa:	4a23      	ldr	r2, [pc, #140]	; (8000788 <MX_USART1_UART_Init+0x94>)
 80006fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_USART1_UART_Init+0x90>)
 8000700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_USART1_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_USART1_UART_Init+0x90>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_USART1_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_USART1_UART_Init+0x90>)
 800071a:	220c      	movs	r2, #12
 800071c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_USART1_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_USART1_UART_Init+0x90>)
 8000726:	2200      	movs	r2, #0
 8000728:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_USART1_UART_Init+0x90>)
 800072c:	2200      	movs	r2, #0
 800072e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_USART1_UART_Init+0x90>)
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_USART1_UART_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800073c:	4811      	ldr	r0, [pc, #68]	; (8000784 <MX_USART1_UART_Init+0x90>)
 800073e:	f004 fcde 	bl	80050fe <HAL_UART_Init>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000748:	f000 f8e4 	bl	8000914 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800074c:	2100      	movs	r1, #0
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <MX_USART1_UART_Init+0x90>)
 8000750:	f005 fb72 	bl	8005e38 <HAL_UARTEx_SetTxFifoThreshold>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800075a:	f000 f8db 	bl	8000914 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075e:	2100      	movs	r1, #0
 8000760:	4808      	ldr	r0, [pc, #32]	; (8000784 <MX_USART1_UART_Init+0x90>)
 8000762:	f005 fba7 	bl	8005eb4 <HAL_UARTEx_SetRxFifoThreshold>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800076c:	f000 f8d2 	bl	8000914 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_USART1_UART_Init+0x90>)
 8000772:	f005 fb28 	bl	8005dc6 <HAL_UARTEx_DisableFifoMode>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800077c:	f000 f8ca 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200001c0 	.word	0x200001c0
 8000788:	40013800 	.word	0x40013800

0800078c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000790:	2004      	movs	r0, #4
 8000792:	f7ff fe73 	bl	800047c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000796:	2001      	movs	r0, #1
 8000798:	f7ff fe70 	bl	800047c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	2100      	movs	r1, #0
 80007a0:	200b      	movs	r0, #11
 80007a2:	f000 fdc4 	bl	800132e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007a6:	200b      	movs	r0, #11
 80007a8:	f000 fddb 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	200c      	movs	r0, #12
 80007b2:	f000 fdbc 	bl	800132e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007b6:	200c      	movs	r0, #12
 80007b8:	f000 fdd3 	bl	8001362 <HAL_NVIC_EnableIRQ>

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b086      	sub	sp, #24
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d4:	2004      	movs	r0, #4
 80007d6:	f7ff fe6a 	bl	80004ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2002      	movs	r0, #2
 80007dc:	f7ff fe67 	bl	80004ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007e0:	2008      	movs	r0, #8
 80007e2:	f7ff fe64 	bl	80004ae <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led2_Pin|Led3_Pin|Led1_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2123      	movs	r1, #35	; 0x23
 80007ea:	4815      	ldr	r0, [pc, #84]	; (8000840 <MX_GPIO_Init+0x80>)
 80007ec:	f001 f984 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 80007f0:	2310      	movs	r3, #16
 80007f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4619      	mov	r1, r3
 8000800:	4810      	ldr	r0, [pc, #64]	; (8000844 <MX_GPIO_Init+0x84>)
 8000802:	f000 fff1 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led2_Pin Led3_Pin Led1_Pin */
  GPIO_InitStruct.Pin = Led2_Pin|Led3_Pin|Led1_Pin;
 8000806:	2323      	movs	r3, #35	; 0x23
 8000808:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4809      	ldr	r0, [pc, #36]	; (8000840 <MX_GPIO_Init+0x80>)
 800081c:	f000 ffe4 	bl	80017e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button3_Pin;
 8000820:	2303      	movs	r3, #3
 8000822:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000828:	2301      	movs	r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	4619      	mov	r1, r3
 8000830:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_GPIO_Init+0x88>)
 8000832:	f000 ffd9 	bl	80017e8 <HAL_GPIO_Init>

}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	48000400 	.word	0x48000400
 8000844:	48000800 	.word	0x48000800
 8000848:	48000c00 	.word	0x48000c00

0800084c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000854:	1d39      	adds	r1, r7, #4
 8000856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085a:	2201      	movs	r2, #1
 800085c:	4803      	ldr	r0, [pc, #12]	; (800086c <__io_putchar+0x20>)
 800085e:	f004 fc9e 	bl	800519e <HAL_UART_Transmit>

  return ch;
 8000862:	687b      	ldr	r3, [r7, #4]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200001c0 	.word	0x200001c0

08000870 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	printf("Master send \n");
 8000878:	4803      	ldr	r0, [pc, #12]	; (8000888 <HAL_I2C_MasterTxCpltCallback+0x18>)
 800087a:	f005 fc4f 	bl	800611c <puts>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	0800696c 	.word	0x0800696c

0800088c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	printf("Master received \n");
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <HAL_I2C_MasterRxCpltCallback+0x20>)
 8000896:	f005 fc41 	bl	800611c <puts>
	HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 800089a:	2102      	movs	r1, #2
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <HAL_I2C_MasterRxCpltCallback+0x24>)
 800089e:	f001 f943 	bl	8001b28 <HAL_GPIO_TogglePin>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	0800697c 	.word	0x0800697c
 80008b0:	48000400 	.word	0x48000400

080008b4 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	printf("Slave send \n");
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <HAL_I2C_SlaveTxCpltCallback+0x20>)
 80008be:	f005 fc2d 	bl	800611c <puts>
	HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 80008c2:	2102      	movs	r1, #2
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 80008c6:	f001 f92f 	bl	8001b28 <HAL_GPIO_TogglePin>
}
 80008ca:	bf00      	nop
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	08006990 	.word	0x08006990
 80008d8:	48000400 	.word	0x48000400

080008dc <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
	printf("Slave received \n");
 80008e4:	4807      	ldr	r0, [pc, #28]	; (8000904 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 80008e6:	f005 fc19 	bl	800611c <puts>
	HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 80008ea:	2101      	movs	r1, #1
 80008ec:	4806      	ldr	r0, [pc, #24]	; (8000908 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 80008ee:	f001 f91b 	bl	8001b28 <HAL_GPIO_TogglePin>
	HAL_I2C_Slave_Transmit_IT(&hi2c1, (uint8_t*)SlaveRxBuffer, sizeof SlaveRxBuffer);
 80008f2:	2208      	movs	r2, #8
 80008f4:	4905      	ldr	r1, [pc, #20]	; (800090c <HAL_I2C_SlaveRxCpltCallback+0x30>)
 80008f6:	4806      	ldr	r0, [pc, #24]	; (8000910 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80008f8:	f001 fac4 	bl	8001e84 <HAL_I2C_Slave_Transmit_IT>
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	0800699c 	.word	0x0800699c
 8000908:	48000400 	.word	0x48000400
 800090c:	2000000c 	.word	0x2000000c
 8000910:	200000b4 	.word	0x200000b4

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <LL_AHB2_GRP1_EnableClock>:
{
 8000922:	b480      	push	{r7}
 8000924:	b085      	sub	sp, #20
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800092a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800092e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000930:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4313      	orrs	r3, r2
 8000938:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800093a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4013      	ands	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000954:	b480      	push	{r7}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 800095c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000960:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4313      	orrs	r3, r2
 800096a:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800096c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000978:	68fb      	ldr	r3, [r7, #12]
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000986:	b480      	push	{r7}
 8000988:	b085      	sub	sp, #20
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800098e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000992:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	4313      	orrs	r3, r2
 800099c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800099e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	4013      	ands	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009aa:	68fb      	ldr	r3, [r7, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4013      	ands	r3, r2
 80009da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009dc:	68fb      	ldr	r3, [r7, #12]
}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80009ee:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80009f2:	f7ff ffaf 	bl	8000954 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	202e      	movs	r0, #46	; 0x2e
 80009fc:	f000 fc97 	bl	800132e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000a00:	202e      	movs	r0, #46	; 0x2e
 8000a02:	f000 fcae 	bl	8001362 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b088      	sub	sp, #32
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a17      	ldr	r2, [pc, #92]	; (8000a88 <HAL_I2C_MspInit+0x7c>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d127      	bne.n	8000a7e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f7ff ff77 	bl	8000922 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a3a:	2312      	movs	r3, #18
 8000a3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a46:	2304      	movs	r3, #4
 8000a48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480e      	ldr	r0, [pc, #56]	; (8000a8c <HAL_I2C_MspInit+0x80>)
 8000a52:	f000 fec9 	bl	80017e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a56:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000a5a:	f7ff ff94 	bl	8000986 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	201e      	movs	r0, #30
 8000a64:	f000 fc63 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a68:	201e      	movs	r0, #30
 8000a6a:	f000 fc7a 	bl	8001362 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	201f      	movs	r0, #31
 8000a74:	f000 fc5b 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a78:	201f      	movs	r0, #31
 8000a7a:	f000 fc72 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a7e:	bf00      	nop
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	48000400 	.word	0x48000400

08000a90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 030c 	add.w	r3, r7, #12
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a3b      	ldr	r2, [pc, #236]	; (8000b9c <HAL_UART_MspInit+0x10c>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d170      	bne.n	8000b94 <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ab2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ab6:	f7ff ff7f 	bl	80009b8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2002      	movs	r0, #2
 8000abc:	f7ff ff31 	bl	8000922 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ac0:	23c0      	movs	r3, #192	; 0xc0
 8000ac2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4831      	ldr	r0, [pc, #196]	; (8000ba0 <HAL_UART_MspInit+0x110>)
 8000adc:	f000 fe84 	bl	80017e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <HAL_UART_MspInit+0x114>)
 8000ae2:	4a31      	ldr	r2, [pc, #196]	; (8000ba8 <HAL_UART_MspInit+0x118>)
 8000ae4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <HAL_UART_MspInit+0x114>)
 8000ae8:	220e      	movs	r2, #14
 8000aea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aec:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <HAL_UART_MspInit+0x114>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <HAL_UART_MspInit+0x114>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <HAL_UART_MspInit+0x114>)
 8000afa:	2280      	movs	r2, #128	; 0x80
 8000afc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <HAL_UART_MspInit+0x114>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b04:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <HAL_UART_MspInit+0x114>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b0a:	4b26      	ldr	r3, [pc, #152]	; (8000ba4 <HAL_UART_MspInit+0x114>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b10:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <HAL_UART_MspInit+0x114>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b16:	4823      	ldr	r0, [pc, #140]	; (8000ba4 <HAL_UART_MspInit+0x114>)
 8000b18:	f000 fc3e 	bl	8001398 <HAL_DMA_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8000b22:	f7ff fef7 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a1e      	ldr	r2, [pc, #120]	; (8000ba4 <HAL_UART_MspInit+0x114>)
 8000b2a:	679a      	str	r2, [r3, #120]	; 0x78
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ba4 <HAL_UART_MspInit+0x114>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000b32:	4b1e      	ldr	r3, [pc, #120]	; (8000bac <HAL_UART_MspInit+0x11c>)
 8000b34:	4a1e      	ldr	r2, [pc, #120]	; (8000bb0 <HAL_UART_MspInit+0x120>)
 8000b36:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_UART_MspInit+0x11c>)
 8000b3a:	220f      	movs	r2, #15
 8000b3c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b3e:	4b1b      	ldr	r3, [pc, #108]	; (8000bac <HAL_UART_MspInit+0x11c>)
 8000b40:	2210      	movs	r2, #16
 8000b42:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b44:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_UART_MspInit+0x11c>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <HAL_UART_MspInit+0x11c>)
 8000b4c:	2280      	movs	r2, #128	; 0x80
 8000b4e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <HAL_UART_MspInit+0x11c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b56:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_UART_MspInit+0x11c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	; (8000bac <HAL_UART_MspInit+0x11c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_UART_MspInit+0x11c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b68:	4810      	ldr	r0, [pc, #64]	; (8000bac <HAL_UART_MspInit+0x11c>)
 8000b6a:	f000 fc15 	bl	8001398 <HAL_DMA_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8000b74:	f7ff fece 	bl	8000914 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <HAL_UART_MspInit+0x11c>)
 8000b7c:	675a      	str	r2, [r3, #116]	; 0x74
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <HAL_UART_MspInit+0x11c>)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2100      	movs	r1, #0
 8000b88:	2024      	movs	r0, #36	; 0x24
 8000b8a:	f000 fbd0 	bl	800132e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b8e:	2024      	movs	r0, #36	; 0x24
 8000b90:	f000 fbe7 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	40013800 	.word	0x40013800
 8000ba0:	48000400 	.word	0x48000400
 8000ba4:	20000160 	.word	0x20000160
 8000ba8:	40020008 	.word	0x40020008
 8000bac:	20000100 	.word	0x20000100
 8000bb0:	4002001c 	.word	0x4002001c

08000bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <HardFault_Handler+0x4>

08000bc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <MemManage_Handler+0x4>

08000bce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd2:	e7fe      	b.n	8000bd2 <BusFault_Handler+0x4>

08000bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <UsageFault_Handler+0x4>

08000bda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c08:	f000 fa68 	bl	80010dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c14:	4802      	ldr	r0, [pc, #8]	; (8000c20 <DMA1_Channel1_IRQHandler+0x10>)
 8000c16:	f000 fcc6 	bl	80015a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000160 	.word	0x20000160

08000c24 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c28:	4802      	ldr	r0, [pc, #8]	; (8000c34 <DMA1_Channel2_IRQHandler+0x10>)
 8000c2a:	f000 fcbc 	bl	80015a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000100 	.word	0x20000100

08000c38 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c3c:	4802      	ldr	r0, [pc, #8]	; (8000c48 <I2C1_EV_IRQHandler+0x10>)
 8000c3e:	f001 f971 	bl	8001f24 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200000b4 	.word	0x200000b4

08000c4c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <I2C1_ER_IRQHandler+0x10>)
 8000c52:	f001 f981 	bl	8001f58 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	200000b4 	.word	0x200000b4

08000c60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c64:	4802      	ldr	r0, [pc, #8]	; (8000c70 <USART1_IRQHandler+0x10>)
 8000c66:	f004 fb31 	bl	80052cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200001c0 	.word	0x200001c0

08000c74 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000c78:	f000 ff70 	bl	8001b5c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	e00a      	b.n	8000ca8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c92:	f3af 8000 	nop.w
 8000c96:	4601      	mov	r1, r0
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	1c5a      	adds	r2, r3, #1
 8000c9c:	60ba      	str	r2, [r7, #8]
 8000c9e:	b2ca      	uxtb	r2, r1
 8000ca0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	697a      	ldr	r2, [r7, #20]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	dbf0      	blt.n	8000c92 <_read+0x12>
	}

return len;
 8000cb0:	687b      	ldr	r3, [r7, #4]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	60f8      	str	r0, [r7, #12]
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
 8000cca:	e009      	b.n	8000ce0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	1c5a      	adds	r2, r3, #1
 8000cd0:	60ba      	str	r2, [r7, #8]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fdb9 	bl	800084c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	dbf1      	blt.n	8000ccc <_write+0x12>
	}
	return len;
 8000ce8:	687b      	ldr	r3, [r7, #4]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <_close>:

int _close(int file)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
	return -1;
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <_isatty>:

int _isatty(int file)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
	return 1;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
	return 0;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	; (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	; (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f005 f938 	bl	8006000 <__errno>
 8000d90:	4602      	mov	r2, r0
 8000d92:	230c      	movs	r3, #12
 8000d94:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20030000 	.word	0x20030000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	200000a8 	.word	0x200000a8
 8000dc4:	20000258 	.word	0x20000258

08000dc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <SystemInit+0xa0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000dd2:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <SystemInit+0xa0>)
 8000dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd8:	4a23      	ldr	r2, [pc, #140]	; (8000e68 <SystemInit+0xa0>)
 8000dda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000dfa:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <SystemInit+0xa4>)
 8000e08:	4013      	ands	r3, r2
 8000e0a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e18:	f023 0305 	bic.w	r3, r3, #5
 8000e1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e2c:	f023 0301 	bic.w	r3, r3, #1
 8000e30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <SystemInit+0xa8>)
 8000e3a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e40:	4a0b      	ldr	r2, [pc, #44]	; (8000e70 <SystemInit+0xa8>)
 8000e42:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00
 8000e6c:	faf6fefb 	.word	0xfaf6fefb
 8000e70:	22041000 	.word	0x22041000

08000e74 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b087      	sub	sp, #28
 8000e78:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	091b      	lsrs	r3, r3, #4
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	4a47      	ldr	r2, [pc, #284]	; (8000fa4 <SystemCoreClockUpdate+0x130>)
 8000e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e8c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b0c      	cmp	r3, #12
 8000e9a:	d867      	bhi.n	8000f6c <SystemCoreClockUpdate+0xf8>
 8000e9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <SystemCoreClockUpdate+0x30>)
 8000e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea2:	bf00      	nop
 8000ea4:	08000ed9 	.word	0x08000ed9
 8000ea8:	08000f6d 	.word	0x08000f6d
 8000eac:	08000f6d 	.word	0x08000f6d
 8000eb0:	08000f6d 	.word	0x08000f6d
 8000eb4:	08000ee1 	.word	0x08000ee1
 8000eb8:	08000f6d 	.word	0x08000f6d
 8000ebc:	08000f6d 	.word	0x08000f6d
 8000ec0:	08000f6d 	.word	0x08000f6d
 8000ec4:	08000ee9 	.word	0x08000ee9
 8000ec8:	08000f6d 	.word	0x08000f6d
 8000ecc:	08000f6d 	.word	0x08000f6d
 8000ed0:	08000f6d 	.word	0x08000f6d
 8000ed4:	08000ef1 	.word	0x08000ef1
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000ed8:	4a33      	ldr	r2, [pc, #204]	; (8000fa8 <SystemCoreClockUpdate+0x134>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6013      	str	r3, [r2, #0]
      break;
 8000ede:	e049      	b.n	8000f74 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000ee0:	4b31      	ldr	r3, [pc, #196]	; (8000fa8 <SystemCoreClockUpdate+0x134>)
 8000ee2:	4a32      	ldr	r2, [pc, #200]	; (8000fac <SystemCoreClockUpdate+0x138>)
 8000ee4:	601a      	str	r2, [r3, #0]
      break;
 8000ee6:	e045      	b.n	8000f74 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000ee8:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <SystemCoreClockUpdate+0x134>)
 8000eea:	4a31      	ldr	r2, [pc, #196]	; (8000fb0 <SystemCoreClockUpdate+0x13c>)
 8000eec:	601a      	str	r2, [r3, #0]
      break;
 8000eee:	e041      	b.n	8000f74 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	3301      	adds	r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	2b02      	cmp	r3, #2
 8000f10:	d105      	bne.n	8000f1e <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000f12:	4a26      	ldr	r2, [pc, #152]	; (8000fac <SystemCoreClockUpdate+0x138>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e00d      	b.n	8000f3a <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2b03      	cmp	r3, #3
 8000f22:	d105      	bne.n	8000f30 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000f24:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <SystemCoreClockUpdate+0x13c>)
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	e004      	b.n	8000f3a <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f38:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	fb02 f303 	mul.w	r3, r2, r3
 8000f4c:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	0f5b      	lsrs	r3, r3, #29
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <SystemCoreClockUpdate+0x134>)
 8000f68:	6013      	str	r3, [r2, #0]
      break;
 8000f6a:	e003      	b.n	8000f74 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <SystemCoreClockUpdate+0x134>)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6013      	str	r3, [r2, #0]
      break;
 8000f72:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	091b      	lsrs	r3, r3, #4
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	4a0c      	ldr	r2, [pc, #48]	; (8000fb4 <SystemCoreClockUpdate+0x140>)
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <SystemCoreClockUpdate+0x134>)
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <SystemCoreClockUpdate+0x134>)
 8000f94:	6013      	str	r3, [r2, #0]

}
 8000f96:	bf00      	nop
 8000f98:	371c      	adds	r7, #28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	08006a48 	.word	0x08006a48
 8000fa8:	2000001c 	.word	0x2000001c
 8000fac:	00f42400 	.word	0x00f42400
 8000fb0:	01e84800 	.word	0x01e84800
 8000fb4:	080069e8 	.word	0x080069e8

08000fb8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000fb8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fba:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbc:	3304      	adds	r3, #4

08000fbe <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbe:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000fc2:	d3f9      	bcc.n	8000fb8 <CopyDataInit>
  bx lr
 8000fc4:	4770      	bx	lr

08000fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000fc6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000fc8:	3004      	adds	r0, #4

08000fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000fca:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000fcc:	d3fb      	bcc.n	8000fc6 <FillZerobss>
  bx lr
 8000fce:	4770      	bx	lr

08000fd0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000fd2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fd4:	f7ff fef8 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000fd8:	480b      	ldr	r0, [pc, #44]	; (8001008 <LoopForever+0x8>)
 8000fda:	490c      	ldr	r1, [pc, #48]	; (800100c <LoopForever+0xc>)
 8000fdc:	4a0c      	ldr	r2, [pc, #48]	; (8001010 <LoopForever+0x10>)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f7ff ffed 	bl	8000fbe <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000fe4:	480b      	ldr	r0, [pc, #44]	; (8001014 <LoopForever+0x14>)
 8000fe6:	490c      	ldr	r1, [pc, #48]	; (8001018 <LoopForever+0x18>)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f7ff ffee 	bl	8000fca <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <LoopForever+0x1c>)
 8000ff0:	490b      	ldr	r1, [pc, #44]	; (8001020 <LoopForever+0x20>)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f7ff ffe9 	bl	8000fca <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ff8:	f005 f808 	bl	800600c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000ffc:	f7ff fa70 	bl	80004e0 <main>

08001000 <LoopForever>:

LoopForever:
  b LoopForever
 8001000:	e7fe      	b.n	8001000 <LoopForever>
 8001002:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001004:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001008:	20000004 	.word	0x20000004
 800100c:	2000008c 	.word	0x2000008c
 8001010:	08006b14 	.word	0x08006b14
  INIT_BSS _sbss, _ebss
 8001014:	2000008c 	.word	0x2000008c
 8001018:	20000254 	.word	0x20000254
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800101c:	20030000 	.word	0x20030000
 8001020:	20030000 	.word	0x20030000

08001024 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_IRQHandler>
	...

08001028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <HAL_Init+0x3c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <HAL_Init+0x3c>)
 8001038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103e:	2003      	movs	r0, #3
 8001040:	f000 f96a 	bl	8001318 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001044:	2000      	movs	r0, #0
 8001046:	f000 f80f 	bl	8001068 <HAL_InitTick>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d002      	beq.n	8001056 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	71fb      	strb	r3, [r7, #7]
 8001054:	e001      	b.n	800105a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001056:	f7ff fcc8 	bl	80009ea <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800105a:	79fb      	ldrb	r3, [r7, #7]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	58004000 	.word	0x58004000

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001074:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_InitTick+0x6c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d024      	beq.n	80010c6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800107c:	f003 fb04 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 8001080:	4602      	mov	r2, r0
 8001082:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <HAL_InitTick+0x6c>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001090:	fbb2 f3f3 	udiv	r3, r2, r3
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f972 	bl	800137e <HAL_SYSTICK_Config>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d10f      	bne.n	80010c0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	d809      	bhi.n	80010ba <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a6:	2200      	movs	r2, #0
 80010a8:	6879      	ldr	r1, [r7, #4]
 80010aa:	f04f 30ff 	mov.w	r0, #4294967295
 80010ae:	f000 f93e 	bl	800132e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010b2:	4a09      	ldr	r2, [pc, #36]	; (80010d8 <HAL_InitTick+0x70>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	e007      	b.n	80010ca <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	73fb      	strb	r3, [r7, #15]
 80010be:	e004      	b.n	80010ca <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
 80010c4:	e001      	b.n	80010ca <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000024 	.word	0x20000024
 80010d8:	20000020 	.word	0x20000020

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	; (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000024 	.word	0x20000024
 8001100:	2000024c 	.word	0x2000024c

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2000024c 	.word	0x2000024c

0800111c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTickPrio+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000020 	.word	0x20000020

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffe2 	bl	8001104 <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800114e:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_Delay+0x40>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffd2 	bl	8001104 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
    {
    }
  }
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000024 	.word	0x20000024

08001178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118e:	68ba      	ldr	r2, [r7, #8]
 8001190:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001194:	4013      	ands	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011aa:	4a04      	ldr	r2, [pc, #16]	; (80011bc <__NVIC_SetPriorityGrouping+0x44>)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	60d3      	str	r3, [r2, #12]
}
 80011b0:	bf00      	nop
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <__NVIC_GetPriorityGrouping+0x18>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	0a1b      	lsrs	r3, r3, #8
 80011ca:	f003 0307 	and.w	r3, r3, #7
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	db0b      	blt.n	8001206 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f003 021f 	and.w	r2, r3, #31
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <__NVIC_EnableIRQ+0x38>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	095b      	lsrs	r3, r3, #5
 80011fc:	2001      	movs	r0, #1
 80011fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000e100 	.word	0xe000e100

08001218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	6039      	str	r1, [r7, #0]
 8001222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	2b00      	cmp	r3, #0
 800122a:	db0a      	blt.n	8001242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	490c      	ldr	r1, [pc, #48]	; (8001264 <__NVIC_SetPriority+0x4c>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	0112      	lsls	r2, r2, #4
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	440b      	add	r3, r1
 800123c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001240:	e00a      	b.n	8001258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	b2da      	uxtb	r2, r3
 8001246:	4908      	ldr	r1, [pc, #32]	; (8001268 <__NVIC_SetPriority+0x50>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	f003 030f 	and.w	r3, r3, #15
 800124e:	3b04      	subs	r3, #4
 8001250:	0112      	lsls	r2, r2, #4
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	440b      	add	r3, r1
 8001256:	761a      	strb	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	e000e100 	.word	0xe000e100
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f1c3 0307 	rsb	r3, r3, #7
 8001286:	2b04      	cmp	r3, #4
 8001288:	bf28      	it	cs
 800128a:	2304      	movcs	r3, #4
 800128c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3304      	adds	r3, #4
 8001292:	2b06      	cmp	r3, #6
 8001294:	d902      	bls.n	800129c <NVIC_EncodePriority+0x30>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	3b03      	subs	r3, #3
 800129a:	e000      	b.n	800129e <NVIC_EncodePriority+0x32>
 800129c:	2300      	movs	r3, #0
 800129e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	f04f 32ff 	mov.w	r2, #4294967295
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43da      	mvns	r2, r3
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	401a      	ands	r2, r3
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b4:	f04f 31ff 	mov.w	r1, #4294967295
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa01 f303 	lsl.w	r3, r1, r3
 80012be:	43d9      	mvns	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	4313      	orrs	r3, r2
         );
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e4:	d301      	bcc.n	80012ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ea:	4a0a      	ldr	r2, [pc, #40]	; (8001314 <SysTick_Config+0x40>)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f2:	210f      	movs	r1, #15
 80012f4:	f04f 30ff 	mov.w	r0, #4294967295
 80012f8:	f7ff ff8e 	bl	8001218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <SysTick_Config+0x40>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001302:	4b04      	ldr	r3, [pc, #16]	; (8001314 <SysTick_Config+0x40>)
 8001304:	2207      	movs	r2, #7
 8001306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	e000e010 	.word	0xe000e010

08001318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ff29 	bl	8001178 <__NVIC_SetPriorityGrouping>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800133c:	f7ff ff40 	bl	80011c0 <__NVIC_GetPriorityGrouping>
 8001340:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6978      	ldr	r0, [r7, #20]
 8001348:	f7ff ff90 	bl	800126c <NVIC_EncodePriority>
 800134c:	4602      	mov	r2, r0
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff5f 	bl	8001218 <__NVIC_SetPriority>
}
 800135a:	bf00      	nop
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff33 	bl	80011dc <__NVIC_EnableIRQ>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffa4 	bl	80012d4 <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d101      	bne.n	80013aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e08e      	b.n	80014c8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <HAL_DMA_Init+0x138>)
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d80f      	bhi.n	80013d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	4b45      	ldr	r3, [pc, #276]	; (80014d4 <HAL_DMA_Init+0x13c>)
 80013be:	4413      	add	r3, r2
 80013c0:	4a45      	ldr	r2, [pc, #276]	; (80014d8 <HAL_DMA_Init+0x140>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	091b      	lsrs	r3, r3, #4
 80013c8:	009a      	lsls	r2, r3, #2
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a42      	ldr	r2, [pc, #264]	; (80014dc <HAL_DMA_Init+0x144>)
 80013d2:	641a      	str	r2, [r3, #64]	; 0x40
 80013d4:	e00e      	b.n	80013f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <HAL_DMA_Init+0x148>)
 80013de:	4413      	add	r3, r2
 80013e0:	4a3d      	ldr	r2, [pc, #244]	; (80014d8 <HAL_DMA_Init+0x140>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	091b      	lsrs	r3, r3, #4
 80013e8:	009a      	lsls	r2, r3, #2
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a3c      	ldr	r2, [pc, #240]	; (80014e4 <HAL_DMA_Init+0x14c>)
 80013f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2202      	movs	r2, #2
 80013f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800140a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800140e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001418:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001424:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001430:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4313      	orrs	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 f96a 	bl	8001720 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001454:	d102      	bne.n	800145c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001464:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001468:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001472:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d010      	beq.n	800149e <HAL_DMA_Init+0x106>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b04      	cmp	r3, #4
 8001482:	d80c      	bhi.n	800149e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f989 	bl	800179c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	e008      	b.n	80014b0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40020407 	.word	0x40020407
 80014d4:	bffdfff8 	.word	0xbffdfff8
 80014d8:	cccccccd 	.word	0xcccccccd
 80014dc:	40020000 	.word	0x40020000
 80014e0:	bffdfbf8 	.word	0xbffdfbf8
 80014e4:	40020400 	.word	0x40020400

080014e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d005      	beq.n	800150c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2204      	movs	r2, #4
 8001504:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e047      	b.n	800159c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 020e 	bic.w	r2, r2, #14
 800151a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 0201 	bic.w	r2, r2, #1
 800152a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001536:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800153a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	f003 021c 	and.w	r2, r3, #28
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f202 	lsl.w	r2, r1, r2
 800154e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001558:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00c      	beq.n	800157c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001570:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800157a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	4798      	blx	r3
    }
  }
  return status;
 800159c:	7bfb      	ldrb	r3, [r7, #15]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f003 031c 	and.w	r3, r3, #28
 80015c6:	2204      	movs	r2, #4
 80015c8:	409a      	lsls	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d026      	beq.n	8001620 <HAL_DMA_IRQHandler+0x7a>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f003 0304 	and.w	r3, r3, #4
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d021      	beq.n	8001620 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0320 	and.w	r3, r3, #32
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0204 	bic.w	r2, r2, #4
 80015f8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f003 021c 	and.w	r2, r3, #28
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2104      	movs	r1, #4
 8001608:	fa01 f202 	lsl.w	r2, r1, r2
 800160c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	2b00      	cmp	r3, #0
 8001614:	d071      	beq.n	80016fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800161e:	e06c      	b.n	80016fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	f003 031c 	and.w	r3, r3, #28
 8001628:	2202      	movs	r2, #2
 800162a:	409a      	lsls	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d02e      	beq.n	8001692 <HAL_DMA_IRQHandler+0xec>
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d029      	beq.n	8001692 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0320 	and.w	r3, r3, #32
 8001648:	2b00      	cmp	r3, #0
 800164a:	d10b      	bne.n	8001664 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 020a 	bic.w	r2, r2, #10
 800165a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	f003 021c 	and.w	r2, r3, #28
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	2102      	movs	r1, #2
 8001672:	fa01 f202 	lsl.w	r2, r1, r2
 8001676:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	2b00      	cmp	r3, #0
 8001686:	d038      	beq.n	80016fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001690:	e033      	b.n	80016fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	f003 031c 	and.w	r3, r3, #28
 800169a:	2208      	movs	r2, #8
 800169c:	409a      	lsls	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4013      	ands	r3, r2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d02a      	beq.n	80016fc <HAL_DMA_IRQHandler+0x156>
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	f003 0308 	and.w	r3, r3, #8
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d025      	beq.n	80016fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 020e 	bic.w	r2, r2, #14
 80016be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c4:	f003 021c 	and.w	r2, r3, #28
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	2101      	movs	r1, #1
 80016ce:	fa01 f202 	lsl.w	r2, r1, r2
 80016d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2201      	movs	r2, #1
 80016d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d004      	beq.n	80016fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016fa:	bf00      	nop
 80016fc:	bf00      	nop
}
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001712:	b2db      	uxtb	r3, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001730:	429a      	cmp	r2, r3
 8001732:	d80a      	bhi.n	800174a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001738:	089b      	lsrs	r3, r3, #2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001740:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6493      	str	r3, [r2, #72]	; 0x48
 8001748:	e007      	b.n	800175a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	009a      	lsls	r2, r3, #2
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001754:	4413      	add	r3, r2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b2db      	uxtb	r3, r3
 8001760:	3b08      	subs	r3, #8
 8001762:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	091b      	lsrs	r3, r3, #4
 800176a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001770:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	2201      	movs	r2, #1
 800177a:	409a      	lsls	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40020407 	.word	0x40020407
 8001790:	4002081c 	.word	0x4002081c
 8001794:	cccccccd 	.word	0xcccccccd
 8001798:	40020880 	.word	0x40020880

0800179c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017ac:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017b2:	4413      	add	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	461a      	mov	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a09      	ldr	r2, [pc, #36]	; (80017e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80017c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3b01      	subs	r3, #1
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2201      	movs	r2, #1
 80017cc:	409a      	lsls	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	1000823f 	.word	0x1000823f
 80017e4:	40020940 	.word	0x40020940

080017e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e14c      	b.n	8001a92 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 813e 	beq.w	8001a8c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d00b      	beq.n	8001830 <HAL_GPIO_Init+0x48>
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d007      	beq.n	8001830 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001824:	2b11      	cmp	r3, #17
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b12      	cmp	r3, #18
 800182e:	d130      	bne.n	8001892 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001866:	2201      	movs	r2, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	f003 0201 	and.w	r2, r3, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_Init+0xea>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b12      	cmp	r3, #18
 80018d0:	d123      	bne.n	800191a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	08da      	lsrs	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3208      	adds	r2, #8
 80018da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	6939      	ldr	r1, [r7, #16]
 8001916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0203 	and.w	r2, r3, #3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8098 	beq.w	8001a8c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800195c:	4a54      	ldr	r2, [pc, #336]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001986:	d019      	beq.n	80019bc <HAL_GPIO_Init+0x1d4>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <HAL_GPIO_Init+0x2cc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d013      	beq.n	80019b8 <HAL_GPIO_Init+0x1d0>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d00d      	beq.n	80019b4 <HAL_GPIO_Init+0x1cc>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a48      	ldr	r2, [pc, #288]	; (8001abc <HAL_GPIO_Init+0x2d4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d007      	beq.n	80019b0 <HAL_GPIO_Init+0x1c8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a47      	ldr	r2, [pc, #284]	; (8001ac0 <HAL_GPIO_Init+0x2d8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d101      	bne.n	80019ac <HAL_GPIO_Init+0x1c4>
 80019a8:	2304      	movs	r3, #4
 80019aa:	e008      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019ac:	2307      	movs	r3, #7
 80019ae:	e006      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019b0:	2303      	movs	r3, #3
 80019b2:	e004      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e002      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019bc:	2300      	movs	r3, #0
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	f002 0203 	and.w	r2, r2, #3
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	4093      	lsls	r3, r2
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ce:	4938      	ldr	r1, [pc, #224]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 80019de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a02:	4a30      	ldr	r2, [pc, #192]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a30:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a38:	4b22      	ldr	r3, [pc, #136]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a5c:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a62:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f47f aeab 	bne.w	80017f8 <HAL_GPIO_Init+0x10>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	48000400 	.word	0x48000400
 8001ab8:	48000800 	.word	0x48000800
 8001abc:	48000c00 	.word	0x48000c00
 8001ac0:	48001000 	.word	0x48001000
 8001ac4:	58000800 	.word	0x58000800

08001ac8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e001      	b.n	8001aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
 8001b04:	4613      	mov	r3, r2
 8001b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	041a      	lsls	r2, r3, #16
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	43d9      	mvns	r1, r3
 8001b46:	887b      	ldrh	r3, [r7, #2]
 8001b48:	400b      	ands	r3, r1
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	619a      	str	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <HAL_HSEM_IRQHandler+0x30>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001b68:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_HSEM_IRQHandler+0x30>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	4906      	ldr	r1, [pc, #24]	; (8001b8c <HAL_HSEM_IRQHandler+0x30>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_HSEM_IRQHandler+0x30>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 f807 	bl	8001b90 <HAL_HSEM_FreeCallback>
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	58001500 	.word	0x58001500

08001b90 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e081      	b.n	8001cba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7fe ff1e 	bl	8000a0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2224      	movs	r2, #36	; 0x24
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bf4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d107      	bne.n	8001c1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	e006      	b.n	8001c2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d104      	bne.n	8001c3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	ea42 0103 	orr.w	r1, r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	021a      	lsls	r2, r3, #8
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69d9      	ldr	r1, [r3, #28]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1a      	ldr	r2, [r3, #32]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af02      	add	r7, sp, #8
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	817b      	strh	r3, [r7, #10]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b20      	cmp	r3, #32
 8001ce2:	d153      	bne.n	8001d8c <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cf2:	d101      	bne.n	8001cf8 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e04a      	b.n	8001d8e <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_I2C_Master_Transmit_IT+0x42>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e043      	b.n	8001d8e <HAL_I2C_Master_Transmit_IT+0xca>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2221      	movs	r2, #33	; 0x21
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2210      	movs	r2, #16
 8001d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	893a      	ldrh	r2, [r7, #8]
 8001d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <HAL_I2C_Master_Transmit_IT+0xd4>)
 8001d34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_I2C_Master_Transmit_IT+0xd8>)
 8001d3a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	2bff      	cmp	r3, #255	; 0xff
 8001d44:	d906      	bls.n	8001d54 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	22ff      	movs	r2, #255	; 0xff
 8001d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d50:	617b      	str	r3, [r7, #20]
 8001d52:	e007      	b.n	8001d64 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001d5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d62:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	8979      	ldrh	r1, [r7, #10]
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_I2C_Master_Transmit_IT+0xdc>)
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f001 fa14 	bl	80031a0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d80:	2101      	movs	r1, #1
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f001 fa3a 	bl	80031fc <I2C_Enable_IRQ>

    return HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e000      	b.n	8001d8e <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001d8c:	2302      	movs	r3, #2
  }
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	ffff0000 	.word	0xffff0000
 8001d9c:	0800209b 	.word	0x0800209b
 8001da0:	80002000 	.word	0x80002000

08001da4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af02      	add	r7, sp, #8
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	461a      	mov	r2, r3
 8001db0:	460b      	mov	r3, r1
 8001db2:	817b      	strh	r3, [r7, #10]
 8001db4:	4613      	mov	r3, r2
 8001db6:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d153      	bne.n	8001e6c <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd2:	d101      	bne.n	8001dd8 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e04a      	b.n	8001e6e <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d101      	bne.n	8001de6 <HAL_I2C_Master_Receive_IT+0x42>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e043      	b.n	8001e6e <HAL_I2C_Master_Receive_IT+0xca>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2222      	movs	r2, #34	; 0x22
 8001df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	893a      	ldrh	r2, [r7, #8]
 8001e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <HAL_I2C_Master_Receive_IT+0xd4>)
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <HAL_I2C_Master_Receive_IT+0xd8>)
 8001e1a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	2bff      	cmp	r3, #255	; 0xff
 8001e24:	d906      	bls.n	8001e34 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	22ff      	movs	r2, #255	; 0xff
 8001e2a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001e2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e007      	b.n	8001e44 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001e3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e42:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	8979      	ldrh	r1, [r7, #10]
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_I2C_Master_Receive_IT+0xdc>)
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f001 f9a4 	bl	80031a0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001e60:	2102      	movs	r1, #2
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f001 f9ca 	bl	80031fc <I2C_Enable_IRQ>

    return HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e000      	b.n	8001e6e <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001e6c:	2302      	movs	r3, #2
  }
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	ffff0000 	.word	0xffff0000
 8001e7c:	0800209b 	.word	0x0800209b
 8001e80:	80002400 	.word	0x80002400

08001e84 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b20      	cmp	r3, #32
 8001e9c:	d139      	bne.n	8001f12 <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_I2C_Slave_Transmit_IT+0x28>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e033      	b.n	8001f14 <HAL_I2C_Slave_Transmit_IT+0x90>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2221      	movs	r2, #33	; 0x21
 8001eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ed8:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	88fa      	ldrh	r2, [r7, #6]
 8001ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_I2C_Slave_Transmit_IT+0x98>)
 8001ef4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4a09      	ldr	r2, [pc, #36]	; (8001f20 <HAL_I2C_Slave_Transmit_IT+0x9c>)
 8001efa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001f04:	f248 0101 	movw	r1, #32769	; 0x8001
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f001 f977 	bl	80031fc <I2C_Enable_IRQ>

    return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e000      	b.n	8001f14 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001f12:	2302      	movs	r3, #2
  }
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	ffff0000 	.word	0xffff0000
 8001f20:	080022ed 	.word	0x080022ed

08001f24 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d005      	beq.n	8001f50 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	68f9      	ldr	r1, [r7, #12]
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	4798      	blx	r3
  }
}
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d010      	beq.n	8001f9e <HAL_I2C_ER_IRQHandler+0x46>
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	09db      	lsrs	r3, r3, #7
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00a      	beq.n	8001f9e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f9c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	0a9b      	lsrs	r3, r3, #10
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d010      	beq.n	8001fcc <HAL_I2C_ER_IRQHandler+0x74>
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	09db      	lsrs	r3, r3, #7
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fba:	f043 0208 	orr.w	r2, r3, #8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fca:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	0a5b      	lsrs	r3, r3, #9
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_I2C_ER_IRQHandler+0xa2>
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	09db      	lsrs	r3, r3, #7
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00a      	beq.n	8001ffa <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe8:	f043 0202 	orr.w	r2, r3, #2
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ff8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f003 030b 	and.w	r3, r3, #11
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800200a:	68f9      	ldr	r1, [r7, #12]
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 ff8d 	bl	8002f2c <I2C_ITError>
  }
}
 8002012:	bf00      	nop
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800201a:	b480      	push	{r7}
 800201c:	b083      	sub	sp, #12
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
 8002022:	460b      	mov	r3, r1
 8002024:	70fb      	strb	r3, [r7, #3]
 8002026:	4613      	mov	r3, r2
 8002028:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002066:	bf00      	nop
 8002068:	370c      	adds	r7, #12
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002072:	b480      	push	{r7}
 8002074:	b083      	sub	sp, #12
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800208e:	bf00      	nop
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b088      	sub	sp, #32
 800209e:	af02      	add	r7, sp, #8
 80020a0:	60f8      	str	r0, [r7, #12]
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <I2C_Master_ISR_IT+0x1e>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e115      	b.n	80022e4 <I2C_Master_ISR_IT+0x24a>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d013      	beq.n	80020f4 <I2C_Master_ISR_IT+0x5a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00d      	beq.n	80020f4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2210      	movs	r2, #16
 80020de:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	f043 0204 	orr.w	r2, r3, #4
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f001 f814 	bl	800311a <I2C_Flush_TXDR>
 80020f2:	e0e2      	b.n	80022ba <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	089b      	lsrs	r3, r3, #2
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d023      	beq.n	8002148 <I2C_Master_ISR_IT+0xae>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01d      	beq.n	8002148 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f023 0304 	bic.w	r3, r3, #4
 8002112:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002130:	3b01      	subs	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002146:	e0b8      	b.n	80022ba <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01e      	beq.n	8002192 <I2C_Master_ISR_IT+0xf8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	085b      	lsrs	r3, r3, #1
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	d018      	beq.n	8002192 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002164:	781a      	ldrb	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	1c5a      	adds	r2, r3, #1
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002190:	e093      	b.n	80022ba <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	09db      	lsrs	r3, r3, #7
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d05e      	beq.n	800225c <I2C_Master_ISR_IT+0x1c2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d058      	beq.n	800225c <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d041      	beq.n	8002238 <I2C_Master_ISR_IT+0x19e>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d13d      	bne.n	8002238 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	2bff      	cmp	r3, #255	; 0xff
 80021d2:	d90e      	bls.n	80021f2 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	22ff      	movs	r2, #255	; 0xff
 80021d8:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	b2da      	uxtb	r2, r3
 80021e0:	8a79      	ldrh	r1, [r7, #18]
 80021e2:	2300      	movs	r3, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 ffd8 	bl	80031a0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021f0:	e033      	b.n	800225a <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002200:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002204:	d00c      	beq.n	8002220 <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800220a:	b2da      	uxtb	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002210:	8a79      	ldrh	r1, [r7, #18]
 8002212:	2300      	movs	r3, #0
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	4603      	mov	r3, r0
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f000 ffc1 	bl	80031a0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800221e:	e01c      	b.n	800225a <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002224:	b2da      	uxtb	r2, r3
 8002226:	8a79      	ldrh	r1, [r7, #18]
 8002228:	2300      	movs	r3, #0
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 ffb5 	bl	80031a0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002236:	e010      	b.n	800225a <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002246:	d003      	beq.n	8002250 <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 fba9 	bl	80029a0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800224e:	e034      	b.n	80022ba <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002250:	2140      	movs	r1, #64	; 0x40
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fe6a 	bl	8002f2c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002258:	e02f      	b.n	80022ba <I2C_Master_ISR_IT+0x220>
 800225a:	e02e      	b.n	80022ba <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	099b      	lsrs	r3, r3, #6
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d028      	beq.n	80022ba <I2C_Master_ISR_IT+0x220>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	099b      	lsrs	r3, r3, #6
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d022      	beq.n	80022ba <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d119      	bne.n	80022b2 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800228c:	d015      	beq.n	80022ba <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002296:	d108      	bne.n	80022aa <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	e007      	b.n	80022ba <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 fb78 	bl	80029a0 <I2C_ITMasterSeqCplt>
 80022b0:	e003      	b.n	80022ba <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80022b2:	2140      	movs	r1, #64	; 0x40
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 fe39 	bl	8002f2c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <I2C_Master_ISR_IT+0x240>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80022d2:	6979      	ldr	r1, [r7, #20]
 80022d4:	68f8      	ldr	r0, [r7, #12]
 80022d6:	f000 fbff 	bl	8002ad8 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <I2C_Slave_ISR_IT+0x24>
 800230c:	2302      	movs	r3, #2
 800230e:	e0ec      	b.n	80024ea <I2C_Slave_ISR_IT+0x1fe>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <I2C_Slave_ISR_IT+0x4c>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	095b      	lsrs	r3, r3, #5
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002330:	6939      	ldr	r1, [r7, #16]
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 fc9a 	bl	8002c6c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d04d      	beq.n	80023e0 <I2C_Slave_ISR_IT+0xf4>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	091b      	lsrs	r3, r3, #4
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d047      	beq.n	80023e0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d128      	bne.n	80023ac <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b28      	cmp	r3, #40	; 0x28
 8002364:	d108      	bne.n	8002378 <I2C_Slave_ISR_IT+0x8c>
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800236c:	d104      	bne.n	8002378 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800236e:	6939      	ldr	r1, [r7, #16]
 8002370:	68f8      	ldr	r0, [r7, #12]
 8002372:	f000 fd85 	bl	8002e80 <I2C_ITListenCplt>
 8002376:	e032      	b.n	80023de <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237e:	b2db      	uxtb	r3, r3
 8002380:	2b29      	cmp	r3, #41	; 0x29
 8002382:	d10e      	bne.n	80023a2 <I2C_Slave_ISR_IT+0xb6>
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800238a:	d00a      	beq.n	80023a2 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2210      	movs	r2, #16
 8002392:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002394:	68f8      	ldr	r0, [r7, #12]
 8002396:	f000 fec0 	bl	800311a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 fb3d 	bl	8002a1a <I2C_ITSlaveSeqCplt>
 80023a0:	e01d      	b.n	80023de <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2210      	movs	r2, #16
 80023a8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80023aa:	e096      	b.n	80024da <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2210      	movs	r2, #16
 80023b2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	f043 0204 	orr.w	r2, r3, #4
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <I2C_Slave_ISR_IT+0xe4>
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	f040 8085 	bne.w	80024da <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d4:	4619      	mov	r1, r3
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fda8 	bl	8002f2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80023dc:	e07d      	b.n	80024da <I2C_Slave_ISR_IT+0x1ee>
 80023de:	e07c      	b.n	80024da <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	f003 0301 	and.w	r3, r3, #1
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d030      	beq.n	800244e <I2C_Slave_ISR_IT+0x162>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	089b      	lsrs	r3, r3, #2
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d02a      	beq.n	800244e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d018      	beq.n	8002434 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	b2d2      	uxtb	r2, r2
 800240e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	3b01      	subs	r3, #1
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d14f      	bne.n	80024de <I2C_Slave_ISR_IT+0x1f2>
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002444:	d04b      	beq.n	80024de <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f000 fae7 	bl	8002a1a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800244c:	e047      	b.n	80024de <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	08db      	lsrs	r3, r3, #3
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <I2C_Slave_ISR_IT+0x184>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	08db      	lsrs	r3, r3, #3
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d004      	beq.n	8002470 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002466:	6939      	ldr	r1, [r7, #16]
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fa15 	bl	8002898 <I2C_ITAddrCplt>
 800246e:	e037      	b.n	80024e0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	085b      	lsrs	r3, r3, #1
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	d031      	beq.n	80024e0 <I2C_Slave_ISR_IT+0x1f4>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d02b      	beq.n	80024e0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d018      	beq.n	80024c4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	781a      	ldrb	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	3b01      	subs	r3, #1
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	3b01      	subs	r3, #1
 80024bc:	b29a      	uxth	r2, r3
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	851a      	strh	r2, [r3, #40]	; 0x28
 80024c2:	e00d      	b.n	80024e0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024ca:	d002      	beq.n	80024d2 <I2C_Slave_ISR_IT+0x1e6>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 faa1 	bl	8002a1a <I2C_ITSlaveSeqCplt>
 80024d8:	e002      	b.n	80024e0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80024da:	bf00      	nop
 80024dc:	e000      	b.n	80024e0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80024de:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b088      	sub	sp, #32
 80024f6:	af02      	add	r7, sp, #8
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <I2C_Master_ISR_DMA+0x1a>
 8002508:	2302      	movs	r3, #2
 800250a:	e0e1      	b.n	80026d0 <I2C_Master_ISR_DMA+0x1de>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	091b      	lsrs	r3, r3, #4
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d017      	beq.n	8002550 <I2C_Master_ISR_DMA+0x5e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	d011      	beq.n	8002550 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2210      	movs	r2, #16
 8002532:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002538:	f043 0204 	orr.w	r2, r3, #4
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002540:	2120      	movs	r1, #32
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 fe5a 	bl	80031fc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fde6 	bl	800311a <I2C_Flush_TXDR>
 800254e:	e0ba      	b.n	80026c6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	09db      	lsrs	r3, r3, #7
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	2b00      	cmp	r3, #0
 800255a:	d072      	beq.n	8002642 <I2C_Master_ISR_DMA+0x150>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	099b      	lsrs	r3, r3, #6
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d06c      	beq.n	8002642 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002576:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d04e      	beq.n	8002620 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	b29b      	uxth	r3, r3
 800258a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800258e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	2bff      	cmp	r3, #255	; 0xff
 8002598:	d906      	bls.n	80025a8 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	22ff      	movs	r2, #255	; 0xff
 800259e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80025a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	e010      	b.n	80025ca <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025ba:	d003      	beq.n	80025c4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e002      	b.n	80025ca <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80025c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025c8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	8a79      	ldrh	r1, [r7, #18]
 80025d2:	2300      	movs	r3, #0
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fde1 	bl	80031a0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b22      	cmp	r3, #34	; 0x22
 80025fa:	d108      	bne.n	800260e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800260a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800260c:	e05b      	b.n	80026c6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800261c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800261e:	e052      	b.n	80026c6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800262e:	d003      	beq.n	8002638 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f9b5 	bl	80029a0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002636:	e046      	b.n	80026c6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002638:	2140      	movs	r1, #64	; 0x40
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fc76 	bl	8002f2c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8002640:	e041      	b.n	80026c6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d029      	beq.n	80026a2 <I2C_Master_ISR_DMA+0x1b0>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	099b      	lsrs	r3, r3, #6
 8002652:	f003 0301 	and.w	r3, r3, #1
 8002656:	2b00      	cmp	r3, #0
 8002658:	d023      	beq.n	80026a2 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d119      	bne.n	8002698 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002672:	d027      	beq.n	80026c4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800267c:	d108      	bne.n	8002690 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800268c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800268e:	e019      	b.n	80026c4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f985 	bl	80029a0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002696:	e015      	b.n	80026c4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002698:	2140      	movs	r1, #64	; 0x40
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 fc46 	bl	8002f2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80026a0:	e010      	b.n	80026c4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00b      	beq.n	80026c6 <I2C_Master_ISR_DMA+0x1d4>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	095b      	lsrs	r3, r3, #5
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80026ba:	68b9      	ldr	r1, [r7, #8]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fa0b 	bl	8002ad8 <I2C_ITMasterCplt>
 80026c2:	e000      	b.n	80026c6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80026c4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <I2C_Slave_ISR_DMA+0x24>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e0c9      	b.n	8002890 <I2C_Slave_ISR_DMA+0x1b8>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <I2C_Slave_ISR_DMA+0x4c>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	095b      	lsrs	r3, r3, #5
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f000 faa4 	bl	8002c6c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	091b      	lsrs	r3, r3, #4
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 809a 	beq.w	8002866 <I2C_Slave_ISR_DMA+0x18e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 8093 	beq.w	8002866 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	0b9b      	lsrs	r3, r3, #14
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d105      	bne.n	8002758 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	0bdb      	lsrs	r3, r3, #15
 8002750:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002754:	2b00      	cmp	r3, #0
 8002756:	d07f      	beq.n	8002858 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00d      	beq.n	800277c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	0bdb      	lsrs	r3, r3, #15
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8002778:	2301      	movs	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00d      	beq.n	80027a0 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	0b9b      	lsrs	r3, r3, #14
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 800279c:	2301      	movs	r3, #1
 800279e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d128      	bne.n	80027f8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b28      	cmp	r3, #40	; 0x28
 80027b0:	d108      	bne.n	80027c4 <I2C_Slave_ISR_DMA+0xec>
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027b8:	d104      	bne.n	80027c4 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	68f8      	ldr	r0, [r7, #12]
 80027be:	f000 fb5f 	bl	8002e80 <I2C_ITListenCplt>
 80027c2:	e048      	b.n	8002856 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b29      	cmp	r3, #41	; 0x29
 80027ce:	d10e      	bne.n	80027ee <I2C_Slave_ISR_DMA+0x116>
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027d6:	d00a      	beq.n	80027ee <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2210      	movs	r2, #16
 80027de:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 fc9a 	bl	800311a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f917 	bl	8002a1a <I2C_ITSlaveSeqCplt>
 80027ec:	e033      	b.n	8002856 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2210      	movs	r2, #16
 80027f4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80027f6:	e034      	b.n	8002862 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2210      	movs	r2, #16
 80027fe:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002804:	f043 0204 	orr.w	r2, r3, #4
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002812:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <I2C_Slave_ISR_DMA+0x14a>
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002820:	d11f      	bne.n	8002862 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	2b21      	cmp	r3, #33	; 0x21
 8002826:	d002      	beq.n	800282e <I2C_Slave_ISR_DMA+0x156>
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2b29      	cmp	r3, #41	; 0x29
 800282c:	d103      	bne.n	8002836 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2221      	movs	r2, #33	; 0x21
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
 8002834:	e008      	b.n	8002848 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b22      	cmp	r3, #34	; 0x22
 800283a:	d002      	beq.n	8002842 <I2C_Slave_ISR_DMA+0x16a>
 800283c:	7dfb      	ldrb	r3, [r7, #23]
 800283e:	2b2a      	cmp	r3, #42	; 0x2a
 8002840:	d102      	bne.n	8002848 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2222      	movs	r2, #34	; 0x22
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	4619      	mov	r1, r3
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 fb6c 	bl	8002f2c <I2C_ITError>
      if (treatdmanack == 1U)
 8002854:	e005      	b.n	8002862 <I2C_Slave_ISR_DMA+0x18a>
 8002856:	e004      	b.n	8002862 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2210      	movs	r2, #16
 800285e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002860:	e011      	b.n	8002886 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002862:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002864:	e00f      	b.n	8002886 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <I2C_Slave_ISR_DMA+0x1ae>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	08db      	lsrs	r3, r3, #3
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f000 f809 	bl	8002898 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028ae:	2b28      	cmp	r3, #40	; 0x28
 80028b0:	d16a      	bne.n	8002988 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	0c1b      	lsrs	r3, r3, #16
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028d0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028de:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028ec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d138      	bne.n	8002968 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80028f6:	897b      	ldrh	r3, [r7, #10]
 80028f8:	09db      	lsrs	r3, r3, #7
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	89bb      	ldrh	r3, [r7, #12]
 80028fe:	4053      	eors	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	f003 0306 	and.w	r3, r3, #6
 8002906:	2b00      	cmp	r3, #0
 8002908:	d11c      	bne.n	8002944 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800290a:	897b      	ldrh	r3, [r7, #10]
 800290c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291c:	2b02      	cmp	r3, #2
 800291e:	d13b      	bne.n	8002998 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2208      	movs	r2, #8
 800292c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002936:	89ba      	ldrh	r2, [r7, #12]
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	4619      	mov	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fb6c 	bl	800201a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002942:	e029      	b.n	8002998 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002944:	893b      	ldrh	r3, [r7, #8]
 8002946:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002948:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 fcb9 	bl	80032c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800295a:	89ba      	ldrh	r2, [r7, #12]
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	4619      	mov	r1, r3
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff fb5a 	bl	800201a <HAL_I2C_AddrCallback>
}
 8002966:	e017      	b.n	8002998 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002968:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 fca9 	bl	80032c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800297a:	89ba      	ldrh	r2, [r7, #12]
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	4619      	mov	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff fb4a 	bl	800201a <HAL_I2C_AddrCallback>
}
 8002986:	e007      	b.n	8002998 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2208      	movs	r2, #8
 800298e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b21      	cmp	r3, #33	; 0x21
 80029ba:	d115      	bne.n	80029e8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2211      	movs	r2, #17
 80029c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80029d0:	2101      	movs	r1, #1
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fc76 	bl	80032c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7fd ff45 	bl	8000870 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80029e6:	e014      	b.n	8002a12 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2212      	movs	r2, #18
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80029fc:	2102      	movs	r1, #2
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 fc60 	bl	80032c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7fd ff3d 	bl	800088c <HAL_I2C_MasterRxCpltCallback>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	0b9b      	lsrs	r3, r3, #14
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	e00d      	b.n	8002a6c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	0bdb      	lsrs	r3, r3, #15
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d007      	beq.n	8002a6c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a6a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b29      	cmp	r3, #41	; 0x29
 8002a76:	d112      	bne.n	8002a9e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2228      	movs	r2, #40	; 0x28
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2221      	movs	r2, #33	; 0x21
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a86:	2101      	movs	r1, #1
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fc1b 	bl	80032c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fd ff0c 	bl	80008b4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a9c:	e017      	b.n	8002ace <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8002aa8:	d111      	bne.n	8002ace <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2228      	movs	r2, #40	; 0x28
 8002aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2222      	movs	r2, #34	; 0x22
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ab8:	2102      	movs	r1, #2
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 fc02 	bl	80032c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f7fd ff07 	bl	80008dc <HAL_I2C_SlaveRxCpltCallback>
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2220      	movs	r2, #32
 8002aec:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b21      	cmp	r3, #33	; 0x21
 8002af8:	d107      	bne.n	8002b0a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002afa:	2101      	movs	r1, #1
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fbe1 	bl	80032c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2211      	movs	r2, #17
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30
 8002b08:	e00c      	b.n	8002b24 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b22      	cmp	r3, #34	; 0x22
 8002b14:	d106      	bne.n	8002b24 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b16:	2102      	movs	r1, #2
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fbd3 	bl	80032c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2212      	movs	r2, #18
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6859      	ldr	r1, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	4b4d      	ldr	r3, [pc, #308]	; (8002c64 <I2C_ITMasterCplt+0x18c>)
 8002b30:	400b      	ands	r3, r1
 8002b32:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a4a      	ldr	r2, [pc, #296]	; (8002c68 <I2C_ITMasterCplt+0x190>)
 8002b3e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	091b      	lsrs	r3, r3, #4
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d009      	beq.n	8002b60 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2210      	movs	r2, #16
 8002b52:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b60      	cmp	r3, #96	; 0x60
 8002b6a:	d10b      	bne.n	8002b84 <I2C_ITMasterCplt+0xac>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	089b      	lsrs	r3, r3, #2
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002b82:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f000 fac8 	bl	800311a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b60      	cmp	r3, #96	; 0x60
 8002b9a:	d002      	beq.n	8002ba2 <I2C_ITMasterCplt+0xca>
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d006      	beq.n	8002bb0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f9bf 	bl	8002f2c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002bae:	e054      	b.n	8002c5a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b21      	cmp	r3, #33	; 0x21
 8002bba:	d124      	bne.n	8002c06 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b40      	cmp	r3, #64	; 0x40
 8002bd4:	d10b      	bne.n	8002bee <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff fa2f 	bl	800204a <HAL_I2C_MemTxCpltCallback>
}
 8002bec:	e035      	b.n	8002c5a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fd fe36 	bl	8000870 <HAL_I2C_MasterTxCpltCallback>
}
 8002c04:	e029      	b.n	8002c5a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b22      	cmp	r3, #34	; 0x22
 8002c10:	d123      	bne.n	8002c5a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b40      	cmp	r3, #64	; 0x40
 8002c2a:	d10b      	bne.n	8002c44 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fa0e 	bl	800205e <HAL_I2C_MemRxCpltCallback>
}
 8002c42:	e00a      	b.n	8002c5a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7fd fe19 	bl	800088c <HAL_I2C_MasterRxCpltCallback>
}
 8002c5a:	bf00      	nop
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	fe00e800 	.word	0xfe00e800
 8002c68:	ffff0000 	.word	0xffff0000

08002c6c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c88:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	2b21      	cmp	r3, #33	; 0x21
 8002c96:	d002      	beq.n	8002c9e <I2C_ITSlaveCplt+0x32>
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b29      	cmp	r3, #41	; 0x29
 8002c9c:	d108      	bne.n	8002cb0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002c9e:	f248 0101 	movw	r1, #32769	; 0x8001
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fb0e 	bl	80032c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2221      	movs	r2, #33	; 0x21
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
 8002cae:	e00d      	b.n	8002ccc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cb0:	7bfb      	ldrb	r3, [r7, #15]
 8002cb2:	2b22      	cmp	r3, #34	; 0x22
 8002cb4:	d002      	beq.n	8002cbc <I2C_ITSlaveCplt+0x50>
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8002cba:	d107      	bne.n	8002ccc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002cbc:	f248 0102 	movw	r1, #32770	; 0x8002
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 faff 	bl	80032c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2222      	movs	r2, #34	; 0x22
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cda:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6859      	ldr	r1, [r3, #4]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b64      	ldr	r3, [pc, #400]	; (8002e78 <I2C_ITSlaveCplt+0x20c>)
 8002ce8:	400b      	ands	r3, r1
 8002cea:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fa14 	bl	800311a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	0b9b      	lsrs	r3, r3, #14
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d013      	beq.n	8002d26 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d0c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d020      	beq.n	8002d58 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d24:	e018      	b.n	8002d58 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	0bdb      	lsrs	r3, r3, #15
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d012      	beq.n	8002d58 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d40:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d020      	beq.n	8002da6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	f023 0304 	bic.w	r3, r3, #4
 8002d6a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d00c      	beq.n	8002da6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db4:	f043 0204 	orr.w	r2, r3, #4
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d010      	beq.n	8002df4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f8a7 	bl	8002f2c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b28      	cmp	r3, #40	; 0x28
 8002de8:	d141      	bne.n	8002e6e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002dea:	6979      	ldr	r1, [r7, #20]
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f847 	bl	8002e80 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002df2:	e03c      	b.n	8002e6e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dfc:	d014      	beq.n	8002e28 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff fe0b 	bl	8002a1a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a1d      	ldr	r2, [pc, #116]	; (8002e7c <I2C_ITSlaveCplt+0x210>)
 8002e08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff f908 	bl	8002036 <HAL_I2C_ListenCpltCallback>
}
 8002e26:	e022      	b.n	8002e6e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b22      	cmp	r3, #34	; 0x22
 8002e32:	d10e      	bne.n	8002e52 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7fd fd46 	bl	80008dc <HAL_I2C_SlaveRxCpltCallback>
}
 8002e50:	e00d      	b.n	8002e6e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7fd fd23 	bl	80008b4 <HAL_I2C_SlaveTxCpltCallback>
}
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	fe00e800 	.word	0xfe00e800
 8002e7c:	ffff0000 	.word	0xffff0000

08002e80 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a26      	ldr	r2, [pc, #152]	; (8002f28 <I2C_ITListenCplt+0xa8>)
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	089b      	lsrs	r3, r3, #2
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d022      	beq.n	8002efe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d012      	beq.n	8002efe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	f043 0204 	orr.w	r2, r3, #4
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002efe:	f248 0103 	movw	r1, #32771	; 0x8003
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f9de 	bl	80032c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff f88c 	bl	8002036 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	ffff0000 	.word	0xffff0000

08002f2c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a5d      	ldr	r2, [pc, #372]	; (80030c0 <I2C_ITError+0x194>)
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
 8002f60:	2b28      	cmp	r3, #40	; 0x28
 8002f62:	d005      	beq.n	8002f70 <I2C_ITError+0x44>
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b29      	cmp	r3, #41	; 0x29
 8002f68:	d002      	beq.n	8002f70 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b2a      	cmp	r3, #42	; 0x2a
 8002f6e:	d10b      	bne.n	8002f88 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f70:	2103      	movs	r1, #3
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f9a6 	bl	80032c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2228      	movs	r2, #40	; 0x28
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a50      	ldr	r2, [pc, #320]	; (80030c4 <I2C_ITError+0x198>)
 8002f84:	635a      	str	r2, [r3, #52]	; 0x34
 8002f86:	e011      	b.n	8002fac <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f88:	f248 0103 	movw	r1, #32771	; 0x8003
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f999 	bl	80032c4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b60      	cmp	r3, #96	; 0x60
 8002f9c:	d003      	beq.n	8002fa6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d039      	beq.n	800302e <I2C_ITError+0x102>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	2b11      	cmp	r3, #17
 8002fbe:	d002      	beq.n	8002fc6 <I2C_ITError+0x9a>
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	2b21      	cmp	r3, #33	; 0x21
 8002fc4:	d133      	bne.n	800302e <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fd4:	d107      	bne.n	8002fe6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002fe4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fb8a 	bl	8001704 <HAL_DMA_GetState>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d017      	beq.n	8003026 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	4a33      	ldr	r2, [pc, #204]	; (80030c8 <I2C_ITError+0x19c>)
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fa6c 	bl	80014e8 <HAL_DMA_Abort_IT>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d04d      	beq.n	80030b2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003020:	4610      	mov	r0, r2
 8003022:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003024:	e045      	b.n	80030b2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f850 	bl	80030cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800302c:	e041      	b.n	80030b2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d039      	beq.n	80030aa <I2C_ITError+0x17e>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b12      	cmp	r3, #18
 800303a:	d002      	beq.n	8003042 <I2C_ITError+0x116>
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b22      	cmp	r3, #34	; 0x22
 8003040:	d133      	bne.n	80030aa <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800304c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003050:	d107      	bne.n	8003062 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003060:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fb4c 	bl	8001704 <HAL_DMA_GetState>
 800306c:	4603      	mov	r3, r0
 800306e:	2b01      	cmp	r3, #1
 8003070:	d017      	beq.n	80030a2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <I2C_ITError+0x19c>)
 8003078:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fa2e 	bl	80014e8 <HAL_DMA_Abort_IT>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d011      	beq.n	80030b6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800309c:	4610      	mov	r0, r2
 800309e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030a0:	e009      	b.n	80030b6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f812 	bl	80030cc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030a8:	e005      	b.n	80030b6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f80e 	bl	80030cc <I2C_TreatErrorCallback>
  }
}
 80030b0:	e002      	b.n	80030b8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030b6:	bf00      	nop
}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	ffff0000 	.word	0xffff0000
 80030c4:	080022ed 	.word	0x080022ed
 80030c8:	08003163 	.word	0x08003163

080030cc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b60      	cmp	r3, #96	; 0x60
 80030de:	d10e      	bne.n	80030fe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fe ffc5 	bl	8002086 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030fc:	e009      	b.n	8003112 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f7fe ffb0 	bl	8002072 <HAL_I2C_ErrorCallback>
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b02      	cmp	r3, #2
 800312e:	d103      	bne.n	8003138 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2200      	movs	r2, #0
 8003136:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d007      	beq.n	8003156 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0201 	orr.w	r2, r2, #1
 8003154:	619a      	str	r2, [r3, #24]
  }
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	2200      	movs	r2, #0
 800317e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	2200      	movs	r2, #0
 800318e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f7ff ff9b 	bl	80030cc <I2C_TreatErrorCallback>
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	607b      	str	r3, [r7, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	817b      	strh	r3, [r7, #10]
 80031ae:	4613      	mov	r3, r2
 80031b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	0d5b      	lsrs	r3, r3, #21
 80031bc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80031c0:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <I2C_TransferConfig+0x58>)
 80031c2:	430b      	orrs	r3, r1
 80031c4:	43db      	mvns	r3, r3
 80031c6:	ea02 0103 	and.w	r1, r2, r3
 80031ca:	897b      	ldrh	r3, [r7, #10]
 80031cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031d0:	7a7b      	ldrb	r3, [r7, #9]
 80031d2:	041b      	lsls	r3, r3, #16
 80031d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	431a      	orrs	r2, r3
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80031ea:	bf00      	nop
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	03ff63ff 	.word	0x03ff63ff

080031fc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003208:	2300      	movs	r3, #0
 800320a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	4a2a      	ldr	r2, [pc, #168]	; (80032bc <I2C_Enable_IRQ+0xc0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d004      	beq.n	8003220 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800321a:	4a29      	ldr	r2, [pc, #164]	; (80032c0 <I2C_Enable_IRQ+0xc4>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d11d      	bne.n	800325c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003220:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da03      	bge.n	8003230 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800322e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003230:	887b      	ldrh	r3, [r7, #2]
 8003232:	2b10      	cmp	r3, #16
 8003234:	d103      	bne.n	800323e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800323c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800323e:	887b      	ldrh	r3, [r7, #2]
 8003240:	2b20      	cmp	r3, #32
 8003242:	d103      	bne.n	800324c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800324a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800324c:	887b      	ldrh	r3, [r7, #2]
 800324e:	2b40      	cmp	r3, #64	; 0x40
 8003250:	d125      	bne.n	800329e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003258:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800325a:	e020      	b.n	800329e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800325c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003260:	2b00      	cmp	r3, #0
 8003262:	da03      	bge.n	800326c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800326a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800327c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800327e:	887b      	ldrh	r3, [r7, #2]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800328e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	2b20      	cmp	r3, #32
 8003294:	d103      	bne.n	800329e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f043 0320 	orr.w	r3, r3, #32
 800329c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	6819      	ldr	r1, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	601a      	str	r2, [r3, #0]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	080024f3 	.word	0x080024f3
 80032c0:	080026d9 	.word	0x080026d9

080032c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80032d4:	887b      	ldrh	r3, [r7, #2]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00f      	beq.n	80032fe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80032e4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032f2:	2b28      	cmp	r3, #40	; 0x28
 80032f4:	d003      	beq.n	80032fe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80032fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80032fe:	887b      	ldrh	r3, [r7, #2]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00f      	beq.n	8003328 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800330e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800331c:	2b28      	cmp	r3, #40	; 0x28
 800331e:	d003      	beq.n	8003328 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003326:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003328:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800332c:	2b00      	cmp	r3, #0
 800332e:	da03      	bge.n	8003338 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003336:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003338:	887b      	ldrh	r3, [r7, #2]
 800333a:	2b10      	cmp	r3, #16
 800333c:	d103      	bne.n	8003346 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003344:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003346:	887b      	ldrh	r3, [r7, #2]
 8003348:	2b20      	cmp	r3, #32
 800334a:	d103      	bne.n	8003354 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f043 0320 	orr.w	r3, r3, #32
 8003352:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003354:	887b      	ldrh	r3, [r7, #2]
 8003356:	2b40      	cmp	r3, #64	; 0x40
 8003358:	d103      	bne.n	8003362 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003360:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6819      	ldr	r1, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	43da      	mvns	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	400a      	ands	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b20      	cmp	r3, #32
 8003394:	d138      	bne.n	8003408 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e032      	b.n	800340a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2224      	movs	r2, #36	; 0x24
 80033b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0201 	bic.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	683a      	ldr	r2, [r7, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0201 	orr.w	r2, r2, #1
 80033f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e000      	b.n	800340a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003416:	b480      	push	{r7}
 8003418:	b085      	sub	sp, #20
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
 800341e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b20      	cmp	r3, #32
 800342a:	d139      	bne.n	80034a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003436:	2302      	movs	r3, #2
 8003438:	e033      	b.n	80034a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2224      	movs	r2, #36	; 0x24
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003468:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	021b      	lsls	r3, r3, #8
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0201 	orr.w	r2, r2, #1
 800348a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a04      	ldr	r2, [pc, #16]	; (80034cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034be:	6013      	str	r3, [r2, #0]
}
 80034c0:	bf00      	nop
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	58000400 	.word	0x58000400

080034d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80034dc:	4618      	mov	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	58000400 	.word	0x58000400

080034ec <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80034f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034fe:	d101      	bne.n	8003504 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800351e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003522:	6013      	str	r3, [r2, #0]
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800353c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003540:	6013      	str	r3, [r2, #0]
}
 8003542:	bf00      	nop
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800355a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800356e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800358c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800359a:	d101      	bne.n	80035a0 <LL_RCC_HSE_IsReady+0x18>
 800359c:	2301      	movs	r3, #1
 800359e:	e000      	b.n	80035a2 <LL_RCC_HSE_IsReady+0x1a>
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80035b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035be:	6013      	str	r3, [r2, #0]
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035dc:	6013      	str	r3, [r2, #0]
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80035ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fa:	d101      	bne.n	8003600 <LL_RCC_HSI_IsReady+0x18>
 80035fc:	2301      	movs	r3, #1
 80035fe:	e000      	b.n	8003602 <LL_RCC_HSI_IsReady+0x1a>
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	061b      	lsls	r3, r3, #24
 8003622:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003626:	4313      	orrs	r3, r2
 8003628:	604b      	str	r3, [r1, #4]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800363a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800363e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800364e:	bf00      	nop
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800365c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003664:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800367a:	b480      	push	{r7}
 800367c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800367e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b02      	cmp	r3, #2
 800368c:	d101      	bne.n	8003692 <LL_RCC_HSI48_IsReady+0x18>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <LL_RCC_HSI48_IsReady+0x1a>
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ae:	f043 0301 	orr.w	r3, r3, #1
 80036b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80036b6:	bf00      	nop
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036d0:	f023 0301 	bic.w	r3, r3, #1
 80036d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80036e2:	b480      	push	{r7}
 80036e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80036e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80036fa:	bf00      	nop
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003714:	f023 0304 	bic.w	r3, r3, #4
 8003718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800372a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d101      	bne.n	800373e <LL_RCC_LSE_IsReady+0x18>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <LL_RCC_LSE_IsReady+0x1a>
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800374a:	b480      	push	{r7}
 800374c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800374e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003756:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800375a:	f043 0301 	orr.w	r3, r3, #1
 800375e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003762:	bf00      	nop
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003778:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003784:	bf00      	nop
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800378e:	b480      	push	{r7}
 8003790:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d101      	bne.n	80037a6 <LL_RCC_LSI1_IsReady+0x18>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <LL_RCC_LSI1_IsReady+0x1a>
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80037b2:	b480      	push	{r7}
 80037b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80037b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037c2:	f043 0304 	orr.w	r3, r3, #4
 80037c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80037ca:	bf00      	nop
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80037d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037e4:	f023 0304 	bic.w	r3, r3, #4
 80037e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80037f6:	b480      	push	{r7}
 80037f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80037fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b08      	cmp	r3, #8
 8003808:	d101      	bne.n	800380e <LL_RCC_LSI2_IsReady+0x18>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <LL_RCC_LSI2_IsReady+0x1a>
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003836:	4313      	orrs	r3, r2
 8003838:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800384c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003866:	b480      	push	{r7}
 8003868:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800386a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	6013      	str	r3, [r2, #0]
}
 800387a:	bf00      	nop
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b02      	cmp	r3, #2
 8003894:	d101      	bne.n	800389a <LL_RCC_MSI_IsReady+0x16>
 8003896:	2301      	movs	r3, #1
 8003898:	e000      	b.n	800389c <LL_RCC_MSI_IsReady+0x18>
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr

080038a6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80038ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4313      	orrs	r3, r2
 80038c0:	600b      	str	r3, [r1, #0]
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80038d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038de:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2bb0      	cmp	r3, #176	; 0xb0
 80038e4:	d901      	bls.n	80038ea <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80038e6:	23b0      	movs	r3, #176	; 0xb0
 80038e8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80038ea:	687b      	ldr	r3, [r7, #4]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr

08003922 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003922:	b480      	push	{r7}
 8003924:	b083      	sub	sp, #12
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800392a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f023 0203 	bic.w	r2, r3, #3
 8003934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4313      	orrs	r3, r2
 800393c:	608b      	str	r3, [r1, #8]
}
 800393e:	bf00      	nop
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800394a:	b480      	push	{r7}
 800394c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800394e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 030c 	and.w	r3, r3, #12
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800396a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003996:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800399a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800399e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039c6:	f023 020f 	bic.w	r2, r3, #15
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80039ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	608b      	str	r3, [r1, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	370c      	adds	r7, #12
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003a34:	b480      	push	{r7}
 8003a36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a54:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	6013      	str	r3, [r2, #0]
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ac4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ac8:	6013      	str	r3, [r2, #0]
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ae6:	d101      	bne.n	8003aec <LL_RCC_PLL_IsReady+0x18>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <LL_RCC_PLL_IsReady+0x1a>
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	0a1b      	lsrs	r3, r3, #8
 8003b04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr

08003b12 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003b12:	b480      	push	{r7}
 8003b14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6c:	d101      	bne.n	8003b72 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003b82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b92:	d101      	bne.n	8003b98 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003ba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb8:	d101      	bne.n	8003bbe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr

08003bca <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bdc:	d101      	bne.n	8003be2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr

08003bee <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c00:	d101      	bne.n	8003c06 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003c02:	2301      	movs	r3, #1
 8003c04:	e000      	b.n	8003c08 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c14:	b590      	push	{r4, r7, lr}
 8003c16:	b08d      	sub	sp, #52	; 0x34
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e386      	b.n	8004334 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0320 	and.w	r3, r3, #32
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 808f 	beq.w	8003d52 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c34:	f7ff fe89 	bl	800394a <LL_RCC_GetSysClkSource>
 8003c38:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c3a:	f7ff ff82 	bl	8003b42 <LL_RCC_PLL_GetMainSource>
 8003c3e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <HAL_RCC_OscConfig+0x3e>
 8003c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	d149      	bne.n	8003ce0 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d146      	bne.n	8003ce0 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c52:	f7ff fe17 	bl	8003884 <LL_RCC_MSI_IsReady>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_RCC_OscConfig+0x54>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e365      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003c6c:	f7ff fe2f 	bl	80038ce <LL_RCC_MSI_GetRange>
 8003c70:	4603      	mov	r3, r0
 8003c72:	429c      	cmp	r4, r3
 8003c74:	d914      	bls.n	8003ca0 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fd44 	bl	8004708 <RCC_SetFlashLatencyFromMSIRange>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e354      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fe09 	bl	80038a6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7ff fe2d 	bl	80038f8 <LL_RCC_MSI_SetCalibTrimming>
 8003c9e:	e013      	b.n	8003cc8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7ff fdfe 	bl	80038a6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fe22 	bl	80038f8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fd25 	bl	8004708 <RCC_SetFlashLatencyFromMSIRange>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e335      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8003cc8:	f7fd f8d4 	bl	8000e74 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ccc:	4bb4      	ldr	r3, [pc, #720]	; (8003fa0 <HAL_RCC_OscConfig+0x38c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fd f9c9 	bl	8001068 <HAL_InitTick>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d039      	beq.n	8003d50 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e329      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01e      	beq.n	8003d26 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ce8:	f7ff fdae 	bl	8003848 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cec:	f7fd fa0a 	bl	8001104 <HAL_GetTick>
 8003cf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf4:	f7fd fa06 	bl	8001104 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e316      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d06:	f7ff fdbd 	bl	8003884 <LL_RCC_MSI_IsReady>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f1      	beq.n	8003cf4 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fdc6 	bl	80038a6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fdea 	bl	80038f8 <LL_RCC_MSI_SetCalibTrimming>
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d26:	f7ff fd9e 	bl	8003866 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d2a:	f7fd f9eb 	bl	8001104 <HAL_GetTick>
 8003d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d32:	f7fd f9e7 	bl	8001104 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e2f7      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d44:	f7ff fd9e 	bl	8003884 <LL_RCC_MSI_IsReady>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f1      	bne.n	8003d32 <HAL_RCC_OscConfig+0x11e>
 8003d4e:	e000      	b.n	8003d52 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d05a      	beq.n	8003e14 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5e:	f7ff fdf4 	bl	800394a <LL_RCC_GetSysClkSource>
 8003d62:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d64:	f7ff feed 	bl	8003b42 <LL_RCC_PLL_GetMainSource>
 8003d68:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_OscConfig+0x168>
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	d10d      	bne.n	8003d92 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	2b03      	cmp	r3, #3
 8003d7a:	d10a      	bne.n	8003d92 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7c:	f7ff fc04 	bl	8003588 <LL_RCC_HSE_IsReady>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d045      	beq.n	8003e12 <HAL_RCC_OscConfig+0x1fe>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d141      	bne.n	8003e12 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e2d0      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9a:	d102      	bne.n	8003da2 <HAL_RCC_OscConfig+0x18e>
 8003d9c:	f7ff fbd6 	bl	800354c <LL_RCC_HSE_Enable>
 8003da0:	e00d      	b.n	8003dbe <HAL_RCC_OscConfig+0x1aa>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003daa:	d104      	bne.n	8003db6 <HAL_RCC_OscConfig+0x1a2>
 8003dac:	f7ff fbb0 	bl	8003510 <LL_RCC_HSE_EnableBypass>
 8003db0:	f7ff fbcc 	bl	800354c <LL_RCC_HSE_Enable>
 8003db4:	e003      	b.n	8003dbe <HAL_RCC_OscConfig+0x1aa>
 8003db6:	f7ff fbd8 	bl	800356a <LL_RCC_HSE_Disable>
 8003dba:	f7ff fbb8 	bl	800352e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d012      	beq.n	8003dec <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fd f99d 	bl	8001104 <HAL_GetTick>
 8003dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dce:	f7fd f999 	bl	8001104 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b64      	cmp	r3, #100	; 0x64
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e2a9      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003de0:	f7ff fbd2 	bl	8003588 <LL_RCC_HSE_IsReady>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0f1      	beq.n	8003dce <HAL_RCC_OscConfig+0x1ba>
 8003dea:	e013      	b.n	8003e14 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fd f98a 	bl	8001104 <HAL_GetTick>
 8003df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003df2:	e008      	b.n	8003e06 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df4:	f7fd f986 	bl	8001104 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b64      	cmp	r3, #100	; 0x64
 8003e00:	d901      	bls.n	8003e06 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e296      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e06:	f7ff fbbf 	bl	8003588 <LL_RCC_HSE_IsReady>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f1      	bne.n	8003df4 <HAL_RCC_OscConfig+0x1e0>
 8003e10:	e000      	b.n	8003e14 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d051      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e20:	f7ff fd93 	bl	800394a <LL_RCC_GetSysClkSource>
 8003e24:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e26:	f7ff fe8c 	bl	8003b42 <LL_RCC_PLL_GetMainSource>
 8003e2a:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d005      	beq.n	8003e3e <HAL_RCC_OscConfig+0x22a>
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	d113      	bne.n	8003e60 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d110      	bne.n	8003e60 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e3e:	f7ff fbd3 	bl	80035e8 <LL_RCC_HSI_IsReady>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_OscConfig+0x240>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e26f      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f7ff fbd7 	bl	800360c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e5e:	e031      	b.n	8003ec4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d019      	beq.n	8003e9c <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e68:	f7ff fba0 	bl	80035ac <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd f94a 	bl	8001104 <HAL_GetTick>
 8003e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e74:	f7fd f946 	bl	8001104 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e256      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003e86:	f7ff fbaf 	bl	80035e8 <LL_RCC_HSI_IsReady>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0f1      	beq.n	8003e74 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f7ff fbb9 	bl	800360c <LL_RCC_HSI_SetCalibTrimming>
 8003e9a:	e013      	b.n	8003ec4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e9c:	f7ff fb95 	bl	80035ca <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd f930 	bl	8001104 <HAL_GetTick>
 8003ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea8:	f7fd f92c 	bl	8001104 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e23c      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003eba:	f7ff fb95 	bl	80035e8 <LL_RCC_HSI_IsReady>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f1      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 80a2 	beq.w	8004022 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d075      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0310 	and.w	r3, r3, #16
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d046      	beq.n	8003f80 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003ef2:	f7ff fc4c 	bl	800378e <LL_RCC_LSI1_IsReady>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d113      	bne.n	8003f24 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003efc:	f7ff fc25 	bl	800374a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f00:	f7fd f900 	bl	8001104 <HAL_GetTick>
 8003f04:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f08:	f7fd f8fc 	bl	8001104 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e20c      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003f1a:	f7ff fc38 	bl	800378e <LL_RCC_LSI1_IsReady>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f1      	beq.n	8003f08 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003f24:	f7ff fc45 	bl	80037b2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fd f8ec 	bl	8001104 <HAL_GetTick>
 8003f2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003f2e:	e008      	b.n	8003f42 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003f30:	f7fd f8e8 	bl	8001104 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b03      	cmp	r3, #3
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e1f8      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003f42:	f7ff fc58 	bl	80037f6 <LL_RCC_LSI2_IsReady>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f1      	beq.n	8003f30 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fc62 	bl	800381a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003f56:	f7ff fc09 	bl	800376c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fd f8d3 	bl	8001104 <HAL_GetTick>
 8003f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f62:	f7fd f8cf 	bl	8001104 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e1df      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003f74:	f7ff fc0b 	bl	800378e <LL_RCC_LSI1_IsReady>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f1      	bne.n	8003f62 <HAL_RCC_OscConfig+0x34e>
 8003f7e:	e050      	b.n	8004022 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003f80:	f7ff fbe3 	bl	800374a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fd f8be 	bl	8001104 <HAL_GetTick>
 8003f88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f8c:	f7fd f8ba 	bl	8001104 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d904      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1ca      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
 8003f9e:	bf00      	nop
 8003fa0:	20000020 	.word	0x20000020
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003fa4:	f7ff fbf3 	bl	800378e <LL_RCC_LSI1_IsReady>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0ee      	beq.n	8003f8c <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003fae:	f7ff fc11 	bl	80037d4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003fb4:	f7fd f8a6 	bl	8001104 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e1b6      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003fc6:	f7ff fc16 	bl	80037f6 <LL_RCC_LSI2_IsReady>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1f1      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x3a0>
 8003fd0:	e027      	b.n	8004022 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003fd2:	f7ff fbff 	bl	80037d4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fd f895 	bl	8001104 <HAL_GetTick>
 8003fda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003fde:	f7fd f891 	bl	8001104 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e1a1      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003ff0:	f7ff fc01 	bl	80037f6 <LL_RCC_LSI2_IsReady>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1f1      	bne.n	8003fde <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003ffa:	f7ff fbb7 	bl	800376c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffe:	f7fd f881 	bl	8001104 <HAL_GetTick>
 8004002:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004006:	f7fd f87d 	bl	8001104 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e18d      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004018:	f7ff fbb9 	bl	800378e <LL_RCC_LSI1_IsReady>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f1      	bne.n	8004006 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d05b      	beq.n	80040e6 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800402e:	4bb5      	ldr	r3, [pc, #724]	; (8004304 <HAL_RCC_OscConfig+0x6f0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d114      	bne.n	8004064 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800403a:	f7ff fa39 	bl	80034b0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800403e:	f7fd f861 	bl	8001104 <HAL_GetTick>
 8004042:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004044:	e008      	b.n	8004058 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004046:	f7fd f85d 	bl	8001104 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b02      	cmp	r3, #2
 8004052:	d901      	bls.n	8004058 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004054:	2303      	movs	r3, #3
 8004056:	e16d      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004058:	4baa      	ldr	r3, [pc, #680]	; (8004304 <HAL_RCC_OscConfig+0x6f0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0f0      	beq.n	8004046 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d102      	bne.n	8004072 <HAL_RCC_OscConfig+0x45e>
 800406c:	f7ff fb17 	bl	800369e <LL_RCC_LSE_Enable>
 8004070:	e00c      	b.n	800408c <HAL_RCC_OscConfig+0x478>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b05      	cmp	r3, #5
 8004078:	d104      	bne.n	8004084 <HAL_RCC_OscConfig+0x470>
 800407a:	f7ff fb32 	bl	80036e2 <LL_RCC_LSE_EnableBypass>
 800407e:	f7ff fb0e 	bl	800369e <LL_RCC_LSE_Enable>
 8004082:	e003      	b.n	800408c <HAL_RCC_OscConfig+0x478>
 8004084:	f7ff fb1c 	bl	80036c0 <LL_RCC_LSE_Disable>
 8004088:	f7ff fb3c 	bl	8003704 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d014      	beq.n	80040be <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004094:	f7fd f836 	bl	8001104 <HAL_GetTick>
 8004098:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800409a:	e00a      	b.n	80040b2 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409c:	f7fd f832 	bl	8001104 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e140      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 80040b2:	f7ff fb38 	bl	8003726 <LL_RCC_LSE_IsReady>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ef      	beq.n	800409c <HAL_RCC_OscConfig+0x488>
 80040bc:	e013      	b.n	80040e6 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fd f821 	bl	8001104 <HAL_GetTick>
 80040c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80040c4:	e00a      	b.n	80040dc <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c6:	f7fd f81d 	bl	8001104 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e12b      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 80040dc:	f7ff fb23 	bl	8003726 <LL_RCC_LSE_IsReady>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1ef      	bne.n	80040c6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d02c      	beq.n	800414c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d014      	beq.n	8004124 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040fa:	f7ff fa9c 	bl	8003636 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fe:	f7fd f801 	bl	8001104 <HAL_GetTick>
 8004102:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004106:	f7fc fffd 	bl	8001104 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e10d      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004118:	f7ff faaf 	bl	800367a <LL_RCC_HSI48_IsReady>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f1      	beq.n	8004106 <HAL_RCC_OscConfig+0x4f2>
 8004122:	e013      	b.n	800414c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004124:	f7ff fa98 	bl	8003658 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fc ffec 	bl	8001104 <HAL_GetTick>
 800412c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004130:	f7fc ffe8 	bl	8001104 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e0f8      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004142:	f7ff fa9a 	bl	800367a <LL_RCC_HSI48_IsReady>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f1      	bne.n	8004130 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80ee 	beq.w	8004332 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004156:	f7ff fbf8 	bl	800394a <LL_RCC_GetSysClkSource>
 800415a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800415c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	2b02      	cmp	r3, #2
 800416a:	f040 80af 	bne.w	80042cc <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f003 0203 	and.w	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004178:	429a      	cmp	r2, r3
 800417a:	d123      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004186:	429a      	cmp	r2, r3
 8004188:	d11c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004196:	429a      	cmp	r2, r3
 8004198:	d114      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d10d      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d106      	bne.n	80041c4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d05d      	beq.n	8004280 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2b0c      	cmp	r3, #12
 80041c8:	d058      	beq.n	800427c <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e0ab      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041dc:	f7ff fc6b 	bl	8003ab6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041e0:	f7fc ff90 	bl	8001104 <HAL_GetTick>
 80041e4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041e8:	f7fc ff8c 	bl	8001104 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e09c      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ef      	bne.n	80041e8 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <HAL_RCC_OscConfig+0x6f4>)
 8004210:	4013      	ands	r3, r2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800421a:	4311      	orrs	r1, r2
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004220:	0212      	lsls	r2, r2, #8
 8004222:	4311      	orrs	r1, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004228:	4311      	orrs	r1, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800422e:	4311      	orrs	r1, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004234:	430a      	orrs	r2, r1
 8004236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800423a:	4313      	orrs	r3, r2
 800423c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800423e:	f7ff fc2b 	bl	8003a98 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800424c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004250:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004252:	f7fc ff57 	bl	8001104 <HAL_GetTick>
 8004256:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800425a:	f7fc ff53 	bl	8001104 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e063      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800426c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ef      	beq.n	800425a <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800427a:	e05a      	b.n	8004332 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e059      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d151      	bne.n	8004332 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800428e:	f7ff fc03 	bl	8003a98 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004292:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800429c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042a2:	f7fc ff2f 	bl	8001104 <HAL_GetTick>
 80042a6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a8:	e008      	b.n	80042bc <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042aa:	f7fc ff2b 	bl	8001104 <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e03b      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ef      	beq.n	80042aa <HAL_RCC_OscConfig+0x696>
 80042ca:	e032      	b.n	8004332 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	2b0c      	cmp	r3, #12
 80042d0:	d02d      	beq.n	800432e <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d2:	f7ff fbf0 	bl	8003ab6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80042d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e0:	f023 0303 	bic.w	r3, r3, #3
 80042e4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80042e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80042f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7fc ff03 	bl	8001104 <HAL_GetTick>
 80042fe:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004300:	e00d      	b.n	800431e <HAL_RCC_OscConfig+0x70a>
 8004302:	bf00      	nop
 8004304:	58000400 	.word	0x58000400
 8004308:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430c:	f7fc fefa 	bl	8001104 <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e00a      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800431e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1ef      	bne.n	800430c <HAL_RCC_OscConfig+0x6f8>
 800432c:	e001      	b.n	8004332 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e000      	b.n	8004334 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	3734      	adds	r7, #52	; 0x34
 8004338:	46bd      	mov	sp, r7
 800433a:	bd90      	pop	{r4, r7, pc}

0800433c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d101      	bne.n	8004350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e12a      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004350:	4b97      	ldr	r3, [pc, #604]	; (80045b0 <HAL_RCC_ClockConfig+0x274>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d91b      	bls.n	8004396 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800435e:	4b94      	ldr	r3, [pc, #592]	; (80045b0 <HAL_RCC_ClockConfig+0x274>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 0207 	bic.w	r2, r3, #7
 8004366:	4992      	ldr	r1, [pc, #584]	; (80045b0 <HAL_RCC_ClockConfig+0x274>)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	4313      	orrs	r3, r2
 800436c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436e:	f7fc fec9 	bl	8001104 <HAL_GetTick>
 8004372:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004374:	e008      	b.n	8004388 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004376:	f7fc fec5 	bl	8001104 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e10e      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004388:	4b89      	ldr	r3, [pc, #548]	; (80045b0 <HAL_RCC_ClockConfig+0x274>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d1ef      	bne.n	8004376 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d016      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7ff fadb 	bl	8003962 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043ac:	f7fc feaa 	bl	8001104 <HAL_GetTick>
 80043b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043b4:	f7fc fea6 	bl	8001104 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e0ef      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80043c6:	f7ff fbc8 	bl	8003b5a <LL_RCC_IsActiveFlag_HPRE>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f1      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d016      	beq.n	800440a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fad2 	bl	800398a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043e6:	f7fc fe8d 	bl	8001104 <HAL_GetTick>
 80043ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043ee:	f7fc fe89 	bl	8001104 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e0d2      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004400:	f7ff fbbd 	bl	8003b7e <LL_RCC_IsActiveFlag_C2HPRE>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f1      	beq.n	80043ee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d016      	beq.n	8004444 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff facb 	bl	80039b6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004420:	f7fc fe70 	bl	8001104 <HAL_GetTick>
 8004424:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004428:	f7fc fe6c 	bl	8001104 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e0b5      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800443a:	f7ff fbb3 	bl	8003ba4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800443e:	4603      	mov	r3, r0
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f1      	beq.n	8004428 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d016      	beq.n	800447e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	4618      	mov	r0, r3
 8004456:	f7ff fac5 	bl	80039e4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800445a:	f7fc fe53 	bl	8001104 <HAL_GetTick>
 800445e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004462:	f7fc fe4f 	bl	8001104 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e098      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004474:	f7ff fba9 	bl	8003bca <LL_RCC_IsActiveFlag_PPRE1>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f1      	beq.n	8004462 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d017      	beq.n	80044ba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4618      	mov	r0, r3
 8004492:	f7ff fabb 	bl	8003a0c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004496:	f7fc fe35 	bl	8001104 <HAL_GetTick>
 800449a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800449e:	f7fc fe31 	bl	8001104 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e07a      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80044b0:	f7ff fb9d 	bl	8003bee <LL_RCC_IsActiveFlag_PPRE2>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f1      	beq.n	800449e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d043      	beq.n	800454e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d106      	bne.n	80044dc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80044ce:	f7ff f85b 	bl	8003588 <LL_RCC_HSE_IsReady>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d11e      	bne.n	8004516 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e064      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b03      	cmp	r3, #3
 80044e2:	d106      	bne.n	80044f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80044e4:	f7ff faf6 	bl	8003ad4 <LL_RCC_PLL_IsReady>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d113      	bne.n	8004516 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e059      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80044fa:	f7ff f9c3 	bl	8003884 <LL_RCC_MSI_IsReady>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d108      	bne.n	8004516 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e04e      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004508:	f7ff f86e 	bl	80035e8 <LL_RCC_HSI_IsReady>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e047      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff fa01 	bl	8003922 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004520:	f7fc fdf0 	bl	8001104 <HAL_GetTick>
 8004524:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004526:	e00a      	b.n	800453e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004528:	f7fc fdec 	bl	8001104 <HAL_GetTick>
 800452c:	4602      	mov	r2, r0
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	f241 3288 	movw	r2, #5000	; 0x1388
 8004536:	4293      	cmp	r3, r2
 8004538:	d901      	bls.n	800453e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e033      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453e:	f7ff fa04 	bl	800394a <LL_RCC_GetSysClkSource>
 8004542:	4602      	mov	r2, r0
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	429a      	cmp	r2, r3
 800454c:	d1ec      	bne.n	8004528 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800454e:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <HAL_RCC_ClockConfig+0x274>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d21b      	bcs.n	8004594 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455c:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <HAL_RCC_ClockConfig+0x274>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f023 0207 	bic.w	r2, r3, #7
 8004564:	4912      	ldr	r1, [pc, #72]	; (80045b0 <HAL_RCC_ClockConfig+0x274>)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456c:	f7fc fdca 	bl	8001104 <HAL_GetTick>
 8004570:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	e008      	b.n	8004586 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004574:	f7fc fdc6 	bl	8001104 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e00f      	b.n	80045a6 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <HAL_RCC_ClockConfig+0x274>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	429a      	cmp	r2, r3
 8004592:	d1ef      	bne.n	8004574 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8004594:	f7fc fc6e 	bl	8000e74 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004598:	f7fc fdc0 	bl	800111c <HAL_GetTickPrio>
 800459c:	4603      	mov	r3, r0
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fc fd62 	bl	8001068 <HAL_InitTick>
 80045a4:	4603      	mov	r3, r0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	58004000 	.word	0x58004000

080045b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045b4:	b590      	push	{r4, r7, lr}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ba:	f7ff f9c6 	bl	800394a <LL_RCC_GetSysClkSource>
 80045be:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80045c6:	f7ff f982 	bl	80038ce <LL_RCC_MSI_GetRange>
 80045ca:	4603      	mov	r3, r0
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	4a2a      	ldr	r2, [pc, #168]	; (800467c <HAL_RCC_GetSysClockFreq+0xc8>)
 80045d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	e04a      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d102      	bne.n	80045e8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045e2:	4b27      	ldr	r3, [pc, #156]	; (8004680 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	e044      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d10a      	bne.n	8004604 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80045ee:	f7fe ff7d 	bl	80034ec <LL_RCC_HSE_IsEnabledDiv2>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d102      	bne.n	80045fe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80045f8:	4b21      	ldr	r3, [pc, #132]	; (8004680 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045fa:	60fb      	str	r3, [r7, #12]
 80045fc:	e039      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80045fe:	4b21      	ldr	r3, [pc, #132]	; (8004684 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	e036      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004604:	f7ff fa9d 	bl	8003b42 <LL_RCC_PLL_GetMainSource>
 8004608:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d002      	beq.n	8004616 <HAL_RCC_GetSysClockFreq+0x62>
 8004610:	2b03      	cmp	r3, #3
 8004612:	d003      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0x68>
 8004614:	e00d      	b.n	8004632 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004616:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004618:	60bb      	str	r3, [r7, #8]
        break;
 800461a:	e015      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800461c:	f7fe ff66 	bl	80034ec <LL_RCC_HSE_IsEnabledDiv2>
 8004620:	4603      	mov	r3, r0
 8004622:	2b01      	cmp	r3, #1
 8004624:	d102      	bne.n	800462c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004626:	4b16      	ldr	r3, [pc, #88]	; (8004680 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004628:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800462a:	e00d      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800462c:	4b15      	ldr	r3, [pc, #84]	; (8004684 <HAL_RCC_GetSysClockFreq+0xd0>)
 800462e:	60bb      	str	r3, [r7, #8]
        break;
 8004630:	e00a      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004632:	f7ff f94c 	bl	80038ce <LL_RCC_MSI_GetRange>
 8004636:	4603      	mov	r3, r0
 8004638:	091b      	lsrs	r3, r3, #4
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	4a0f      	ldr	r2, [pc, #60]	; (800467c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004644:	60bb      	str	r3, [r7, #8]
        break;
 8004646:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004648:	f7ff fa56 	bl	8003af8 <LL_RCC_PLL_GetN>
 800464c:	4602      	mov	r2, r0
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	fb03 f402 	mul.w	r4, r3, r2
 8004654:	f7ff fa69 	bl	8003b2a <LL_RCC_PLL_GetDivider>
 8004658:	4603      	mov	r3, r0
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	3301      	adds	r3, #1
 800465e:	fbb4 f4f3 	udiv	r4, r4, r3
 8004662:	f7ff fa56 	bl	8003b12 <LL_RCC_PLL_GetR>
 8004666:	4603      	mov	r3, r0
 8004668:	0f5b      	lsrs	r3, r3, #29
 800466a:	3301      	adds	r3, #1
 800466c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004670:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004672:	68fb      	ldr	r3, [r7, #12]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	bd90      	pop	{r4, r7, pc}
 800467c:	08006a48 	.word	0x08006a48
 8004680:	00f42400 	.word	0x00f42400
 8004684:	01e84800 	.word	0x01e84800

08004688 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004688:	b598      	push	{r3, r4, r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800468c:	f7ff ff92 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 8004690:	4604      	mov	r4, r0
 8004692:	f7ff f9cf 	bl	8003a34 <LL_RCC_GetAHBPrescaler>
 8004696:	4603      	mov	r3, r0
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	4a03      	ldr	r2, [pc, #12]	; (80046ac <HAL_RCC_GetHCLKFreq+0x24>)
 80046a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046a4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	bd98      	pop	{r3, r4, r7, pc}
 80046ac:	080069e8 	.word	0x080069e8

080046b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b0:	b598      	push	{r3, r4, r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80046b4:	f7ff ffe8 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046b8:	4604      	mov	r4, r0
 80046ba:	f7ff f9d5 	bl	8003a68 <LL_RCC_GetAPB1Prescaler>
 80046be:	4603      	mov	r3, r0
 80046c0:	0a1b      	lsrs	r3, r3, #8
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046cc:	f003 031f 	and.w	r3, r3, #31
 80046d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd98      	pop	{r3, r4, r7, pc}
 80046d8:	08006a28 	.word	0x08006a28

080046dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046dc:	b598      	push	{r3, r4, r7, lr}
 80046de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80046e0:	f7ff ffd2 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046e4:	4604      	mov	r4, r0
 80046e6:	f7ff f9cb 	bl	8003a80 <LL_RCC_GetAPB2Prescaler>
 80046ea:	4603      	mov	r3, r0
 80046ec:	0adb      	lsrs	r3, r3, #11
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	4a04      	ldr	r2, [pc, #16]	; (8004704 <HAL_RCC_GetPCLK2Freq+0x28>)
 80046f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd98      	pop	{r3, r4, r7, pc}
 8004704:	08006a28 	.word	0x08006a28

08004708 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004708:	b590      	push	{r4, r7, lr}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2bb0      	cmp	r3, #176	; 0xb0
 8004714:	d903      	bls.n	800471e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004716:	4b15      	ldr	r3, [pc, #84]	; (800476c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	e007      	b.n	800472e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	091b      	lsrs	r3, r3, #4
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	4a11      	ldr	r2, [pc, #68]	; (800476c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800472c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800472e:	f7ff f98d 	bl	8003a4c <LL_RCC_GetAHB4Prescaler>
 8004732:	4603      	mov	r3, r0
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	f003 030f 	and.w	r3, r3, #15
 800473a:	4a0d      	ldr	r2, [pc, #52]	; (8004770 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800473c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	fbb2 f3f3 	udiv	r3, r2, r3
 8004746:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	0c9c      	lsrs	r4, r3, #18
 8004752:	f7fe febd 	bl	80034d0 <HAL_PWREx_GetVoltageRange>
 8004756:	4603      	mov	r3, r0
 8004758:	4619      	mov	r1, r3
 800475a:	4620      	mov	r0, r4
 800475c:	f000 f80c 	bl	8004778 <RCC_SetFlashLatency>
 8004760:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	bd90      	pop	{r4, r7, pc}
 800476a:	bf00      	nop
 800476c:	08006a48 	.word	0x08006a48
 8004770:	080069e8 	.word	0x080069e8
 8004774:	431bde83 	.word	0x431bde83

08004778 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004778:	b590      	push	{r4, r7, lr}
 800477a:	b093      	sub	sp, #76	; 0x4c
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004782:	4b39      	ldr	r3, [pc, #228]	; (8004868 <RCC_SetFlashLatency+0xf0>)
 8004784:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004788:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800478a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800478e:	4a37      	ldr	r2, [pc, #220]	; (800486c <RCC_SetFlashLatency+0xf4>)
 8004790:	f107 031c 	add.w	r3, r7, #28
 8004794:	ca07      	ldmia	r2, {r0, r1, r2}
 8004796:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800479a:	4b35      	ldr	r3, [pc, #212]	; (8004870 <RCC_SetFlashLatency+0xf8>)
 800479c:	f107 040c 	add.w	r4, r7, #12
 80047a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80047a6:	2300      	movs	r3, #0
 80047a8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047b0:	d11c      	bne.n	80047ec <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80047b2:	2300      	movs	r3, #0
 80047b4:	643b      	str	r3, [r7, #64]	; 0x40
 80047b6:	e015      	b.n	80047e4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80047b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047c0:	4413      	add	r3, r2
 80047c2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d808      	bhi.n	80047de <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80047cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047d4:	4413      	add	r3, r2
 80047d6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80047da:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80047dc:	e022      	b.n	8004824 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80047de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e0:	3301      	adds	r3, #1
 80047e2:	643b      	str	r3, [r7, #64]	; 0x40
 80047e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d9e6      	bls.n	80047b8 <RCC_SetFlashLatency+0x40>
 80047ea:	e01b      	b.n	8004824 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80047ec:	2300      	movs	r3, #0
 80047ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f0:	e015      	b.n	800481e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80047f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047fa:	4413      	add	r3, r2
 80047fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	429a      	cmp	r2, r3
 8004804:	d808      	bhi.n	8004818 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800480e:	4413      	add	r3, r2
 8004810:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004814:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004816:	e005      	b.n	8004824 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481a:	3301      	adds	r3, #1
 800481c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800481e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004820:	2b02      	cmp	r3, #2
 8004822:	d9e6      	bls.n	80047f2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004824:	4b13      	ldr	r3, [pc, #76]	; (8004874 <RCC_SetFlashLatency+0xfc>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f023 0207 	bic.w	r2, r3, #7
 800482c:	4911      	ldr	r1, [pc, #68]	; (8004874 <RCC_SetFlashLatency+0xfc>)
 800482e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004830:	4313      	orrs	r3, r2
 8004832:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004834:	f7fc fc66 	bl	8001104 <HAL_GetTick>
 8004838:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800483a:	e008      	b.n	800484e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800483c:	f7fc fc62 	bl	8001104 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e007      	b.n	800485e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <RCC_SetFlashLatency+0xfc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004858:	429a      	cmp	r2, r3
 800485a:	d1ef      	bne.n	800483c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	374c      	adds	r7, #76	; 0x4c
 8004862:	46bd      	mov	sp, r7
 8004864:	bd90      	pop	{r4, r7, pc}
 8004866:	bf00      	nop
 8004868:	080069ac 	.word	0x080069ac
 800486c:	080069bc 	.word	0x080069bc
 8004870:	080069c8 	.word	0x080069c8
 8004874:	58004000 	.word	0x58004000

08004878 <LL_RCC_LSE_IsEnabled>:
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800487c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <LL_RCC_LSE_IsEnabled+0x18>
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <LL_RCC_LSE_IsEnabled+0x1a>
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <LL_RCC_LSE_IsReady>:
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80048a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d101      	bne.n	80048b4 <LL_RCC_LSE_IsReady+0x18>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <LL_RCC_LSE_IsReady+0x1a>
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <LL_RCC_SetRFWKPClockSource>:
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80048c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <LL_RCC_SetSMPSClockSource>:
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80048f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fa:	f023 0203 	bic.w	r2, r3, #3
 80048fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4313      	orrs	r3, r2
 8004906:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <LL_RCC_SetSMPSPrescaler>:
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800491c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4313      	orrs	r3, r2
 800492e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <LL_RCC_SetUSARTClockSource>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494c:	f023 0203 	bic.w	r2, r3, #3
 8004950:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4313      	orrs	r3, r2
 8004958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <LL_RCC_SetLPUARTClockSource>:
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004978:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800497c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <LL_RCC_SetI2CClockSource>:
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800499c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80049ac:	43db      	mvns	r3, r3
 80049ae:	401a      	ands	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80049b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049bc:	4313      	orrs	r3, r2
 80049be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <LL_RCC_SetLPTIMClockSource>:
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80049d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	0c1b      	lsrs	r3, r3, #16
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	43db      	mvns	r3, r3
 80049e6:	401a      	ands	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049f0:	4313      	orrs	r3, r2
 80049f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <LL_RCC_SetSAIClockSource>:
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a22:	bf00      	nop
 8004a24:	370c      	adds	r7, #12
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr

08004a2e <LL_RCC_SetRNGClockSource>:
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a3e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <LL_RCC_SetCLK48ClockSource>:
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <LL_RCC_SetUSBClockSource>:
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7ff ffe3 	bl	8004a5a <LL_RCC_SetCLK48ClockSource>
}
 8004a94:	bf00      	nop
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <LL_RCC_SetADCClockSource>:
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ab0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <LL_RCC_SetRTCClockSource>:
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004adc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <LL_RCC_GetRTCClockSource>:
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_RCC_ForceBackupDomainReset>:
{
 8004b0e:	b480      	push	{r7}
 8004b10:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b26:	bf00      	nop
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <LL_RCC_PLLSAI1_Enable>:
{
 8004b52:	b480      	push	{r7}
 8004b54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b64:	6013      	str	r3, [r2, #0]
}
 8004b66:	bf00      	nop
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr

08004b70 <LL_RCC_PLLSAI1_Disable>:
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b82:	6013      	str	r3, [r2, #0]
}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <LL_RCC_PLLSAI1_IsReady>:
{
 8004b8e:	b480      	push	{r7}
 8004b90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ba0:	d101      	bne.n	8004ba6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b088      	sub	sp, #32
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004bba:	2300      	movs	r3, #0
 8004bbc:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d033      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bdc:	d802      	bhi.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d010      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004be2:	e017      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004be4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004be8:	d017      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004bea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bee:	d016      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004bf0:	e010      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c00:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004c02:	e00d      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 f947 	bl	8004e9c <RCCEx_PLLSAI1_ConfigNP>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004c12:	e005      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	77fb      	strb	r3, [r7, #31]
        break;
 8004c18:	e002      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004c1a:	bf00      	nop
 8004c1c:	e000      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c20:	7ffb      	ldrb	r3, [r7, #31]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d105      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fee9 	bl	8004a02 <LL_RCC_SetSAIClockSource>
 8004c30:	e001      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c32:	7ffb      	ldrb	r3, [r7, #31]
 8004c34:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d046      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004c42:	f7ff ff57 	bl	8004af4 <LL_RCC_GetRTCClockSource>
 8004c46:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d03c      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004c52:	f7fe fc2d 	bl	80034b0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7ff ff31 	bl	8004ac8 <LL_RCC_SetRTCClockSource>
 8004c66:	e02e      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c70:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004c72:	f7ff ff4c 	bl	8004b0e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004c76:	f7ff ff5b 	bl	8004b30 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004c88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004c92:	f7ff fdf1 	bl	8004878 <LL_RCC_LSE_IsEnabled>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d114      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c9c:	f7fc fa32 	bl	8001104 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004ca2:	e00b      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ca4:	f7fc fa2e 	bl	8001104 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d902      	bls.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	77fb      	strb	r3, [r7, #31]
              break;
 8004cba:	e004      	b.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004cbc:	f7ff fdee 	bl	800489c <LL_RCC_LSE_IsReady>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d1ee      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004cc6:	7ffb      	ldrb	r3, [r7, #31]
 8004cc8:	77bb      	strb	r3, [r7, #30]
 8004cca:	e001      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ccc:	7ffb      	ldrb	r3, [r7, #31]
 8004cce:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff fe2b 	bl	800493c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d004      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7ff fe36 	bl	8004968 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d004      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff fe5e 	bl	80049ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d004      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7ff fe53 	bl	80049ce <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0304 	and.w	r3, r3, #4
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d004      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fe2b 	bl	8004994 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0308 	and.w	r3, r3, #8
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fe20 	bl	8004994 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d022      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff fe8e 	bl	8004a86 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d72:	d107      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d82:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d8c:	d10b      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f8dd 	bl	8004f52 <RCCEx_PLLSAI1_ConfigNQ>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004d9c:	7ffb      	ldrb	r3, [r7, #31]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8004da2:	7ffb      	ldrb	r3, [r7, #31]
 8004da4:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d02b      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dba:	d008      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dc4:	d003      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d105      	bne.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7ff fe2b 	bl	8004a2e <LL_RCC_SetRNGClockSource>
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	2000      	movs	r0, #0
 8004de6:	f7ff fe22 	bl	8004a2e <LL_RCC_SetRNGClockSource>
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f7ff fe35 	bl	8004a5a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004df8:	d107      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e08:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d022      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fe3e 	bl	8004a9c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e28:	d107      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e38:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e42:	d10b      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	3304      	adds	r3, #4
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 f8dd 	bl	8005008 <RCCEx_PLLSAI1_ConfigNR>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004e52:	7ffb      	ldrb	r3, [r7, #31]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8004e58:	7ffb      	ldrb	r3, [r7, #31]
 8004e5a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d004      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff fd27 	bl	80048c0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d009      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7ff fd46 	bl	8004914 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7ff fd2d 	bl	80048ec <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8004e92:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004ea8:	f7ff fe62 	bl	8004b70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004eac:	f7fc f92a 	bl	8001104 <HAL_GetTick>
 8004eb0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004eb2:	e009      	b.n	8004ec8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004eb4:	f7fc f926 	bl	8001104 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d902      	bls.n	8004ec8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec6:	e004      	b.n	8004ed2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004ec8:	f7ff fe61 	bl	8004b8e <LL_RCC_PLLSAI1_IsReady>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d137      	bne.n	8004f48 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	021b      	lsls	r3, r3, #8
 8004ee8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eec:	4313      	orrs	r3, r2
 8004eee:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f02:	4313      	orrs	r3, r2
 8004f04:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004f06:	f7ff fe24 	bl	8004b52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f0a:	f7fc f8fb 	bl	8001104 <HAL_GetTick>
 8004f0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f10:	e009      	b.n	8004f26 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f12:	f7fc f8f7 	bl	8001104 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d902      	bls.n	8004f26 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	73fb      	strb	r3, [r7, #15]
        break;
 8004f24:	e004      	b.n	8004f30 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f26:	f7ff fe32 	bl	8004b8e <LL_RCC_PLLSAI1_IsReady>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d1f0      	bne.n	8004f12 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d108      	bne.n	8004f48 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f44:	4313      	orrs	r3, r2
 8004f46:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f5e:	f7ff fe07 	bl	8004b70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f62:	f7fc f8cf 	bl	8001104 <HAL_GetTick>
 8004f66:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f68:	e009      	b.n	8004f7e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f6a:	f7fc f8cb 	bl	8001104 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d902      	bls.n	8004f7e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f7c:	e004      	b.n	8004f88 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f7e:	f7ff fe06 	bl	8004b8e <LL_RCC_PLLSAI1_IsReady>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f0      	bne.n	8004f6a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d137      	bne.n	8004ffe <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	021b      	lsls	r3, r3, #8
 8004f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004fbc:	f7ff fdc9 	bl	8004b52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc0:	f7fc f8a0 	bl	8001104 <HAL_GetTick>
 8004fc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fc6:	e009      	b.n	8004fdc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fc8:	f7fc f89c 	bl	8001104 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d902      	bls.n	8004fdc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004fda:	e004      	b.n	8004fe6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004fdc:	f7ff fdd7 	bl	8004b8e <LL_RCC_PLLSAI1_IsReady>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d1f0      	bne.n	8004fc8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d108      	bne.n	8004ffe <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005010:	2300      	movs	r3, #0
 8005012:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005014:	f7ff fdac 	bl	8004b70 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005018:	f7fc f874 	bl	8001104 <HAL_GetTick>
 800501c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800501e:	e009      	b.n	8005034 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005020:	f7fc f870 	bl	8001104 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d902      	bls.n	8005034 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	73fb      	strb	r3, [r7, #15]
      break;
 8005032:	e004      	b.n	800503e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005034:	f7ff fdab 	bl	8004b8e <LL_RCC_PLLSAI1_IsReady>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f0      	bne.n	8005020 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d137      	bne.n	80050b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005058:	4313      	orrs	r3, r2
 800505a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800505c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800506e:	4313      	orrs	r3, r2
 8005070:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005072:	f7ff fd6e 	bl	8004b52 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005076:	f7fc f845 	bl	8001104 <HAL_GetTick>
 800507a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800507c:	e009      	b.n	8005092 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800507e:	f7fc f841 	bl	8001104 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d902      	bls.n	8005092 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	73fb      	strb	r3, [r7, #15]
        break;
 8005090:	e004      	b.n	800509c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005092:	f7ff fd7c 	bl	8004b8e <LL_RCC_PLLSAI1_IsReady>
 8005096:	4603      	mov	r3, r0
 8005098:	2b01      	cmp	r3, #1
 800509a:	d1f0      	bne.n	800507e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d108      	bne.n	80050b4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80050a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050b0:	4313      	orrs	r3, r2
 80050b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <LL_RCC_GetUSARTClockSource>:
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80050c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4013      	ands	r3, r2
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <LL_RCC_GetLPUARTClockSource>:
{
 80050de:	b480      	push	{r7}
 80050e0:	b083      	sub	sp, #12
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80050e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4013      	ands	r3, r2
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e042      	b.n	8005196 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fb fcb4 	bl	8000a90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2224      	movs	r2, #36	; 0x24
 800512c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0201 	bic.w	r2, r2, #1
 800513e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 fa57 	bl	80055f4 <UART_SetConfig>
 8005146:	4603      	mov	r3, r0
 8005148:	2b01      	cmp	r3, #1
 800514a:	d101      	bne.n	8005150 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e022      	b.n	8005196 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fc59 	bl	8005a10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800516c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689a      	ldr	r2, [r3, #8]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800517c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 0201 	orr.w	r2, r2, #1
 800518c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 fce0 	bl	8005b54 <UART_CheckIdleState>
 8005194:	4603      	mov	r3, r0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b08a      	sub	sp, #40	; 0x28
 80051a2:	af02      	add	r7, sp, #8
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	603b      	str	r3, [r7, #0]
 80051aa:	4613      	mov	r3, r2
 80051ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	f040 8083 	bne.w	80052c0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_UART_Transmit+0x28>
 80051c0:	88fb      	ldrh	r3, [r7, #6]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e07b      	b.n	80052c2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d101      	bne.n	80051d8 <HAL_UART_Transmit+0x3a>
 80051d4:	2302      	movs	r3, #2
 80051d6:	e074      	b.n	80052c2 <HAL_UART_Transmit+0x124>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2221      	movs	r2, #33	; 0x21
 80051ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80051f0:	f7fb ff88 	bl	8001104 <HAL_GetTick>
 80051f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	88fa      	ldrh	r2, [r7, #6]
 80051fa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	88fa      	ldrh	r2, [r7, #6]
 8005202:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800520e:	d108      	bne.n	8005222 <HAL_UART_Transmit+0x84>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	e003      	b.n	800522a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005232:	e02c      	b.n	800528e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2200      	movs	r2, #0
 800523c:	2180      	movs	r1, #128	; 0x80
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fcd0 	bl	8005be4 <UART_WaitOnFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e039      	b.n	80052c2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10b      	bne.n	800526c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	881b      	ldrh	r3, [r3, #0]
 8005258:	461a      	mov	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005262:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	3302      	adds	r3, #2
 8005268:	61bb      	str	r3, [r7, #24]
 800526a:	e007      	b.n	800527c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	781a      	ldrb	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	3301      	adds	r3, #1
 800527a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29a      	uxth	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005294:	b29b      	uxth	r3, r3
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1cc      	bne.n	8005234 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2140      	movs	r1, #64	; 0x40
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 fc9d 	bl	8005be4 <UART_WaitOnFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80052b0:	2303      	movs	r3, #3
 80052b2:	e006      	b.n	80052c2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e000      	b.n	80052c2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80052c0:	2302      	movs	r3, #2
  }
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3720      	adds	r7, #32
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
	...

080052cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80052f2:	4013      	ands	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d118      	bne.n	800532e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d013      	beq.n	800532e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b00      	cmp	r3, #0
 800530e:	d104      	bne.n	800531a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d009      	beq.n	800532e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800531e:	2b00      	cmp	r3, #0
 8005320:	f000 8145 	beq.w	80055ae <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	4798      	blx	r3
      }
      return;
 800532c:	e13f      	b.n	80055ae <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 80e8 	beq.w	8005506 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	4ba1      	ldr	r3, [pc, #644]	; (80055c0 <HAL_UART_IRQHandler+0x2f4>)
 800533a:	4013      	ands	r3, r2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d105      	bne.n	800534c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	4ba0      	ldr	r3, [pc, #640]	; (80055c4 <HAL_UART_IRQHandler+0x2f8>)
 8005344:	4013      	ands	r3, r2
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 80dd 	beq.w	8005506 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d010      	beq.n	8005378 <HAL_UART_IRQHandler+0xac>
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2201      	movs	r2, #1
 8005366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536e:	f043 0201 	orr.w	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d010      	beq.n	80053a4 <HAL_UART_IRQHandler+0xd8>
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00b      	beq.n	80053a4 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2202      	movs	r2, #2
 8005392:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539a:	f043 0204 	orr.w	r2, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f003 0304 	and.w	r3, r3, #4
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d010      	beq.n	80053d0 <HAL_UART_IRQHandler+0x104>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00b      	beq.n	80053d0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2204      	movs	r2, #4
 80053be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	f043 0202 	orr.w	r2, r3, #2
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f003 0308 	and.w	r3, r3, #8
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d015      	beq.n	8005406 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80053e4:	697a      	ldr	r2, [r7, #20]
 80053e6:	4b76      	ldr	r3, [pc, #472]	; (80055c0 <HAL_UART_IRQHandler+0x2f4>)
 80053e8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00b      	beq.n	8005406 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2208      	movs	r2, #8
 80053f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fc:	f043 0208 	orr.w	r2, r3, #8
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800540c:	2b00      	cmp	r3, #0
 800540e:	d011      	beq.n	8005434 <HAL_UART_IRQHandler+0x168>
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00c      	beq.n	8005434 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542a:	f043 0220 	orr.w	r2, r3, #32
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 80b9 	beq.w	80055b2 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d011      	beq.n	800546e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	f003 0320 	and.w	r3, r3, #32
 8005450:	2b00      	cmp	r3, #0
 8005452:	d104      	bne.n	800545e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d007      	beq.n	800546e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005474:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005480:	2b40      	cmp	r3, #64	; 0x40
 8005482:	d004      	beq.n	800548e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800548a:	2b00      	cmp	r3, #0
 800548c:	d031      	beq.n	80054f2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fc28 	bl	8005ce4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	d123      	bne.n	80054ea <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d013      	beq.n	80054e2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054be:	4a42      	ldr	r2, [pc, #264]	; (80055c8 <HAL_UART_IRQHandler+0x2fc>)
 80054c0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7fc f80e 	bl	80014e8 <HAL_DMA_Abort_IT>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d017      	beq.n	8005502 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80054dc:	4610      	mov	r0, r2
 80054de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e0:	e00f      	b.n	8005502 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f87c 	bl	80055e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054e8:	e00b      	b.n	8005502 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 f878 	bl	80055e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	e007      	b.n	8005502 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f874 	bl	80055e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005500:	e057      	b.n	80055b2 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005502:	bf00      	nop
    return;
 8005504:	e055      	b.n	80055b2 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00d      	beq.n	800552c <HAL_UART_IRQHandler+0x260>
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d008      	beq.n	800552c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005522:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fc30 	bl	8005d8a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800552a:	e045      	b.n	80055b8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005532:	2b00      	cmp	r3, #0
 8005534:	d012      	beq.n	800555c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d008      	beq.n	800555c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554e:	2b00      	cmp	r3, #0
 8005550:	d031      	beq.n	80055b6 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
    }
    return;
 800555a:	e02c      	b.n	80055b6 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d008      	beq.n	8005578 <HAL_UART_IRQHandler+0x2ac>
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fbf0 	bl	8005d56 <UART_EndTransmit_IT>
    return;
 8005576:	e01f      	b.n	80055b8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d008      	beq.n	8005594 <HAL_UART_IRQHandler+0x2c8>
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fc10 	bl	8005db2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005592:	e011      	b.n	80055b8 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d00c      	beq.n	80055b8 <HAL_UART_IRQHandler+0x2ec>
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	da09      	bge.n	80055b8 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fbfa 	bl	8005d9e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055aa:	bf00      	nop
 80055ac:	e004      	b.n	80055b8 <HAL_UART_IRQHandler+0x2ec>
      return;
 80055ae:	bf00      	nop
 80055b0:	e002      	b.n	80055b8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80055b2:	bf00      	nop
 80055b4:	e000      	b.n	80055b8 <HAL_UART_IRQHandler+0x2ec>
    return;
 80055b6:	bf00      	nop
  }
}
 80055b8:	3720      	adds	r7, #32
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	bf00      	nop
 80055c0:	10000001 	.word	0x10000001
 80055c4:	04000120 	.word	0x04000120
 80055c8:	08005d2b 	.word	0x08005d2b

080055cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80055f8:	b088      	sub	sp, #32
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055fe:	2300      	movs	r3, #0
 8005600:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	431a      	orrs	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	431a      	orrs	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	4313      	orrs	r3, r2
 8005618:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	4313      	orrs	r3, r2
 8005622:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	4ba4      	ldr	r3, [pc, #656]	; (80058bc <UART_SetConfig+0x2c8>)
 800562c:	4013      	ands	r3, r2
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	69f9      	ldr	r1, [r7, #28]
 8005634:	430b      	orrs	r3, r1
 8005636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	68da      	ldr	r2, [r3, #12]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	430a      	orrs	r2, r1
 800564c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a99      	ldr	r2, [pc, #612]	; (80058c0 <UART_SetConfig+0x2cc>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d004      	beq.n	8005668 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	4313      	orrs	r3, r2
 8005666:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005672:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	6812      	ldr	r2, [r2, #0]
 800567a:	69f9      	ldr	r1, [r7, #28]
 800567c:	430b      	orrs	r3, r1
 800567e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	f023 010f 	bic.w	r1, r3, #15
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a8a      	ldr	r2, [pc, #552]	; (80058c4 <UART_SetConfig+0x2d0>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d121      	bne.n	80056e4 <UART_SetConfig+0xf0>
 80056a0:	2003      	movs	r0, #3
 80056a2:	f7ff fd0c 	bl	80050be <LL_RCC_GetUSARTClockSource>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d817      	bhi.n	80056dc <UART_SetConfig+0xe8>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <UART_SetConfig+0xc0>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080056c5 	.word	0x080056c5
 80056b8:	080056d1 	.word	0x080056d1
 80056bc:	080056cb 	.word	0x080056cb
 80056c0:	080056d7 	.word	0x080056d7
 80056c4:	2301      	movs	r3, #1
 80056c6:	76fb      	strb	r3, [r7, #27]
 80056c8:	e038      	b.n	800573c <UART_SetConfig+0x148>
 80056ca:	2302      	movs	r3, #2
 80056cc:	76fb      	strb	r3, [r7, #27]
 80056ce:	e035      	b.n	800573c <UART_SetConfig+0x148>
 80056d0:	2304      	movs	r3, #4
 80056d2:	76fb      	strb	r3, [r7, #27]
 80056d4:	e032      	b.n	800573c <UART_SetConfig+0x148>
 80056d6:	2308      	movs	r3, #8
 80056d8:	76fb      	strb	r3, [r7, #27]
 80056da:	e02f      	b.n	800573c <UART_SetConfig+0x148>
 80056dc:	2310      	movs	r3, #16
 80056de:	76fb      	strb	r3, [r7, #27]
 80056e0:	bf00      	nop
 80056e2:	e02b      	b.n	800573c <UART_SetConfig+0x148>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a75      	ldr	r2, [pc, #468]	; (80058c0 <UART_SetConfig+0x2cc>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d124      	bne.n	8005738 <UART_SetConfig+0x144>
 80056ee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80056f2:	f7ff fcf4 	bl	80050de <LL_RCC_GetLPUARTClockSource>
 80056f6:	4603      	mov	r3, r0
 80056f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056fc:	d012      	beq.n	8005724 <UART_SetConfig+0x130>
 80056fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005702:	d802      	bhi.n	800570a <UART_SetConfig+0x116>
 8005704:	2b00      	cmp	r3, #0
 8005706:	d007      	beq.n	8005718 <UART_SetConfig+0x124>
 8005708:	e012      	b.n	8005730 <UART_SetConfig+0x13c>
 800570a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800570e:	d006      	beq.n	800571e <UART_SetConfig+0x12a>
 8005710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005714:	d009      	beq.n	800572a <UART_SetConfig+0x136>
 8005716:	e00b      	b.n	8005730 <UART_SetConfig+0x13c>
 8005718:	2300      	movs	r3, #0
 800571a:	76fb      	strb	r3, [r7, #27]
 800571c:	e00e      	b.n	800573c <UART_SetConfig+0x148>
 800571e:	2302      	movs	r3, #2
 8005720:	76fb      	strb	r3, [r7, #27]
 8005722:	e00b      	b.n	800573c <UART_SetConfig+0x148>
 8005724:	2304      	movs	r3, #4
 8005726:	76fb      	strb	r3, [r7, #27]
 8005728:	e008      	b.n	800573c <UART_SetConfig+0x148>
 800572a:	2308      	movs	r3, #8
 800572c:	76fb      	strb	r3, [r7, #27]
 800572e:	e005      	b.n	800573c <UART_SetConfig+0x148>
 8005730:	2310      	movs	r3, #16
 8005732:	76fb      	strb	r3, [r7, #27]
 8005734:	bf00      	nop
 8005736:	e001      	b.n	800573c <UART_SetConfig+0x148>
 8005738:	2310      	movs	r3, #16
 800573a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a5f      	ldr	r2, [pc, #380]	; (80058c0 <UART_SetConfig+0x2cc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	f040 808e 	bne.w	8005864 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005748:	7efb      	ldrb	r3, [r7, #27]
 800574a:	2b08      	cmp	r3, #8
 800574c:	d823      	bhi.n	8005796 <UART_SetConfig+0x1a2>
 800574e:	a201      	add	r2, pc, #4	; (adr r2, 8005754 <UART_SetConfig+0x160>)
 8005750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005754:	08005779 	.word	0x08005779
 8005758:	08005797 	.word	0x08005797
 800575c:	08005781 	.word	0x08005781
 8005760:	08005797 	.word	0x08005797
 8005764:	08005787 	.word	0x08005787
 8005768:	08005797 	.word	0x08005797
 800576c:	08005797 	.word	0x08005797
 8005770:	08005797 	.word	0x08005797
 8005774:	0800578f 	.word	0x0800578f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005778:	f7fe ff9a 	bl	80046b0 <HAL_RCC_GetPCLK1Freq>
 800577c:	6178      	str	r0, [r7, #20]
        break;
 800577e:	e00f      	b.n	80057a0 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005780:	4b51      	ldr	r3, [pc, #324]	; (80058c8 <UART_SetConfig+0x2d4>)
 8005782:	617b      	str	r3, [r7, #20]
        break;
 8005784:	e00c      	b.n	80057a0 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005786:	f7fe ff15 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 800578a:	6178      	str	r0, [r7, #20]
        break;
 800578c:	e008      	b.n	80057a0 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800578e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005792:	617b      	str	r3, [r7, #20]
        break;
 8005794:	e004      	b.n	80057a0 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	76bb      	strb	r3, [r7, #26]
        break;
 800579e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 811c 	beq.w	80059e0 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ac:	4a47      	ldr	r2, [pc, #284]	; (80058cc <UART_SetConfig+0x2d8>)
 80057ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057b2:	461a      	mov	r2, r3
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	4413      	add	r3, r2
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d305      	bcc.n	80057d8 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d902      	bls.n	80057de <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	76bb      	strb	r3, [r7, #26]
 80057dc:	e100      	b.n	80059e0 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f04f 0100 	mov.w	r1, #0
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ea:	4a38      	ldr	r2, [pc, #224]	; (80058cc <UART_SetConfig+0x2d8>)
 80057ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f04f 0400 	mov.w	r4, #0
 80057f6:	461a      	mov	r2, r3
 80057f8:	4623      	mov	r3, r4
 80057fa:	f7fa fcbf 	bl	800017c <__aeabi_uldivmod>
 80057fe:	4603      	mov	r3, r0
 8005800:	460c      	mov	r4, r1
 8005802:	4619      	mov	r1, r3
 8005804:	4622      	mov	r2, r4
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	f04f 0400 	mov.w	r4, #0
 800580e:	0214      	lsls	r4, r2, #8
 8005810:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005814:	020b      	lsls	r3, r1, #8
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6852      	ldr	r2, [r2, #4]
 800581a:	0852      	lsrs	r2, r2, #1
 800581c:	4611      	mov	r1, r2
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	eb13 0b01 	adds.w	fp, r3, r1
 8005826:	eb44 0c02 	adc.w	ip, r4, r2
 800582a:	4658      	mov	r0, fp
 800582c:	4661      	mov	r1, ip
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	f04f 0400 	mov.w	r4, #0
 8005836:	461a      	mov	r2, r3
 8005838:	4623      	mov	r3, r4
 800583a:	f7fa fc9f 	bl	800017c <__aeabi_uldivmod>
 800583e:	4603      	mov	r3, r0
 8005840:	460c      	mov	r4, r1
 8005842:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800584a:	d308      	bcc.n	800585e <UART_SetConfig+0x26a>
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005852:	d204      	bcs.n	800585e <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	60da      	str	r2, [r3, #12]
 800585c:	e0c0      	b.n	80059e0 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	76bb      	strb	r3, [r7, #26]
 8005862:	e0bd      	b.n	80059e0 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800586c:	d169      	bne.n	8005942 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800586e:	7efb      	ldrb	r3, [r7, #27]
 8005870:	3b01      	subs	r3, #1
 8005872:	2b07      	cmp	r3, #7
 8005874:	d82c      	bhi.n	80058d0 <UART_SetConfig+0x2dc>
 8005876:	a201      	add	r2, pc, #4	; (adr r2, 800587c <UART_SetConfig+0x288>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	0800589d 	.word	0x0800589d
 8005880:	080058a5 	.word	0x080058a5
 8005884:	080058d1 	.word	0x080058d1
 8005888:	080058ab 	.word	0x080058ab
 800588c:	080058d1 	.word	0x080058d1
 8005890:	080058d1 	.word	0x080058d1
 8005894:	080058d1 	.word	0x080058d1
 8005898:	080058b3 	.word	0x080058b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800589c:	f7fe ff1e 	bl	80046dc <HAL_RCC_GetPCLK2Freq>
 80058a0:	6178      	str	r0, [r7, #20]
        break;
 80058a2:	e01a      	b.n	80058da <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058a4:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <UART_SetConfig+0x2d4>)
 80058a6:	617b      	str	r3, [r7, #20]
        break;
 80058a8:	e017      	b.n	80058da <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058aa:	f7fe fe83 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 80058ae:	6178      	str	r0, [r7, #20]
        break;
 80058b0:	e013      	b.n	80058da <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058b6:	617b      	str	r3, [r7, #20]
        break;
 80058b8:	e00f      	b.n	80058da <UART_SetConfig+0x2e6>
 80058ba:	bf00      	nop
 80058bc:	cfff69f3 	.word	0xcfff69f3
 80058c0:	40008000 	.word	0x40008000
 80058c4:	40013800 	.word	0x40013800
 80058c8:	00f42400 	.word	0x00f42400
 80058cc:	08006a88 	.word	0x08006a88
      default:
        pclk = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	76bb      	strb	r3, [r7, #26]
        break;
 80058d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d07f      	beq.n	80059e0 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	4a48      	ldr	r2, [pc, #288]	; (8005a08 <UART_SetConfig+0x414>)
 80058e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058ea:	461a      	mov	r2, r3
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80058f2:	005a      	lsls	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	441a      	add	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	fbb2 f3f3 	udiv	r3, r2, r3
 8005904:	b29b      	uxth	r3, r3
 8005906:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	2b0f      	cmp	r3, #15
 800590c:	d916      	bls.n	800593c <UART_SetConfig+0x348>
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005914:	d212      	bcs.n	800593c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f023 030f 	bic.w	r3, r3, #15
 800591e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	085b      	lsrs	r3, r3, #1
 8005924:	b29b      	uxth	r3, r3
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	b29a      	uxth	r2, r3
 800592c:	89fb      	ldrh	r3, [r7, #14]
 800592e:	4313      	orrs	r3, r2
 8005930:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	89fa      	ldrh	r2, [r7, #14]
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	e051      	b.n	80059e0 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	76bb      	strb	r3, [r7, #26]
 8005940:	e04e      	b.n	80059e0 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005942:	7efb      	ldrb	r3, [r7, #27]
 8005944:	3b01      	subs	r3, #1
 8005946:	2b07      	cmp	r3, #7
 8005948:	d821      	bhi.n	800598e <UART_SetConfig+0x39a>
 800594a:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <UART_SetConfig+0x35c>)
 800594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005950:	08005971 	.word	0x08005971
 8005954:	08005979 	.word	0x08005979
 8005958:	0800598f 	.word	0x0800598f
 800595c:	0800597f 	.word	0x0800597f
 8005960:	0800598f 	.word	0x0800598f
 8005964:	0800598f 	.word	0x0800598f
 8005968:	0800598f 	.word	0x0800598f
 800596c:	08005987 	.word	0x08005987
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005970:	f7fe feb4 	bl	80046dc <HAL_RCC_GetPCLK2Freq>
 8005974:	6178      	str	r0, [r7, #20]
        break;
 8005976:	e00f      	b.n	8005998 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005978:	4b24      	ldr	r3, [pc, #144]	; (8005a0c <UART_SetConfig+0x418>)
 800597a:	617b      	str	r3, [r7, #20]
        break;
 800597c:	e00c      	b.n	8005998 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800597e:	f7fe fe19 	bl	80045b4 <HAL_RCC_GetSysClockFreq>
 8005982:	6178      	str	r0, [r7, #20]
        break;
 8005984:	e008      	b.n	8005998 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800598a:	617b      	str	r3, [r7, #20]
        break;
 800598c:	e004      	b.n	8005998 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	76bb      	strb	r3, [r7, #26]
        break;
 8005996:	bf00      	nop
    }

    if (pclk != 0U)
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d020      	beq.n	80059e0 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	4a19      	ldr	r2, [pc, #100]	; (8005a08 <UART_SetConfig+0x414>)
 80059a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059a8:	461a      	mov	r2, r3
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	fbb3 f2f2 	udiv	r2, r3, r2
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	085b      	lsrs	r3, r3, #1
 80059b6:	441a      	add	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b0f      	cmp	r3, #15
 80059c8:	d908      	bls.n	80059dc <UART_SetConfig+0x3e8>
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059d0:	d204      	bcs.n	80059dc <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	60da      	str	r2, [r3, #12]
 80059da:	e001      	b.n	80059e0 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80059fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005a08:	08006a88 	.word	0x08006a88
 8005a0c:	00f42400 	.word	0x00f42400

08005a10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01a      	beq.n	8005b26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b0e:	d10a      	bne.n	8005b26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00a      	beq.n	8005b48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	430a      	orrs	r2, r1
 8005b46:	605a      	str	r2, [r3, #4]
  }
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005b64:	f7fb face 	bl	8001104 <HAL_GetTick>
 8005b68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0308 	and.w	r3, r3, #8
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d10e      	bne.n	8005b96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f82c 	bl	8005be4 <UART_WaitOnFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e022      	b.n	8005bdc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b04      	cmp	r3, #4
 8005ba2:	d10e      	bne.n	8005bc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ba4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f816 	bl	8005be4 <UART_WaitOnFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e00c      	b.n	8005bdc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf4:	e062      	b.n	8005cbc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d05e      	beq.n	8005cbc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfe:	f7fb fa81 	bl	8001104 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	69ba      	ldr	r2, [r7, #24]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d302      	bcc.n	8005c14 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d11d      	bne.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c22:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0201 	bic.w	r2, r2, #1
 8005c32:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2220      	movs	r2, #32
 8005c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e045      	b.n	8005cdc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0304 	and.w	r3, r3, #4
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d02e      	beq.n	8005cbc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c6c:	d126      	bne.n	8005cbc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c76:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c86:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2220      	movs	r2, #32
 8005cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e00f      	b.n	8005cdc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69da      	ldr	r2, [r3, #28]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	68ba      	ldr	r2, [r7, #8]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	bf0c      	ite	eq
 8005ccc:	2301      	moveq	r3, #1
 8005cce:	2300      	movne	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	79fb      	ldrb	r3, [r7, #7]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d08d      	beq.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005cfa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2220      	movs	r2, #32
 8005d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b084      	sub	sp, #16
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f7ff fc49 	bl	80055e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d6c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff fc25 	bl	80055cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005d92:	bf00      	nop
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b083      	sub	sp, #12
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dc6:	b480      	push	{r7}
 8005dc8:	b085      	sub	sp, #20
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d101      	bne.n	8005ddc <HAL_UARTEx_DisableFifoMode+0x16>
 8005dd8:	2302      	movs	r3, #2
 8005dda:	e027      	b.n	8005e2c <HAL_UARTEx_DisableFifoMode+0x66>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2224      	movs	r2, #36	; 0x24
 8005de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0201 	bic.w	r2, r2, #1
 8005e02:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e0a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e02d      	b.n	8005eac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2224      	movs	r2, #36	; 0x24
 8005e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0201 	bic.w	r2, r2, #1
 8005e76:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f84f 	bl	8005f30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d101      	bne.n	8005ecc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ec8:	2302      	movs	r3, #2
 8005eca:	e02d      	b.n	8005f28 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2224      	movs	r2, #36	; 0x24
 8005ed8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f022 0201 	bic.w	r2, r2, #1
 8005ef2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f811 	bl	8005f30 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b089      	sub	sp, #36	; 0x24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005f38:	4a2f      	ldr	r2, [pc, #188]	; (8005ff8 <UARTEx_SetNbDataToProcess+0xc8>)
 8005f3a:	f107 0314 	add.w	r3, r7, #20
 8005f3e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f42:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005f46:	4a2d      	ldr	r2, [pc, #180]	; (8005ffc <UARTEx_SetNbDataToProcess+0xcc>)
 8005f48:	f107 030c 	add.w	r3, r7, #12
 8005f4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f50:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d108      	bne.n	8005f6e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f6c:	e03d      	b.n	8005fea <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f6e:	2308      	movs	r3, #8
 8005f70:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f72:	2308      	movs	r3, #8
 8005f74:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	0e5b      	lsrs	r3, r3, #25
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f003 0307 	and.w	r3, r3, #7
 8005f84:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	0f5b      	lsrs	r3, r3, #29
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005f96:	7fbb      	ldrb	r3, [r7, #30]
 8005f98:	7f3a      	ldrb	r2, [r7, #28]
 8005f9a:	f107 0120 	add.w	r1, r7, #32
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005fa4:	fb02 f303 	mul.w	r3, r2, r3
 8005fa8:	7f3a      	ldrb	r2, [r7, #28]
 8005faa:	f107 0120 	add.w	r1, r7, #32
 8005fae:	440a      	add	r2, r1
 8005fb0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005fb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005fc0:	7ffb      	ldrb	r3, [r7, #31]
 8005fc2:	7f7a      	ldrb	r2, [r7, #29]
 8005fc4:	f107 0120 	add.w	r1, r7, #32
 8005fc8:	440a      	add	r2, r1
 8005fca:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005fce:	fb02 f303 	mul.w	r3, r2, r3
 8005fd2:	7f7a      	ldrb	r2, [r7, #29]
 8005fd4:	f107 0120 	add.w	r1, r7, #32
 8005fd8:	440a      	add	r2, r1
 8005fda:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005fde:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005fea:	bf00      	nop
 8005fec:	3724      	adds	r7, #36	; 0x24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
 8005ff6:	bf00      	nop
 8005ff8:	080069d8 	.word	0x080069d8
 8005ffc:	080069e0 	.word	0x080069e0

08006000 <__errno>:
 8006000:	4b01      	ldr	r3, [pc, #4]	; (8006008 <__errno+0x8>)
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000028 	.word	0x20000028

0800600c <__libc_init_array>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	4e0d      	ldr	r6, [pc, #52]	; (8006044 <__libc_init_array+0x38>)
 8006010:	4c0d      	ldr	r4, [pc, #52]	; (8006048 <__libc_init_array+0x3c>)
 8006012:	1ba4      	subs	r4, r4, r6
 8006014:	10a4      	asrs	r4, r4, #2
 8006016:	2500      	movs	r5, #0
 8006018:	42a5      	cmp	r5, r4
 800601a:	d109      	bne.n	8006030 <__libc_init_array+0x24>
 800601c:	4e0b      	ldr	r6, [pc, #44]	; (800604c <__libc_init_array+0x40>)
 800601e:	4c0c      	ldr	r4, [pc, #48]	; (8006050 <__libc_init_array+0x44>)
 8006020:	f000 fc88 	bl	8006934 <_init>
 8006024:	1ba4      	subs	r4, r4, r6
 8006026:	10a4      	asrs	r4, r4, #2
 8006028:	2500      	movs	r5, #0
 800602a:	42a5      	cmp	r5, r4
 800602c:	d105      	bne.n	800603a <__libc_init_array+0x2e>
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006034:	4798      	blx	r3
 8006036:	3501      	adds	r5, #1
 8006038:	e7ee      	b.n	8006018 <__libc_init_array+0xc>
 800603a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800603e:	4798      	blx	r3
 8006040:	3501      	adds	r5, #1
 8006042:	e7f2      	b.n	800602a <__libc_init_array+0x1e>
 8006044:	08006b0c 	.word	0x08006b0c
 8006048:	08006b0c 	.word	0x08006b0c
 800604c:	08006b0c 	.word	0x08006b0c
 8006050:	08006b10 	.word	0x08006b10

08006054 <memset>:
 8006054:	4402      	add	r2, r0
 8006056:	4603      	mov	r3, r0
 8006058:	4293      	cmp	r3, r2
 800605a:	d100      	bne.n	800605e <memset+0xa>
 800605c:	4770      	bx	lr
 800605e:	f803 1b01 	strb.w	r1, [r3], #1
 8006062:	e7f9      	b.n	8006058 <memset+0x4>

08006064 <_puts_r>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	460e      	mov	r6, r1
 8006068:	4605      	mov	r5, r0
 800606a:	b118      	cbz	r0, 8006074 <_puts_r+0x10>
 800606c:	6983      	ldr	r3, [r0, #24]
 800606e:	b90b      	cbnz	r3, 8006074 <_puts_r+0x10>
 8006070:	f000 fa0c 	bl	800648c <__sinit>
 8006074:	69ab      	ldr	r3, [r5, #24]
 8006076:	68ac      	ldr	r4, [r5, #8]
 8006078:	b913      	cbnz	r3, 8006080 <_puts_r+0x1c>
 800607a:	4628      	mov	r0, r5
 800607c:	f000 fa06 	bl	800648c <__sinit>
 8006080:	4b23      	ldr	r3, [pc, #140]	; (8006110 <_puts_r+0xac>)
 8006082:	429c      	cmp	r4, r3
 8006084:	d117      	bne.n	80060b6 <_puts_r+0x52>
 8006086:	686c      	ldr	r4, [r5, #4]
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	071b      	lsls	r3, r3, #28
 800608c:	d51d      	bpl.n	80060ca <_puts_r+0x66>
 800608e:	6923      	ldr	r3, [r4, #16]
 8006090:	b1db      	cbz	r3, 80060ca <_puts_r+0x66>
 8006092:	3e01      	subs	r6, #1
 8006094:	68a3      	ldr	r3, [r4, #8]
 8006096:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800609a:	3b01      	subs	r3, #1
 800609c:	60a3      	str	r3, [r4, #8]
 800609e:	b9e9      	cbnz	r1, 80060dc <_puts_r+0x78>
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	da2e      	bge.n	8006102 <_puts_r+0x9e>
 80060a4:	4622      	mov	r2, r4
 80060a6:	210a      	movs	r1, #10
 80060a8:	4628      	mov	r0, r5
 80060aa:	f000 f83f 	bl	800612c <__swbuf_r>
 80060ae:	3001      	adds	r0, #1
 80060b0:	d011      	beq.n	80060d6 <_puts_r+0x72>
 80060b2:	200a      	movs	r0, #10
 80060b4:	e011      	b.n	80060da <_puts_r+0x76>
 80060b6:	4b17      	ldr	r3, [pc, #92]	; (8006114 <_puts_r+0xb0>)
 80060b8:	429c      	cmp	r4, r3
 80060ba:	d101      	bne.n	80060c0 <_puts_r+0x5c>
 80060bc:	68ac      	ldr	r4, [r5, #8]
 80060be:	e7e3      	b.n	8006088 <_puts_r+0x24>
 80060c0:	4b15      	ldr	r3, [pc, #84]	; (8006118 <_puts_r+0xb4>)
 80060c2:	429c      	cmp	r4, r3
 80060c4:	bf08      	it	eq
 80060c6:	68ec      	ldreq	r4, [r5, #12]
 80060c8:	e7de      	b.n	8006088 <_puts_r+0x24>
 80060ca:	4621      	mov	r1, r4
 80060cc:	4628      	mov	r0, r5
 80060ce:	f000 f87f 	bl	80061d0 <__swsetup_r>
 80060d2:	2800      	cmp	r0, #0
 80060d4:	d0dd      	beq.n	8006092 <_puts_r+0x2e>
 80060d6:	f04f 30ff 	mov.w	r0, #4294967295
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	2b00      	cmp	r3, #0
 80060de:	da04      	bge.n	80060ea <_puts_r+0x86>
 80060e0:	69a2      	ldr	r2, [r4, #24]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	dc06      	bgt.n	80060f4 <_puts_r+0x90>
 80060e6:	290a      	cmp	r1, #10
 80060e8:	d004      	beq.n	80060f4 <_puts_r+0x90>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	1c5a      	adds	r2, r3, #1
 80060ee:	6022      	str	r2, [r4, #0]
 80060f0:	7019      	strb	r1, [r3, #0]
 80060f2:	e7cf      	b.n	8006094 <_puts_r+0x30>
 80060f4:	4622      	mov	r2, r4
 80060f6:	4628      	mov	r0, r5
 80060f8:	f000 f818 	bl	800612c <__swbuf_r>
 80060fc:	3001      	adds	r0, #1
 80060fe:	d1c9      	bne.n	8006094 <_puts_r+0x30>
 8006100:	e7e9      	b.n	80060d6 <_puts_r+0x72>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	200a      	movs	r0, #10
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	6022      	str	r2, [r4, #0]
 800610a:	7018      	strb	r0, [r3, #0]
 800610c:	e7e5      	b.n	80060da <_puts_r+0x76>
 800610e:	bf00      	nop
 8006110:	08006ac4 	.word	0x08006ac4
 8006114:	08006ae4 	.word	0x08006ae4
 8006118:	08006aa4 	.word	0x08006aa4

0800611c <puts>:
 800611c:	4b02      	ldr	r3, [pc, #8]	; (8006128 <puts+0xc>)
 800611e:	4601      	mov	r1, r0
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	f7ff bf9f 	b.w	8006064 <_puts_r>
 8006126:	bf00      	nop
 8006128:	20000028 	.word	0x20000028

0800612c <__swbuf_r>:
 800612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612e:	460e      	mov	r6, r1
 8006130:	4614      	mov	r4, r2
 8006132:	4605      	mov	r5, r0
 8006134:	b118      	cbz	r0, 800613e <__swbuf_r+0x12>
 8006136:	6983      	ldr	r3, [r0, #24]
 8006138:	b90b      	cbnz	r3, 800613e <__swbuf_r+0x12>
 800613a:	f000 f9a7 	bl	800648c <__sinit>
 800613e:	4b21      	ldr	r3, [pc, #132]	; (80061c4 <__swbuf_r+0x98>)
 8006140:	429c      	cmp	r4, r3
 8006142:	d12a      	bne.n	800619a <__swbuf_r+0x6e>
 8006144:	686c      	ldr	r4, [r5, #4]
 8006146:	69a3      	ldr	r3, [r4, #24]
 8006148:	60a3      	str	r3, [r4, #8]
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	071a      	lsls	r2, r3, #28
 800614e:	d52e      	bpl.n	80061ae <__swbuf_r+0x82>
 8006150:	6923      	ldr	r3, [r4, #16]
 8006152:	b363      	cbz	r3, 80061ae <__swbuf_r+0x82>
 8006154:	6923      	ldr	r3, [r4, #16]
 8006156:	6820      	ldr	r0, [r4, #0]
 8006158:	1ac0      	subs	r0, r0, r3
 800615a:	6963      	ldr	r3, [r4, #20]
 800615c:	b2f6      	uxtb	r6, r6
 800615e:	4283      	cmp	r3, r0
 8006160:	4637      	mov	r7, r6
 8006162:	dc04      	bgt.n	800616e <__swbuf_r+0x42>
 8006164:	4621      	mov	r1, r4
 8006166:	4628      	mov	r0, r5
 8006168:	f000 f926 	bl	80063b8 <_fflush_r>
 800616c:	bb28      	cbnz	r0, 80061ba <__swbuf_r+0x8e>
 800616e:	68a3      	ldr	r3, [r4, #8]
 8006170:	3b01      	subs	r3, #1
 8006172:	60a3      	str	r3, [r4, #8]
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	6022      	str	r2, [r4, #0]
 800617a:	701e      	strb	r6, [r3, #0]
 800617c:	6963      	ldr	r3, [r4, #20]
 800617e:	3001      	adds	r0, #1
 8006180:	4283      	cmp	r3, r0
 8006182:	d004      	beq.n	800618e <__swbuf_r+0x62>
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	07db      	lsls	r3, r3, #31
 8006188:	d519      	bpl.n	80061be <__swbuf_r+0x92>
 800618a:	2e0a      	cmp	r6, #10
 800618c:	d117      	bne.n	80061be <__swbuf_r+0x92>
 800618e:	4621      	mov	r1, r4
 8006190:	4628      	mov	r0, r5
 8006192:	f000 f911 	bl	80063b8 <_fflush_r>
 8006196:	b190      	cbz	r0, 80061be <__swbuf_r+0x92>
 8006198:	e00f      	b.n	80061ba <__swbuf_r+0x8e>
 800619a:	4b0b      	ldr	r3, [pc, #44]	; (80061c8 <__swbuf_r+0x9c>)
 800619c:	429c      	cmp	r4, r3
 800619e:	d101      	bne.n	80061a4 <__swbuf_r+0x78>
 80061a0:	68ac      	ldr	r4, [r5, #8]
 80061a2:	e7d0      	b.n	8006146 <__swbuf_r+0x1a>
 80061a4:	4b09      	ldr	r3, [pc, #36]	; (80061cc <__swbuf_r+0xa0>)
 80061a6:	429c      	cmp	r4, r3
 80061a8:	bf08      	it	eq
 80061aa:	68ec      	ldreq	r4, [r5, #12]
 80061ac:	e7cb      	b.n	8006146 <__swbuf_r+0x1a>
 80061ae:	4621      	mov	r1, r4
 80061b0:	4628      	mov	r0, r5
 80061b2:	f000 f80d 	bl	80061d0 <__swsetup_r>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	d0cc      	beq.n	8006154 <__swbuf_r+0x28>
 80061ba:	f04f 37ff 	mov.w	r7, #4294967295
 80061be:	4638      	mov	r0, r7
 80061c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061c2:	bf00      	nop
 80061c4:	08006ac4 	.word	0x08006ac4
 80061c8:	08006ae4 	.word	0x08006ae4
 80061cc:	08006aa4 	.word	0x08006aa4

080061d0 <__swsetup_r>:
 80061d0:	4b32      	ldr	r3, [pc, #200]	; (800629c <__swsetup_r+0xcc>)
 80061d2:	b570      	push	{r4, r5, r6, lr}
 80061d4:	681d      	ldr	r5, [r3, #0]
 80061d6:	4606      	mov	r6, r0
 80061d8:	460c      	mov	r4, r1
 80061da:	b125      	cbz	r5, 80061e6 <__swsetup_r+0x16>
 80061dc:	69ab      	ldr	r3, [r5, #24]
 80061de:	b913      	cbnz	r3, 80061e6 <__swsetup_r+0x16>
 80061e0:	4628      	mov	r0, r5
 80061e2:	f000 f953 	bl	800648c <__sinit>
 80061e6:	4b2e      	ldr	r3, [pc, #184]	; (80062a0 <__swsetup_r+0xd0>)
 80061e8:	429c      	cmp	r4, r3
 80061ea:	d10f      	bne.n	800620c <__swsetup_r+0x3c>
 80061ec:	686c      	ldr	r4, [r5, #4]
 80061ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	0715      	lsls	r5, r2, #28
 80061f6:	d42c      	bmi.n	8006252 <__swsetup_r+0x82>
 80061f8:	06d0      	lsls	r0, r2, #27
 80061fa:	d411      	bmi.n	8006220 <__swsetup_r+0x50>
 80061fc:	2209      	movs	r2, #9
 80061fe:	6032      	str	r2, [r6, #0]
 8006200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006204:	81a3      	strh	r3, [r4, #12]
 8006206:	f04f 30ff 	mov.w	r0, #4294967295
 800620a:	e03e      	b.n	800628a <__swsetup_r+0xba>
 800620c:	4b25      	ldr	r3, [pc, #148]	; (80062a4 <__swsetup_r+0xd4>)
 800620e:	429c      	cmp	r4, r3
 8006210:	d101      	bne.n	8006216 <__swsetup_r+0x46>
 8006212:	68ac      	ldr	r4, [r5, #8]
 8006214:	e7eb      	b.n	80061ee <__swsetup_r+0x1e>
 8006216:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <__swsetup_r+0xd8>)
 8006218:	429c      	cmp	r4, r3
 800621a:	bf08      	it	eq
 800621c:	68ec      	ldreq	r4, [r5, #12]
 800621e:	e7e6      	b.n	80061ee <__swsetup_r+0x1e>
 8006220:	0751      	lsls	r1, r2, #29
 8006222:	d512      	bpl.n	800624a <__swsetup_r+0x7a>
 8006224:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006226:	b141      	cbz	r1, 800623a <__swsetup_r+0x6a>
 8006228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800622c:	4299      	cmp	r1, r3
 800622e:	d002      	beq.n	8006236 <__swsetup_r+0x66>
 8006230:	4630      	mov	r0, r6
 8006232:	f000 fa19 	bl	8006668 <_free_r>
 8006236:	2300      	movs	r3, #0
 8006238:	6363      	str	r3, [r4, #52]	; 0x34
 800623a:	89a3      	ldrh	r3, [r4, #12]
 800623c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006240:	81a3      	strh	r3, [r4, #12]
 8006242:	2300      	movs	r3, #0
 8006244:	6063      	str	r3, [r4, #4]
 8006246:	6923      	ldr	r3, [r4, #16]
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	f043 0308 	orr.w	r3, r3, #8
 8006250:	81a3      	strh	r3, [r4, #12]
 8006252:	6923      	ldr	r3, [r4, #16]
 8006254:	b94b      	cbnz	r3, 800626a <__swsetup_r+0x9a>
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800625c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006260:	d003      	beq.n	800626a <__swsetup_r+0x9a>
 8006262:	4621      	mov	r1, r4
 8006264:	4630      	mov	r0, r6
 8006266:	f000 f9bf 	bl	80065e8 <__smakebuf_r>
 800626a:	89a2      	ldrh	r2, [r4, #12]
 800626c:	f012 0301 	ands.w	r3, r2, #1
 8006270:	d00c      	beq.n	800628c <__swsetup_r+0xbc>
 8006272:	2300      	movs	r3, #0
 8006274:	60a3      	str	r3, [r4, #8]
 8006276:	6963      	ldr	r3, [r4, #20]
 8006278:	425b      	negs	r3, r3
 800627a:	61a3      	str	r3, [r4, #24]
 800627c:	6923      	ldr	r3, [r4, #16]
 800627e:	b953      	cbnz	r3, 8006296 <__swsetup_r+0xc6>
 8006280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006284:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006288:	d1ba      	bne.n	8006200 <__swsetup_r+0x30>
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	0792      	lsls	r2, r2, #30
 800628e:	bf58      	it	pl
 8006290:	6963      	ldrpl	r3, [r4, #20]
 8006292:	60a3      	str	r3, [r4, #8]
 8006294:	e7f2      	b.n	800627c <__swsetup_r+0xac>
 8006296:	2000      	movs	r0, #0
 8006298:	e7f7      	b.n	800628a <__swsetup_r+0xba>
 800629a:	bf00      	nop
 800629c:	20000028 	.word	0x20000028
 80062a0:	08006ac4 	.word	0x08006ac4
 80062a4:	08006ae4 	.word	0x08006ae4
 80062a8:	08006aa4 	.word	0x08006aa4

080062ac <__sflush_r>:
 80062ac:	898a      	ldrh	r2, [r1, #12]
 80062ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b2:	4605      	mov	r5, r0
 80062b4:	0710      	lsls	r0, r2, #28
 80062b6:	460c      	mov	r4, r1
 80062b8:	d458      	bmi.n	800636c <__sflush_r+0xc0>
 80062ba:	684b      	ldr	r3, [r1, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	dc05      	bgt.n	80062cc <__sflush_r+0x20>
 80062c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	dc02      	bgt.n	80062cc <__sflush_r+0x20>
 80062c6:	2000      	movs	r0, #0
 80062c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062ce:	2e00      	cmp	r6, #0
 80062d0:	d0f9      	beq.n	80062c6 <__sflush_r+0x1a>
 80062d2:	2300      	movs	r3, #0
 80062d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062d8:	682f      	ldr	r7, [r5, #0]
 80062da:	6a21      	ldr	r1, [r4, #32]
 80062dc:	602b      	str	r3, [r5, #0]
 80062de:	d032      	beq.n	8006346 <__sflush_r+0x9a>
 80062e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	075a      	lsls	r2, r3, #29
 80062e6:	d505      	bpl.n	80062f4 <__sflush_r+0x48>
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	1ac0      	subs	r0, r0, r3
 80062ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062ee:	b10b      	cbz	r3, 80062f4 <__sflush_r+0x48>
 80062f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062f2:	1ac0      	subs	r0, r0, r3
 80062f4:	2300      	movs	r3, #0
 80062f6:	4602      	mov	r2, r0
 80062f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062fa:	6a21      	ldr	r1, [r4, #32]
 80062fc:	4628      	mov	r0, r5
 80062fe:	47b0      	blx	r6
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	d106      	bne.n	8006314 <__sflush_r+0x68>
 8006306:	6829      	ldr	r1, [r5, #0]
 8006308:	291d      	cmp	r1, #29
 800630a:	d848      	bhi.n	800639e <__sflush_r+0xf2>
 800630c:	4a29      	ldr	r2, [pc, #164]	; (80063b4 <__sflush_r+0x108>)
 800630e:	40ca      	lsrs	r2, r1
 8006310:	07d6      	lsls	r6, r2, #31
 8006312:	d544      	bpl.n	800639e <__sflush_r+0xf2>
 8006314:	2200      	movs	r2, #0
 8006316:	6062      	str	r2, [r4, #4]
 8006318:	04d9      	lsls	r1, r3, #19
 800631a:	6922      	ldr	r2, [r4, #16]
 800631c:	6022      	str	r2, [r4, #0]
 800631e:	d504      	bpl.n	800632a <__sflush_r+0x7e>
 8006320:	1c42      	adds	r2, r0, #1
 8006322:	d101      	bne.n	8006328 <__sflush_r+0x7c>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b903      	cbnz	r3, 800632a <__sflush_r+0x7e>
 8006328:	6560      	str	r0, [r4, #84]	; 0x54
 800632a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800632c:	602f      	str	r7, [r5, #0]
 800632e:	2900      	cmp	r1, #0
 8006330:	d0c9      	beq.n	80062c6 <__sflush_r+0x1a>
 8006332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006336:	4299      	cmp	r1, r3
 8006338:	d002      	beq.n	8006340 <__sflush_r+0x94>
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f994 	bl	8006668 <_free_r>
 8006340:	2000      	movs	r0, #0
 8006342:	6360      	str	r0, [r4, #52]	; 0x34
 8006344:	e7c0      	b.n	80062c8 <__sflush_r+0x1c>
 8006346:	2301      	movs	r3, #1
 8006348:	4628      	mov	r0, r5
 800634a:	47b0      	blx	r6
 800634c:	1c41      	adds	r1, r0, #1
 800634e:	d1c8      	bne.n	80062e2 <__sflush_r+0x36>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0c5      	beq.n	80062e2 <__sflush_r+0x36>
 8006356:	2b1d      	cmp	r3, #29
 8006358:	d001      	beq.n	800635e <__sflush_r+0xb2>
 800635a:	2b16      	cmp	r3, #22
 800635c:	d101      	bne.n	8006362 <__sflush_r+0xb6>
 800635e:	602f      	str	r7, [r5, #0]
 8006360:	e7b1      	b.n	80062c6 <__sflush_r+0x1a>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006368:	81a3      	strh	r3, [r4, #12]
 800636a:	e7ad      	b.n	80062c8 <__sflush_r+0x1c>
 800636c:	690f      	ldr	r7, [r1, #16]
 800636e:	2f00      	cmp	r7, #0
 8006370:	d0a9      	beq.n	80062c6 <__sflush_r+0x1a>
 8006372:	0793      	lsls	r3, r2, #30
 8006374:	680e      	ldr	r6, [r1, #0]
 8006376:	bf08      	it	eq
 8006378:	694b      	ldreq	r3, [r1, #20]
 800637a:	600f      	str	r7, [r1, #0]
 800637c:	bf18      	it	ne
 800637e:	2300      	movne	r3, #0
 8006380:	eba6 0807 	sub.w	r8, r6, r7
 8006384:	608b      	str	r3, [r1, #8]
 8006386:	f1b8 0f00 	cmp.w	r8, #0
 800638a:	dd9c      	ble.n	80062c6 <__sflush_r+0x1a>
 800638c:	4643      	mov	r3, r8
 800638e:	463a      	mov	r2, r7
 8006390:	6a21      	ldr	r1, [r4, #32]
 8006392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006394:	4628      	mov	r0, r5
 8006396:	47b0      	blx	r6
 8006398:	2800      	cmp	r0, #0
 800639a:	dc06      	bgt.n	80063aa <__sflush_r+0xfe>
 800639c:	89a3      	ldrh	r3, [r4, #12]
 800639e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a2:	81a3      	strh	r3, [r4, #12]
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295
 80063a8:	e78e      	b.n	80062c8 <__sflush_r+0x1c>
 80063aa:	4407      	add	r7, r0
 80063ac:	eba8 0800 	sub.w	r8, r8, r0
 80063b0:	e7e9      	b.n	8006386 <__sflush_r+0xda>
 80063b2:	bf00      	nop
 80063b4:	20400001 	.word	0x20400001

080063b8 <_fflush_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	690b      	ldr	r3, [r1, #16]
 80063bc:	4605      	mov	r5, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	b1db      	cbz	r3, 80063fa <_fflush_r+0x42>
 80063c2:	b118      	cbz	r0, 80063cc <_fflush_r+0x14>
 80063c4:	6983      	ldr	r3, [r0, #24]
 80063c6:	b90b      	cbnz	r3, 80063cc <_fflush_r+0x14>
 80063c8:	f000 f860 	bl	800648c <__sinit>
 80063cc:	4b0c      	ldr	r3, [pc, #48]	; (8006400 <_fflush_r+0x48>)
 80063ce:	429c      	cmp	r4, r3
 80063d0:	d109      	bne.n	80063e6 <_fflush_r+0x2e>
 80063d2:	686c      	ldr	r4, [r5, #4]
 80063d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d8:	b17b      	cbz	r3, 80063fa <_fflush_r+0x42>
 80063da:	4621      	mov	r1, r4
 80063dc:	4628      	mov	r0, r5
 80063de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063e2:	f7ff bf63 	b.w	80062ac <__sflush_r>
 80063e6:	4b07      	ldr	r3, [pc, #28]	; (8006404 <_fflush_r+0x4c>)
 80063e8:	429c      	cmp	r4, r3
 80063ea:	d101      	bne.n	80063f0 <_fflush_r+0x38>
 80063ec:	68ac      	ldr	r4, [r5, #8]
 80063ee:	e7f1      	b.n	80063d4 <_fflush_r+0x1c>
 80063f0:	4b05      	ldr	r3, [pc, #20]	; (8006408 <_fflush_r+0x50>)
 80063f2:	429c      	cmp	r4, r3
 80063f4:	bf08      	it	eq
 80063f6:	68ec      	ldreq	r4, [r5, #12]
 80063f8:	e7ec      	b.n	80063d4 <_fflush_r+0x1c>
 80063fa:	2000      	movs	r0, #0
 80063fc:	bd38      	pop	{r3, r4, r5, pc}
 80063fe:	bf00      	nop
 8006400:	08006ac4 	.word	0x08006ac4
 8006404:	08006ae4 	.word	0x08006ae4
 8006408:	08006aa4 	.word	0x08006aa4

0800640c <std>:
 800640c:	2300      	movs	r3, #0
 800640e:	b510      	push	{r4, lr}
 8006410:	4604      	mov	r4, r0
 8006412:	e9c0 3300 	strd	r3, r3, [r0]
 8006416:	6083      	str	r3, [r0, #8]
 8006418:	8181      	strh	r1, [r0, #12]
 800641a:	6643      	str	r3, [r0, #100]	; 0x64
 800641c:	81c2      	strh	r2, [r0, #14]
 800641e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006422:	6183      	str	r3, [r0, #24]
 8006424:	4619      	mov	r1, r3
 8006426:	2208      	movs	r2, #8
 8006428:	305c      	adds	r0, #92	; 0x5c
 800642a:	f7ff fe13 	bl	8006054 <memset>
 800642e:	4b05      	ldr	r3, [pc, #20]	; (8006444 <std+0x38>)
 8006430:	6263      	str	r3, [r4, #36]	; 0x24
 8006432:	4b05      	ldr	r3, [pc, #20]	; (8006448 <std+0x3c>)
 8006434:	62a3      	str	r3, [r4, #40]	; 0x28
 8006436:	4b05      	ldr	r3, [pc, #20]	; (800644c <std+0x40>)
 8006438:	62e3      	str	r3, [r4, #44]	; 0x2c
 800643a:	4b05      	ldr	r3, [pc, #20]	; (8006450 <std+0x44>)
 800643c:	6224      	str	r4, [r4, #32]
 800643e:	6323      	str	r3, [r4, #48]	; 0x30
 8006440:	bd10      	pop	{r4, pc}
 8006442:	bf00      	nop
 8006444:	080067d9 	.word	0x080067d9
 8006448:	080067fb 	.word	0x080067fb
 800644c:	08006833 	.word	0x08006833
 8006450:	08006857 	.word	0x08006857

08006454 <_cleanup_r>:
 8006454:	4901      	ldr	r1, [pc, #4]	; (800645c <_cleanup_r+0x8>)
 8006456:	f000 b885 	b.w	8006564 <_fwalk_reent>
 800645a:	bf00      	nop
 800645c:	080063b9 	.word	0x080063b9

08006460 <__sfmoreglue>:
 8006460:	b570      	push	{r4, r5, r6, lr}
 8006462:	1e4a      	subs	r2, r1, #1
 8006464:	2568      	movs	r5, #104	; 0x68
 8006466:	4355      	muls	r5, r2
 8006468:	460e      	mov	r6, r1
 800646a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800646e:	f000 f949 	bl	8006704 <_malloc_r>
 8006472:	4604      	mov	r4, r0
 8006474:	b140      	cbz	r0, 8006488 <__sfmoreglue+0x28>
 8006476:	2100      	movs	r1, #0
 8006478:	e9c0 1600 	strd	r1, r6, [r0]
 800647c:	300c      	adds	r0, #12
 800647e:	60a0      	str	r0, [r4, #8]
 8006480:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006484:	f7ff fde6 	bl	8006054 <memset>
 8006488:	4620      	mov	r0, r4
 800648a:	bd70      	pop	{r4, r5, r6, pc}

0800648c <__sinit>:
 800648c:	6983      	ldr	r3, [r0, #24]
 800648e:	b510      	push	{r4, lr}
 8006490:	4604      	mov	r4, r0
 8006492:	bb33      	cbnz	r3, 80064e2 <__sinit+0x56>
 8006494:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006498:	6503      	str	r3, [r0, #80]	; 0x50
 800649a:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <__sinit+0x58>)
 800649c:	4a12      	ldr	r2, [pc, #72]	; (80064e8 <__sinit+0x5c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6282      	str	r2, [r0, #40]	; 0x28
 80064a2:	4298      	cmp	r0, r3
 80064a4:	bf04      	itt	eq
 80064a6:	2301      	moveq	r3, #1
 80064a8:	6183      	streq	r3, [r0, #24]
 80064aa:	f000 f81f 	bl	80064ec <__sfp>
 80064ae:	6060      	str	r0, [r4, #4]
 80064b0:	4620      	mov	r0, r4
 80064b2:	f000 f81b 	bl	80064ec <__sfp>
 80064b6:	60a0      	str	r0, [r4, #8]
 80064b8:	4620      	mov	r0, r4
 80064ba:	f000 f817 	bl	80064ec <__sfp>
 80064be:	2200      	movs	r2, #0
 80064c0:	60e0      	str	r0, [r4, #12]
 80064c2:	2104      	movs	r1, #4
 80064c4:	6860      	ldr	r0, [r4, #4]
 80064c6:	f7ff ffa1 	bl	800640c <std>
 80064ca:	2201      	movs	r2, #1
 80064cc:	2109      	movs	r1, #9
 80064ce:	68a0      	ldr	r0, [r4, #8]
 80064d0:	f7ff ff9c 	bl	800640c <std>
 80064d4:	2202      	movs	r2, #2
 80064d6:	2112      	movs	r1, #18
 80064d8:	68e0      	ldr	r0, [r4, #12]
 80064da:	f7ff ff97 	bl	800640c <std>
 80064de:	2301      	movs	r3, #1
 80064e0:	61a3      	str	r3, [r4, #24]
 80064e2:	bd10      	pop	{r4, pc}
 80064e4:	08006aa0 	.word	0x08006aa0
 80064e8:	08006455 	.word	0x08006455

080064ec <__sfp>:
 80064ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ee:	4b1b      	ldr	r3, [pc, #108]	; (800655c <__sfp+0x70>)
 80064f0:	681e      	ldr	r6, [r3, #0]
 80064f2:	69b3      	ldr	r3, [r6, #24]
 80064f4:	4607      	mov	r7, r0
 80064f6:	b913      	cbnz	r3, 80064fe <__sfp+0x12>
 80064f8:	4630      	mov	r0, r6
 80064fa:	f7ff ffc7 	bl	800648c <__sinit>
 80064fe:	3648      	adds	r6, #72	; 0x48
 8006500:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006504:	3b01      	subs	r3, #1
 8006506:	d503      	bpl.n	8006510 <__sfp+0x24>
 8006508:	6833      	ldr	r3, [r6, #0]
 800650a:	b133      	cbz	r3, 800651a <__sfp+0x2e>
 800650c:	6836      	ldr	r6, [r6, #0]
 800650e:	e7f7      	b.n	8006500 <__sfp+0x14>
 8006510:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006514:	b16d      	cbz	r5, 8006532 <__sfp+0x46>
 8006516:	3468      	adds	r4, #104	; 0x68
 8006518:	e7f4      	b.n	8006504 <__sfp+0x18>
 800651a:	2104      	movs	r1, #4
 800651c:	4638      	mov	r0, r7
 800651e:	f7ff ff9f 	bl	8006460 <__sfmoreglue>
 8006522:	6030      	str	r0, [r6, #0]
 8006524:	2800      	cmp	r0, #0
 8006526:	d1f1      	bne.n	800650c <__sfp+0x20>
 8006528:	230c      	movs	r3, #12
 800652a:	603b      	str	r3, [r7, #0]
 800652c:	4604      	mov	r4, r0
 800652e:	4620      	mov	r0, r4
 8006530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006532:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <__sfp+0x74>)
 8006534:	6665      	str	r5, [r4, #100]	; 0x64
 8006536:	e9c4 5500 	strd	r5, r5, [r4]
 800653a:	60a5      	str	r5, [r4, #8]
 800653c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006540:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006544:	2208      	movs	r2, #8
 8006546:	4629      	mov	r1, r5
 8006548:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800654c:	f7ff fd82 	bl	8006054 <memset>
 8006550:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006554:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006558:	e7e9      	b.n	800652e <__sfp+0x42>
 800655a:	bf00      	nop
 800655c:	08006aa0 	.word	0x08006aa0
 8006560:	ffff0001 	.word	0xffff0001

08006564 <_fwalk_reent>:
 8006564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006568:	4680      	mov	r8, r0
 800656a:	4689      	mov	r9, r1
 800656c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006570:	2600      	movs	r6, #0
 8006572:	b914      	cbnz	r4, 800657a <_fwalk_reent+0x16>
 8006574:	4630      	mov	r0, r6
 8006576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800657a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800657e:	3f01      	subs	r7, #1
 8006580:	d501      	bpl.n	8006586 <_fwalk_reent+0x22>
 8006582:	6824      	ldr	r4, [r4, #0]
 8006584:	e7f5      	b.n	8006572 <_fwalk_reent+0xe>
 8006586:	89ab      	ldrh	r3, [r5, #12]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d907      	bls.n	800659c <_fwalk_reent+0x38>
 800658c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006590:	3301      	adds	r3, #1
 8006592:	d003      	beq.n	800659c <_fwalk_reent+0x38>
 8006594:	4629      	mov	r1, r5
 8006596:	4640      	mov	r0, r8
 8006598:	47c8      	blx	r9
 800659a:	4306      	orrs	r6, r0
 800659c:	3568      	adds	r5, #104	; 0x68
 800659e:	e7ee      	b.n	800657e <_fwalk_reent+0x1a>

080065a0 <__swhatbuf_r>:
 80065a0:	b570      	push	{r4, r5, r6, lr}
 80065a2:	460e      	mov	r6, r1
 80065a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065a8:	2900      	cmp	r1, #0
 80065aa:	b096      	sub	sp, #88	; 0x58
 80065ac:	4614      	mov	r4, r2
 80065ae:	461d      	mov	r5, r3
 80065b0:	da07      	bge.n	80065c2 <__swhatbuf_r+0x22>
 80065b2:	2300      	movs	r3, #0
 80065b4:	602b      	str	r3, [r5, #0]
 80065b6:	89b3      	ldrh	r3, [r6, #12]
 80065b8:	061a      	lsls	r2, r3, #24
 80065ba:	d410      	bmi.n	80065de <__swhatbuf_r+0x3e>
 80065bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065c0:	e00e      	b.n	80065e0 <__swhatbuf_r+0x40>
 80065c2:	466a      	mov	r2, sp
 80065c4:	f000 f96e 	bl	80068a4 <_fstat_r>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	dbf2      	blt.n	80065b2 <__swhatbuf_r+0x12>
 80065cc:	9a01      	ldr	r2, [sp, #4]
 80065ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065d6:	425a      	negs	r2, r3
 80065d8:	415a      	adcs	r2, r3
 80065da:	602a      	str	r2, [r5, #0]
 80065dc:	e7ee      	b.n	80065bc <__swhatbuf_r+0x1c>
 80065de:	2340      	movs	r3, #64	; 0x40
 80065e0:	2000      	movs	r0, #0
 80065e2:	6023      	str	r3, [r4, #0]
 80065e4:	b016      	add	sp, #88	; 0x58
 80065e6:	bd70      	pop	{r4, r5, r6, pc}

080065e8 <__smakebuf_r>:
 80065e8:	898b      	ldrh	r3, [r1, #12]
 80065ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80065ec:	079d      	lsls	r5, r3, #30
 80065ee:	4606      	mov	r6, r0
 80065f0:	460c      	mov	r4, r1
 80065f2:	d507      	bpl.n	8006604 <__smakebuf_r+0x1c>
 80065f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	6123      	str	r3, [r4, #16]
 80065fc:	2301      	movs	r3, #1
 80065fe:	6163      	str	r3, [r4, #20]
 8006600:	b002      	add	sp, #8
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	ab01      	add	r3, sp, #4
 8006606:	466a      	mov	r2, sp
 8006608:	f7ff ffca 	bl	80065a0 <__swhatbuf_r>
 800660c:	9900      	ldr	r1, [sp, #0]
 800660e:	4605      	mov	r5, r0
 8006610:	4630      	mov	r0, r6
 8006612:	f000 f877 	bl	8006704 <_malloc_r>
 8006616:	b948      	cbnz	r0, 800662c <__smakebuf_r+0x44>
 8006618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800661c:	059a      	lsls	r2, r3, #22
 800661e:	d4ef      	bmi.n	8006600 <__smakebuf_r+0x18>
 8006620:	f023 0303 	bic.w	r3, r3, #3
 8006624:	f043 0302 	orr.w	r3, r3, #2
 8006628:	81a3      	strh	r3, [r4, #12]
 800662a:	e7e3      	b.n	80065f4 <__smakebuf_r+0xc>
 800662c:	4b0d      	ldr	r3, [pc, #52]	; (8006664 <__smakebuf_r+0x7c>)
 800662e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	6020      	str	r0, [r4, #0]
 8006634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006638:	81a3      	strh	r3, [r4, #12]
 800663a:	9b00      	ldr	r3, [sp, #0]
 800663c:	6163      	str	r3, [r4, #20]
 800663e:	9b01      	ldr	r3, [sp, #4]
 8006640:	6120      	str	r0, [r4, #16]
 8006642:	b15b      	cbz	r3, 800665c <__smakebuf_r+0x74>
 8006644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006648:	4630      	mov	r0, r6
 800664a:	f000 f93d 	bl	80068c8 <_isatty_r>
 800664e:	b128      	cbz	r0, 800665c <__smakebuf_r+0x74>
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	f023 0303 	bic.w	r3, r3, #3
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	81a3      	strh	r3, [r4, #12]
 800665c:	89a3      	ldrh	r3, [r4, #12]
 800665e:	431d      	orrs	r5, r3
 8006660:	81a5      	strh	r5, [r4, #12]
 8006662:	e7cd      	b.n	8006600 <__smakebuf_r+0x18>
 8006664:	08006455 	.word	0x08006455

08006668 <_free_r>:
 8006668:	b538      	push	{r3, r4, r5, lr}
 800666a:	4605      	mov	r5, r0
 800666c:	2900      	cmp	r1, #0
 800666e:	d045      	beq.n	80066fc <_free_r+0x94>
 8006670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006674:	1f0c      	subs	r4, r1, #4
 8006676:	2b00      	cmp	r3, #0
 8006678:	bfb8      	it	lt
 800667a:	18e4      	addlt	r4, r4, r3
 800667c:	f000 f946 	bl	800690c <__malloc_lock>
 8006680:	4a1f      	ldr	r2, [pc, #124]	; (8006700 <_free_r+0x98>)
 8006682:	6813      	ldr	r3, [r2, #0]
 8006684:	4610      	mov	r0, r2
 8006686:	b933      	cbnz	r3, 8006696 <_free_r+0x2e>
 8006688:	6063      	str	r3, [r4, #4]
 800668a:	6014      	str	r4, [r2, #0]
 800668c:	4628      	mov	r0, r5
 800668e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006692:	f000 b93c 	b.w	800690e <__malloc_unlock>
 8006696:	42a3      	cmp	r3, r4
 8006698:	d90c      	bls.n	80066b4 <_free_r+0x4c>
 800669a:	6821      	ldr	r1, [r4, #0]
 800669c:	1862      	adds	r2, r4, r1
 800669e:	4293      	cmp	r3, r2
 80066a0:	bf04      	itt	eq
 80066a2:	681a      	ldreq	r2, [r3, #0]
 80066a4:	685b      	ldreq	r3, [r3, #4]
 80066a6:	6063      	str	r3, [r4, #4]
 80066a8:	bf04      	itt	eq
 80066aa:	1852      	addeq	r2, r2, r1
 80066ac:	6022      	streq	r2, [r4, #0]
 80066ae:	6004      	str	r4, [r0, #0]
 80066b0:	e7ec      	b.n	800668c <_free_r+0x24>
 80066b2:	4613      	mov	r3, r2
 80066b4:	685a      	ldr	r2, [r3, #4]
 80066b6:	b10a      	cbz	r2, 80066bc <_free_r+0x54>
 80066b8:	42a2      	cmp	r2, r4
 80066ba:	d9fa      	bls.n	80066b2 <_free_r+0x4a>
 80066bc:	6819      	ldr	r1, [r3, #0]
 80066be:	1858      	adds	r0, r3, r1
 80066c0:	42a0      	cmp	r0, r4
 80066c2:	d10b      	bne.n	80066dc <_free_r+0x74>
 80066c4:	6820      	ldr	r0, [r4, #0]
 80066c6:	4401      	add	r1, r0
 80066c8:	1858      	adds	r0, r3, r1
 80066ca:	4282      	cmp	r2, r0
 80066cc:	6019      	str	r1, [r3, #0]
 80066ce:	d1dd      	bne.n	800668c <_free_r+0x24>
 80066d0:	6810      	ldr	r0, [r2, #0]
 80066d2:	6852      	ldr	r2, [r2, #4]
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	4401      	add	r1, r0
 80066d8:	6019      	str	r1, [r3, #0]
 80066da:	e7d7      	b.n	800668c <_free_r+0x24>
 80066dc:	d902      	bls.n	80066e4 <_free_r+0x7c>
 80066de:	230c      	movs	r3, #12
 80066e0:	602b      	str	r3, [r5, #0]
 80066e2:	e7d3      	b.n	800668c <_free_r+0x24>
 80066e4:	6820      	ldr	r0, [r4, #0]
 80066e6:	1821      	adds	r1, r4, r0
 80066e8:	428a      	cmp	r2, r1
 80066ea:	bf04      	itt	eq
 80066ec:	6811      	ldreq	r1, [r2, #0]
 80066ee:	6852      	ldreq	r2, [r2, #4]
 80066f0:	6062      	str	r2, [r4, #4]
 80066f2:	bf04      	itt	eq
 80066f4:	1809      	addeq	r1, r1, r0
 80066f6:	6021      	streq	r1, [r4, #0]
 80066f8:	605c      	str	r4, [r3, #4]
 80066fa:	e7c7      	b.n	800668c <_free_r+0x24>
 80066fc:	bd38      	pop	{r3, r4, r5, pc}
 80066fe:	bf00      	nop
 8006700:	200000ac 	.word	0x200000ac

08006704 <_malloc_r>:
 8006704:	b570      	push	{r4, r5, r6, lr}
 8006706:	1ccd      	adds	r5, r1, #3
 8006708:	f025 0503 	bic.w	r5, r5, #3
 800670c:	3508      	adds	r5, #8
 800670e:	2d0c      	cmp	r5, #12
 8006710:	bf38      	it	cc
 8006712:	250c      	movcc	r5, #12
 8006714:	2d00      	cmp	r5, #0
 8006716:	4606      	mov	r6, r0
 8006718:	db01      	blt.n	800671e <_malloc_r+0x1a>
 800671a:	42a9      	cmp	r1, r5
 800671c:	d903      	bls.n	8006726 <_malloc_r+0x22>
 800671e:	230c      	movs	r3, #12
 8006720:	6033      	str	r3, [r6, #0]
 8006722:	2000      	movs	r0, #0
 8006724:	bd70      	pop	{r4, r5, r6, pc}
 8006726:	f000 f8f1 	bl	800690c <__malloc_lock>
 800672a:	4a21      	ldr	r2, [pc, #132]	; (80067b0 <_malloc_r+0xac>)
 800672c:	6814      	ldr	r4, [r2, #0]
 800672e:	4621      	mov	r1, r4
 8006730:	b991      	cbnz	r1, 8006758 <_malloc_r+0x54>
 8006732:	4c20      	ldr	r4, [pc, #128]	; (80067b4 <_malloc_r+0xb0>)
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	b91b      	cbnz	r3, 8006740 <_malloc_r+0x3c>
 8006738:	4630      	mov	r0, r6
 800673a:	f000 f83d 	bl	80067b8 <_sbrk_r>
 800673e:	6020      	str	r0, [r4, #0]
 8006740:	4629      	mov	r1, r5
 8006742:	4630      	mov	r0, r6
 8006744:	f000 f838 	bl	80067b8 <_sbrk_r>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d124      	bne.n	8006796 <_malloc_r+0x92>
 800674c:	230c      	movs	r3, #12
 800674e:	6033      	str	r3, [r6, #0]
 8006750:	4630      	mov	r0, r6
 8006752:	f000 f8dc 	bl	800690e <__malloc_unlock>
 8006756:	e7e4      	b.n	8006722 <_malloc_r+0x1e>
 8006758:	680b      	ldr	r3, [r1, #0]
 800675a:	1b5b      	subs	r3, r3, r5
 800675c:	d418      	bmi.n	8006790 <_malloc_r+0x8c>
 800675e:	2b0b      	cmp	r3, #11
 8006760:	d90f      	bls.n	8006782 <_malloc_r+0x7e>
 8006762:	600b      	str	r3, [r1, #0]
 8006764:	50cd      	str	r5, [r1, r3]
 8006766:	18cc      	adds	r4, r1, r3
 8006768:	4630      	mov	r0, r6
 800676a:	f000 f8d0 	bl	800690e <__malloc_unlock>
 800676e:	f104 000b 	add.w	r0, r4, #11
 8006772:	1d23      	adds	r3, r4, #4
 8006774:	f020 0007 	bic.w	r0, r0, #7
 8006778:	1ac3      	subs	r3, r0, r3
 800677a:	d0d3      	beq.n	8006724 <_malloc_r+0x20>
 800677c:	425a      	negs	r2, r3
 800677e:	50e2      	str	r2, [r4, r3]
 8006780:	e7d0      	b.n	8006724 <_malloc_r+0x20>
 8006782:	428c      	cmp	r4, r1
 8006784:	684b      	ldr	r3, [r1, #4]
 8006786:	bf16      	itet	ne
 8006788:	6063      	strne	r3, [r4, #4]
 800678a:	6013      	streq	r3, [r2, #0]
 800678c:	460c      	movne	r4, r1
 800678e:	e7eb      	b.n	8006768 <_malloc_r+0x64>
 8006790:	460c      	mov	r4, r1
 8006792:	6849      	ldr	r1, [r1, #4]
 8006794:	e7cc      	b.n	8006730 <_malloc_r+0x2c>
 8006796:	1cc4      	adds	r4, r0, #3
 8006798:	f024 0403 	bic.w	r4, r4, #3
 800679c:	42a0      	cmp	r0, r4
 800679e:	d005      	beq.n	80067ac <_malloc_r+0xa8>
 80067a0:	1a21      	subs	r1, r4, r0
 80067a2:	4630      	mov	r0, r6
 80067a4:	f000 f808 	bl	80067b8 <_sbrk_r>
 80067a8:	3001      	adds	r0, #1
 80067aa:	d0cf      	beq.n	800674c <_malloc_r+0x48>
 80067ac:	6025      	str	r5, [r4, #0]
 80067ae:	e7db      	b.n	8006768 <_malloc_r+0x64>
 80067b0:	200000ac 	.word	0x200000ac
 80067b4:	200000b0 	.word	0x200000b0

080067b8 <_sbrk_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4c06      	ldr	r4, [pc, #24]	; (80067d4 <_sbrk_r+0x1c>)
 80067bc:	2300      	movs	r3, #0
 80067be:	4605      	mov	r5, r0
 80067c0:	4608      	mov	r0, r1
 80067c2:	6023      	str	r3, [r4, #0]
 80067c4:	f7fa faca 	bl	8000d5c <_sbrk>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_sbrk_r+0x1a>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_sbrk_r+0x1a>
 80067d0:	602b      	str	r3, [r5, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	20000250 	.word	0x20000250

080067d8 <__sread>:
 80067d8:	b510      	push	{r4, lr}
 80067da:	460c      	mov	r4, r1
 80067dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067e0:	f000 f896 	bl	8006910 <_read_r>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	bfab      	itete	ge
 80067e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067ea:	89a3      	ldrhlt	r3, [r4, #12]
 80067ec:	181b      	addge	r3, r3, r0
 80067ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067f2:	bfac      	ite	ge
 80067f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80067f6:	81a3      	strhlt	r3, [r4, #12]
 80067f8:	bd10      	pop	{r4, pc}

080067fa <__swrite>:
 80067fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067fe:	461f      	mov	r7, r3
 8006800:	898b      	ldrh	r3, [r1, #12]
 8006802:	05db      	lsls	r3, r3, #23
 8006804:	4605      	mov	r5, r0
 8006806:	460c      	mov	r4, r1
 8006808:	4616      	mov	r6, r2
 800680a:	d505      	bpl.n	8006818 <__swrite+0x1e>
 800680c:	2302      	movs	r3, #2
 800680e:	2200      	movs	r2, #0
 8006810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006814:	f000 f868 	bl	80068e8 <_lseek_r>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800681e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006822:	81a3      	strh	r3, [r4, #12]
 8006824:	4632      	mov	r2, r6
 8006826:	463b      	mov	r3, r7
 8006828:	4628      	mov	r0, r5
 800682a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800682e:	f000 b817 	b.w	8006860 <_write_r>

08006832 <__sseek>:
 8006832:	b510      	push	{r4, lr}
 8006834:	460c      	mov	r4, r1
 8006836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683a:	f000 f855 	bl	80068e8 <_lseek_r>
 800683e:	1c43      	adds	r3, r0, #1
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	bf15      	itete	ne
 8006844:	6560      	strne	r0, [r4, #84]	; 0x54
 8006846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800684a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800684e:	81a3      	strheq	r3, [r4, #12]
 8006850:	bf18      	it	ne
 8006852:	81a3      	strhne	r3, [r4, #12]
 8006854:	bd10      	pop	{r4, pc}

08006856 <__sclose>:
 8006856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685a:	f000 b813 	b.w	8006884 <_close_r>
	...

08006860 <_write_r>:
 8006860:	b538      	push	{r3, r4, r5, lr}
 8006862:	4c07      	ldr	r4, [pc, #28]	; (8006880 <_write_r+0x20>)
 8006864:	4605      	mov	r5, r0
 8006866:	4608      	mov	r0, r1
 8006868:	4611      	mov	r1, r2
 800686a:	2200      	movs	r2, #0
 800686c:	6022      	str	r2, [r4, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	f7fa fa23 	bl	8000cba <_write>
 8006874:	1c43      	adds	r3, r0, #1
 8006876:	d102      	bne.n	800687e <_write_r+0x1e>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	b103      	cbz	r3, 800687e <_write_r+0x1e>
 800687c:	602b      	str	r3, [r5, #0]
 800687e:	bd38      	pop	{r3, r4, r5, pc}
 8006880:	20000250 	.word	0x20000250

08006884 <_close_r>:
 8006884:	b538      	push	{r3, r4, r5, lr}
 8006886:	4c06      	ldr	r4, [pc, #24]	; (80068a0 <_close_r+0x1c>)
 8006888:	2300      	movs	r3, #0
 800688a:	4605      	mov	r5, r0
 800688c:	4608      	mov	r0, r1
 800688e:	6023      	str	r3, [r4, #0]
 8006890:	f7fa fa2f 	bl	8000cf2 <_close>
 8006894:	1c43      	adds	r3, r0, #1
 8006896:	d102      	bne.n	800689e <_close_r+0x1a>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	b103      	cbz	r3, 800689e <_close_r+0x1a>
 800689c:	602b      	str	r3, [r5, #0]
 800689e:	bd38      	pop	{r3, r4, r5, pc}
 80068a0:	20000250 	.word	0x20000250

080068a4 <_fstat_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4c07      	ldr	r4, [pc, #28]	; (80068c4 <_fstat_r+0x20>)
 80068a8:	2300      	movs	r3, #0
 80068aa:	4605      	mov	r5, r0
 80068ac:	4608      	mov	r0, r1
 80068ae:	4611      	mov	r1, r2
 80068b0:	6023      	str	r3, [r4, #0]
 80068b2:	f7fa fa2a 	bl	8000d0a <_fstat>
 80068b6:	1c43      	adds	r3, r0, #1
 80068b8:	d102      	bne.n	80068c0 <_fstat_r+0x1c>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	b103      	cbz	r3, 80068c0 <_fstat_r+0x1c>
 80068be:	602b      	str	r3, [r5, #0]
 80068c0:	bd38      	pop	{r3, r4, r5, pc}
 80068c2:	bf00      	nop
 80068c4:	20000250 	.word	0x20000250

080068c8 <_isatty_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4c06      	ldr	r4, [pc, #24]	; (80068e4 <_isatty_r+0x1c>)
 80068cc:	2300      	movs	r3, #0
 80068ce:	4605      	mov	r5, r0
 80068d0:	4608      	mov	r0, r1
 80068d2:	6023      	str	r3, [r4, #0]
 80068d4:	f7fa fa29 	bl	8000d2a <_isatty>
 80068d8:	1c43      	adds	r3, r0, #1
 80068da:	d102      	bne.n	80068e2 <_isatty_r+0x1a>
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	b103      	cbz	r3, 80068e2 <_isatty_r+0x1a>
 80068e0:	602b      	str	r3, [r5, #0]
 80068e2:	bd38      	pop	{r3, r4, r5, pc}
 80068e4:	20000250 	.word	0x20000250

080068e8 <_lseek_r>:
 80068e8:	b538      	push	{r3, r4, r5, lr}
 80068ea:	4c07      	ldr	r4, [pc, #28]	; (8006908 <_lseek_r+0x20>)
 80068ec:	4605      	mov	r5, r0
 80068ee:	4608      	mov	r0, r1
 80068f0:	4611      	mov	r1, r2
 80068f2:	2200      	movs	r2, #0
 80068f4:	6022      	str	r2, [r4, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	f7fa fa22 	bl	8000d40 <_lseek>
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	d102      	bne.n	8006906 <_lseek_r+0x1e>
 8006900:	6823      	ldr	r3, [r4, #0]
 8006902:	b103      	cbz	r3, 8006906 <_lseek_r+0x1e>
 8006904:	602b      	str	r3, [r5, #0]
 8006906:	bd38      	pop	{r3, r4, r5, pc}
 8006908:	20000250 	.word	0x20000250

0800690c <__malloc_lock>:
 800690c:	4770      	bx	lr

0800690e <__malloc_unlock>:
 800690e:	4770      	bx	lr

08006910 <_read_r>:
 8006910:	b538      	push	{r3, r4, r5, lr}
 8006912:	4c07      	ldr	r4, [pc, #28]	; (8006930 <_read_r+0x20>)
 8006914:	4605      	mov	r5, r0
 8006916:	4608      	mov	r0, r1
 8006918:	4611      	mov	r1, r2
 800691a:	2200      	movs	r2, #0
 800691c:	6022      	str	r2, [r4, #0]
 800691e:	461a      	mov	r2, r3
 8006920:	f7fa f9ae 	bl	8000c80 <_read>
 8006924:	1c43      	adds	r3, r0, #1
 8006926:	d102      	bne.n	800692e <_read_r+0x1e>
 8006928:	6823      	ldr	r3, [r4, #0]
 800692a:	b103      	cbz	r3, 800692e <_read_r+0x1e>
 800692c:	602b      	str	r3, [r5, #0]
 800692e:	bd38      	pop	{r3, r4, r5, pc}
 8006930:	20000250 	.word	0x20000250

08006934 <_init>:
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	bf00      	nop
 8006938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693a:	bc08      	pop	{r3}
 800693c:	469e      	mov	lr, r3
 800693e:	4770      	bx	lr

08006940 <_fini>:
 8006940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006942:	bf00      	nop
 8006944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006946:	bc08      	pop	{r3}
 8006948:	469e      	mov	lr, r3
 800694a:	4770      	bx	lr
