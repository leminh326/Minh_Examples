
I2C_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068f0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006be4  08006be4  00016be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006bec  08006bec  00016bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006bf0  08006bf0  00016bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000004  08006bf4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000288  2000007c  08006c6c  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000304  08006c6c  00020304  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013e00  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000291f  00000000  00000000  00033eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016c0  00000000  00000000  000367d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001588  00000000  00000000  00037e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00022db3  00000000  00000000  00039418  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e34e  00000000  00000000  0005c1cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d9272  00000000  00000000  0006a519  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0014378b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000649c  00000000  00000000  00143808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000007c 	.word	0x2000007c
 8000158:	00000000 	.word	0x00000000
 800015c:	08006a14 	.word	0x08006a14

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000080 	.word	0x20000080
 8000178:	08006a14 	.word	0x08006a14

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	4688      	mov	r8, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0803 	orr.w	r8, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e4:	fa1f fc85 	uxth.w	ip, r5
 80001e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f0:	fb07 f10c 	mul.w	r1, r7, ip
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80001fe:	f080 811b 	bcs.w	8000438 <__udivmoddi4+0x28c>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8118 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000220:	45a4      	cmp	ip, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	192c      	adds	r4, r5, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8107 	bcs.w	800043c <__udivmoddi4+0x290>
 800022e:	45a4      	cmp	ip, r4
 8000230:	f240 8104 	bls.w	800043c <__udivmoddi4+0x290>
 8000234:	3802      	subs	r0, #2
 8000236:	442c      	add	r4, r5
 8000238:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023c:	eba4 040c 	sub.w	r4, r4, ip
 8000240:	2700      	movs	r7, #0
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80eb 	beq.w	8000432 <__udivmoddi4+0x286>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d147      	bne.n	8000302 <__udivmoddi4+0x156>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fa 	bhi.w	8000470 <__udivmoddi4+0x2c4>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	1b49      	subs	r1, r1, r5
 80002a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a4:	fa1f f885 	uxth.w	r8, r5
 80002a8:	2701      	movs	r7, #1
 80002aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002ae:	0c23      	lsrs	r3, r4, #16
 80002b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b8:	fb08 f10c 	mul.w	r1, r8, ip
 80002bc:	4299      	cmp	r1, r3
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002c0:	18eb      	adds	r3, r5, r3
 80002c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4299      	cmp	r1, r3
 80002ca:	f200 80cd 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002ce:	4684      	mov	ip, r0
 80002d0:	1a59      	subs	r1, r3, r1
 80002d2:	b2a3      	uxth	r3, r4
 80002d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e0:	fb08 f800 	mul.w	r8, r8, r0
 80002e4:	45a0      	cmp	r8, r4
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0x14c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x14a>
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	f200 80b6 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002f6:	4618      	mov	r0, r3
 80002f8:	eba4 0408 	sub.w	r4, r4, r8
 80002fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000300:	e79f      	b.n	8000242 <__udivmoddi4+0x96>
 8000302:	f1c7 0c20 	rsb	ip, r7, #32
 8000306:	40bb      	lsls	r3, r7
 8000308:	fa22 fe0c 	lsr.w	lr, r2, ip
 800030c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000310:	fa01 f407 	lsl.w	r4, r1, r7
 8000314:	fa20 f50c 	lsr.w	r5, r0, ip
 8000318:	fa21 f30c 	lsr.w	r3, r1, ip
 800031c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000320:	4325      	orrs	r5, r4
 8000322:	fbb3 f9f8 	udiv	r9, r3, r8
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	fb08 3319 	mls	r3, r8, r9, r3
 800032c:	fa1f fa8e 	uxth.w	sl, lr
 8000330:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000334:	fb09 f40a 	mul.w	r4, r9, sl
 8000338:	429c      	cmp	r4, r3
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f107 	lsl.w	r1, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1e 0303 	adds.w	r3, lr, r3
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8087 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000350:	429c      	cmp	r4, r3
 8000352:	f240 8084 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4473      	add	r3, lr
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	b2ad      	uxth	r5, r5
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800036c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000370:	45a2      	cmp	sl, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1e 0404 	adds.w	r4, lr, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295
 800037c:	d26b      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 800037e:	45a2      	cmp	sl, r4
 8000380:	d969      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000382:	3802      	subs	r0, #2
 8000384:	4474      	add	r4, lr
 8000386:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038a:	fba0 8902 	umull	r8, r9, r0, r2
 800038e:	eba4 040a 	sub.w	r4, r4, sl
 8000392:	454c      	cmp	r4, r9
 8000394:	46c2      	mov	sl, r8
 8000396:	464b      	mov	r3, r9
 8000398:	d354      	bcc.n	8000444 <__udivmoddi4+0x298>
 800039a:	d051      	beq.n	8000440 <__udivmoddi4+0x294>
 800039c:	2e00      	cmp	r6, #0
 800039e:	d069      	beq.n	8000474 <__udivmoddi4+0x2c8>
 80003a0:	ebb1 050a 	subs.w	r5, r1, sl
 80003a4:	eb64 0403 	sbc.w	r4, r4, r3
 80003a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003ac:	40fd      	lsrs	r5, r7
 80003ae:	40fc      	lsrs	r4, r7
 80003b0:	ea4c 0505 	orr.w	r5, ip, r5
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f703 	lsr.w	r7, r0, r3
 80003c4:	4095      	lsls	r5, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	fa21 f303 	lsr.w	r3, r1, r3
 80003ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d2:	4338      	orrs	r0, r7
 80003d4:	0c01      	lsrs	r1, r0, #16
 80003d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003da:	fa1f f885 	uxth.w	r8, r5
 80003de:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e6:	fb07 f308 	mul.w	r3, r7, r8
 80003ea:	428b      	cmp	r3, r1
 80003ec:	fa04 f402 	lsl.w	r4, r4, r2
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f2:	1869      	adds	r1, r5, r1
 80003f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3f02      	subs	r7, #2
 8000400:	4429      	add	r1, r5
 8000402:	1acb      	subs	r3, r1, r3
 8000404:	b281      	uxth	r1, r0
 8000406:	fbb3 f0fe 	udiv	r0, r3, lr
 800040a:	fb0e 3310 	mls	r3, lr, r0, r3
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb00 f308 	mul.w	r3, r0, r8
 8000416:	428b      	cmp	r3, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000420:	d217      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000422:	428b      	cmp	r3, r1
 8000424:	d915      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	1ac9      	subs	r1, r1, r3
 800042c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000430:	e73b      	b.n	80002aa <__udivmoddi4+0xfe>
 8000432:	4637      	mov	r7, r6
 8000434:	4630      	mov	r0, r6
 8000436:	e709      	b.n	800024c <__udivmoddi4+0xa0>
 8000438:	4607      	mov	r7, r0
 800043a:	e6e7      	b.n	800020c <__udivmoddi4+0x60>
 800043c:	4618      	mov	r0, r3
 800043e:	e6fb      	b.n	8000238 <__udivmoddi4+0x8c>
 8000440:	4541      	cmp	r1, r8
 8000442:	d2ab      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000444:	ebb8 0a02 	subs.w	sl, r8, r2
 8000448:	eb69 020e 	sbc.w	r2, r9, lr
 800044c:	3801      	subs	r0, #1
 800044e:	4613      	mov	r3, r2
 8000450:	e7a4      	b.n	800039c <__udivmoddi4+0x1f0>
 8000452:	4660      	mov	r0, ip
 8000454:	e7e9      	b.n	800042a <__udivmoddi4+0x27e>
 8000456:	4618      	mov	r0, r3
 8000458:	e795      	b.n	8000386 <__udivmoddi4+0x1da>
 800045a:	4667      	mov	r7, ip
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	4681      	mov	r9, r0
 8000460:	e77c      	b.n	800035c <__udivmoddi4+0x1b0>
 8000462:	3802      	subs	r0, #2
 8000464:	442c      	add	r4, r5
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0x14c>
 8000468:	f1ac 0c02 	sub.w	ip, ip, #2
 800046c:	442b      	add	r3, r5
 800046e:	e72f      	b.n	80002d0 <__udivmoddi4+0x124>
 8000470:	4638      	mov	r0, r7
 8000472:	e708      	b.n	8000286 <__udivmoddi4+0xda>
 8000474:	4637      	mov	r7, r6
 8000476:	e6e9      	b.n	800024c <__udivmoddi4+0xa0>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b085      	sub	sp, #20
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4013      	ands	r3, r2
 80004d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d2:	68fb      	ldr	r3, [r7, #12]
}
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fe02 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f834 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f95c 	bl	80007a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f0:	f000 f930 	bl	8000754 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f8e2 	bl	80006bc <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80004f8:	f000 f8a0 	bl	800063c <MX_I2C1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("!!! Start !!! \n");
 80004fc:	480f      	ldr	r0, [pc, #60]	; (800053c <main+0x5c>)
 80004fe:	f005 fe7d 	bl	80061fc <puts>
	  while(HAL_I2C_Master_Transmit_DMA(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)MessageSend, sizeof MessageSend)!= HAL_OK){}
	  HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
	  while(HAL_I2C_Master_Receive_DMA (&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t *)MasterRxBuffer, sizeof MasterRxBuffer)!= HAL_OK){}

#else
	  HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
 8000502:	2120      	movs	r1, #32
 8000504:	480e      	ldr	r0, [pc, #56]	; (8000540 <main+0x60>)
 8000506:	f001 fc13 	bl	8001d30 <HAL_GPIO_TogglePin>
	  while(HAL_I2C_Slave_Receive_DMA(&hi2c1, (uint8_t *)SlaveRxBuffer, sizeof SlaveRxBuffer) != HAL_OK){}
 800050a:	bf00      	nop
 800050c:	2208      	movs	r2, #8
 800050e:	490d      	ldr	r1, [pc, #52]	; (8000544 <main+0x64>)
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <main+0x68>)
 8000512:	f001 fd91 	bl	8002038 <HAL_I2C_Slave_Receive_DMA>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1f7      	bne.n	800050c <main+0x2c>

#endif

	  while (1)
	  {
		  HAL_Delay(1000);
 800051c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000520:	f000 fe6a 	bl	80011f8 <HAL_Delay>
		  printf("!!! Loop !!! \n");
 8000524:	4809      	ldr	r0, [pc, #36]	; (800054c <main+0x6c>)
 8000526:	f005 fe69 	bl	80061fc <puts>
		#ifdef MASTER
		  HAL_UART_Transmit(&huart1,MasterRxBuffer,sizeof MasterRxBuffer,1000);
		#else
		  HAL_UART_Transmit(&huart1,SlaveRxBuffer,sizeof SlaveRxBuffer,1000);
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	2208      	movs	r2, #8
 8000530:	4904      	ldr	r1, [pc, #16]	; (8000544 <main+0x64>)
 8000532:	4807      	ldr	r0, [pc, #28]	; (8000550 <main+0x70>)
 8000534:	f004 fea3 	bl	800527e <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000538:	e7f0      	b.n	800051c <main+0x3c>
 800053a:	bf00      	nop
 800053c:	08006a2c 	.word	0x08006a2c
 8000540:	48000400 	.word	0x48000400
 8000544:	20000004 	.word	0x20000004
 8000548:	20000104 	.word	0x20000104
 800054c:	08006a3c 	.word	0x08006a3c
 8000550:	20000210 	.word	0x20000210

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b0ae      	sub	sp, #184	; 0xb8
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800055e:	2248      	movs	r2, #72	; 0x48
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f005 fde6 	bl	8006134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]
 8000578:	615a      	str	r2, [r3, #20]
 800057a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2250      	movs	r2, #80	; 0x50
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f005 fdd6 	bl	8006134 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000588:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <SystemClock_Config+0xe4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000590:	4a29      	ldr	r2, [pc, #164]	; (8000638 <SystemClock_Config+0xe4>)
 8000592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000596:	6013      	str	r3, [r2, #0]
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <SystemClock_Config+0xe4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005a0:	603b      	str	r3, [r7, #0]
 80005a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005a4:	2303      	movs	r3, #3
 80005a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b4:	2340      	movs	r3, #64	; 0x40
 80005b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 fb95 	bl	8003cf4 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005d0:	f000 f994 	bl	80008fc <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80005d4:	236f      	movs	r3, #111	; 0x6f
 80005d6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005d8:	2302      	movs	r3, #2
 80005da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005f4:	2101      	movs	r1, #1
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 ff10 	bl	800441c <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000602:	f000 f97b 	bl	80008fc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000606:	f242 0305 	movw	r3, #8197	; 0x2005
 800060a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800060c:	2300      	movs	r3, #0
 800060e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000610:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000614:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8000616:	2302      	movs	r3, #2
 8000618:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800061a:	2300      	movs	r3, #0
 800061c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fb36 	bl	8004c92 <HAL_RCCEx_PeriphCLKConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800062c:	f000 f966 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000630:	bf00      	nop
 8000632:	37b8      	adds	r7, #184	; 0xb8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58000400 	.word	0x58000400

0800063c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <MX_I2C1_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000648:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <MX_I2C1_Init+0x7c>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = SLAVE_ADDRESS;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_I2C1_Init+0x74>)
 800064e:	22a0      	movs	r2, #160	; 0xa0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_I2C1_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_I2C1_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <MX_I2C1_Init+0x74>)
 8000678:	f001 fb98 	bl	8001dac <HAL_I2C_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000682:	f000 f93b 	bl	80008fc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000686:	2100      	movs	r1, #0
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <MX_I2C1_Init+0x74>)
 800068a:	f002 fee9 	bl	8003460 <HAL_I2CEx_ConfigAnalogFilter>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000694:	f000 f932 	bl	80008fc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000698:	2100      	movs	r1, #0
 800069a:	4805      	ldr	r0, [pc, #20]	; (80006b0 <MX_I2C1_Init+0x74>)
 800069c:	f002 ff2b 	bl	80034f6 <HAL_I2CEx_ConfigDigitalFilter>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 f929 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000104 	.word	0x20000104
 80006b4:	40005400 	.word	0x40005400
 80006b8:	00707cbb 	.word	0x00707cbb

080006bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <MX_USART1_UART_Init+0x90>)
 80006c2:	4a23      	ldr	r2, [pc, #140]	; (8000750 <MX_USART1_UART_Init+0x94>)
 80006c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006c6:	4b21      	ldr	r3, [pc, #132]	; (800074c <MX_USART1_UART_Init+0x90>)
 80006c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	; (800074c <MX_USART1_UART_Init+0x90>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <MX_USART1_UART_Init+0x90>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006da:	4b1c      	ldr	r3, [pc, #112]	; (800074c <MX_USART1_UART_Init+0x90>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	; (800074c <MX_USART1_UART_Init+0x90>)
 80006e2:	220c      	movs	r2, #12
 80006e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e6:	4b19      	ldr	r3, [pc, #100]	; (800074c <MX_USART1_UART_Init+0x90>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ec:	4b17      	ldr	r3, [pc, #92]	; (800074c <MX_USART1_UART_Init+0x90>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f2:	4b16      	ldr	r3, [pc, #88]	; (800074c <MX_USART1_UART_Init+0x90>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <MX_USART1_UART_Init+0x90>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006fe:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_USART1_UART_Init+0x90>)
 8000700:	2200      	movs	r2, #0
 8000702:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000704:	4811      	ldr	r0, [pc, #68]	; (800074c <MX_USART1_UART_Init+0x90>)
 8000706:	f004 fd6a 	bl	80051de <HAL_UART_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000710:	f000 f8f4 	bl	80008fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000714:	2100      	movs	r1, #0
 8000716:	480d      	ldr	r0, [pc, #52]	; (800074c <MX_USART1_UART_Init+0x90>)
 8000718:	f005 fbfe 	bl	8005f18 <HAL_UARTEx_SetTxFifoThreshold>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000722:	f000 f8eb 	bl	80008fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000726:	2100      	movs	r1, #0
 8000728:	4808      	ldr	r0, [pc, #32]	; (800074c <MX_USART1_UART_Init+0x90>)
 800072a:	f005 fc33 	bl	8005f94 <HAL_UARTEx_SetRxFifoThreshold>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000734:	f000 f8e2 	bl	80008fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_USART1_UART_Init+0x90>)
 800073a:	f005 fbb4 	bl	8005ea6 <HAL_UARTEx_DisableFifoMode>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000744:	f000 f8da 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000210 	.word	0x20000210
 8000750:	40013800 	.word	0x40013800

08000754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000758:	2004      	movs	r0, #4
 800075a:	f7ff fe8f 	bl	800047c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075e:	2001      	movs	r0, #1
 8000760:	f7ff fe8c 	bl	800047c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	200b      	movs	r0, #11
 800076a:	f000 fe42 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800076e:	200b      	movs	r0, #11
 8000770:	f000 fe59 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	200c      	movs	r0, #12
 800077a:	f000 fe3a 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800077e:	200c      	movs	r0, #12
 8000780:	f000 fe51 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	200d      	movs	r0, #13
 800078a:	f000 fe32 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800078e:	200d      	movs	r0, #13
 8000790:	f000 fe49 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	200e      	movs	r0, #14
 800079a:	f000 fe2a 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800079e:	200e      	movs	r0, #14
 80007a0:	f000 fe41 	bl	8001426 <HAL_NVIC_EnableIRQ>

}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b086      	sub	sp, #24
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007bc:	2004      	movs	r0, #4
 80007be:	f7ff fe76 	bl	80004ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2002      	movs	r0, #2
 80007c4:	f7ff fe73 	bl	80004ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c8:	2008      	movs	r0, #8
 80007ca:	f7ff fe70 	bl	80004ae <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led2_Pin|Led3_Pin|Led1_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2123      	movs	r1, #35	; 0x23
 80007d2:	4815      	ldr	r0, [pc, #84]	; (8000828 <MX_GPIO_Init+0x80>)
 80007d4:	f001 fa94 	bl	8001d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 80007d8:	2310      	movs	r3, #16
 80007da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	4619      	mov	r1, r3
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <MX_GPIO_Init+0x84>)
 80007ea:	f001 f919 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led2_Pin Led3_Pin Led1_Pin */
  GPIO_InitStruct.Pin = Led2_Pin|Led3_Pin|Led1_Pin;
 80007ee:	2323      	movs	r3, #35	; 0x23
 80007f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f2:	2301      	movs	r3, #1
 80007f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	4619      	mov	r1, r3
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <MX_GPIO_Init+0x80>)
 8000804:	f001 f90c 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button3_Pin;
 8000808:	2303      	movs	r3, #3
 800080a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_GPIO_Init+0x88>)
 800081a:	f001 f901 	bl	8001a20 <HAL_GPIO_Init>

}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	48000400 	.word	0x48000400
 800082c:	48000800 	.word	0x48000800
 8000830:	48000c00 	.word	0x48000c00

08000834 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800083c:	1d39      	adds	r1, r7, #4
 800083e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000842:	2201      	movs	r2, #1
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <__io_putchar+0x20>)
 8000846:	f004 fd1a 	bl	800527e <HAL_UART_Transmit>

  return ch;
 800084a:	687b      	ldr	r3, [r7, #4]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000210 	.word	0x20000210

08000858 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	printf("Master send \n");
 8000860:	4803      	ldr	r0, [pc, #12]	; (8000870 <HAL_I2C_MasterTxCpltCallback+0x18>)
 8000862:	f005 fccb 	bl	80061fc <puts>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	08006a4c 	.word	0x08006a4c

08000874 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	printf("Master received \n");
 800087c:	4805      	ldr	r0, [pc, #20]	; (8000894 <HAL_I2C_MasterRxCpltCallback+0x20>)
 800087e:	f005 fcbd 	bl	80061fc <puts>
	HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 8000882:	2102      	movs	r1, #2
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8000886:	f001 fa53 	bl	8001d30 <HAL_GPIO_TogglePin>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	08006a5c 	.word	0x08006a5c
 8000898:	48000400 	.word	0x48000400

0800089c <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	printf("Slave send \n");
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <HAL_I2C_SlaveTxCpltCallback+0x20>)
 80008a6:	f005 fca9 	bl	80061fc <puts>
	HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 80008aa:	2102      	movs	r1, #2
 80008ac:	4804      	ldr	r0, [pc, #16]	; (80008c0 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 80008ae:	f001 fa3f 	bl	8001d30 <HAL_GPIO_TogglePin>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	08006a70 	.word	0x08006a70
 80008c0:	48000400 	.word	0x48000400

080008c4 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	printf("Slave received \n");
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <HAL_I2C_SlaveRxCpltCallback+0x28>)
 80008ce:	f005 fc95 	bl	80061fc <puts>
	HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 80008d2:	2101      	movs	r1, #1
 80008d4:	4806      	ldr	r0, [pc, #24]	; (80008f0 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 80008d6:	f001 fa2b 	bl	8001d30 <HAL_GPIO_TogglePin>
	HAL_I2C_Slave_Transmit_DMA(&hi2c1, (uint8_t*)SlaveRxBuffer, sizeof SlaveRxBuffer);
 80008da:	2208      	movs	r2, #8
 80008dc:	4905      	ldr	r1, [pc, #20]	; (80008f4 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 80008de:	4806      	ldr	r0, [pc, #24]	; (80008f8 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 80008e0:	f001 faf4 	bl	8001ecc <HAL_I2C_Slave_Transmit_DMA>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	08006a7c 	.word	0x08006a7c
 80008f0:	48000400 	.word	0x48000400
 80008f4:	20000004 	.word	0x20000004
 80008f8:	20000104 	.word	0x20000104

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <LL_AHB2_GRP1_EnableClock>:
{
 800090a:	b480      	push	{r7}
 800090c:	b085      	sub	sp, #20
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	4313      	orrs	r3, r2
 8000920:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000926:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4013      	ands	r3, r2
 800092c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092e:	68fb      	ldr	r3, [r7, #12]
}
 8000930:	bf00      	nop
 8000932:	3714      	adds	r7, #20
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000948:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800094a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4313      	orrs	r3, r2
 8000952:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000958:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4013      	ands	r3, r2
 800095e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000960:	68fb      	ldr	r3, [r7, #12]
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800096e:	b480      	push	{r7}
 8000970:	b085      	sub	sp, #20
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800097a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800097c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4313      	orrs	r3, r2
 8000984:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800098a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4013      	ands	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4013      	ands	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009c4:	68fb      	ldr	r3, [r7, #12]
}
 80009c6:	bf00      	nop
 80009c8:	3714      	adds	r7, #20
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80009d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80009da:	f7ff ffaf 	bl	800093c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	202e      	movs	r0, #46	; 0x2e
 80009e4:	f000 fd05 	bl	80013f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80009e8:	202e      	movs	r0, #46	; 0x2e
 80009ea:	f000 fd1c 	bl	8001426 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a40      	ldr	r2, [pc, #256]	; (8000b14 <HAL_I2C_MspInit+0x120>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d179      	bne.n	8000b0a <HAL_I2C_MspInit+0x116>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	2002      	movs	r0, #2
 8000a18:	f7ff ff77 	bl	800090a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a20:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a22:	2312      	movs	r3, #18
 8000a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	4837      	ldr	r0, [pc, #220]	; (8000b18 <HAL_I2C_MspInit+0x124>)
 8000a3a:	f000 fff1 	bl	8001a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000a42:	f7ff ff94 	bl	800096e <LL_APB1_GRP1_EnableClock>

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8000a46:	4b35      	ldr	r3, [pc, #212]	; (8000b1c <HAL_I2C_MspInit+0x128>)
 8000a48:	4a35      	ldr	r2, [pc, #212]	; (8000b20 <HAL_I2C_MspInit+0x12c>)
 8000a4a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000a4c:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <HAL_I2C_MspInit+0x128>)
 8000a4e:	220a      	movs	r2, #10
 8000a50:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a52:	4b32      	ldr	r3, [pc, #200]	; (8000b1c <HAL_I2C_MspInit+0x128>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a58:	4b30      	ldr	r3, [pc, #192]	; (8000b1c <HAL_I2C_MspInit+0x128>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	; (8000b1c <HAL_I2C_MspInit+0x128>)
 8000a60:	2280      	movs	r2, #128	; 0x80
 8000a62:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a64:	4b2d      	ldr	r3, [pc, #180]	; (8000b1c <HAL_I2C_MspInit+0x128>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a6a:	4b2c      	ldr	r3, [pc, #176]	; (8000b1c <HAL_I2C_MspInit+0x128>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a70:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <HAL_I2C_MspInit+0x128>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a76:	4b29      	ldr	r3, [pc, #164]	; (8000b1c <HAL_I2C_MspInit+0x128>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a7c:	4827      	ldr	r0, [pc, #156]	; (8000b1c <HAL_I2C_MspInit+0x128>)
 8000a7e:	f000 fced 	bl	800145c <HAL_DMA_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_I2C_MspInit+0x98>
    {
      Error_Handler();
 8000a88:	f7ff ff38 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a23      	ldr	r2, [pc, #140]	; (8000b1c <HAL_I2C_MspInit+0x128>)
 8000a90:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a92:	4a22      	ldr	r2, [pc, #136]	; (8000b1c <HAL_I2C_MspInit+0x128>)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8000a98:	4b22      	ldr	r3, [pc, #136]	; (8000b24 <HAL_I2C_MspInit+0x130>)
 8000a9a:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <HAL_I2C_MspInit+0x134>)
 8000a9c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000a9e:	4b21      	ldr	r3, [pc, #132]	; (8000b24 <HAL_I2C_MspInit+0x130>)
 8000aa0:	220b      	movs	r2, #11
 8000aa2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	; (8000b24 <HAL_I2C_MspInit+0x130>)
 8000aa6:	2210      	movs	r2, #16
 8000aa8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <HAL_I2C_MspInit+0x130>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <HAL_I2C_MspInit+0x130>)
 8000ab2:	2280      	movs	r2, #128	; 0x80
 8000ab4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <HAL_I2C_MspInit+0x130>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000abc:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_I2C_MspInit+0x130>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <HAL_I2C_MspInit+0x130>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_I2C_MspInit+0x130>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000ace:	4815      	ldr	r0, [pc, #84]	; (8000b24 <HAL_I2C_MspInit+0x130>)
 8000ad0:	f000 fcc4 	bl	800145c <HAL_DMA_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 8000ada:	f7ff ff0f 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <HAL_I2C_MspInit+0x130>)
 8000ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ae4:	4a0f      	ldr	r2, [pc, #60]	; (8000b24 <HAL_I2C_MspInit+0x130>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000aea:	2200      	movs	r2, #0
 8000aec:	2100      	movs	r1, #0
 8000aee:	201e      	movs	r0, #30
 8000af0:	f000 fc7f 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000af4:	201e      	movs	r0, #30
 8000af6:	f000 fc96 	bl	8001426 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2100      	movs	r1, #0
 8000afe:	201f      	movs	r0, #31
 8000b00:	f000 fc77 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b04:	201f      	movs	r0, #31
 8000b06:	f000 fc8e 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40005400 	.word	0x40005400
 8000b18:	48000400 	.word	0x48000400
 8000b1c:	2000029c 	.word	0x2000029c
 8000b20:	40020030 	.word	0x40020030
 8000b24:	200000a4 	.word	0x200000a4
 8000b28:	40020044 	.word	0x40020044

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a3b      	ldr	r2, [pc, #236]	; (8000c38 <HAL_UART_MspInit+0x10c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d170      	bne.n	8000c30 <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b52:	f7ff ff25 	bl	80009a0 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b56:	2002      	movs	r0, #2
 8000b58:	f7ff fed7 	bl	800090a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b5c:	23c0      	movs	r3, #192	; 0xc0
 8000b5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	4619      	mov	r1, r3
 8000b76:	4831      	ldr	r0, [pc, #196]	; (8000c3c <HAL_UART_MspInit+0x110>)
 8000b78:	f000 ff52 	bl	8001a20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000b7c:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000b7e:	4a31      	ldr	r2, [pc, #196]	; (8000c44 <HAL_UART_MspInit+0x118>)
 8000b80:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000b82:	4b2f      	ldr	r3, [pc, #188]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000b84:	220e      	movs	r2, #14
 8000b86:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b88:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8e:	4b2c      	ldr	r3, [pc, #176]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b94:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b9a:	4b29      	ldr	r3, [pc, #164]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ba6:	4b26      	ldr	r3, [pc, #152]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bac:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000bb2:	4823      	ldr	r0, [pc, #140]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000bb4:	f000 fc52 	bl	800145c <HAL_DMA_Init>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8000bbe:	f7ff fe9d 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000bc6:	679a      	str	r2, [r3, #120]	; 0x78
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	; (8000c40 <HAL_UART_MspInit+0x114>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000bce:	4b1e      	ldr	r3, [pc, #120]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000bd0:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <HAL_UART_MspInit+0x120>)
 8000bd2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bda:	4b1b      	ldr	r3, [pc, #108]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000bdc:	2210      	movs	r2, #16
 8000bde:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be0:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000be6:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bf2:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000bf8:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bfe:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c04:	4810      	ldr	r0, [pc, #64]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000c06:	f000 fc29 	bl	800145c <HAL_DMA_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8000c10:	f7ff fe74 	bl	80008fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a0c      	ldr	r2, [pc, #48]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000c18:	675a      	str	r2, [r3, #116]	; 0x74
 8000c1a:	4a0b      	ldr	r2, [pc, #44]	; (8000c48 <HAL_UART_MspInit+0x11c>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2024      	movs	r0, #36	; 0x24
 8000c26:	f000 fbe4 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c2a:	2024      	movs	r0, #36	; 0x24
 8000c2c:	f000 fbfb 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3720      	adds	r7, #32
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40013800 	.word	0x40013800
 8000c3c:	48000400 	.word	0x48000400
 8000c40:	200001b0 	.word	0x200001b0
 8000c44:	40020008 	.word	0x40020008
 8000c48:	20000150 	.word	0x20000150
 8000c4c:	4002001c 	.word	0x4002001c

08000c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 fa7c 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cb0:	4802      	ldr	r0, [pc, #8]	; (8000cbc <DMA1_Channel1_IRQHandler+0x10>)
 8000cb2:	f000 fd55 	bl	8001760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200001b0 	.word	0x200001b0

08000cc0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000cc4:	4802      	ldr	r0, [pc, #8]	; (8000cd0 <DMA1_Channel2_IRQHandler+0x10>)
 8000cc6:	f000 fd4b 	bl	8001760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000150 	.word	0x20000150

08000cd4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <DMA1_Channel3_IRQHandler+0x10>)
 8000cda:	f000 fd41 	bl	8001760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2000029c 	.word	0x2000029c

08000ce8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <DMA1_Channel4_IRQHandler+0x10>)
 8000cee:	f000 fd37 	bl	8001760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200000a4 	.word	0x200000a4

08000cfc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <I2C1_EV_IRQHandler+0x10>)
 8000d02:	f001 fa4f 	bl	80021a4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000104 	.word	0x20000104

08000d10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <I2C1_ER_IRQHandler+0x10>)
 8000d16:	f001 fa5f 	bl	80021d8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000104 	.word	0x20000104

08000d24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <USART1_IRQHandler+0x10>)
 8000d2a:	f004 fb3f 	bl	80053ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000210 	.word	0x20000210

08000d38 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000d3c:	f001 f812 	bl	8001d64 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
 8000d54:	e00a      	b.n	8000d6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d56:	f3af 8000 	nop.w
 8000d5a:	4601      	mov	r1, r0
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60ba      	str	r2, [r7, #8]
 8000d62:	b2ca      	uxtb	r2, r1
 8000d64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	dbf0      	blt.n	8000d56 <_read+0x12>
	}

return len;
 8000d74:	687b      	ldr	r3, [r7, #4]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3718      	adds	r7, #24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e009      	b.n	8000da4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60ba      	str	r2, [r7, #8]
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fd4b 	bl	8000834 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	3301      	adds	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697a      	ldr	r2, [r7, #20]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	dbf1      	blt.n	8000d90 <_write+0x12>
	}
	return len;
 8000dac:	687b      	ldr	r3, [r7, #4]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <_close>:

int _close(int file)
{
 8000db6:	b480      	push	{r7}
 8000db8:	b083      	sub	sp, #12
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
	return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
 8000dd6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dde:	605a      	str	r2, [r3, #4]
	return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <_isatty>:

int _isatty(int file)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
	return 1;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	60f8      	str	r0, [r7, #12]
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	; (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f005 f946 	bl	80060e0 <__errno>
 8000e54:	4602      	mov	r2, r0
 8000e56:	230c      	movs	r3, #12
 8000e58:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	; (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20030000 	.word	0x20030000
 8000e80:	00000400 	.word	0x00000400
 8000e84:	20000098 	.word	0x20000098
 8000e88:	20000308 	.word	0x20000308

08000e8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000e90:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <SystemInit+0xa0>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000e96:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <SystemInit+0xa0>)
 8000e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9c:	4a23      	ldr	r2, [pc, #140]	; (8000f2c <SystemInit+0xa0>)
 8000e9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eba:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ebe:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <SystemInit+0xa4>)
 8000ecc:	4013      	ands	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ed8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000edc:	f023 0305 	bic.w	r3, r3, #5
 8000ee0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ef0:	f023 0301 	bic.w	r3, r3, #1
 8000ef4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <SystemInit+0xa8>)
 8000efe:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <SystemInit+0xa8>)
 8000f06:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	faf6fefb 	.word	0xfaf6fefb
 8000f34:	22041000 	.word	0x22041000

08000f38 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	091b      	lsrs	r3, r3, #4
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	4a47      	ldr	r2, [pc, #284]	; (8001068 <SystemCoreClockUpdate+0x130>)
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b0c      	cmp	r3, #12
 8000f5e:	d867      	bhi.n	8001030 <SystemCoreClockUpdate+0xf8>
 8000f60:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <SystemCoreClockUpdate+0x30>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000f9d 	.word	0x08000f9d
 8000f6c:	08001031 	.word	0x08001031
 8000f70:	08001031 	.word	0x08001031
 8000f74:	08001031 	.word	0x08001031
 8000f78:	08000fa5 	.word	0x08000fa5
 8000f7c:	08001031 	.word	0x08001031
 8000f80:	08001031 	.word	0x08001031
 8000f84:	08001031 	.word	0x08001031
 8000f88:	08000fad 	.word	0x08000fad
 8000f8c:	08001031 	.word	0x08001031
 8000f90:	08001031 	.word	0x08001031
 8000f94:	08001031 	.word	0x08001031
 8000f98:	08000fb5 	.word	0x08000fb5
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000f9c:	4a33      	ldr	r2, [pc, #204]	; (800106c <SystemCoreClockUpdate+0x134>)
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	6013      	str	r3, [r2, #0]
      break;
 8000fa2:	e049      	b.n	8001038 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000fa4:	4b31      	ldr	r3, [pc, #196]	; (800106c <SystemCoreClockUpdate+0x134>)
 8000fa6:	4a32      	ldr	r2, [pc, #200]	; (8001070 <SystemCoreClockUpdate+0x138>)
 8000fa8:	601a      	str	r2, [r3, #0]
      break;
 8000faa:	e045      	b.n	8001038 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000fac:	4b2f      	ldr	r3, [pc, #188]	; (800106c <SystemCoreClockUpdate+0x134>)
 8000fae:	4a31      	ldr	r2, [pc, #196]	; (8001074 <SystemCoreClockUpdate+0x13c>)
 8000fb0:	601a      	str	r2, [r3, #0]
      break;
 8000fb2:	e041      	b.n	8001038 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000fb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	3301      	adds	r3, #1
 8000fce:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d105      	bne.n	8000fe2 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000fd6:	4a26      	ldr	r2, [pc, #152]	; (8001070 <SystemCoreClockUpdate+0x138>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	e00d      	b.n	8000ffe <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	2b03      	cmp	r3, #3
 8000fe6:	d105      	bne.n	8000ff4 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000fe8:	4a22      	ldr	r2, [pc, #136]	; (8001074 <SystemCoreClockUpdate+0x13c>)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	e004      	b.n	8000ffe <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffc:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fb02 f303 	mul.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0f5b      	lsrs	r3, r3, #29
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	3301      	adds	r3, #1
 8001020:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <SystemCoreClockUpdate+0x134>)
 800102c:	6013      	str	r3, [r2, #0]
      break;
 800102e:	e003      	b.n	8001038 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8001030:	4a0e      	ldr	r2, [pc, #56]	; (800106c <SystemCoreClockUpdate+0x134>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	6013      	str	r3, [r2, #0]
      break;
 8001036:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	f003 030f 	and.w	r3, r3, #15
 8001044:	4a0c      	ldr	r2, [pc, #48]	; (8001078 <SystemCoreClockUpdate+0x140>)
 8001046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800104a:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <SystemCoreClockUpdate+0x134>)
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemCoreClockUpdate+0x134>)
 8001058:	6013      	str	r3, [r2, #0]

}
 800105a:	bf00      	nop
 800105c:	371c      	adds	r7, #28
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	08006b28 	.word	0x08006b28
 800106c:	2000000c 	.word	0x2000000c
 8001070:	00f42400 	.word	0x00f42400
 8001074:	01e84800 	.word	0x01e84800
 8001078:	08006ac8 	.word	0x08006ac8

0800107c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800107c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001080:	3304      	adds	r3, #4

08001082 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001082:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001084:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001086:	d3f9      	bcc.n	800107c <CopyDataInit>
  bx lr
 8001088:	4770      	bx	lr

0800108a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800108a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800108c:	3004      	adds	r0, #4

0800108e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800108e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001090:	d3fb      	bcc.n	800108a <FillZerobss>
  bx lr
 8001092:	4770      	bx	lr

08001094 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001096:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001098:	f7ff fef8 	bl	8000e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800109c:	480b      	ldr	r0, [pc, #44]	; (80010cc <LoopForever+0x8>)
 800109e:	490c      	ldr	r1, [pc, #48]	; (80010d0 <LoopForever+0xc>)
 80010a0:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <LoopForever+0x10>)
 80010a2:	2300      	movs	r3, #0
 80010a4:	f7ff ffed 	bl	8001082 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <LoopForever+0x14>)
 80010aa:	490c      	ldr	r1, [pc, #48]	; (80010dc <LoopForever+0x18>)
 80010ac:	2300      	movs	r3, #0
 80010ae:	f7ff ffee 	bl	800108e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80010b2:	480b      	ldr	r0, [pc, #44]	; (80010e0 <LoopForever+0x1c>)
 80010b4:	490b      	ldr	r1, [pc, #44]	; (80010e4 <LoopForever+0x20>)
 80010b6:	2300      	movs	r3, #0
 80010b8:	f7ff ffe9 	bl	800108e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010bc:	f005 f816 	bl	80060ec <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80010c0:	f7ff fa0e 	bl	80004e0 <main>

080010c4 <LoopForever>:

LoopForever:
  b LoopForever
 80010c4:	e7fe      	b.n	80010c4 <LoopForever>
 80010c6:	0000      	.short	0x0000
  ldr   r0, =_estack
 80010c8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80010cc:	20000004 	.word	0x20000004
 80010d0:	2000007c 	.word	0x2000007c
 80010d4:	08006bf4 	.word	0x08006bf4
  INIT_BSS _sbss, _ebss
 80010d8:	2000007c 	.word	0x2000007c
 80010dc:	20000304 	.word	0x20000304
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80010e0:	20030000 	.word	0x20030000
 80010e4:	20030000 	.word	0x20030000

080010e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010e8:	e7fe      	b.n	80010e8 <ADC1_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <HAL_Init+0x3c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <HAL_Init+0x3c>)
 80010fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001100:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001102:	2003      	movs	r0, #3
 8001104:	f000 f96a 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001108:	2000      	movs	r0, #0
 800110a:	f000 f80f 	bl	800112c <HAL_InitTick>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	71fb      	strb	r3, [r7, #7]
 8001118:	e001      	b.n	800111e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800111a:	f7ff fc5a 	bl	80009d2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800111e:	79fb      	ldrb	r3, [r7, #7]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	58004000 	.word	0x58004000

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <HAL_InitTick+0x6c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d024      	beq.n	800118a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001140:	f003 fb12 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 8001144:	4602      	mov	r2, r0
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_InitTick+0x6c>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001150:	fbb3 f3f1 	udiv	r3, r3, r1
 8001154:	fbb2 f3f3 	udiv	r3, r2, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f000 f972 	bl	8001442 <HAL_SYSTICK_Config>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10f      	bne.n	8001184 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b0f      	cmp	r3, #15
 8001168:	d809      	bhi.n	800117e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116a:	2200      	movs	r2, #0
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	f04f 30ff 	mov.w	r0, #4294967295
 8001172:	f000 f93e 	bl	80013f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001176:	4a09      	ldr	r2, [pc, #36]	; (800119c <HAL_InitTick+0x70>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	e007      	b.n	800118e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	73fb      	strb	r3, [r7, #15]
 8001182:	e004      	b.n	800118e <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e001      	b.n	800118e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000014 	.word	0x20000014
 800119c:	20000010 	.word	0x20000010

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	; (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000014 	.word	0x20000014
 80011c4:	200002fc 	.word	0x200002fc

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	; (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	200002fc 	.word	0x200002fc

080011e0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTickPrio+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000010 	.word	0x20000010

080011f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff ffe2 	bl	80011c8 <HAL_GetTick>
 8001204:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001210:	d005      	beq.n	800121e <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_Delay+0x40>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	461a      	mov	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800121e:	bf00      	nop
 8001220:	f7ff ffd2 	bl	80011c8 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	429a      	cmp	r2, r3
 800122e:	d8f7      	bhi.n	8001220 <HAL_Delay+0x28>
    {
    }
  }
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000014 	.word	0x20000014

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff8e 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff29 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff40 	bl	8001284 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff90 	bl	8001330 <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5f 	bl	80012dc <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff33 	bl	80012a0 <__NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffa4 	bl	8001398 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e08e      	b.n	800158c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	461a      	mov	r2, r3
 8001474:	4b47      	ldr	r3, [pc, #284]	; (8001594 <HAL_DMA_Init+0x138>)
 8001476:	429a      	cmp	r2, r3
 8001478:	d80f      	bhi.n	800149a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	461a      	mov	r2, r3
 8001480:	4b45      	ldr	r3, [pc, #276]	; (8001598 <HAL_DMA_Init+0x13c>)
 8001482:	4413      	add	r3, r2
 8001484:	4a45      	ldr	r2, [pc, #276]	; (800159c <HAL_DMA_Init+0x140>)
 8001486:	fba2 2303 	umull	r2, r3, r2, r3
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	009a      	lsls	r2, r3, #2
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a42      	ldr	r2, [pc, #264]	; (80015a0 <HAL_DMA_Init+0x144>)
 8001496:	641a      	str	r2, [r3, #64]	; 0x40
 8001498:	e00e      	b.n	80014b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <HAL_DMA_Init+0x148>)
 80014a2:	4413      	add	r3, r2
 80014a4:	4a3d      	ldr	r2, [pc, #244]	; (800159c <HAL_DMA_Init+0x140>)
 80014a6:	fba2 2303 	umull	r2, r3, r2, r3
 80014aa:	091b      	lsrs	r3, r3, #4
 80014ac:	009a      	lsls	r2, r3, #2
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a3c      	ldr	r2, [pc, #240]	; (80015a8 <HAL_DMA_Init+0x14c>)
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80014ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80014dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	691b      	ldr	r3, [r3, #16]
 80014e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1b      	ldr	r3, [r3, #32]
 80014fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	4313      	orrs	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f000 fa24 	bl	8001958 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001518:	d102      	bne.n	8001520 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001528:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800152c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001536:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d010      	beq.n	8001562 <HAL_DMA_Init+0x106>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d80c      	bhi.n	8001562 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fa43 	bl	80019d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	e008      	b.n	8001574 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40020407 	.word	0x40020407
 8001598:	bffdfff8 	.word	0xbffdfff8
 800159c:	cccccccd 	.word	0xcccccccd
 80015a0:	40020000 	.word	0x40020000
 80015a4:	bffdfbf8 	.word	0xbffdfbf8
 80015a8:	40020400 	.word	0x40020400

080015ac <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d101      	bne.n	80015cc <HAL_DMA_Start_IT+0x20>
 80015c8:	2302      	movs	r3, #2
 80015ca:	e066      	b.n	800169a <HAL_DMA_Start_IT+0xee>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d155      	bne.n	800168c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2202      	movs	r2, #2
 80015e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0201 	bic.w	r2, r2, #1
 80015fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	68b9      	ldr	r1, [r7, #8]
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f000 f968 	bl	80018da <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f042 020e 	orr.w	r2, r2, #14
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	e00f      	b.n	8001644 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0204 	bic.w	r2, r2, #4
 8001632:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f042 020a 	orr.w	r2, r2, #10
 8001642:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001660:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001666:	2b00      	cmp	r3, #0
 8001668:	d007      	beq.n	800167a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001678:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	e005      	b.n	8001698 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001694:	2302      	movs	r3, #2
 8001696:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001698:	7dfb      	ldrb	r3, [r7, #23]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b084      	sub	sp, #16
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d005      	beq.n	80016c6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2204      	movs	r2, #4
 80016be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	73fb      	strb	r3, [r7, #15]
 80016c4:	e047      	b.n	8001756 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 020e 	bic.w	r2, r2, #14
 80016d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0201 	bic.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	f003 021c 	and.w	r2, r3, #28
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	2101      	movs	r1, #1
 8001704:	fa01 f202 	lsl.w	r2, r1, r2
 8001708:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001712:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	2b00      	cmp	r3, #0
 800171a:	d00c      	beq.n	8001736 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800172a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001734:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2201      	movs	r2, #1
 800173a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	4798      	blx	r3
    }
  }
  return status;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	f003 031c 	and.w	r3, r3, #28
 8001780:	2204      	movs	r2, #4
 8001782:	409a      	lsls	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d026      	beq.n	80017da <HAL_DMA_IRQHandler+0x7a>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d021      	beq.n	80017da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0320 	and.w	r3, r3, #32
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d107      	bne.n	80017b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0204 	bic.w	r2, r2, #4
 80017b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	f003 021c 	and.w	r2, r3, #28
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	2104      	movs	r1, #4
 80017c2:	fa01 f202 	lsl.w	r2, r1, r2
 80017c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d071      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80017d8:	e06c      	b.n	80018b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	f003 031c 	and.w	r3, r3, #28
 80017e2:	2202      	movs	r2, #2
 80017e4:	409a      	lsls	r2, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4013      	ands	r3, r2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d02e      	beq.n	800184c <HAL_DMA_IRQHandler+0xec>
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d029      	beq.n	800184c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0320 	and.w	r3, r3, #32
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10b      	bne.n	800181e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 020a 	bic.w	r2, r2, #10
 8001814:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	f003 021c 	and.w	r2, r3, #28
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	2102      	movs	r1, #2
 800182c:	fa01 f202 	lsl.w	r2, r1, r2
 8001830:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	2b00      	cmp	r3, #0
 8001840:	d038      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800184a:	e033      	b.n	80018b4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001850:	f003 031c 	and.w	r3, r3, #28
 8001854:	2208      	movs	r2, #8
 8001856:	409a      	lsls	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d02a      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x156>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d025      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 020e 	bic.w	r2, r2, #14
 8001878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187e:	f003 021c 	and.w	r2, r3, #28
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	2101      	movs	r1, #1
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2201      	movs	r2, #1
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018b4:	bf00      	nop
 80018b6:	bf00      	nop
}
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018cc:	b2db      	uxtb	r3, r3
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr

080018da <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	60f8      	str	r0, [r7, #12]
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018f0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d004      	beq.n	8001904 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001902:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001908:	f003 021c 	and.w	r2, r3, #28
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	2101      	movs	r1, #1
 8001912:	fa01 f202 	lsl.w	r2, r1, r2
 8001916:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2b10      	cmp	r3, #16
 8001926:	d108      	bne.n	800193a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001938:	e007      	b.n	800194a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	60da      	str	r2, [r3, #12]
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001968:	429a      	cmp	r2, r3
 800196a:	d80a      	bhi.n	8001982 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001978:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6493      	str	r3, [r2, #72]	; 0x48
 8001980:	e007      	b.n	8001992 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	009a      	lsls	r2, r3, #2
 800198a:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800198c:	4413      	add	r3, r2
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3b08      	subs	r3, #8
 800199a:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800199c:	fba2 2303 	umull	r2, r3, r2, r3
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80019a8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2201      	movs	r2, #1
 80019b2:	409a      	lsls	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019b8:	bf00      	nop
 80019ba:	3714      	adds	r7, #20
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40020407 	.word	0x40020407
 80019c8:	4002081c 	.word	0x4002081c
 80019cc:	cccccccd 	.word	0xcccccccd
 80019d0:	40020880 	.word	0x40020880

080019d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019e4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a09      	ldr	r2, [pc, #36]	; (8001a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80019f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2201      	movs	r2, #1
 8001a04:	409a      	lsls	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a0a:	bf00      	nop
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	1000823f 	.word	0x1000823f
 8001a1c:	40020940 	.word	0x40020940

08001a20 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2e:	e14c      	b.n	8001cca <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 813e 	beq.w	8001cc4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d00b      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d007      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a5c:	2b11      	cmp	r3, #17
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b12      	cmp	r3, #18
 8001a66:	d130      	bne.n	8001aca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	2203      	movs	r2, #3
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	43db      	mvns	r3, r3
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	091b      	lsrs	r3, r3, #4
 8001ab4:	f003 0201 	and.w	r2, r3, #1
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0xea>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	2b12      	cmp	r3, #18
 8001b08:	d123      	bne.n	8001b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	220f      	movs	r2, #15
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	08da      	lsrs	r2, r3, #3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	3208      	adds	r2, #8
 8001b4c:	6939      	ldr	r1, [r7, #16]
 8001b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	2203      	movs	r2, #3
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43db      	mvns	r3, r3
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4013      	ands	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0203 	and.w	r2, r3, #3
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 8098 	beq.w	8001cc4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b94:	4a54      	ldr	r2, [pc, #336]	; (8001ce8 <HAL_GPIO_Init+0x2c8>)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	089b      	lsrs	r3, r3, #2
 8001b9a:	3302      	adds	r3, #2
 8001b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	220f      	movs	r2, #15
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bbe:	d019      	beq.n	8001bf4 <HAL_GPIO_Init+0x1d4>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a4a      	ldr	r2, [pc, #296]	; (8001cec <HAL_GPIO_Init+0x2cc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d013      	beq.n	8001bf0 <HAL_GPIO_Init+0x1d0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a49      	ldr	r2, [pc, #292]	; (8001cf0 <HAL_GPIO_Init+0x2d0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d00d      	beq.n	8001bec <HAL_GPIO_Init+0x1cc>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a48      	ldr	r2, [pc, #288]	; (8001cf4 <HAL_GPIO_Init+0x2d4>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d007      	beq.n	8001be8 <HAL_GPIO_Init+0x1c8>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a47      	ldr	r2, [pc, #284]	; (8001cf8 <HAL_GPIO_Init+0x2d8>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d101      	bne.n	8001be4 <HAL_GPIO_Init+0x1c4>
 8001be0:	2304      	movs	r3, #4
 8001be2:	e008      	b.n	8001bf6 <HAL_GPIO_Init+0x1d6>
 8001be4:	2307      	movs	r3, #7
 8001be6:	e006      	b.n	8001bf6 <HAL_GPIO_Init+0x1d6>
 8001be8:	2303      	movs	r3, #3
 8001bea:	e004      	b.n	8001bf6 <HAL_GPIO_Init+0x1d6>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0x1d6>
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_GPIO_Init+0x1d6>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	f002 0203 	and.w	r2, r2, #3
 8001bfc:	0092      	lsls	r2, r2, #2
 8001bfe:	4093      	lsls	r3, r2
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c06:	4938      	ldr	r1, [pc, #224]	; (8001ce8 <HAL_GPIO_Init+0x2c8>)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	089b      	lsrs	r3, r3, #2
 8001c0c:	3302      	adds	r3, #2
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c14:	4b39      	ldr	r3, [pc, #228]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c3a:	4a30      	ldr	r2, [pc, #192]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001c42:	4b2e      	ldr	r3, [pc, #184]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c68:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c70:	4b22      	ldr	r3, [pc, #136]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c94:	4a19      	ldr	r2, [pc, #100]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c9a:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cbe:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <HAL_GPIO_Init+0x2dc>)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f47f aeab 	bne.w	8001a30 <HAL_GPIO_Init+0x10>
  }
}
 8001cda:	bf00      	nop
 8001cdc:	371c      	adds	r7, #28
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	40010000 	.word	0x40010000
 8001cec:	48000400 	.word	0x48000400
 8001cf0:	48000800 	.word	0x48000800
 8001cf4:	48000c00 	.word	0x48000c00
 8001cf8:	48001000 	.word	0x48001000
 8001cfc:	58000800 	.word	0x58000800

08001d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d10:	787b      	ldrb	r3, [r7, #1]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	695b      	ldr	r3, [r3, #20]
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4013      	ands	r3, r2
 8001d48:	041a      	lsls	r2, r3, #16
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	43d9      	mvns	r1, r3
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	400b      	ands	r3, r1
 8001d52:	431a      	orrs	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	619a      	str	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_HSEM_IRQHandler+0x30>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <HAL_HSEM_IRQHandler+0x30>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	4906      	ldr	r1, [pc, #24]	; (8001d94 <HAL_HSEM_IRQHandler+0x30>)
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001d7e:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <HAL_HSEM_IRQHandler+0x30>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f807 	bl	8001d98 <HAL_HSEM_FreeCallback>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	58001500 	.word	0x58001500

08001d98 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e081      	b.n	8001ec2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f7fe fe0e 	bl	80009f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2224      	movs	r2, #36	; 0x24
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0201 	bic.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dfc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e0c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d107      	bne.n	8001e26 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689a      	ldr	r2, [r3, #8]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e22:	609a      	str	r2, [r3, #8]
 8001e24:	e006      	b.n	8001e34 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001e32:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d104      	bne.n	8001e46 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	ea42 0103 	orr.w	r1, r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	021a      	lsls	r2, r3, #8
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69d9      	ldr	r1, [r3, #28]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1a      	ldr	r2, [r3, #32]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2220      	movs	r2, #32
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	f040 809b 	bne.w	800201e <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <HAL_I2C_Slave_Transmit_DMA+0x28>
 8001eee:	88fb      	ldrh	r3, [r7, #6]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001efa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e08f      	b.n	8002020 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d101      	bne.n	8001f0e <HAL_I2C_Slave_Transmit_DMA+0x42>
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e088      	b.n	8002020 <HAL_I2C_Slave_Transmit_DMA+0x154>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2221      	movs	r2, #33	; 0x21
 8001f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2220      	movs	r2, #32
 8001f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4a38      	ldr	r2, [pc, #224]	; (8002028 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 8001f46:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a38      	ldr	r2, [pc, #224]	; (800202c <HAL_I2C_Slave_Transmit_DMA+0x160>)
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d020      	beq.n	8001f98 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	4a35      	ldr	r2, [pc, #212]	; (8002030 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	4a34      	ldr	r2, [pc, #208]	; (8002034 <HAL_I2C_Slave_Transmit_DMA+0x168>)
 8001f64:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f72:	2200      	movs	r2, #0
 8001f74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3328      	adds	r3, #40	; 0x28
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f88:	f7ff fb10 	bl	80015ac <HAL_DMA_Start_IT>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d12f      	bne.n	8001ff6 <HAL_I2C_Slave_Transmit_DMA+0x12a>
 8001f96:	e013      	b.n	8001fc0 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2228      	movs	r2, #40	; 0x28
 8001f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e02f      	b.n	8002020 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	685a      	ldr	r2, [r3, #4]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fce:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f001 f97d 	bl	80032dc <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ff0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e014      	b.n	8002020 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2228      	movs	r2, #40	; 0x28
 8001ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f043 0210 	orr.w	r2, r3, #16
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800201e:	2302      	movs	r3, #2
  }
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	ffff0000 	.word	0xffff0000
 800202c:	08002707 	.word	0x08002707
 8002030:	0800318f 	.word	0x0800318f
 8002034:	08003215 	.word	0x08003215

08002038 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b086      	sub	sp, #24
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	4613      	mov	r3, r2
 8002044:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b20      	cmp	r3, #32
 8002050:	f040 809b 	bne.w	800218a <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_I2C_Slave_Receive_DMA+0x28>
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002066:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e08f      	b.n	800218c <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_I2C_Slave_Receive_DMA+0x42>
 8002076:	2302      	movs	r3, #2
 8002078:	e088      	b.n	800218c <HAL_I2C_Slave_Receive_DMA+0x154>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2222      	movs	r2, #34	; 0x22
 8002086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2220      	movs	r2, #32
 800208e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	88fa      	ldrh	r2, [r7, #6]
 80020a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4a38      	ldr	r2, [pc, #224]	; (8002194 <HAL_I2C_Slave_Receive_DMA+0x15c>)
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4a38      	ldr	r2, [pc, #224]	; (8002198 <HAL_I2C_Slave_Receive_DMA+0x160>)
 80020b8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d020      	beq.n	8002104 <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c6:	4a35      	ldr	r2, [pc, #212]	; (800219c <HAL_I2C_Slave_Receive_DMA+0x164>)
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ce:	4a34      	ldr	r2, [pc, #208]	; (80021a0 <HAL_I2C_Slave_Receive_DMA+0x168>)
 80020d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	2200      	movs	r2, #0
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	2200      	movs	r2, #0
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	3324      	adds	r3, #36	; 0x24
 80020ec:	4619      	mov	r1, r3
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f4:	f7ff fa5a 	bl	80015ac <HAL_DMA_Start_IT>
 80020f8:	4603      	mov	r3, r0
 80020fa:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d12f      	bne.n	8002162 <HAL_I2C_Slave_Receive_DMA+0x12a>
 8002102:	e013      	b.n	800212c <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2228      	movs	r2, #40	; 0x28
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002118:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e02f      	b.n	800218c <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800213a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f001 f8c7 	bl	80032dc <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800215c:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e014      	b.n	800218c <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2228      	movs	r2, #40	; 0x28
 8002166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	f043 0210 	orr.w	r2, r3, #16
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 800218a:	2302      	movs	r3, #2
  }
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	ffff0000 	.word	0xffff0000
 8002198:	08002707 	.word	0x08002707
 800219c:	080031cf 	.word	0x080031cf
 80021a0:	08003215 	.word	0x08003215

080021a4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	68f9      	ldr	r1, [r7, #12]
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	4798      	blx	r3
  }
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d010      	beq.n	800221e <HAL_I2C_ER_IRQHandler+0x46>
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	09db      	lsrs	r3, r3, #7
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800221c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	0a9b      	lsrs	r3, r3, #10
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <HAL_I2C_ER_IRQHandler+0x74>
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	09db      	lsrs	r3, r3, #7
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223a:	f043 0208 	orr.w	r2, r3, #8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800224a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	0a5b      	lsrs	r3, r3, #9
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d010      	beq.n	800227a <HAL_I2C_ER_IRQHandler+0xa2>
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	09db      	lsrs	r3, r3, #7
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	f043 0202 	orr.w	r2, r3, #2
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002278:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 030b 	and.w	r3, r3, #11
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800228a:	68f9      	ldr	r1, [r7, #12]
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 fe63 	bl	8002f58 <I2C_ITError>
  }
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	460b      	mov	r3, r1
 80022a4:	70fb      	strb	r3, [r7, #3]
 80022a6:	4613      	mov	r3, r2
 80022a8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr

080022de <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <I2C_Slave_ISR_IT+0x24>
 800233a:	2302      	movs	r3, #2
 800233c:	e0ec      	b.n	8002518 <I2C_Slave_ISR_IT+0x1fe>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <I2C_Slave_ISR_IT+0x4c>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	095b      	lsrs	r3, r3, #5
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800235e:	6939      	ldr	r1, [r7, #16]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fc99 	bl	8002c98 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d04d      	beq.n	800240e <I2C_Slave_ISR_IT+0xf4>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d047      	beq.n	800240e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d128      	bne.n	80023da <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b28      	cmp	r3, #40	; 0x28
 8002392:	d108      	bne.n	80023a6 <I2C_Slave_ISR_IT+0x8c>
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800239a:	d104      	bne.n	80023a6 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800239c:	6939      	ldr	r1, [r7, #16]
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fd84 	bl	8002eac <I2C_ITListenCplt>
 80023a4:	e032      	b.n	800240c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b29      	cmp	r3, #41	; 0x29
 80023b0:	d10e      	bne.n	80023d0 <I2C_Slave_ISR_IT+0xb6>
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023b8:	d00a      	beq.n	80023d0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2210      	movs	r2, #16
 80023c0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 febf 	bl	8003146 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fb3d 	bl	8002a48 <I2C_ITSlaveSeqCplt>
 80023ce:	e01d      	b.n	800240c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2210      	movs	r2, #16
 80023d6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80023d8:	e096      	b.n	8002508 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2210      	movs	r2, #16
 80023e0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f043 0204 	orr.w	r2, r3, #4
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <I2C_Slave_ISR_IT+0xe4>
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fa:	f040 8085 	bne.w	8002508 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4619      	mov	r1, r3
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 fda7 	bl	8002f58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800240a:	e07d      	b.n	8002508 <I2C_Slave_ISR_IT+0x1ee>
 800240c:	e07c      	b.n	8002508 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d030      	beq.n	800247c <I2C_Slave_ISR_IT+0x162>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d02a      	beq.n	800247c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242a:	b29b      	uxth	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d018      	beq.n	8002462 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	3b01      	subs	r3, #1
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002458:	b29b      	uxth	r3, r3
 800245a:	3b01      	subs	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d14f      	bne.n	800250c <I2C_Slave_ISR_IT+0x1f2>
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002472:	d04b      	beq.n	800250c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 fae7 	bl	8002a48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800247a:	e047      	b.n	800250c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	08db      	lsrs	r3, r3, #3
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00a      	beq.n	800249e <I2C_Slave_ISR_IT+0x184>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	08db      	lsrs	r3, r3, #3
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d004      	beq.n	800249e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002494:	6939      	ldr	r1, [r7, #16]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 fa15 	bl	80028c6 <I2C_ITAddrCplt>
 800249c:	e037      	b.n	800250e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	085b      	lsrs	r3, r3, #1
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d031      	beq.n	800250e <I2C_Slave_ISR_IT+0x1f4>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d02b      	beq.n	800250e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d018      	beq.n	80024f2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	1c5a      	adds	r2, r3, #1
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024da:	b29b      	uxth	r3, r3
 80024dc:	3b01      	subs	r3, #1
 80024de:	b29a      	uxth	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80024f0:	e00d      	b.n	800250e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f8:	d002      	beq.n	8002500 <I2C_Slave_ISR_IT+0x1e6>
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d106      	bne.n	800250e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 faa1 	bl	8002a48 <I2C_ITSlaveSeqCplt>
 8002506:	e002      	b.n	800250e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002508:	bf00      	nop
 800250a:	e000      	b.n	800250e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800250c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <I2C_Master_ISR_DMA+0x1a>
 8002536:	2302      	movs	r3, #2
 8002538:	e0e1      	b.n	80026fe <I2C_Master_ISR_DMA+0x1de>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	091b      	lsrs	r3, r3, #4
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d017      	beq.n	800257e <I2C_Master_ISR_DMA+0x5e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b00      	cmp	r3, #0
 8002558:	d011      	beq.n	800257e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2210      	movs	r2, #16
 8002560:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002566:	f043 0204 	orr.w	r2, r3, #4
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800256e:	2120      	movs	r1, #32
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 feb3 	bl	80032dc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fde5 	bl	8003146 <I2C_Flush_TXDR>
 800257c:	e0ba      	b.n	80026f4 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	09db      	lsrs	r3, r3, #7
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d072      	beq.n	8002670 <I2C_Master_ISR_DMA+0x150>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d06c      	beq.n	8002670 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d04e      	beq.n	800264e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025bc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	2bff      	cmp	r3, #255	; 0xff
 80025c6:	d906      	bls.n	80025d6 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	22ff      	movs	r2, #255	; 0xff
 80025cc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80025ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025d2:	617b      	str	r3, [r7, #20]
 80025d4:	e010      	b.n	80025f8 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29a      	uxth	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025e8:	d003      	beq.n	80025f2 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	e002      	b.n	80025f8 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80025f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	8a79      	ldrh	r1, [r7, #18]
 8002600:	2300      	movs	r3, #0
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fe3a 	bl	8003280 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b22      	cmp	r3, #34	; 0x22
 8002628:	d108      	bne.n	800263c <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002638:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800263a:	e05b      	b.n	80026f4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800264a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800264c:	e052      	b.n	80026f4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800265c:	d003      	beq.n	8002666 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f9b5 	bl	80029ce <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002664:	e046      	b.n	80026f4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002666:	2140      	movs	r1, #64	; 0x40
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fc75 	bl	8002f58 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800266e:	e041      	b.n	80026f4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	099b      	lsrs	r3, r3, #6
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d029      	beq.n	80026d0 <I2C_Master_ISR_DMA+0x1b0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	099b      	lsrs	r3, r3, #6
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d023      	beq.n	80026d0 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d119      	bne.n	80026c6 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026a0:	d027      	beq.n	80026f2 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026aa:	d108      	bne.n	80026be <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ba:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80026bc:	e019      	b.n	80026f2 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f985 	bl	80029ce <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80026c4:	e015      	b.n	80026f2 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80026c6:	2140      	movs	r1, #64	; 0x40
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 fc45 	bl	8002f58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80026ce:	e010      	b.n	80026f2 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <I2C_Master_ISR_DMA+0x1d4>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 fa0a 	bl	8002b04 <I2C_ITMasterCplt>
 80026f0:	e000      	b.n	80026f4 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80026f2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b088      	sub	sp, #32
 800270a:	af00      	add	r7, sp, #0
 800270c:	60f8      	str	r0, [r7, #12]
 800270e:	60b9      	str	r1, [r7, #8]
 8002710:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <I2C_Slave_ISR_DMA+0x24>
 8002726:	2302      	movs	r3, #2
 8002728:	e0c9      	b.n	80028be <I2C_Slave_ISR_DMA+0x1b8>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <I2C_Slave_ISR_DMA+0x4c>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800274a:	68b9      	ldr	r1, [r7, #8]
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f000 faa3 	bl	8002c98 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	091b      	lsrs	r3, r3, #4
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 809a 	beq.w	8002894 <I2C_Slave_ISR_DMA+0x18e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 8093 	beq.w	8002894 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0b9b      	lsrs	r3, r3, #14
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d105      	bne.n	8002786 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	0bdb      	lsrs	r3, r3, #15
 800277e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002782:	2b00      	cmp	r3, #0
 8002784:	d07f      	beq.n	8002886 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00d      	beq.n	80027aa <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	0bdb      	lsrs	r3, r3, #15
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80027a6:	2301      	movs	r3, #1
 80027a8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00d      	beq.n	80027ce <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	0b9b      	lsrs	r3, r3, #14
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d007      	beq.n	80027ce <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80027ca:	2301      	movs	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d128      	bne.n	8002826 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b28      	cmp	r3, #40	; 0x28
 80027de:	d108      	bne.n	80027f2 <I2C_Slave_ISR_DMA+0xec>
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80027e6:	d104      	bne.n	80027f2 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80027e8:	68b9      	ldr	r1, [r7, #8]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 fb5e 	bl	8002eac <I2C_ITListenCplt>
 80027f0:	e048      	b.n	8002884 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b29      	cmp	r3, #41	; 0x29
 80027fc:	d10e      	bne.n	800281c <I2C_Slave_ISR_DMA+0x116>
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002804:	d00a      	beq.n	800281c <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2210      	movs	r2, #16
 800280c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fc99 	bl	8003146 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 f917 	bl	8002a48 <I2C_ITSlaveSeqCplt>
 800281a:	e033      	b.n	8002884 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2210      	movs	r2, #16
 8002822:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002824:	e034      	b.n	8002890 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2210      	movs	r2, #16
 800282c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002832:	f043 0204 	orr.w	r2, r3, #4
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002840:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <I2C_Slave_ISR_DMA+0x14a>
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800284e:	d11f      	bne.n	8002890 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002850:	7dfb      	ldrb	r3, [r7, #23]
 8002852:	2b21      	cmp	r3, #33	; 0x21
 8002854:	d002      	beq.n	800285c <I2C_Slave_ISR_DMA+0x156>
 8002856:	7dfb      	ldrb	r3, [r7, #23]
 8002858:	2b29      	cmp	r3, #41	; 0x29
 800285a:	d103      	bne.n	8002864 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2221      	movs	r2, #33	; 0x21
 8002860:	631a      	str	r2, [r3, #48]	; 0x30
 8002862:	e008      	b.n	8002876 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002864:	7dfb      	ldrb	r3, [r7, #23]
 8002866:	2b22      	cmp	r3, #34	; 0x22
 8002868:	d002      	beq.n	8002870 <I2C_Slave_ISR_DMA+0x16a>
 800286a:	7dfb      	ldrb	r3, [r7, #23]
 800286c:	2b2a      	cmp	r3, #42	; 0x2a
 800286e:	d102      	bne.n	8002876 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2222      	movs	r2, #34	; 0x22
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	4619      	mov	r1, r3
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fb6b 	bl	8002f58 <I2C_ITError>
      if (treatdmanack == 1U)
 8002882:	e005      	b.n	8002890 <I2C_Slave_ISR_DMA+0x18a>
 8002884:	e004      	b.n	8002890 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2210      	movs	r2, #16
 800288c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800288e:	e011      	b.n	80028b4 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002890:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002892:	e00f      	b.n	80028b4 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	08db      	lsrs	r3, r3, #3
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <I2C_Slave_ISR_DMA+0x1ae>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	08db      	lsrs	r3, r3, #3
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f809 	bl	80028c6 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b084      	sub	sp, #16
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80028dc:	2b28      	cmp	r3, #40	; 0x28
 80028de:	d16a      	bne.n	80029b6 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	0c1b      	lsrs	r3, r3, #16
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	0c1b      	lsrs	r3, r3, #16
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80028fe:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	b29b      	uxth	r3, r3
 8002908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800290c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	b29b      	uxth	r3, r3
 8002916:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800291a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d138      	bne.n	8002996 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002924:	897b      	ldrh	r3, [r7, #10]
 8002926:	09db      	lsrs	r3, r3, #7
 8002928:	b29a      	uxth	r2, r3
 800292a:	89bb      	ldrh	r3, [r7, #12]
 800292c:	4053      	eors	r3, r2
 800292e:	b29b      	uxth	r3, r3
 8002930:	f003 0306 	and.w	r3, r3, #6
 8002934:	2b00      	cmp	r3, #0
 8002936:	d11c      	bne.n	8002972 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002938:	897b      	ldrh	r3, [r7, #10]
 800293a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294a:	2b02      	cmp	r3, #2
 800294c:	d13b      	bne.n	80029c6 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2208      	movs	r2, #8
 800295a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002964:	89ba      	ldrh	r2, [r7, #12]
 8002966:	7bfb      	ldrb	r3, [r7, #15]
 8002968:	4619      	mov	r1, r3
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff fc95 	bl	800229a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002970:	e029      	b.n	80029c6 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002972:	893b      	ldrh	r3, [r7, #8]
 8002974:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002976:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fd12 	bl	80033a4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002988:	89ba      	ldrh	r2, [r7, #12]
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	4619      	mov	r1, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff fc83 	bl	800229a <HAL_I2C_AddrCallback>
}
 8002994:	e017      	b.n	80029c6 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fd02 	bl	80033a4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80029a8:	89ba      	ldrh	r2, [r7, #12]
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff fc73 	bl	800229a <HAL_I2C_AddrCallback>
}
 80029b4:	e007      	b.n	80029c6 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2208      	movs	r2, #8
 80029bc:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b21      	cmp	r3, #33	; 0x21
 80029e8:	d115      	bne.n	8002a16 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2211      	movs	r2, #17
 80029f6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80029fe:	2101      	movs	r1, #1
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 fccf 	bl	80033a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7fd ff22 	bl	8000858 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a14:	e014      	b.n	8002a40 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2212      	movs	r2, #18
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fcb9 	bl	80033a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fd ff1a 	bl	8000874 <HAL_I2C_MasterRxCpltCallback>
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	0b9b      	lsrs	r3, r3, #14
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d008      	beq.n	8002a7e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a7a:	601a      	str	r2, [r3, #0]
 8002a7c:	e00d      	b.n	8002a9a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	0bdb      	lsrs	r3, r3, #15
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a98:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b29      	cmp	r3, #41	; 0x29
 8002aa4:	d112      	bne.n	8002acc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2228      	movs	r2, #40	; 0x28
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2221      	movs	r2, #33	; 0x21
 8002ab2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fc74 	bl	80033a4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7fd fee9 	bl	800089c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002aca:	e017      	b.n	8002afc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ad6:	d111      	bne.n	8002afc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2228      	movs	r2, #40	; 0x28
 8002adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2222      	movs	r2, #34	; 0x22
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 fc5b 	bl	80033a4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f7fd fee4 	bl	80008c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2220      	movs	r2, #32
 8002b18:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b21      	cmp	r3, #33	; 0x21
 8002b24:	d107      	bne.n	8002b36 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002b26:	2101      	movs	r1, #1
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fc3b 	bl	80033a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2211      	movs	r2, #17
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
 8002b34:	e00c      	b.n	8002b50 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b22      	cmp	r3, #34	; 0x22
 8002b40:	d106      	bne.n	8002b50 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002b42:	2102      	movs	r1, #2
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fc2d 	bl	80033a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2212      	movs	r2, #18
 8002b4e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6859      	ldr	r1, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4b4d      	ldr	r3, [pc, #308]	; (8002c90 <I2C_ITMasterCplt+0x18c>)
 8002b5c:	400b      	ands	r3, r1
 8002b5e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a4a      	ldr	r2, [pc, #296]	; (8002c94 <I2C_ITMasterCplt+0x190>)
 8002b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d009      	beq.n	8002b8c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	f043 0204 	orr.w	r2, r3, #4
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b60      	cmp	r3, #96	; 0x60
 8002b96:	d10b      	bne.n	8002bb0 <I2C_ITMasterCplt+0xac>
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002bae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fac8 	bl	8003146 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b60      	cmp	r3, #96	; 0x60
 8002bc6:	d002      	beq.n	8002bce <I2C_ITMasterCplt+0xca>
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d006      	beq.n	8002bdc <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 f9bf 	bl	8002f58 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002bda:	e054      	b.n	8002c86 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b21      	cmp	r3, #33	; 0x21
 8002be6:	d124      	bne.n	8002c32 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2220      	movs	r2, #32
 8002bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d10b      	bne.n	8002c1a <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff fb59 	bl	80022ca <HAL_I2C_MemTxCpltCallback>
}
 8002c18:	e035      	b.n	8002c86 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fd fe14 	bl	8000858 <HAL_I2C_MasterTxCpltCallback>
}
 8002c30:	e029      	b.n	8002c86 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b22      	cmp	r3, #34	; 0x22
 8002c3c:	d123      	bne.n	8002c86 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b40      	cmp	r3, #64	; 0x40
 8002c56:	d10b      	bne.n	8002c70 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff fb38 	bl	80022de <HAL_I2C_MemRxCpltCallback>
}
 8002c6e:	e00a      	b.n	8002c86 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7fd fdf7 	bl	8000874 <HAL_I2C_MasterRxCpltCallback>
}
 8002c86:	bf00      	nop
 8002c88:	3718      	adds	r7, #24
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	fe00e800 	.word	0xfe00e800
 8002c94:	ffff0000 	.word	0xffff0000

08002c98 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b21      	cmp	r3, #33	; 0x21
 8002cc2:	d002      	beq.n	8002cca <I2C_ITSlaveCplt+0x32>
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b29      	cmp	r3, #41	; 0x29
 8002cc8:	d108      	bne.n	8002cdc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002cca:	f248 0101 	movw	r1, #32769	; 0x8001
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 fb68 	bl	80033a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2221      	movs	r2, #33	; 0x21
 8002cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002cda:	e00d      	b.n	8002cf8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
 8002cde:	2b22      	cmp	r3, #34	; 0x22
 8002ce0:	d002      	beq.n	8002ce8 <I2C_ITSlaveCplt+0x50>
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ce6:	d107      	bne.n	8002cf8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002ce8:	f248 0102 	movw	r1, #32770	; 0x8002
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 fb59 	bl	80033a4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2222      	movs	r2, #34	; 0x22
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d06:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6859      	ldr	r1, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	4b64      	ldr	r3, [pc, #400]	; (8002ea4 <I2C_ITSlaveCplt+0x20c>)
 8002d14:	400b      	ands	r3, r1
 8002d16:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 fa14 	bl	8003146 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	0b9b      	lsrs	r3, r3, #14
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d013      	beq.n	8002d52 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d020      	beq.n	8002d84 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d50:	e018      	b.n	8002d84 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	0bdb      	lsrs	r3, r3, #15
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d012      	beq.n	8002d84 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d6c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f023 0304 	bic.w	r3, r3, #4
 8002d96:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	1c5a      	adds	r2, r3, #1
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00c      	beq.n	8002dd2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d005      	beq.n	8002de8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f043 0204 	orr.w	r2, r3, #4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d010      	beq.n	8002e20 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	4619      	mov	r1, r3
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f8a7 	bl	8002f58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b28      	cmp	r3, #40	; 0x28
 8002e14:	d141      	bne.n	8002e9a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e16:	6979      	ldr	r1, [r7, #20]
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 f847 	bl	8002eac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e1e:	e03c      	b.n	8002e9a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e28:	d014      	beq.n	8002e54 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff fe0c 	bl	8002a48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a1d      	ldr	r2, [pc, #116]	; (8002ea8 <I2C_ITSlaveCplt+0x210>)
 8002e34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7ff fa32 	bl	80022b6 <HAL_I2C_ListenCpltCallback>
}
 8002e52:	e022      	b.n	8002e9a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b22      	cmp	r3, #34	; 0x22
 8002e5e:	d10e      	bne.n	8002e7e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f7fd fd24 	bl	80008c4 <HAL_I2C_SlaveRxCpltCallback>
}
 8002e7c:	e00d      	b.n	8002e9a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7fd fd01 	bl	800089c <HAL_I2C_SlaveTxCpltCallback>
}
 8002e9a:	bf00      	nop
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	fe00e800 	.word	0xfe00e800
 8002ea8:	ffff0000 	.word	0xffff0000

08002eac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a26      	ldr	r2, [pc, #152]	; (8002f54 <I2C_ITListenCplt+0xa8>)
 8002eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	089b      	lsrs	r3, r3, #2
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d022      	beq.n	8002f2a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d012      	beq.n	8002f2a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	3b01      	subs	r3, #1
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	f043 0204 	orr.w	r2, r3, #4
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f2a:	f248 0103 	movw	r1, #32771	; 0x8003
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fa38 	bl	80033a4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2210      	movs	r2, #16
 8002f3a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff f9b6 	bl	80022b6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002f4a:	bf00      	nop
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	ffff0000 	.word	0xffff0000

08002f58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a5d      	ldr	r2, [pc, #372]	; (80030ec <I2C_ITError+0x194>)
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b28      	cmp	r3, #40	; 0x28
 8002f8e:	d005      	beq.n	8002f9c <I2C_ITError+0x44>
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	2b29      	cmp	r3, #41	; 0x29
 8002f94:	d002      	beq.n	8002f9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2b2a      	cmp	r3, #42	; 0x2a
 8002f9a:	d10b      	bne.n	8002fb4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f9c:	2103      	movs	r1, #3
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fa00 	bl	80033a4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2228      	movs	r2, #40	; 0x28
 8002fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a50      	ldr	r2, [pc, #320]	; (80030f0 <I2C_ITError+0x198>)
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb2:	e011      	b.n	8002fd8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fb4:	f248 0103 	movw	r1, #32771	; 0x8003
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f9f3 	bl	80033a4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b60      	cmp	r3, #96	; 0x60
 8002fc8:	d003      	beq.n	8002fd2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d039      	beq.n	800305a <I2C_ITError+0x102>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b11      	cmp	r3, #17
 8002fea:	d002      	beq.n	8002ff2 <I2C_ITError+0x9a>
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	2b21      	cmp	r3, #33	; 0x21
 8002ff0:	d133      	bne.n	800305a <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ffc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003000:	d107      	bne.n	8003012 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003010:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fc51 	bl	80018be <HAL_DMA_GetState>
 800301c:	4603      	mov	r3, r0
 800301e:	2b01      	cmp	r3, #1
 8003020:	d017      	beq.n	8003052 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003026:	4a33      	ldr	r2, [pc, #204]	; (80030f4 <I2C_ITError+0x19c>)
 8003028:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fb33 	bl	80016a2 <HAL_DMA_Abort_IT>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d04d      	beq.n	80030de <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800304c:	4610      	mov	r0, r2
 800304e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003050:	e045      	b.n	80030de <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f850 	bl	80030f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003058:	e041      	b.n	80030de <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305e:	2b00      	cmp	r3, #0
 8003060:	d039      	beq.n	80030d6 <I2C_ITError+0x17e>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b12      	cmp	r3, #18
 8003066:	d002      	beq.n	800306e <I2C_ITError+0x116>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b22      	cmp	r3, #34	; 0x22
 800306c:	d133      	bne.n	80030d6 <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800307c:	d107      	bne.n	800308e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800308c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fc13 	bl	80018be <HAL_DMA_GetState>
 8003098:	4603      	mov	r3, r0
 800309a:	2b01      	cmp	r3, #1
 800309c:	d017      	beq.n	80030ce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a2:	4a14      	ldr	r2, [pc, #80]	; (80030f4 <I2C_ITError+0x19c>)
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe faf5 	bl	80016a2 <HAL_DMA_Abort_IT>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d011      	beq.n	80030e2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030c8:	4610      	mov	r0, r2
 80030ca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030cc:	e009      	b.n	80030e2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f812 	bl	80030f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030d4:	e005      	b.n	80030e2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f80e 	bl	80030f8 <I2C_TreatErrorCallback>
  }
}
 80030dc:	e002      	b.n	80030e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030e2:	bf00      	nop
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	ffff0000 	.word	0xffff0000
 80030f0:	0800231b 	.word	0x0800231b
 80030f4:	08003243 	.word	0x08003243

080030f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003106:	b2db      	uxtb	r3, r3
 8003108:	2b60      	cmp	r3, #96	; 0x60
 800310a:	d10e      	bne.n	800312a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff f8ef 	bl	8002306 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003128:	e009      	b.n	800313e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff f8da 	bl	80022f2 <HAL_I2C_ErrorCallback>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b02      	cmp	r3, #2
 800315a:	d103      	bne.n	8003164 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2200      	movs	r2, #0
 8003162:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d007      	beq.n	8003182 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	619a      	str	r2, [r3, #24]
  }
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a8:	d002      	beq.n	80031b0 <I2C_DMASlaveTransmitCplt+0x22>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031be:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f7ff fc41 	bl	8002a48 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80031c6:	bf00      	nop
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e0:	60bb      	str	r3, [r7, #8]

  if ((__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U) && \
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10e      	bne.n	800320c <I2C_DMASlaveReceiveCplt+0x3e>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f4:	d00a      	beq.n	800320c <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003204:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff fc1e 	bl	8002a48 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b084      	sub	sp, #16
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003220:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003230:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003232:	2110      	movs	r1, #16
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	f7ff fe8f 	bl	8002f58 <I2C_ITError>
}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	b084      	sub	sp, #16
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	2200      	movs	r2, #0
 800325e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326c:	2200      	movs	r2, #0
 800326e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7ff ff41 	bl	80030f8 <I2C_TreatErrorCallback>
}
 8003276:	bf00      	nop
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	460b      	mov	r3, r1
 800328c:	817b      	strh	r3, [r7, #10]
 800328e:	4613      	mov	r3, r2
 8003290:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	0d5b      	lsrs	r3, r3, #21
 800329c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032a0:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <I2C_TransferConfig+0x58>)
 80032a2:	430b      	orrs	r3, r1
 80032a4:	43db      	mvns	r3, r3
 80032a6:	ea02 0103 	and.w	r1, r2, r3
 80032aa:	897b      	ldrh	r3, [r7, #10]
 80032ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80032b0:	7a7b      	ldrb	r3, [r7, #9]
 80032b2:	041b      	lsls	r3, r3, #16
 80032b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	431a      	orrs	r2, r3
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80032ca:	bf00      	nop
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	03ff63ff 	.word	0x03ff63ff

080032dc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	460b      	mov	r3, r1
 80032e6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80032e8:	2300      	movs	r3, #0
 80032ea:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f0:	4a2a      	ldr	r2, [pc, #168]	; (800339c <I2C_Enable_IRQ+0xc0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d004      	beq.n	8003300 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80032fa:	4a29      	ldr	r2, [pc, #164]	; (80033a0 <I2C_Enable_IRQ+0xc4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d11d      	bne.n	800333c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003300:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003304:	2b00      	cmp	r3, #0
 8003306:	da03      	bge.n	8003310 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800330e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	2b10      	cmp	r3, #16
 8003314:	d103      	bne.n	800331e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800331c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800331e:	887b      	ldrh	r3, [r7, #2]
 8003320:	2b20      	cmp	r3, #32
 8003322:	d103      	bne.n	800332c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800332a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800332c:	887b      	ldrh	r3, [r7, #2]
 800332e:	2b40      	cmp	r3, #64	; 0x40
 8003330:	d125      	bne.n	800337e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003338:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800333a:	e020      	b.n	800337e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800333c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003340:	2b00      	cmp	r3, #0
 8003342:	da03      	bge.n	800334c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800334a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800335c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d003      	beq.n	8003370 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800336e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003370:	887b      	ldrh	r3, [r7, #2]
 8003372:	2b20      	cmp	r3, #32
 8003374:	d103      	bne.n	800337e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f043 0320 	orr.w	r3, r3, #32
 800337c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6819      	ldr	r1, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]
}
 800338e:	bf00      	nop
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	08002521 	.word	0x08002521
 80033a0:	08002707 	.word	0x08002707

080033a4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80033b4:	887b      	ldrh	r3, [r7, #2]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00f      	beq.n	80033de <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80033c4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033d2:	2b28      	cmp	r3, #40	; 0x28
 80033d4:	d003      	beq.n	80033de <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80033dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80033de:	887b      	ldrh	r3, [r7, #2]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00f      	beq.n	8003408 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80033ee:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80033fc:	2b28      	cmp	r3, #40	; 0x28
 80033fe:	d003      	beq.n	8003408 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003406:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003408:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800340c:	2b00      	cmp	r3, #0
 800340e:	da03      	bge.n	8003418 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003416:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003418:	887b      	ldrh	r3, [r7, #2]
 800341a:	2b10      	cmp	r3, #16
 800341c:	d103      	bne.n	8003426 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003424:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003426:	887b      	ldrh	r3, [r7, #2]
 8003428:	2b20      	cmp	r3, #32
 800342a:	d103      	bne.n	8003434 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f043 0320 	orr.w	r3, r3, #32
 8003432:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003434:	887b      	ldrh	r3, [r7, #2]
 8003436:	2b40      	cmp	r3, #64	; 0x40
 8003438:	d103      	bne.n	8003442 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003440:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6819      	ldr	r1, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	43da      	mvns	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	400a      	ands	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
}
 8003454:	bf00      	nop
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b20      	cmp	r3, #32
 8003474:	d138      	bne.n	80034e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003480:	2302      	movs	r3, #2
 8003482:	e032      	b.n	80034ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2224      	movs	r2, #36	; 0x24
 8003490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e000      	b.n	80034ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80034e8:	2302      	movs	r3, #2
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b20      	cmp	r3, #32
 800350a:	d139      	bne.n	8003580 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003512:	2b01      	cmp	r3, #1
 8003514:	d101      	bne.n	800351a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003516:	2302      	movs	r3, #2
 8003518:	e033      	b.n	8003582 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2201      	movs	r2, #1
 800351e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2224      	movs	r2, #36	; 0x24
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0201 	bic.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003548:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	021b      	lsls	r3, r3, #8
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2220      	movs	r2, #32
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800357c:	2300      	movs	r3, #0
 800357e:	e000      	b.n	8003582 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003580:	2302      	movs	r3, #2
  }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003594:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a04      	ldr	r2, [pc, #16]	; (80035ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800359a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800359e:	6013      	str	r3, [r2, #0]
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop
 80035ac:	58000400 	.word	0x58000400

080035b0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	58000400 	.word	0x58000400

080035cc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035de:	d101      	bne.n	80035e4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80035f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003602:	6013      	str	r3, [r2, #0]
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 800360e:	b480      	push	{r7}
 8003610:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800361c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003620:	6013      	str	r3, [r2, #0]
}
 8003622:	bf00      	nop
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800363a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363e:	6013      	str	r3, [r2, #0]
}
 8003640:	bf00      	nop
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800364a:	b480      	push	{r7}
 800364c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800364e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800365c:	6013      	str	r3, [r2, #0]
}
 800365e:	bf00      	nop
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800366c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800367a:	d101      	bne.n	8003680 <LL_RCC_HSE_IsReady+0x18>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <LL_RCC_HSE_IsReady+0x1a>
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800369a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369e:	6013      	str	r3, [r2, #0]
}
 80036a0:	bf00      	nop
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80036aa:	b480      	push	{r7}
 80036ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80036ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036bc:	6013      	str	r3, [r2, #0]
}
 80036be:	bf00      	nop
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80036cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036da:	d101      	bne.n	80036e0 <LL_RCC_HSI_IsReady+0x18>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <LL_RCC_HSI_IsReady+0x1a>
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80036f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	061b      	lsls	r3, r3, #24
 8003702:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003706:	4313      	orrs	r3, r2
 8003708:	604b      	str	r3, [r1, #4]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003716:	b480      	push	{r7}
 8003718:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800371a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800371e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800372e:	bf00      	nop
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800373c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003740:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800375e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d101      	bne.n	8003772 <LL_RCC_HSI48_IsReady+0x18>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <LL_RCC_HSI48_IsReady+0x1a>
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80037a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037b8:	bf00      	nop
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80037c2:	b480      	push	{r7}
 80037c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d2:	f043 0304 	orr.w	r3, r3, #4
 80037d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037da:	bf00      	nop
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80037e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b02      	cmp	r3, #2
 8003818:	d101      	bne.n	800381e <LL_RCC_LSE_IsReady+0x18>
 800381a:	2301      	movs	r3, #1
 800381c:	e000      	b.n	8003820 <LL_RCC_LSE_IsReady+0x1a>
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800382e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003836:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800383a:	f043 0301 	orr.w	r3, r3, #1
 800383e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003842:	bf00      	nop
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b02      	cmp	r3, #2
 8003880:	d101      	bne.n	8003886 <LL_RCC_LSI1_IsReady+0x18>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <LL_RCC_LSI1_IsReady+0x1a>
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8003892:	b480      	push	{r7}
 8003894:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800389a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800389e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038a2:	f043 0304 	orr.w	r3, r3, #4
 80038a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038aa:	bf00      	nop
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80038b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038c4:	f023 0304 	bic.w	r3, r3, #4
 80038c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80038da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b08      	cmp	r3, #8
 80038e8:	d101      	bne.n	80038ee <LL_RCC_LSI2_IsReady+0x18>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e000      	b.n	80038f0 <LL_RCC_LSI2_IsReady+0x1a>
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800390a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	021b      	lsls	r3, r3, #8
 8003912:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800392c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003946:	b480      	push	{r7}
 8003948:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800394a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003954:	f023 0301 	bic.w	r3, r3, #1
 8003958:	6013      	str	r3, [r2, #0]
}
 800395a:	bf00      	nop
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d101      	bne.n	800397a <LL_RCC_MSI_IsReady+0x16>
 8003976:	2301      	movs	r3, #1
 8003978:	e000      	b.n	800397c <LL_RCC_MSI_IsReady+0x18>
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800398e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003998:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4313      	orrs	r3, r2
 80039a0:	600b      	str	r3, [r1, #0]
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80039b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039be:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2bb0      	cmp	r3, #176	; 0xb0
 80039c4:	d901      	bls.n	80039ca <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80039c6:	23b0      	movs	r3, #176	; 0xb0
 80039c8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80039ca:	687b      	ldr	r3, [r7, #4]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80039e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	021b      	lsls	r3, r3, #8
 80039ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f2:	4313      	orrs	r3, r2
 80039f4:	604b      	str	r3, [r1, #4]
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f023 0203 	bic.w	r2, r3, #3
 8003a14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	608b      	str	r3, [r1, #8]
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f003 030c 	and.w	r3, r3, #12
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003aa6:	f023 020f 	bic.w	r2, r3, #15
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ad6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	608b      	str	r3, [r1, #8]
}
 8003ae0:	bf00      	nop
 8003ae2:	370c      	adds	r7, #12
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr

08003aec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003afe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	608b      	str	r3, [r1, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003b64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ba4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ba8:	6013      	str	r3, [r2, #0]
}
 8003baa:	bf00      	nop
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bc6:	d101      	bne.n	8003bcc <LL_RCC_PLL_IsReady+0x18>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <LL_RCC_PLL_IsReady+0x1a>
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003c22:	b480      	push	{r7}
 8003c24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c4c:	d101      	bne.n	8003c52 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c72:	d101      	bne.n	8003c78 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003c74:	2301      	movs	r3, #1
 8003c76:	e000      	b.n	8003c7a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c8c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c98:	d101      	bne.n	8003c9e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003caa:	b480      	push	{r7}
 8003cac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cbc:	d101      	bne.n	8003cc2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr

08003cce <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cdc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ce0:	d101      	bne.n	8003ce6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf4:	b590      	push	{r4, r7, lr}
 8003cf6:	b08d      	sub	sp, #52	; 0x34
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e386      	b.n	8004414 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 808f 	beq.w	8003e32 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d14:	f7ff fe89 	bl	8003a2a <LL_RCC_GetSysClkSource>
 8003d18:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d1a:	f7ff ff82 	bl	8003c22 <LL_RCC_PLL_GetMainSource>
 8003d1e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_RCC_OscConfig+0x3e>
 8003d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	d149      	bne.n	8003dc0 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d146      	bne.n	8003dc0 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d32:	f7ff fe17 	bl	8003964 <LL_RCC_MSI_IsReady>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_OscConfig+0x54>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e365      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003d4c:	f7ff fe2f 	bl	80039ae <LL_RCC_MSI_GetRange>
 8003d50:	4603      	mov	r3, r0
 8003d52:	429c      	cmp	r4, r3
 8003d54:	d914      	bls.n	8003d80 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fd44 	bl	80047e8 <RCC_SetFlashLatencyFromMSIRange>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e354      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7ff fe09 	bl	8003986 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff fe2d 	bl	80039d8 <LL_RCC_MSI_SetCalibTrimming>
 8003d7e:	e013      	b.n	8003da8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fdfe 	bl	8003986 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fe22 	bl	80039d8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fd25 	bl	80047e8 <RCC_SetFlashLatencyFromMSIRange>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d001      	beq.n	8003da8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e335      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8003da8:	f7fd f8c6 	bl	8000f38 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003dac:	4bb4      	ldr	r3, [pc, #720]	; (8004080 <HAL_RCC_OscConfig+0x38c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fd f9bb 	bl	800112c <HAL_InitTick>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d039      	beq.n	8003e30 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e329      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d01e      	beq.n	8003e06 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dc8:	f7ff fdae 	bl	8003928 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dcc:	f7fd f9fc 	bl	80011c8 <HAL_GetTick>
 8003dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dd4:	f7fd f9f8 	bl	80011c8 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e316      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003de6:	f7ff fdbd 	bl	8003964 <LL_RCC_MSI_IsReady>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f1      	beq.n	8003dd4 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fdc6 	bl	8003986 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff fdea 	bl	80039d8 <LL_RCC_MSI_SetCalibTrimming>
 8003e04:	e015      	b.n	8003e32 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e06:	f7ff fd9e 	bl	8003946 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e0a:	f7fd f9dd 	bl	80011c8 <HAL_GetTick>
 8003e0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e10:	e008      	b.n	8003e24 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e12:	f7fd f9d9 	bl	80011c8 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d901      	bls.n	8003e24 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	e2f7      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003e24:	f7ff fd9e 	bl	8003964 <LL_RCC_MSI_IsReady>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f1      	bne.n	8003e12 <HAL_RCC_OscConfig+0x11e>
 8003e2e:	e000      	b.n	8003e32 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e30:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d05a      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e3e:	f7ff fdf4 	bl	8003a2a <LL_RCC_GetSysClkSource>
 8003e42:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e44:	f7ff feed 	bl	8003c22 <LL_RCC_PLL_GetMainSource>
 8003e48:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	2b08      	cmp	r3, #8
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_OscConfig+0x168>
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d10d      	bne.n	8003e72 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d10a      	bne.n	8003e72 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e5c:	f7ff fc04 	bl	8003668 <LL_RCC_HSE_IsReady>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d045      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x1fe>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d141      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e2d0      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7a:	d102      	bne.n	8003e82 <HAL_RCC_OscConfig+0x18e>
 8003e7c:	f7ff fbd6 	bl	800362c <LL_RCC_HSE_Enable>
 8003e80:	e00d      	b.n	8003e9e <HAL_RCC_OscConfig+0x1aa>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e8a:	d104      	bne.n	8003e96 <HAL_RCC_OscConfig+0x1a2>
 8003e8c:	f7ff fbb0 	bl	80035f0 <LL_RCC_HSE_EnableBypass>
 8003e90:	f7ff fbcc 	bl	800362c <LL_RCC_HSE_Enable>
 8003e94:	e003      	b.n	8003e9e <HAL_RCC_OscConfig+0x1aa>
 8003e96:	f7ff fbd8 	bl	800364a <LL_RCC_HSE_Disable>
 8003e9a:	f7ff fbb8 	bl	800360e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d012      	beq.n	8003ecc <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea6:	f7fd f98f 	bl	80011c8 <HAL_GetTick>
 8003eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eae:	f7fd f98b 	bl	80011c8 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b64      	cmp	r3, #100	; 0x64
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e2a9      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003ec0:	f7ff fbd2 	bl	8003668 <LL_RCC_HSE_IsReady>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f1      	beq.n	8003eae <HAL_RCC_OscConfig+0x1ba>
 8003eca:	e013      	b.n	8003ef4 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ecc:	f7fd f97c 	bl	80011c8 <HAL_GetTick>
 8003ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7fd f978 	bl	80011c8 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	; 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e296      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003ee6:	f7ff fbbf 	bl	8003668 <LL_RCC_HSE_IsReady>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f1      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x1e0>
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d051      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f00:	f7ff fd93 	bl	8003a2a <LL_RCC_GetSysClkSource>
 8003f04:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f06:	f7ff fe8c 	bl	8003c22 <LL_RCC_PLL_GetMainSource>
 8003f0a:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d005      	beq.n	8003f1e <HAL_RCC_OscConfig+0x22a>
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2b0c      	cmp	r3, #12
 8003f16:	d113      	bne.n	8003f40 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d110      	bne.n	8003f40 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f1e:	f7ff fbd3 	bl	80036c8 <LL_RCC_HSI_IsReady>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_OscConfig+0x240>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e26f      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fbd7 	bl	80036ec <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f3e:	e031      	b.n	8003fa4 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d019      	beq.n	8003f7c <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f48:	f7ff fba0 	bl	800368c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fd f93c 	bl	80011c8 <HAL_GetTick>
 8003f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f54:	f7fd f938 	bl	80011c8 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e256      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003f66:	f7ff fbaf 	bl	80036c8 <LL_RCC_HSI_IsReady>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f1      	beq.n	8003f54 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fbb9 	bl	80036ec <LL_RCC_HSI_SetCalibTrimming>
 8003f7a:	e013      	b.n	8003fa4 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f7c:	f7ff fb95 	bl	80036aa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fd f922 	bl	80011c8 <HAL_GetTick>
 8003f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f88:	f7fd f91e 	bl	80011c8 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e23c      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f9a:	f7ff fb95 	bl	80036c8 <LL_RCC_HSI_IsReady>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f1      	bne.n	8003f88 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80a2 	beq.w	8004102 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d075      	beq.n	80040b2 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0310 	and.w	r3, r3, #16
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d046      	beq.n	8004060 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003fd2:	f7ff fc4c 	bl	800386e <LL_RCC_LSI1_IsReady>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d113      	bne.n	8004004 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003fdc:	f7ff fc25 	bl	800382a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003fe0:	f7fd f8f2 	bl	80011c8 <HAL_GetTick>
 8003fe4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003fe8:	f7fd f8ee 	bl	80011c8 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e20c      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003ffa:	f7ff fc38 	bl	800386e <LL_RCC_LSI1_IsReady>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0f1      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004004:	f7ff fc45 	bl	8003892 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd f8de 	bl	80011c8 <HAL_GetTick>
 800400c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004010:	f7fd f8da 	bl	80011c8 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b03      	cmp	r3, #3
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e1f8      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004022:	f7ff fc58 	bl	80038d6 <LL_RCC_LSI2_IsReady>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f1      	beq.n	8004010 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff fc62 	bl	80038fa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004036:	f7ff fc09 	bl	800384c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800403a:	f7fd f8c5 	bl	80011c8 <HAL_GetTick>
 800403e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004040:	e008      	b.n	8004054 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004042:	f7fd f8c1 	bl	80011c8 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e1df      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004054:	f7ff fc0b 	bl	800386e <LL_RCC_LSI1_IsReady>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f1      	bne.n	8004042 <HAL_RCC_OscConfig+0x34e>
 800405e:	e050      	b.n	8004102 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004060:	f7ff fbe3 	bl	800382a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fd f8b0 	bl	80011c8 <HAL_GetTick>
 8004068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800406a:	e00b      	b.n	8004084 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800406c:	f7fd f8ac 	bl	80011c8 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d904      	bls.n	8004084 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e1ca      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
 800407e:	bf00      	nop
 8004080:	20000010 	.word	0x20000010
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004084:	f7ff fbf3 	bl	800386e <LL_RCC_LSI1_IsReady>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0ee      	beq.n	800406c <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800408e:	f7ff fc11 	bl	80038b4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004094:	f7fd f898 	bl	80011c8 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b03      	cmp	r3, #3
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e1b6      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80040a6:	f7ff fc16 	bl	80038d6 <LL_RCC_LSI2_IsReady>
 80040aa:	4603      	mov	r3, r0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1f1      	bne.n	8004094 <HAL_RCC_OscConfig+0x3a0>
 80040b0:	e027      	b.n	8004102 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80040b2:	f7ff fbff 	bl	80038b4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b6:	f7fd f887 	bl	80011c8 <HAL_GetTick>
 80040ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80040be:	f7fd f883 	bl	80011c8 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e1a1      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80040d0:	f7ff fc01 	bl	80038d6 <LL_RCC_LSI2_IsReady>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f1      	bne.n	80040be <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80040da:	f7ff fbb7 	bl	800384c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040de:	f7fd f873 	bl	80011c8 <HAL_GetTick>
 80040e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80040e6:	f7fd f86f 	bl	80011c8 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e18d      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80040f8:	f7ff fbb9 	bl	800386e <LL_RCC_LSI1_IsReady>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f1      	bne.n	80040e6 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0304 	and.w	r3, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d05b      	beq.n	80041c6 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800410e:	4bb5      	ldr	r3, [pc, #724]	; (80043e4 <HAL_RCC_OscConfig+0x6f0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	2b00      	cmp	r3, #0
 8004118:	d114      	bne.n	8004144 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800411a:	f7ff fa39 	bl	8003590 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800411e:	f7fd f853 	bl	80011c8 <HAL_GetTick>
 8004122:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004126:	f7fd f84f 	bl	80011c8 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e16d      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004138:	4baa      	ldr	r3, [pc, #680]	; (80043e4 <HAL_RCC_OscConfig+0x6f0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d102      	bne.n	8004152 <HAL_RCC_OscConfig+0x45e>
 800414c:	f7ff fb17 	bl	800377e <LL_RCC_LSE_Enable>
 8004150:	e00c      	b.n	800416c <HAL_RCC_OscConfig+0x478>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b05      	cmp	r3, #5
 8004158:	d104      	bne.n	8004164 <HAL_RCC_OscConfig+0x470>
 800415a:	f7ff fb32 	bl	80037c2 <LL_RCC_LSE_EnableBypass>
 800415e:	f7ff fb0e 	bl	800377e <LL_RCC_LSE_Enable>
 8004162:	e003      	b.n	800416c <HAL_RCC_OscConfig+0x478>
 8004164:	f7ff fb1c 	bl	80037a0 <LL_RCC_LSE_Disable>
 8004168:	f7ff fb3c 	bl	80037e4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d014      	beq.n	800419e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004174:	f7fd f828 	bl	80011c8 <HAL_GetTick>
 8004178:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800417a:	e00a      	b.n	8004192 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417c:	f7fd f824 	bl	80011c8 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	; 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e140      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004192:	f7ff fb38 	bl	8003806 <LL_RCC_LSE_IsReady>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0ef      	beq.n	800417c <HAL_RCC_OscConfig+0x488>
 800419c:	e013      	b.n	80041c6 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419e:	f7fd f813 	bl	80011c8 <HAL_GetTick>
 80041a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80041a4:	e00a      	b.n	80041bc <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a6:	f7fd f80f 	bl	80011c8 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e12b      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 80041bc:	f7ff fb23 	bl	8003806 <LL_RCC_LSE_IsReady>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1ef      	bne.n	80041a6 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d02c      	beq.n	800422c <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d014      	beq.n	8004204 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041da:	f7ff fa9c 	bl	8003716 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fc fff3 	bl	80011c8 <HAL_GetTick>
 80041e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80041e4:	e008      	b.n	80041f8 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041e6:	f7fc ffef 	bl	80011c8 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e10d      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80041f8:	f7ff faaf 	bl	800375a <LL_RCC_HSI48_IsReady>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f1      	beq.n	80041e6 <HAL_RCC_OscConfig+0x4f2>
 8004202:	e013      	b.n	800422c <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004204:	f7ff fa98 	bl	8003738 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fc ffde 	bl	80011c8 <HAL_GetTick>
 800420c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004210:	f7fc ffda 	bl	80011c8 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e0f8      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004222:	f7ff fa9a 	bl	800375a <LL_RCC_HSI48_IsReady>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1f1      	bne.n	8004210 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80ee 	beq.w	8004412 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004236:	f7ff fbf8 	bl	8003a2a <LL_RCC_GetSysClkSource>
 800423a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800423c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	2b02      	cmp	r3, #2
 800424a:	f040 80af 	bne.w	80043ac <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0203 	and.w	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	429a      	cmp	r2, r3
 800425a:	d123      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004266:	429a      	cmp	r2, r3
 8004268:	d11c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	0a1b      	lsrs	r3, r3, #8
 800426e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004276:	429a      	cmp	r2, r3
 8004278:	d114      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d10d      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d106      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d05d      	beq.n	8004360 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b0c      	cmp	r3, #12
 80042a8:	d058      	beq.n	800435c <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0ab      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042bc:	f7ff fc6b 	bl	8003b96 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042c0:	f7fc ff82 	bl	80011c8 <HAL_GetTick>
 80042c4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fc ff7e 	bl	80011c8 <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e09c      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1ef      	bne.n	80042c8 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	4b3e      	ldr	r3, [pc, #248]	; (80043e8 <HAL_RCC_OscConfig+0x6f4>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042fa:	4311      	orrs	r1, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004300:	0212      	lsls	r2, r2, #8
 8004302:	4311      	orrs	r1, r2
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004308:	4311      	orrs	r1, r2
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004314:	430a      	orrs	r2, r1
 8004316:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800431a:	4313      	orrs	r3, r2
 800431c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800431e:	f7ff fc2b 	bl	8003b78 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800432c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004330:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004332:	f7fc ff49 	bl	80011c8 <HAL_GetTick>
 8004336:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433a:	f7fc ff45 	bl	80011c8 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e063      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0ef      	beq.n	800433a <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800435a:	e05a      	b.n	8004412 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e059      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004360:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d151      	bne.n	8004412 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800436e:	f7ff fc03 	bl	8003b78 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004372:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800437c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004380:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004382:	f7fc ff21 	bl	80011c8 <HAL_GetTick>
 8004386:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800438a:	f7fc ff1d 	bl	80011c8 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e03b      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d0ef      	beq.n	800438a <HAL_RCC_OscConfig+0x696>
 80043aa:	e032      	b.n	8004412 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	2b0c      	cmp	r3, #12
 80043b0:	d02d      	beq.n	800440e <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b2:	f7ff fbf0 	bl	8003b96 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80043b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043c0:	f023 0303 	bic.w	r3, r3, #3
 80043c4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80043c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043d0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80043d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043da:	f7fc fef5 	bl	80011c8 <HAL_GetTick>
 80043de:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e0:	e00d      	b.n	80043fe <HAL_RCC_OscConfig+0x70a>
 80043e2:	bf00      	nop
 80043e4:	58000400 	.word	0x58000400
 80043e8:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ec:	f7fc feec 	bl	80011c8 <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e00a      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ef      	bne.n	80043ec <HAL_RCC_OscConfig+0x6f8>
 800440c:	e001      	b.n	8004412 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e000      	b.n	8004414 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3734      	adds	r7, #52	; 0x34
 8004418:	46bd      	mov	sp, r7
 800441a:	bd90      	pop	{r4, r7, pc}

0800441c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e12a      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004430:	4b97      	ldr	r3, [pc, #604]	; (8004690 <HAL_RCC_ClockConfig+0x274>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d91b      	bls.n	8004476 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b94      	ldr	r3, [pc, #592]	; (8004690 <HAL_RCC_ClockConfig+0x274>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f023 0207 	bic.w	r2, r3, #7
 8004446:	4992      	ldr	r1, [pc, #584]	; (8004690 <HAL_RCC_ClockConfig+0x274>)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444e:	f7fc febb 	bl	80011c8 <HAL_GetTick>
 8004452:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004454:	e008      	b.n	8004468 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004456:	f7fc feb7 	bl	80011c8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e10e      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004468:	4b89      	ldr	r3, [pc, #548]	; (8004690 <HAL_RCC_ClockConfig+0x274>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	429a      	cmp	r2, r3
 8004474:	d1ef      	bne.n	8004456 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d016      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	4618      	mov	r0, r3
 8004488:	f7ff fadb 	bl	8003a42 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800448c:	f7fc fe9c 	bl	80011c8 <HAL_GetTick>
 8004490:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004494:	f7fc fe98 	bl	80011c8 <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e0ef      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80044a6:	f7ff fbc8 	bl	8003c3a <LL_RCC_IsActiveFlag_HPRE>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d0f1      	beq.n	8004494 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d016      	beq.n	80044ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fad2 	bl	8003a6a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044c6:	f7fc fe7f 	bl	80011c8 <HAL_GetTick>
 80044ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044ce:	f7fc fe7b 	bl	80011c8 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e0d2      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80044e0:	f7ff fbbd 	bl	8003c5e <LL_RCC_IsActiveFlag_C2HPRE>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f1      	beq.n	80044ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d016      	beq.n	8004524 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff facb 	bl	8003a96 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004500:	f7fc fe62 	bl	80011c8 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004506:	e008      	b.n	800451a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004508:	f7fc fe5e 	bl	80011c8 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e0b5      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800451a:	f7ff fbb3 	bl	8003c84 <LL_RCC_IsActiveFlag_SHDHPRE>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f1      	beq.n	8004508 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d016      	beq.n	800455e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff fac5 	bl	8003ac4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800453a:	f7fc fe45 	bl	80011c8 <HAL_GetTick>
 800453e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004540:	e008      	b.n	8004554 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004542:	f7fc fe41 	bl	80011c8 <HAL_GetTick>
 8004546:	4602      	mov	r2, r0
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e098      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004554:	f7ff fba9 	bl	8003caa <LL_RCC_IsActiveFlag_PPRE1>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f1      	beq.n	8004542 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0308 	and.w	r3, r3, #8
 8004566:	2b00      	cmp	r3, #0
 8004568:	d017      	beq.n	800459a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fabb 	bl	8003aec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004576:	f7fc fe27 	bl	80011c8 <HAL_GetTick>
 800457a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800457e:	f7fc fe23 	bl	80011c8 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e07a      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004590:	f7ff fb9d 	bl	8003cce <LL_RCC_IsActiveFlag_PPRE2>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f1      	beq.n	800457e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d043      	beq.n	800462e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d106      	bne.n	80045bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80045ae:	f7ff f85b 	bl	8003668 <LL_RCC_HSE_IsReady>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d11e      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e064      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d106      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80045c4:	f7ff faf6 	bl	8003bb4 <LL_RCC_PLL_IsReady>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d113      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e059      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80045da:	f7ff f9c3 	bl	8003964 <LL_RCC_MSI_IsReady>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d108      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e04e      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80045e8:	f7ff f86e 	bl	80036c8 <LL_RCC_HSI_IsReady>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e047      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fa01 	bl	8003a02 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004600:	f7fc fde2 	bl	80011c8 <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004606:	e00a      	b.n	800461e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004608:	f7fc fdde 	bl	80011c8 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	; 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e033      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461e:	f7ff fa04 	bl	8003a2a <LL_RCC_GetSysClkSource>
 8004622:	4602      	mov	r2, r0
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	429a      	cmp	r2, r3
 800462c:	d1ec      	bne.n	8004608 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800462e:	4b18      	ldr	r3, [pc, #96]	; (8004690 <HAL_RCC_ClockConfig+0x274>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	429a      	cmp	r2, r3
 800463a:	d21b      	bcs.n	8004674 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463c:	4b14      	ldr	r3, [pc, #80]	; (8004690 <HAL_RCC_ClockConfig+0x274>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f023 0207 	bic.w	r2, r3, #7
 8004644:	4912      	ldr	r1, [pc, #72]	; (8004690 <HAL_RCC_ClockConfig+0x274>)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	4313      	orrs	r3, r2
 800464a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464c:	f7fc fdbc 	bl	80011c8 <HAL_GetTick>
 8004650:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	e008      	b.n	8004666 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004654:	f7fc fdb8 	bl	80011c8 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e00f      	b.n	8004686 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <HAL_RCC_ClockConfig+0x274>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d1ef      	bne.n	8004654 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8004674:	f7fc fc60 	bl	8000f38 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004678:	f7fc fdb2 	bl	80011e0 <HAL_GetTickPrio>
 800467c:	4603      	mov	r3, r0
 800467e:	4618      	mov	r0, r3
 8004680:	f7fc fd54 	bl	800112c <HAL_InitTick>
 8004684:	4603      	mov	r3, r0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	58004000 	.word	0x58004000

08004694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004694:	b590      	push	{r4, r7, lr}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800469a:	f7ff f9c6 	bl	8003a2a <LL_RCC_GetSysClkSource>
 800469e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80046a6:	f7ff f982 	bl	80039ae <LL_RCC_MSI_GetRange>
 80046aa:	4603      	mov	r3, r0
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	4a2a      	ldr	r2, [pc, #168]	; (800475c <HAL_RCC_GetSysClockFreq+0xc8>)
 80046b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	e04a      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b04      	cmp	r3, #4
 80046c0:	d102      	bne.n	80046c8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046c2:	4b27      	ldr	r3, [pc, #156]	; (8004760 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046c4:	60fb      	str	r3, [r7, #12]
 80046c6:	e044      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d10a      	bne.n	80046e4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046ce:	f7fe ff7d 	bl	80035cc <LL_RCC_HSE_IsEnabledDiv2>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d102      	bne.n	80046de <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80046d8:	4b21      	ldr	r3, [pc, #132]	; (8004760 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	e039      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80046de:	4b21      	ldr	r3, [pc, #132]	; (8004764 <HAL_RCC_GetSysClockFreq+0xd0>)
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	e036      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80046e4:	f7ff fa9d 	bl	8003c22 <LL_RCC_PLL_GetMainSource>
 80046e8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d002      	beq.n	80046f6 <HAL_RCC_GetSysClockFreq+0x62>
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d003      	beq.n	80046fc <HAL_RCC_GetSysClockFreq+0x68>
 80046f4:	e00d      	b.n	8004712 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80046f6:	4b1a      	ldr	r3, [pc, #104]	; (8004760 <HAL_RCC_GetSysClockFreq+0xcc>)
 80046f8:	60bb      	str	r3, [r7, #8]
        break;
 80046fa:	e015      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80046fc:	f7fe ff66 	bl	80035cc <LL_RCC_HSE_IsEnabledDiv2>
 8004700:	4603      	mov	r3, r0
 8004702:	2b01      	cmp	r3, #1
 8004704:	d102      	bne.n	800470c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004706:	4b16      	ldr	r3, [pc, #88]	; (8004760 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004708:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800470a:	e00d      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800470c:	4b15      	ldr	r3, [pc, #84]	; (8004764 <HAL_RCC_GetSysClockFreq+0xd0>)
 800470e:	60bb      	str	r3, [r7, #8]
        break;
 8004710:	e00a      	b.n	8004728 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004712:	f7ff f94c 	bl	80039ae <LL_RCC_MSI_GetRange>
 8004716:	4603      	mov	r3, r0
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	4a0f      	ldr	r2, [pc, #60]	; (800475c <HAL_RCC_GetSysClockFreq+0xc8>)
 8004720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004724:	60bb      	str	r3, [r7, #8]
        break;
 8004726:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004728:	f7ff fa56 	bl	8003bd8 <LL_RCC_PLL_GetN>
 800472c:	4602      	mov	r2, r0
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	fb03 f402 	mul.w	r4, r3, r2
 8004734:	f7ff fa69 	bl	8003c0a <LL_RCC_PLL_GetDivider>
 8004738:	4603      	mov	r3, r0
 800473a:	091b      	lsrs	r3, r3, #4
 800473c:	3301      	adds	r3, #1
 800473e:	fbb4 f4f3 	udiv	r4, r4, r3
 8004742:	f7ff fa56 	bl	8003bf2 <LL_RCC_PLL_GetR>
 8004746:	4603      	mov	r3, r0
 8004748:	0f5b      	lsrs	r3, r3, #29
 800474a:	3301      	adds	r3, #1
 800474c:	fbb4 f3f3 	udiv	r3, r4, r3
 8004750:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004752:	68fb      	ldr	r3, [r7, #12]
}
 8004754:	4618      	mov	r0, r3
 8004756:	3714      	adds	r7, #20
 8004758:	46bd      	mov	sp, r7
 800475a:	bd90      	pop	{r4, r7, pc}
 800475c:	08006b28 	.word	0x08006b28
 8004760:	00f42400 	.word	0x00f42400
 8004764:	01e84800 	.word	0x01e84800

08004768 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004768:	b598      	push	{r3, r4, r7, lr}
 800476a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800476c:	f7ff ff92 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8004770:	4604      	mov	r4, r0
 8004772:	f7ff f9cf 	bl	8003b14 <LL_RCC_GetAHBPrescaler>
 8004776:	4603      	mov	r3, r0
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	4a03      	ldr	r2, [pc, #12]	; (800478c <HAL_RCC_GetHCLKFreq+0x24>)
 8004780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004784:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004788:	4618      	mov	r0, r3
 800478a:	bd98      	pop	{r3, r4, r7, pc}
 800478c:	08006ac8 	.word	0x08006ac8

08004790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004790:	b598      	push	{r3, r4, r7, lr}
 8004792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004794:	f7ff ffe8 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 8004798:	4604      	mov	r4, r0
 800479a:	f7ff f9d5 	bl	8003b48 <LL_RCC_GetAPB1Prescaler>
 800479e:	4603      	mov	r3, r0
 80047a0:	0a1b      	lsrs	r3, r3, #8
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ac:	f003 031f 	and.w	r3, r3, #31
 80047b0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	bd98      	pop	{r3, r4, r7, pc}
 80047b8:	08006b08 	.word	0x08006b08

080047bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047bc:	b598      	push	{r3, r4, r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80047c0:	f7ff ffd2 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 80047c4:	4604      	mov	r4, r0
 80047c6:	f7ff f9cb 	bl	8003b60 <LL_RCC_GetAPB2Prescaler>
 80047ca:	4603      	mov	r3, r0
 80047cc:	0adb      	lsrs	r3, r3, #11
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	4a04      	ldr	r2, [pc, #16]	; (80047e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d8:	f003 031f 	and.w	r3, r3, #31
 80047dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd98      	pop	{r3, r4, r7, pc}
 80047e4:	08006b08 	.word	0x08006b08

080047e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2bb0      	cmp	r3, #176	; 0xb0
 80047f4:	d903      	bls.n	80047fe <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80047f6:	4b15      	ldr	r3, [pc, #84]	; (800484c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	e007      	b.n	800480e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	091b      	lsrs	r3, r3, #4
 8004802:	f003 030f 	and.w	r3, r3, #15
 8004806:	4a11      	ldr	r2, [pc, #68]	; (800484c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800480c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800480e:	f7ff f98d 	bl	8003b2c <LL_RCC_GetAHB4Prescaler>
 8004812:	4603      	mov	r3, r0
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	4a0d      	ldr	r2, [pc, #52]	; (8004850 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800481c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	fbb2 f3f3 	udiv	r3, r2, r3
 8004826:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800482c:	fba2 2303 	umull	r2, r3, r2, r3
 8004830:	0c9c      	lsrs	r4, r3, #18
 8004832:	f7fe febd 	bl	80035b0 <HAL_PWREx_GetVoltageRange>
 8004836:	4603      	mov	r3, r0
 8004838:	4619      	mov	r1, r3
 800483a:	4620      	mov	r0, r4
 800483c:	f000 f80c 	bl	8004858 <RCC_SetFlashLatency>
 8004840:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	bd90      	pop	{r4, r7, pc}
 800484a:	bf00      	nop
 800484c:	08006b28 	.word	0x08006b28
 8004850:	08006ac8 	.word	0x08006ac8
 8004854:	431bde83 	.word	0x431bde83

08004858 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b093      	sub	sp, #76	; 0x4c
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004862:	4b39      	ldr	r3, [pc, #228]	; (8004948 <RCC_SetFlashLatency+0xf0>)
 8004864:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004868:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800486a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800486e:	4a37      	ldr	r2, [pc, #220]	; (800494c <RCC_SetFlashLatency+0xf4>)
 8004870:	f107 031c 	add.w	r3, r7, #28
 8004874:	ca07      	ldmia	r2, {r0, r1, r2}
 8004876:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800487a:	4b35      	ldr	r3, [pc, #212]	; (8004950 <RCC_SetFlashLatency+0xf8>)
 800487c:	f107 040c 	add.w	r4, r7, #12
 8004880:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004882:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004886:	2300      	movs	r3, #0
 8004888:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004890:	d11c      	bne.n	80048cc <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004892:	2300      	movs	r3, #0
 8004894:	643b      	str	r3, [r7, #64]	; 0x40
 8004896:	e015      	b.n	80048c4 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004898:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048a0:	4413      	add	r3, r2
 80048a2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d808      	bhi.n	80048be <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80048ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048b4:	4413      	add	r3, r2
 80048b6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80048ba:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80048bc:	e022      	b.n	8004904 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80048be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048c0:	3301      	adds	r3, #1
 80048c2:	643b      	str	r3, [r7, #64]	; 0x40
 80048c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d9e6      	bls.n	8004898 <RCC_SetFlashLatency+0x40>
 80048ca:	e01b      	b.n	8004904 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80048cc:	2300      	movs	r3, #0
 80048ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048d0:	e015      	b.n	80048fe <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80048d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048da:	4413      	add	r3, r2
 80048dc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d808      	bhi.n	80048f8 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80048e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048ee:	4413      	add	r3, r2
 80048f0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80048f4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80048f6:	e005      	b.n	8004904 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80048f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fa:	3301      	adds	r3, #1
 80048fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004900:	2b02      	cmp	r3, #2
 8004902:	d9e6      	bls.n	80048d2 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004904:	4b13      	ldr	r3, [pc, #76]	; (8004954 <RCC_SetFlashLatency+0xfc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 0207 	bic.w	r2, r3, #7
 800490c:	4911      	ldr	r1, [pc, #68]	; (8004954 <RCC_SetFlashLatency+0xfc>)
 800490e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004914:	f7fc fc58 	bl	80011c8 <HAL_GetTick>
 8004918:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800491a:	e008      	b.n	800492e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800491c:	f7fc fc54 	bl	80011c8 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e007      	b.n	800493e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800492e:	4b09      	ldr	r3, [pc, #36]	; (8004954 <RCC_SetFlashLatency+0xfc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004938:	429a      	cmp	r2, r3
 800493a:	d1ef      	bne.n	800491c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	374c      	adds	r7, #76	; 0x4c
 8004942:	46bd      	mov	sp, r7
 8004944:	bd90      	pop	{r4, r7, pc}
 8004946:	bf00      	nop
 8004948:	08006a8c 	.word	0x08006a8c
 800494c:	08006a9c 	.word	0x08006a9c
 8004950:	08006aa8 	.word	0x08006aa8
 8004954:	58004000 	.word	0x58004000

08004958 <LL_RCC_LSE_IsEnabled>:
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800495c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b01      	cmp	r3, #1
 800496a:	d101      	bne.n	8004970 <LL_RCC_LSE_IsEnabled+0x18>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <LL_RCC_LSE_IsEnabled+0x1a>
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <LL_RCC_LSE_IsReady>:
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b02      	cmp	r3, #2
 800498e:	d101      	bne.n	8004994 <LL_RCC_LSE_IsReady+0x18>
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <LL_RCC_LSE_IsReady+0x1a>
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <LL_RCC_SetRFWKPClockSource>:
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80049a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <LL_RCC_SetSMPSClockSource>:
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80049d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	f023 0203 	bic.w	r2, r3, #3
 80049de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4313      	orrs	r3, r2
 80049e6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <LL_RCC_SetSMPSPrescaler>:
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80049fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004a10:	bf00      	nop
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <LL_RCC_SetUSARTClockSource>:
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2c:	f023 0203 	bic.w	r2, r3, #3
 8004a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <LL_RCC_SetLPUARTClockSource>:
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_RCC_SetI2CClockSource>:
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a80:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	091b      	lsrs	r3, r3, #4
 8004a88:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	401a      	ands	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <LL_RCC_SetLPTIMClockSource>:
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	0c1b      	lsrs	r3, r3, #16
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	401a      	ands	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	041b      	lsls	r3, r3, #16
 8004acc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <LL_RCC_SetSAIClockSource>:
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <LL_RCC_SetRNGClockSource>:
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <LL_RCC_SetCLK48ClockSource>:
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <LL_RCC_SetUSBClockSource>:
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff ffe3 	bl	8004b3a <LL_RCC_SetCLK48ClockSource>
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <LL_RCC_SetADCClockSource>:
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <LL_RCC_SetRTCClockSource>:
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004bc8:	bf00      	nop
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <LL_RCC_GetRTCClockSource>:
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <LL_RCC_ForceBackupDomainReset>:
{
 8004bee:	b480      	push	{r7}
 8004bf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c06:	bf00      	nop
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004c28:	bf00      	nop
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <LL_RCC_PLLSAI1_Enable>:
{
 8004c32:	b480      	push	{r7}
 8004c34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c44:	6013      	str	r3, [r2, #0]
}
 8004c46:	bf00      	nop
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <LL_RCC_PLLSAI1_Disable>:
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c62:	6013      	str	r3, [r2, #0]
}
 8004c64:	bf00      	nop
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <LL_RCC_PLLSAI1_IsReady>:
{
 8004c6e:	b480      	push	{r7}
 8004c70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c80:	d101      	bne.n	8004c86 <LL_RCC_PLLSAI1_IsReady+0x18>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b088      	sub	sp, #32
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d033      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004cb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cbc:	d802      	bhi.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d010      	beq.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004cc2:	e017      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004cc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cc8:	d017      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004cca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004cce:	d016      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004cd0:	e010      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ce2:	e00d      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	3304      	adds	r3, #4
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 f947 	bl	8004f7c <RCCEx_PLLSAI1_ConfigNP>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004cf2:	e005      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	77fb      	strb	r3, [r7, #31]
        break;
 8004cf8:	e002      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004cfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d00:	7ffb      	ldrb	r3, [r7, #31]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d105      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fee9 	bl	8004ae2 <LL_RCC_SetSAIClockSource>
 8004d10:	e001      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d12:	7ffb      	ldrb	r3, [r7, #31]
 8004d14:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d046      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004d22:	f7ff ff57 	bl	8004bd4 <LL_RCC_GetRTCClockSource>
 8004d26:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d03c      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d32:	f7fe fc2d 	bl	8003590 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7ff ff31 	bl	8004ba8 <LL_RCC_SetRTCClockSource>
 8004d46:	e02e      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d50:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004d52:	f7ff ff4c 	bl	8004bee <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004d56:	f7ff ff5b 	bl	8004c10 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004d68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004d72:	f7ff fdf1 	bl	8004958 <LL_RCC_LSE_IsEnabled>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d114      	bne.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d7c:	f7fc fa24 	bl	80011c8 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d82:	e00b      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fc fa20 	bl	80011c8 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d902      	bls.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	77fb      	strb	r3, [r7, #31]
              break;
 8004d9a:	e004      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d9c:	f7ff fdee 	bl	800497c <LL_RCC_LSE_IsReady>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d1ee      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004da6:	7ffb      	ldrb	r3, [r7, #31]
 8004da8:	77bb      	strb	r3, [r7, #30]
 8004daa:	e001      	b.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dac:	7ffb      	ldrb	r3, [r7, #31]
 8004dae:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d004      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fe2b 	bl	8004a1c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d004      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fe36 	bl	8004a48 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d004      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff fe5e 	bl	8004aae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d004      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff fe53 	bl	8004aae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d004      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a1b      	ldr	r3, [r3, #32]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7ff fe2b 	bl	8004a74 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0308 	and.w	r3, r3, #8
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d004      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fe20 	bl	8004a74 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d022      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e44:	4618      	mov	r0, r3
 8004e46:	f7ff fe8e 	bl	8004b66 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e52:	d107      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e62:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e6c:	d10b      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 f8dd 	bl	8005032 <RCCEx_PLLSAI1_ConfigNQ>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004e7c:	7ffb      	ldrb	r3, [r7, #31]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8004e82:	7ffb      	ldrb	r3, [r7, #31]
 8004e84:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d02b      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e9a:	d008      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ea4:	d003      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d105      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7ff fe2b 	bl	8004b0e <LL_RCC_SetRNGClockSource>
 8004eb8:	e00a      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f7ff fe22 	bl	8004b0e <LL_RCC_SetRNGClockSource>
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f7ff fe35 	bl	8004b3a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004ed8:	d107      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ee8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d022      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff fe3e 	bl	8004b7c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f08:	d107      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f22:	d10b      	bne.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 f8dd 	bl	80050e8 <RCCEx_PLLSAI1_ConfigNR>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004f32:	7ffb      	ldrb	r3, [r7, #31]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d001      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8004f38:	7ffb      	ldrb	r3, [r7, #31]
 8004f3a:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d004      	beq.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fd27 	bl	80049a0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7ff fd46 	bl	80049f4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff fd2d 	bl	80049cc <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8004f72:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f88:	f7ff fe62 	bl	8004c50 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f8c:	f7fc f91c 	bl	80011c8 <HAL_GetTick>
 8004f90:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f92:	e009      	b.n	8004fa8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f94:	f7fc f918 	bl	80011c8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d902      	bls.n	8004fa8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa6:	e004      	b.n	8004fb2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fa8:	f7ff fe61 	bl	8004c6e <LL_RCC_PLLSAI1_IsReady>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d137      	bne.n	8005028 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004fe6:	f7ff fe24 	bl	8004c32 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fea:	f7fc f8ed 	bl	80011c8 <HAL_GetTick>
 8004fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ff0:	e009      	b.n	8005006 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ff2:	f7fc f8e9 	bl	80011c8 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d902      	bls.n	8005006 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	73fb      	strb	r3, [r7, #15]
        break;
 8005004:	e004      	b.n	8005010 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005006:	f7ff fe32 	bl	8004c6e <LL_RCC_PLLSAI1_IsReady>
 800500a:	4603      	mov	r3, r0
 800500c:	2b01      	cmp	r3, #1
 800500e:	d1f0      	bne.n	8004ff2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d108      	bne.n	8005028 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005024:	4313      	orrs	r3, r2
 8005026:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800503a:	2300      	movs	r3, #0
 800503c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800503e:	f7ff fe07 	bl	8004c50 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005042:	f7fc f8c1 	bl	80011c8 <HAL_GetTick>
 8005046:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005048:	e009      	b.n	800505e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800504a:	f7fc f8bd 	bl	80011c8 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d902      	bls.n	800505e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	73fb      	strb	r3, [r7, #15]
      break;
 800505c:	e004      	b.n	8005068 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800505e:	f7ff fe06 	bl	8004c6e <LL_RCC_PLLSAI1_IsReady>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1f0      	bne.n	800504a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d137      	bne.n	80050de <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800506e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	021b      	lsls	r3, r3, #8
 800507e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005082:	4313      	orrs	r3, r2
 8005084:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005098:	4313      	orrs	r3, r2
 800509a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800509c:	f7ff fdc9 	bl	8004c32 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a0:	f7fc f892 	bl	80011c8 <HAL_GetTick>
 80050a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80050a6:	e009      	b.n	80050bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050a8:	f7fc f88e 	bl	80011c8 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d902      	bls.n	80050bc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	73fb      	strb	r3, [r7, #15]
        break;
 80050ba:	e004      	b.n	80050c6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80050bc:	f7ff fdd7 	bl	8004c6e <LL_RCC_PLLSAI1_IsReady>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d1f0      	bne.n	80050a8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d108      	bne.n	80050de <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80050cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050da:	4313      	orrs	r3, r2
 80050dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80050de:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80050f4:	f7ff fdac 	bl	8004c50 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050f8:	f7fc f866 	bl	80011c8 <HAL_GetTick>
 80050fc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80050fe:	e009      	b.n	8005114 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005100:	f7fc f862 	bl	80011c8 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d902      	bls.n	8005114 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	73fb      	strb	r3, [r7, #15]
      break;
 8005112:	e004      	b.n	800511e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005114:	f7ff fdab 	bl	8004c6e <LL_RCC_PLLSAI1_IsReady>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1f0      	bne.n	8005100 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800511e:	7bfb      	ldrb	r3, [r7, #15]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d137      	bne.n	8005194 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	021b      	lsls	r3, r3, #8
 8005134:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005138:	4313      	orrs	r3, r2
 800513a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800513c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800514e:	4313      	orrs	r3, r2
 8005150:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005152:	f7ff fd6e 	bl	8004c32 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005156:	f7fc f837 	bl	80011c8 <HAL_GetTick>
 800515a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800515c:	e009      	b.n	8005172 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800515e:	f7fc f833 	bl	80011c8 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d902      	bls.n	8005172 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	73fb      	strb	r3, [r7, #15]
        break;
 8005170:	e004      	b.n	800517c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005172:	f7ff fd7c 	bl	8004c6e <LL_RCC_PLLSAI1_IsReady>
 8005176:	4603      	mov	r3, r0
 8005178:	2b01      	cmp	r3, #1
 800517a:	d1f0      	bne.n	800515e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d108      	bne.n	8005194 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005186:	691a      	ldr	r2, [r3, #16]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005190:	4313      	orrs	r3, r2
 8005192:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005194:	7bfb      	ldrb	r3, [r7, #15]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <LL_RCC_GetUSARTClockSource>:
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80051a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4013      	ands	r3, r2
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	370c      	adds	r7, #12
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <LL_RCC_GetLPUARTClockSource>:
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80051c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4013      	ands	r3, r2
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051de:	b580      	push	{r7, lr}
 80051e0:	b082      	sub	sp, #8
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e042      	b.n	8005276 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7fb fc92 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2224      	movs	r2, #36	; 0x24
 800520c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f022 0201 	bic.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 fa57 	bl	80056d4 <UART_SetConfig>
 8005226:	4603      	mov	r3, r0
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e022      	b.n	8005276 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fc59 	bl	8005af0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800524c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689a      	ldr	r2, [r3, #8]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800525c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fce0 	bl	8005c34 <UART_CheckIdleState>
 8005274:	4603      	mov	r3, r0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3708      	adds	r7, #8
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b08a      	sub	sp, #40	; 0x28
 8005282:	af02      	add	r7, sp, #8
 8005284:	60f8      	str	r0, [r7, #12]
 8005286:	60b9      	str	r1, [r7, #8]
 8005288:	603b      	str	r3, [r7, #0]
 800528a:	4613      	mov	r3, r2
 800528c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005294:	2b20      	cmp	r3, #32
 8005296:	f040 8083 	bne.w	80053a0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_UART_Transmit+0x28>
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e07b      	b.n	80053a2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d101      	bne.n	80052b8 <HAL_UART_Transmit+0x3a>
 80052b4:	2302      	movs	r3, #2
 80052b6:	e074      	b.n	80053a2 <HAL_UART_Transmit+0x124>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2221      	movs	r2, #33	; 0x21
 80052cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80052d0:	f7fb ff7a 	bl	80011c8 <HAL_GetTick>
 80052d4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	88fa      	ldrh	r2, [r7, #6]
 80052da:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	88fa      	ldrh	r2, [r7, #6]
 80052e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ee:	d108      	bne.n	8005302 <HAL_UART_Transmit+0x84>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d104      	bne.n	8005302 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	61bb      	str	r3, [r7, #24]
 8005300:	e003      	b.n	800530a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005306:	2300      	movs	r3, #0
 8005308:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005312:	e02c      	b.n	800536e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	2200      	movs	r2, #0
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f000 fcd0 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d001      	beq.n	800532e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e039      	b.n	80053a2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10b      	bne.n	800534c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	461a      	mov	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005342:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	3302      	adds	r3, #2
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e007      	b.n	800535c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	781a      	ldrb	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	3301      	adds	r3, #1
 800535a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1cc      	bne.n	8005314 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2200      	movs	r2, #0
 8005382:	2140      	movs	r1, #64	; 0x40
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 fc9d 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e006      	b.n	80053a2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	e000      	b.n	80053a2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053cc:	69fa      	ldr	r2, [r7, #28]
 80053ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80053d2:	4013      	ands	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d118      	bne.n	800540e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d013      	beq.n	800540e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d104      	bne.n	80053fa <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f000 8145 	beq.w	800568e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	4798      	blx	r3
      }
      return;
 800540c:	e13f      	b.n	800568e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80e8 	beq.w	80055e6 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4ba1      	ldr	r3, [pc, #644]	; (80056a0 <HAL_UART_IRQHandler+0x2f4>)
 800541a:	4013      	ands	r3, r2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d105      	bne.n	800542c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005420:	69ba      	ldr	r2, [r7, #24]
 8005422:	4ba0      	ldr	r3, [pc, #640]	; (80056a4 <HAL_UART_IRQHandler+0x2f8>)
 8005424:	4013      	ands	r3, r2
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 80dd 	beq.w	80055e6 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d010      	beq.n	8005458 <HAL_UART_IRQHandler+0xac>
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00b      	beq.n	8005458 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2201      	movs	r2, #1
 8005446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544e:	f043 0201 	orr.w	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d010      	beq.n	8005484 <HAL_UART_IRQHandler+0xd8>
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00b      	beq.n	8005484 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2202      	movs	r2, #2
 8005472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f043 0204 	orr.w	r2, r3, #4
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f003 0304 	and.w	r3, r3, #4
 800548a:	2b00      	cmp	r3, #0
 800548c:	d010      	beq.n	80054b0 <HAL_UART_IRQHandler+0x104>
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00b      	beq.n	80054b0 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2204      	movs	r2, #4
 800549e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	f043 0202 	orr.w	r2, r3, #2
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d015      	beq.n	80054e6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d104      	bne.n	80054ce <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	4b76      	ldr	r3, [pc, #472]	; (80056a0 <HAL_UART_IRQHandler+0x2f4>)
 80054c8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2208      	movs	r2, #8
 80054d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054dc:	f043 0208 	orr.w	r2, r3, #8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d011      	beq.n	8005514 <HAL_UART_IRQHandler+0x168>
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00c      	beq.n	8005514 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005502:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	f043 0220 	orr.w	r2, r3, #32
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	2b00      	cmp	r3, #0
 800551c:	f000 80b9 	beq.w	8005692 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d011      	beq.n	800554e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	f003 0320 	and.w	r3, r3, #32
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005554:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d004      	beq.n	800556e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800556a:	2b00      	cmp	r3, #0
 800556c:	d031      	beq.n	80055d2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fc28 	bl	8005dc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d123      	bne.n	80055ca <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689a      	ldr	r2, [r3, #8]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005590:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005596:	2b00      	cmp	r3, #0
 8005598:	d013      	beq.n	80055c2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800559e:	4a42      	ldr	r2, [pc, #264]	; (80056a8 <HAL_UART_IRQHandler+0x2fc>)
 80055a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fc f87b 	bl	80016a2 <HAL_DMA_Abort_IT>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d017      	beq.n	80055e2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80055bc:	4610      	mov	r0, r2
 80055be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c0:	e00f      	b.n	80055e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f87c 	bl	80056c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	e00b      	b.n	80055e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f878 	bl	80056c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d0:	e007      	b.n	80055e2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f874 	bl	80056c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80055e0:	e057      	b.n	8005692 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e2:	bf00      	nop
    return;
 80055e4:	e055      	b.n	8005692 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00d      	beq.n	800560c <HAL_UART_IRQHandler+0x260>
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005602:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fc30 	bl	8005e6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800560a:	e045      	b.n	8005698 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005612:	2b00      	cmp	r3, #0
 8005614:	d012      	beq.n	800563c <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561c:	2b00      	cmp	r3, #0
 800561e:	d104      	bne.n	800562a <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	2b00      	cmp	r3, #0
 8005630:	d031      	beq.n	8005696 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	4798      	blx	r3
    }
    return;
 800563a:	e02c      	b.n	8005696 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	d008      	beq.n	8005658 <HAL_UART_IRQHandler+0x2ac>
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f000 fbf0 	bl	8005e36 <UART_EndTransmit_IT>
    return;
 8005656:	e01f      	b.n	8005698 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d008      	beq.n	8005674 <HAL_UART_IRQHandler+0x2c8>
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 fc10 	bl	8005e92 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005672:	e011      	b.n	8005698 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00c      	beq.n	8005698 <HAL_UART_IRQHandler+0x2ec>
 800567e:	69bb      	ldr	r3, [r7, #24]
 8005680:	2b00      	cmp	r3, #0
 8005682:	da09      	bge.n	8005698 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 fbfa 	bl	8005e7e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800568a:	bf00      	nop
 800568c:	e004      	b.n	8005698 <HAL_UART_IRQHandler+0x2ec>
      return;
 800568e:	bf00      	nop
 8005690:	e002      	b.n	8005698 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <HAL_UART_IRQHandler+0x2ec>
    return;
 8005696:	bf00      	nop
  }
}
 8005698:	3720      	adds	r7, #32
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	10000001 	.word	0x10000001
 80056a4:	04000120 	.word	0x04000120
 80056a8:	08005e0b 	.word	0x08005e0b

080056ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80056d8:	b088      	sub	sp, #32
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056de:	2300      	movs	r3, #0
 80056e0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	431a      	orrs	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	4313      	orrs	r3, r2
 8005702:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4ba4      	ldr	r3, [pc, #656]	; (800599c <UART_SetConfig+0x2c8>)
 800570c:	4013      	ands	r3, r2
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	69f9      	ldr	r1, [r7, #28]
 8005714:	430b      	orrs	r3, r1
 8005716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a99      	ldr	r2, [pc, #612]	; (80059a0 <UART_SetConfig+0x2cc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d004      	beq.n	8005748 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	69fa      	ldr	r2, [r7, #28]
 8005744:	4313      	orrs	r3, r2
 8005746:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005752:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6812      	ldr	r2, [r2, #0]
 800575a:	69f9      	ldr	r1, [r7, #28]
 800575c:	430b      	orrs	r3, r1
 800575e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	f023 010f 	bic.w	r1, r3, #15
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a8a      	ldr	r2, [pc, #552]	; (80059a4 <UART_SetConfig+0x2d0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d121      	bne.n	80057c4 <UART_SetConfig+0xf0>
 8005780:	2003      	movs	r0, #3
 8005782:	f7ff fd0c 	bl	800519e <LL_RCC_GetUSARTClockSource>
 8005786:	4603      	mov	r3, r0
 8005788:	2b03      	cmp	r3, #3
 800578a:	d817      	bhi.n	80057bc <UART_SetConfig+0xe8>
 800578c:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <UART_SetConfig+0xc0>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	080057a5 	.word	0x080057a5
 8005798:	080057b1 	.word	0x080057b1
 800579c:	080057ab 	.word	0x080057ab
 80057a0:	080057b7 	.word	0x080057b7
 80057a4:	2301      	movs	r3, #1
 80057a6:	76fb      	strb	r3, [r7, #27]
 80057a8:	e038      	b.n	800581c <UART_SetConfig+0x148>
 80057aa:	2302      	movs	r3, #2
 80057ac:	76fb      	strb	r3, [r7, #27]
 80057ae:	e035      	b.n	800581c <UART_SetConfig+0x148>
 80057b0:	2304      	movs	r3, #4
 80057b2:	76fb      	strb	r3, [r7, #27]
 80057b4:	e032      	b.n	800581c <UART_SetConfig+0x148>
 80057b6:	2308      	movs	r3, #8
 80057b8:	76fb      	strb	r3, [r7, #27]
 80057ba:	e02f      	b.n	800581c <UART_SetConfig+0x148>
 80057bc:	2310      	movs	r3, #16
 80057be:	76fb      	strb	r3, [r7, #27]
 80057c0:	bf00      	nop
 80057c2:	e02b      	b.n	800581c <UART_SetConfig+0x148>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a75      	ldr	r2, [pc, #468]	; (80059a0 <UART_SetConfig+0x2cc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d124      	bne.n	8005818 <UART_SetConfig+0x144>
 80057ce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80057d2:	f7ff fcf4 	bl	80051be <LL_RCC_GetLPUARTClockSource>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057dc:	d012      	beq.n	8005804 <UART_SetConfig+0x130>
 80057de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e2:	d802      	bhi.n	80057ea <UART_SetConfig+0x116>
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <UART_SetConfig+0x124>
 80057e8:	e012      	b.n	8005810 <UART_SetConfig+0x13c>
 80057ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ee:	d006      	beq.n	80057fe <UART_SetConfig+0x12a>
 80057f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057f4:	d009      	beq.n	800580a <UART_SetConfig+0x136>
 80057f6:	e00b      	b.n	8005810 <UART_SetConfig+0x13c>
 80057f8:	2300      	movs	r3, #0
 80057fa:	76fb      	strb	r3, [r7, #27]
 80057fc:	e00e      	b.n	800581c <UART_SetConfig+0x148>
 80057fe:	2302      	movs	r3, #2
 8005800:	76fb      	strb	r3, [r7, #27]
 8005802:	e00b      	b.n	800581c <UART_SetConfig+0x148>
 8005804:	2304      	movs	r3, #4
 8005806:	76fb      	strb	r3, [r7, #27]
 8005808:	e008      	b.n	800581c <UART_SetConfig+0x148>
 800580a:	2308      	movs	r3, #8
 800580c:	76fb      	strb	r3, [r7, #27]
 800580e:	e005      	b.n	800581c <UART_SetConfig+0x148>
 8005810:	2310      	movs	r3, #16
 8005812:	76fb      	strb	r3, [r7, #27]
 8005814:	bf00      	nop
 8005816:	e001      	b.n	800581c <UART_SetConfig+0x148>
 8005818:	2310      	movs	r3, #16
 800581a:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a5f      	ldr	r2, [pc, #380]	; (80059a0 <UART_SetConfig+0x2cc>)
 8005822:	4293      	cmp	r3, r2
 8005824:	f040 808e 	bne.w	8005944 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005828:	7efb      	ldrb	r3, [r7, #27]
 800582a:	2b08      	cmp	r3, #8
 800582c:	d823      	bhi.n	8005876 <UART_SetConfig+0x1a2>
 800582e:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <UART_SetConfig+0x160>)
 8005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005834:	08005859 	.word	0x08005859
 8005838:	08005877 	.word	0x08005877
 800583c:	08005861 	.word	0x08005861
 8005840:	08005877 	.word	0x08005877
 8005844:	08005867 	.word	0x08005867
 8005848:	08005877 	.word	0x08005877
 800584c:	08005877 	.word	0x08005877
 8005850:	08005877 	.word	0x08005877
 8005854:	0800586f 	.word	0x0800586f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005858:	f7fe ff9a 	bl	8004790 <HAL_RCC_GetPCLK1Freq>
 800585c:	6178      	str	r0, [r7, #20]
        break;
 800585e:	e00f      	b.n	8005880 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005860:	4b51      	ldr	r3, [pc, #324]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005862:	617b      	str	r3, [r7, #20]
        break;
 8005864:	e00c      	b.n	8005880 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005866:	f7fe ff15 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 800586a:	6178      	str	r0, [r7, #20]
        break;
 800586c:	e008      	b.n	8005880 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005872:	617b      	str	r3, [r7, #20]
        break;
 8005874:	e004      	b.n	8005880 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	76bb      	strb	r3, [r7, #26]
        break;
 800587e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 811c 	beq.w	8005ac0 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588c:	4a47      	ldr	r2, [pc, #284]	; (80059ac <UART_SetConfig+0x2d8>)
 800588e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005892:	461a      	mov	r2, r3
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	fbb3 f3f2 	udiv	r3, r3, r2
 800589a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685a      	ldr	r2, [r3, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	4413      	add	r3, r2
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d305      	bcc.n	80058b8 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d902      	bls.n	80058be <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	76bb      	strb	r3, [r7, #26]
 80058bc:	e100      	b.n	8005ac0 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	4618      	mov	r0, r3
 80058c2:	f04f 0100 	mov.w	r1, #0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ca:	4a38      	ldr	r2, [pc, #224]	; (80059ac <UART_SetConfig+0x2d8>)
 80058cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	f04f 0400 	mov.w	r4, #0
 80058d6:	461a      	mov	r2, r3
 80058d8:	4623      	mov	r3, r4
 80058da:	f7fa fc4f 	bl	800017c <__aeabi_uldivmod>
 80058de:	4603      	mov	r3, r0
 80058e0:	460c      	mov	r4, r1
 80058e2:	4619      	mov	r1, r3
 80058e4:	4622      	mov	r2, r4
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	f04f 0400 	mov.w	r4, #0
 80058ee:	0214      	lsls	r4, r2, #8
 80058f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80058f4:	020b      	lsls	r3, r1, #8
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6852      	ldr	r2, [r2, #4]
 80058fa:	0852      	lsrs	r2, r2, #1
 80058fc:	4611      	mov	r1, r2
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	eb13 0b01 	adds.w	fp, r3, r1
 8005906:	eb44 0c02 	adc.w	ip, r4, r2
 800590a:	4658      	mov	r0, fp
 800590c:	4661      	mov	r1, ip
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f04f 0400 	mov.w	r4, #0
 8005916:	461a      	mov	r2, r3
 8005918:	4623      	mov	r3, r4
 800591a:	f7fa fc2f 	bl	800017c <__aeabi_uldivmod>
 800591e:	4603      	mov	r3, r0
 8005920:	460c      	mov	r4, r1
 8005922:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800592a:	d308      	bcc.n	800593e <UART_SetConfig+0x26a>
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005932:	d204      	bcs.n	800593e <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	60da      	str	r2, [r3, #12]
 800593c:	e0c0      	b.n	8005ac0 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	76bb      	strb	r3, [r7, #26]
 8005942:	e0bd      	b.n	8005ac0 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800594c:	d169      	bne.n	8005a22 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800594e:	7efb      	ldrb	r3, [r7, #27]
 8005950:	3b01      	subs	r3, #1
 8005952:	2b07      	cmp	r3, #7
 8005954:	d82c      	bhi.n	80059b0 <UART_SetConfig+0x2dc>
 8005956:	a201      	add	r2, pc, #4	; (adr r2, 800595c <UART_SetConfig+0x288>)
 8005958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800595c:	0800597d 	.word	0x0800597d
 8005960:	08005985 	.word	0x08005985
 8005964:	080059b1 	.word	0x080059b1
 8005968:	0800598b 	.word	0x0800598b
 800596c:	080059b1 	.word	0x080059b1
 8005970:	080059b1 	.word	0x080059b1
 8005974:	080059b1 	.word	0x080059b1
 8005978:	08005993 	.word	0x08005993
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800597c:	f7fe ff1e 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 8005980:	6178      	str	r0, [r7, #20]
        break;
 8005982:	e01a      	b.n	80059ba <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005984:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <UART_SetConfig+0x2d4>)
 8005986:	617b      	str	r3, [r7, #20]
        break;
 8005988:	e017      	b.n	80059ba <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800598a:	f7fe fe83 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 800598e:	6178      	str	r0, [r7, #20]
        break;
 8005990:	e013      	b.n	80059ba <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005996:	617b      	str	r3, [r7, #20]
        break;
 8005998:	e00f      	b.n	80059ba <UART_SetConfig+0x2e6>
 800599a:	bf00      	nop
 800599c:	cfff69f3 	.word	0xcfff69f3
 80059a0:	40008000 	.word	0x40008000
 80059a4:	40013800 	.word	0x40013800
 80059a8:	00f42400 	.word	0x00f42400
 80059ac:	08006b68 	.word	0x08006b68
      default:
        pclk = 0U;
 80059b0:	2300      	movs	r3, #0
 80059b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	76bb      	strb	r3, [r7, #26]
        break;
 80059b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d07f      	beq.n	8005ac0 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	4a48      	ldr	r2, [pc, #288]	; (8005ae8 <UART_SetConfig+0x414>)
 80059c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ca:	461a      	mov	r2, r3
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d2:	005a      	lsls	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	085b      	lsrs	r3, r3, #1
 80059da:	441a      	add	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	2b0f      	cmp	r3, #15
 80059ec:	d916      	bls.n	8005a1c <UART_SetConfig+0x348>
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f4:	d212      	bcs.n	8005a1c <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f023 030f 	bic.w	r3, r3, #15
 80059fe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	f003 0307 	and.w	r3, r3, #7
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	89fb      	ldrh	r3, [r7, #14]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	89fa      	ldrh	r2, [r7, #14]
 8005a18:	60da      	str	r2, [r3, #12]
 8005a1a:	e051      	b.n	8005ac0 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	76bb      	strb	r3, [r7, #26]
 8005a20:	e04e      	b.n	8005ac0 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005a22:	7efb      	ldrb	r3, [r7, #27]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	2b07      	cmp	r3, #7
 8005a28:	d821      	bhi.n	8005a6e <UART_SetConfig+0x39a>
 8005a2a:	a201      	add	r2, pc, #4	; (adr r2, 8005a30 <UART_SetConfig+0x35c>)
 8005a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a30:	08005a51 	.word	0x08005a51
 8005a34:	08005a59 	.word	0x08005a59
 8005a38:	08005a6f 	.word	0x08005a6f
 8005a3c:	08005a5f 	.word	0x08005a5f
 8005a40:	08005a6f 	.word	0x08005a6f
 8005a44:	08005a6f 	.word	0x08005a6f
 8005a48:	08005a6f 	.word	0x08005a6f
 8005a4c:	08005a67 	.word	0x08005a67
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a50:	f7fe feb4 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 8005a54:	6178      	str	r0, [r7, #20]
        break;
 8005a56:	e00f      	b.n	8005a78 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a58:	4b24      	ldr	r3, [pc, #144]	; (8005aec <UART_SetConfig+0x418>)
 8005a5a:	617b      	str	r3, [r7, #20]
        break;
 8005a5c:	e00c      	b.n	8005a78 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a5e:	f7fe fe19 	bl	8004694 <HAL_RCC_GetSysClockFreq>
 8005a62:	6178      	str	r0, [r7, #20]
        break;
 8005a64:	e008      	b.n	8005a78 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a6a:	617b      	str	r3, [r7, #20]
        break;
 8005a6c:	e004      	b.n	8005a78 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	76bb      	strb	r3, [r7, #26]
        break;
 8005a76:	bf00      	nop
    }

    if (pclk != 0U)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d020      	beq.n	8005ac0 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	4a19      	ldr	r2, [pc, #100]	; (8005ae8 <UART_SetConfig+0x414>)
 8005a84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	085b      	lsrs	r3, r3, #1
 8005a96:	441a      	add	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	2b0f      	cmp	r3, #15
 8005aa8:	d908      	bls.n	8005abc <UART_SetConfig+0x3e8>
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab0:	d204      	bcs.n	8005abc <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	60da      	str	r2, [r3, #12]
 8005aba:	e001      	b.n	8005ac0 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005adc:	7ebb      	ldrb	r3, [r7, #26]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3720      	adds	r7, #32
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005ae8:	08006b68 	.word	0x08006b68
 8005aec:	00f42400 	.word	0x00f42400

08005af0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d00a      	beq.n	8005b5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00a      	beq.n	8005b80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b84:	f003 0310 	and.w	r3, r3, #16
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00a      	beq.n	8005ba2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba6:	f003 0320 	and.w	r3, r3, #32
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00a      	beq.n	8005bc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01a      	beq.n	8005c06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bee:	d10a      	bne.n	8005c06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	430a      	orrs	r2, r1
 8005c26:	605a      	str	r2, [r3, #4]
  }
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af02      	add	r7, sp, #8
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005c44:	f7fb fac0 	bl	80011c8 <HAL_GetTick>
 8005c48:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0308 	and.w	r3, r3, #8
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d10e      	bne.n	8005c76 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f82c 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e022      	b.n	8005cbc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d10e      	bne.n	8005ca2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f816 	bl	8005cc4 <UART_WaitOnFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e00c      	b.n	8005cbc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2220      	movs	r2, #32
 8005cae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	603b      	str	r3, [r7, #0]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd4:	e062      	b.n	8005d9c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d05e      	beq.n	8005d9c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cde:	f7fb fa73 	bl	80011c8 <HAL_GetTick>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	69ba      	ldr	r2, [r7, #24]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d302      	bcc.n	8005cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d11d      	bne.n	8005d30 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d02:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689a      	ldr	r2, [r3, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2220      	movs	r2, #32
 8005d20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e045      	b.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0304 	and.w	r3, r3, #4
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d02e      	beq.n	8005d9c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69db      	ldr	r3, [r3, #28]
 8005d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4c:	d126      	bne.n	8005d9c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d56:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d66:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0201 	bic.w	r2, r2, #1
 8005d76:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2220      	movs	r2, #32
 8005d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e00f      	b.n	8005dbc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69da      	ldr	r2, [r3, #28]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4013      	ands	r3, r2
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	bf0c      	ite	eq
 8005dac:	2301      	moveq	r3, #1
 8005dae:	2300      	movne	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d08d      	beq.n	8005cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b084      	sub	sp, #16
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f7ff fc49 	bl	80056c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e4c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff fc25 	bl	80056ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005e7e:	b480      	push	{r7}
 8005e80:	b083      	sub	sp, #12
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005e86:	bf00      	nop
 8005e88:	370c      	adds	r7, #12
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr

08005e92 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b083      	sub	sp, #12
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005e9a:	bf00      	nop
 8005e9c:	370c      	adds	r7, #12
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr

08005ea6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ea6:	b480      	push	{r7}
 8005ea8:	b085      	sub	sp, #20
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d101      	bne.n	8005ebc <HAL_UARTEx_DisableFifoMode+0x16>
 8005eb8:	2302      	movs	r3, #2
 8005eba:	e027      	b.n	8005f0c <HAL_UARTEx_DisableFifoMode+0x66>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2224      	movs	r2, #36	; 0x24
 8005ec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f022 0201 	bic.w	r2, r2, #1
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005eea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e02d      	b.n	8005f8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2224      	movs	r2, #36	; 0x24
 8005f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0201 	bic.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f84f 	bl	8006010 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e02d      	b.n	8006008 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2224      	movs	r2, #36	; 0x24
 8005fb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 0201 	bic.w	r2, r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	430a      	orrs	r2, r1
 8005fe6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f811 	bl	8006010 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2220      	movs	r2, #32
 8005ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006010:	b480      	push	{r7}
 8006012:	b089      	sub	sp, #36	; 0x24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006018:	4a2f      	ldr	r2, [pc, #188]	; (80060d8 <UARTEx_SetNbDataToProcess+0xc8>)
 800601a:	f107 0314 	add.w	r3, r7, #20
 800601e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006022:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006026:	4a2d      	ldr	r2, [pc, #180]	; (80060dc <UARTEx_SetNbDataToProcess+0xcc>)
 8006028:	f107 030c 	add.w	r3, r7, #12
 800602c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006030:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006038:	2b00      	cmp	r3, #0
 800603a:	d108      	bne.n	800604e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800604c:	e03d      	b.n	80060ca <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800604e:	2308      	movs	r3, #8
 8006050:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006052:	2308      	movs	r3, #8
 8006054:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	0e5b      	lsrs	r3, r3, #25
 800605e:	b2db      	uxtb	r3, r3
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	0f5b      	lsrs	r3, r3, #29
 800606e:	b2db      	uxtb	r3, r3
 8006070:	f003 0307 	and.w	r3, r3, #7
 8006074:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006076:	7fbb      	ldrb	r3, [r7, #30]
 8006078:	7f3a      	ldrb	r2, [r7, #28]
 800607a:	f107 0120 	add.w	r1, r7, #32
 800607e:	440a      	add	r2, r1
 8006080:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006084:	fb02 f303 	mul.w	r3, r2, r3
 8006088:	7f3a      	ldrb	r2, [r7, #28]
 800608a:	f107 0120 	add.w	r1, r7, #32
 800608e:	440a      	add	r2, r1
 8006090:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006094:	fb93 f3f2 	sdiv	r3, r3, r2
 8006098:	b29a      	uxth	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80060a0:	7ffb      	ldrb	r3, [r7, #31]
 80060a2:	7f7a      	ldrb	r2, [r7, #29]
 80060a4:	f107 0120 	add.w	r1, r7, #32
 80060a8:	440a      	add	r2, r1
 80060aa:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80060ae:	fb02 f303 	mul.w	r3, r2, r3
 80060b2:	7f7a      	ldrb	r2, [r7, #29]
 80060b4:	f107 0120 	add.w	r1, r7, #32
 80060b8:	440a      	add	r2, r1
 80060ba:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80060be:	fb93 f3f2 	sdiv	r3, r3, r2
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80060ca:	bf00      	nop
 80060cc:	3724      	adds	r7, #36	; 0x24
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	08006ab8 	.word	0x08006ab8
 80060dc:	08006ac0 	.word	0x08006ac0

080060e0 <__errno>:
 80060e0:	4b01      	ldr	r3, [pc, #4]	; (80060e8 <__errno+0x8>)
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	20000018 	.word	0x20000018

080060ec <__libc_init_array>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	4e0d      	ldr	r6, [pc, #52]	; (8006124 <__libc_init_array+0x38>)
 80060f0:	4c0d      	ldr	r4, [pc, #52]	; (8006128 <__libc_init_array+0x3c>)
 80060f2:	1ba4      	subs	r4, r4, r6
 80060f4:	10a4      	asrs	r4, r4, #2
 80060f6:	2500      	movs	r5, #0
 80060f8:	42a5      	cmp	r5, r4
 80060fa:	d109      	bne.n	8006110 <__libc_init_array+0x24>
 80060fc:	4e0b      	ldr	r6, [pc, #44]	; (800612c <__libc_init_array+0x40>)
 80060fe:	4c0c      	ldr	r4, [pc, #48]	; (8006130 <__libc_init_array+0x44>)
 8006100:	f000 fc88 	bl	8006a14 <_init>
 8006104:	1ba4      	subs	r4, r4, r6
 8006106:	10a4      	asrs	r4, r4, #2
 8006108:	2500      	movs	r5, #0
 800610a:	42a5      	cmp	r5, r4
 800610c:	d105      	bne.n	800611a <__libc_init_array+0x2e>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006114:	4798      	blx	r3
 8006116:	3501      	adds	r5, #1
 8006118:	e7ee      	b.n	80060f8 <__libc_init_array+0xc>
 800611a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800611e:	4798      	blx	r3
 8006120:	3501      	adds	r5, #1
 8006122:	e7f2      	b.n	800610a <__libc_init_array+0x1e>
 8006124:	08006bec 	.word	0x08006bec
 8006128:	08006bec 	.word	0x08006bec
 800612c:	08006bec 	.word	0x08006bec
 8006130:	08006bf0 	.word	0x08006bf0

08006134 <memset>:
 8006134:	4402      	add	r2, r0
 8006136:	4603      	mov	r3, r0
 8006138:	4293      	cmp	r3, r2
 800613a:	d100      	bne.n	800613e <memset+0xa>
 800613c:	4770      	bx	lr
 800613e:	f803 1b01 	strb.w	r1, [r3], #1
 8006142:	e7f9      	b.n	8006138 <memset+0x4>

08006144 <_puts_r>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	460e      	mov	r6, r1
 8006148:	4605      	mov	r5, r0
 800614a:	b118      	cbz	r0, 8006154 <_puts_r+0x10>
 800614c:	6983      	ldr	r3, [r0, #24]
 800614e:	b90b      	cbnz	r3, 8006154 <_puts_r+0x10>
 8006150:	f000 fa0c 	bl	800656c <__sinit>
 8006154:	69ab      	ldr	r3, [r5, #24]
 8006156:	68ac      	ldr	r4, [r5, #8]
 8006158:	b913      	cbnz	r3, 8006160 <_puts_r+0x1c>
 800615a:	4628      	mov	r0, r5
 800615c:	f000 fa06 	bl	800656c <__sinit>
 8006160:	4b23      	ldr	r3, [pc, #140]	; (80061f0 <_puts_r+0xac>)
 8006162:	429c      	cmp	r4, r3
 8006164:	d117      	bne.n	8006196 <_puts_r+0x52>
 8006166:	686c      	ldr	r4, [r5, #4]
 8006168:	89a3      	ldrh	r3, [r4, #12]
 800616a:	071b      	lsls	r3, r3, #28
 800616c:	d51d      	bpl.n	80061aa <_puts_r+0x66>
 800616e:	6923      	ldr	r3, [r4, #16]
 8006170:	b1db      	cbz	r3, 80061aa <_puts_r+0x66>
 8006172:	3e01      	subs	r6, #1
 8006174:	68a3      	ldr	r3, [r4, #8]
 8006176:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800617a:	3b01      	subs	r3, #1
 800617c:	60a3      	str	r3, [r4, #8]
 800617e:	b9e9      	cbnz	r1, 80061bc <_puts_r+0x78>
 8006180:	2b00      	cmp	r3, #0
 8006182:	da2e      	bge.n	80061e2 <_puts_r+0x9e>
 8006184:	4622      	mov	r2, r4
 8006186:	210a      	movs	r1, #10
 8006188:	4628      	mov	r0, r5
 800618a:	f000 f83f 	bl	800620c <__swbuf_r>
 800618e:	3001      	adds	r0, #1
 8006190:	d011      	beq.n	80061b6 <_puts_r+0x72>
 8006192:	200a      	movs	r0, #10
 8006194:	e011      	b.n	80061ba <_puts_r+0x76>
 8006196:	4b17      	ldr	r3, [pc, #92]	; (80061f4 <_puts_r+0xb0>)
 8006198:	429c      	cmp	r4, r3
 800619a:	d101      	bne.n	80061a0 <_puts_r+0x5c>
 800619c:	68ac      	ldr	r4, [r5, #8]
 800619e:	e7e3      	b.n	8006168 <_puts_r+0x24>
 80061a0:	4b15      	ldr	r3, [pc, #84]	; (80061f8 <_puts_r+0xb4>)
 80061a2:	429c      	cmp	r4, r3
 80061a4:	bf08      	it	eq
 80061a6:	68ec      	ldreq	r4, [r5, #12]
 80061a8:	e7de      	b.n	8006168 <_puts_r+0x24>
 80061aa:	4621      	mov	r1, r4
 80061ac:	4628      	mov	r0, r5
 80061ae:	f000 f87f 	bl	80062b0 <__swsetup_r>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d0dd      	beq.n	8006172 <_puts_r+0x2e>
 80061b6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
 80061bc:	2b00      	cmp	r3, #0
 80061be:	da04      	bge.n	80061ca <_puts_r+0x86>
 80061c0:	69a2      	ldr	r2, [r4, #24]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	dc06      	bgt.n	80061d4 <_puts_r+0x90>
 80061c6:	290a      	cmp	r1, #10
 80061c8:	d004      	beq.n	80061d4 <_puts_r+0x90>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	6022      	str	r2, [r4, #0]
 80061d0:	7019      	strb	r1, [r3, #0]
 80061d2:	e7cf      	b.n	8006174 <_puts_r+0x30>
 80061d4:	4622      	mov	r2, r4
 80061d6:	4628      	mov	r0, r5
 80061d8:	f000 f818 	bl	800620c <__swbuf_r>
 80061dc:	3001      	adds	r0, #1
 80061de:	d1c9      	bne.n	8006174 <_puts_r+0x30>
 80061e0:	e7e9      	b.n	80061b6 <_puts_r+0x72>
 80061e2:	6823      	ldr	r3, [r4, #0]
 80061e4:	200a      	movs	r0, #10
 80061e6:	1c5a      	adds	r2, r3, #1
 80061e8:	6022      	str	r2, [r4, #0]
 80061ea:	7018      	strb	r0, [r3, #0]
 80061ec:	e7e5      	b.n	80061ba <_puts_r+0x76>
 80061ee:	bf00      	nop
 80061f0:	08006ba4 	.word	0x08006ba4
 80061f4:	08006bc4 	.word	0x08006bc4
 80061f8:	08006b84 	.word	0x08006b84

080061fc <puts>:
 80061fc:	4b02      	ldr	r3, [pc, #8]	; (8006208 <puts+0xc>)
 80061fe:	4601      	mov	r1, r0
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	f7ff bf9f 	b.w	8006144 <_puts_r>
 8006206:	bf00      	nop
 8006208:	20000018 	.word	0x20000018

0800620c <__swbuf_r>:
 800620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800620e:	460e      	mov	r6, r1
 8006210:	4614      	mov	r4, r2
 8006212:	4605      	mov	r5, r0
 8006214:	b118      	cbz	r0, 800621e <__swbuf_r+0x12>
 8006216:	6983      	ldr	r3, [r0, #24]
 8006218:	b90b      	cbnz	r3, 800621e <__swbuf_r+0x12>
 800621a:	f000 f9a7 	bl	800656c <__sinit>
 800621e:	4b21      	ldr	r3, [pc, #132]	; (80062a4 <__swbuf_r+0x98>)
 8006220:	429c      	cmp	r4, r3
 8006222:	d12a      	bne.n	800627a <__swbuf_r+0x6e>
 8006224:	686c      	ldr	r4, [r5, #4]
 8006226:	69a3      	ldr	r3, [r4, #24]
 8006228:	60a3      	str	r3, [r4, #8]
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	071a      	lsls	r2, r3, #28
 800622e:	d52e      	bpl.n	800628e <__swbuf_r+0x82>
 8006230:	6923      	ldr	r3, [r4, #16]
 8006232:	b363      	cbz	r3, 800628e <__swbuf_r+0x82>
 8006234:	6923      	ldr	r3, [r4, #16]
 8006236:	6820      	ldr	r0, [r4, #0]
 8006238:	1ac0      	subs	r0, r0, r3
 800623a:	6963      	ldr	r3, [r4, #20]
 800623c:	b2f6      	uxtb	r6, r6
 800623e:	4283      	cmp	r3, r0
 8006240:	4637      	mov	r7, r6
 8006242:	dc04      	bgt.n	800624e <__swbuf_r+0x42>
 8006244:	4621      	mov	r1, r4
 8006246:	4628      	mov	r0, r5
 8006248:	f000 f926 	bl	8006498 <_fflush_r>
 800624c:	bb28      	cbnz	r0, 800629a <__swbuf_r+0x8e>
 800624e:	68a3      	ldr	r3, [r4, #8]
 8006250:	3b01      	subs	r3, #1
 8006252:	60a3      	str	r3, [r4, #8]
 8006254:	6823      	ldr	r3, [r4, #0]
 8006256:	1c5a      	adds	r2, r3, #1
 8006258:	6022      	str	r2, [r4, #0]
 800625a:	701e      	strb	r6, [r3, #0]
 800625c:	6963      	ldr	r3, [r4, #20]
 800625e:	3001      	adds	r0, #1
 8006260:	4283      	cmp	r3, r0
 8006262:	d004      	beq.n	800626e <__swbuf_r+0x62>
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	07db      	lsls	r3, r3, #31
 8006268:	d519      	bpl.n	800629e <__swbuf_r+0x92>
 800626a:	2e0a      	cmp	r6, #10
 800626c:	d117      	bne.n	800629e <__swbuf_r+0x92>
 800626e:	4621      	mov	r1, r4
 8006270:	4628      	mov	r0, r5
 8006272:	f000 f911 	bl	8006498 <_fflush_r>
 8006276:	b190      	cbz	r0, 800629e <__swbuf_r+0x92>
 8006278:	e00f      	b.n	800629a <__swbuf_r+0x8e>
 800627a:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <__swbuf_r+0x9c>)
 800627c:	429c      	cmp	r4, r3
 800627e:	d101      	bne.n	8006284 <__swbuf_r+0x78>
 8006280:	68ac      	ldr	r4, [r5, #8]
 8006282:	e7d0      	b.n	8006226 <__swbuf_r+0x1a>
 8006284:	4b09      	ldr	r3, [pc, #36]	; (80062ac <__swbuf_r+0xa0>)
 8006286:	429c      	cmp	r4, r3
 8006288:	bf08      	it	eq
 800628a:	68ec      	ldreq	r4, [r5, #12]
 800628c:	e7cb      	b.n	8006226 <__swbuf_r+0x1a>
 800628e:	4621      	mov	r1, r4
 8006290:	4628      	mov	r0, r5
 8006292:	f000 f80d 	bl	80062b0 <__swsetup_r>
 8006296:	2800      	cmp	r0, #0
 8006298:	d0cc      	beq.n	8006234 <__swbuf_r+0x28>
 800629a:	f04f 37ff 	mov.w	r7, #4294967295
 800629e:	4638      	mov	r0, r7
 80062a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062a2:	bf00      	nop
 80062a4:	08006ba4 	.word	0x08006ba4
 80062a8:	08006bc4 	.word	0x08006bc4
 80062ac:	08006b84 	.word	0x08006b84

080062b0 <__swsetup_r>:
 80062b0:	4b32      	ldr	r3, [pc, #200]	; (800637c <__swsetup_r+0xcc>)
 80062b2:	b570      	push	{r4, r5, r6, lr}
 80062b4:	681d      	ldr	r5, [r3, #0]
 80062b6:	4606      	mov	r6, r0
 80062b8:	460c      	mov	r4, r1
 80062ba:	b125      	cbz	r5, 80062c6 <__swsetup_r+0x16>
 80062bc:	69ab      	ldr	r3, [r5, #24]
 80062be:	b913      	cbnz	r3, 80062c6 <__swsetup_r+0x16>
 80062c0:	4628      	mov	r0, r5
 80062c2:	f000 f953 	bl	800656c <__sinit>
 80062c6:	4b2e      	ldr	r3, [pc, #184]	; (8006380 <__swsetup_r+0xd0>)
 80062c8:	429c      	cmp	r4, r3
 80062ca:	d10f      	bne.n	80062ec <__swsetup_r+0x3c>
 80062cc:	686c      	ldr	r4, [r5, #4]
 80062ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	0715      	lsls	r5, r2, #28
 80062d6:	d42c      	bmi.n	8006332 <__swsetup_r+0x82>
 80062d8:	06d0      	lsls	r0, r2, #27
 80062da:	d411      	bmi.n	8006300 <__swsetup_r+0x50>
 80062dc:	2209      	movs	r2, #9
 80062de:	6032      	str	r2, [r6, #0]
 80062e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062e4:	81a3      	strh	r3, [r4, #12]
 80062e6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ea:	e03e      	b.n	800636a <__swsetup_r+0xba>
 80062ec:	4b25      	ldr	r3, [pc, #148]	; (8006384 <__swsetup_r+0xd4>)
 80062ee:	429c      	cmp	r4, r3
 80062f0:	d101      	bne.n	80062f6 <__swsetup_r+0x46>
 80062f2:	68ac      	ldr	r4, [r5, #8]
 80062f4:	e7eb      	b.n	80062ce <__swsetup_r+0x1e>
 80062f6:	4b24      	ldr	r3, [pc, #144]	; (8006388 <__swsetup_r+0xd8>)
 80062f8:	429c      	cmp	r4, r3
 80062fa:	bf08      	it	eq
 80062fc:	68ec      	ldreq	r4, [r5, #12]
 80062fe:	e7e6      	b.n	80062ce <__swsetup_r+0x1e>
 8006300:	0751      	lsls	r1, r2, #29
 8006302:	d512      	bpl.n	800632a <__swsetup_r+0x7a>
 8006304:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006306:	b141      	cbz	r1, 800631a <__swsetup_r+0x6a>
 8006308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800630c:	4299      	cmp	r1, r3
 800630e:	d002      	beq.n	8006316 <__swsetup_r+0x66>
 8006310:	4630      	mov	r0, r6
 8006312:	f000 fa19 	bl	8006748 <_free_r>
 8006316:	2300      	movs	r3, #0
 8006318:	6363      	str	r3, [r4, #52]	; 0x34
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006320:	81a3      	strh	r3, [r4, #12]
 8006322:	2300      	movs	r3, #0
 8006324:	6063      	str	r3, [r4, #4]
 8006326:	6923      	ldr	r3, [r4, #16]
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	89a3      	ldrh	r3, [r4, #12]
 800632c:	f043 0308 	orr.w	r3, r3, #8
 8006330:	81a3      	strh	r3, [r4, #12]
 8006332:	6923      	ldr	r3, [r4, #16]
 8006334:	b94b      	cbnz	r3, 800634a <__swsetup_r+0x9a>
 8006336:	89a3      	ldrh	r3, [r4, #12]
 8006338:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800633c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006340:	d003      	beq.n	800634a <__swsetup_r+0x9a>
 8006342:	4621      	mov	r1, r4
 8006344:	4630      	mov	r0, r6
 8006346:	f000 f9bf 	bl	80066c8 <__smakebuf_r>
 800634a:	89a2      	ldrh	r2, [r4, #12]
 800634c:	f012 0301 	ands.w	r3, r2, #1
 8006350:	d00c      	beq.n	800636c <__swsetup_r+0xbc>
 8006352:	2300      	movs	r3, #0
 8006354:	60a3      	str	r3, [r4, #8]
 8006356:	6963      	ldr	r3, [r4, #20]
 8006358:	425b      	negs	r3, r3
 800635a:	61a3      	str	r3, [r4, #24]
 800635c:	6923      	ldr	r3, [r4, #16]
 800635e:	b953      	cbnz	r3, 8006376 <__swsetup_r+0xc6>
 8006360:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006364:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006368:	d1ba      	bne.n	80062e0 <__swsetup_r+0x30>
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	0792      	lsls	r2, r2, #30
 800636e:	bf58      	it	pl
 8006370:	6963      	ldrpl	r3, [r4, #20]
 8006372:	60a3      	str	r3, [r4, #8]
 8006374:	e7f2      	b.n	800635c <__swsetup_r+0xac>
 8006376:	2000      	movs	r0, #0
 8006378:	e7f7      	b.n	800636a <__swsetup_r+0xba>
 800637a:	bf00      	nop
 800637c:	20000018 	.word	0x20000018
 8006380:	08006ba4 	.word	0x08006ba4
 8006384:	08006bc4 	.word	0x08006bc4
 8006388:	08006b84 	.word	0x08006b84

0800638c <__sflush_r>:
 800638c:	898a      	ldrh	r2, [r1, #12]
 800638e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006392:	4605      	mov	r5, r0
 8006394:	0710      	lsls	r0, r2, #28
 8006396:	460c      	mov	r4, r1
 8006398:	d458      	bmi.n	800644c <__sflush_r+0xc0>
 800639a:	684b      	ldr	r3, [r1, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	dc05      	bgt.n	80063ac <__sflush_r+0x20>
 80063a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	dc02      	bgt.n	80063ac <__sflush_r+0x20>
 80063a6:	2000      	movs	r0, #0
 80063a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063ae:	2e00      	cmp	r6, #0
 80063b0:	d0f9      	beq.n	80063a6 <__sflush_r+0x1a>
 80063b2:	2300      	movs	r3, #0
 80063b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80063b8:	682f      	ldr	r7, [r5, #0]
 80063ba:	6a21      	ldr	r1, [r4, #32]
 80063bc:	602b      	str	r3, [r5, #0]
 80063be:	d032      	beq.n	8006426 <__sflush_r+0x9a>
 80063c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	075a      	lsls	r2, r3, #29
 80063c6:	d505      	bpl.n	80063d4 <__sflush_r+0x48>
 80063c8:	6863      	ldr	r3, [r4, #4]
 80063ca:	1ac0      	subs	r0, r0, r3
 80063cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80063ce:	b10b      	cbz	r3, 80063d4 <__sflush_r+0x48>
 80063d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063d2:	1ac0      	subs	r0, r0, r3
 80063d4:	2300      	movs	r3, #0
 80063d6:	4602      	mov	r2, r0
 80063d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063da:	6a21      	ldr	r1, [r4, #32]
 80063dc:	4628      	mov	r0, r5
 80063de:	47b0      	blx	r6
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	89a3      	ldrh	r3, [r4, #12]
 80063e4:	d106      	bne.n	80063f4 <__sflush_r+0x68>
 80063e6:	6829      	ldr	r1, [r5, #0]
 80063e8:	291d      	cmp	r1, #29
 80063ea:	d848      	bhi.n	800647e <__sflush_r+0xf2>
 80063ec:	4a29      	ldr	r2, [pc, #164]	; (8006494 <__sflush_r+0x108>)
 80063ee:	40ca      	lsrs	r2, r1
 80063f0:	07d6      	lsls	r6, r2, #31
 80063f2:	d544      	bpl.n	800647e <__sflush_r+0xf2>
 80063f4:	2200      	movs	r2, #0
 80063f6:	6062      	str	r2, [r4, #4]
 80063f8:	04d9      	lsls	r1, r3, #19
 80063fa:	6922      	ldr	r2, [r4, #16]
 80063fc:	6022      	str	r2, [r4, #0]
 80063fe:	d504      	bpl.n	800640a <__sflush_r+0x7e>
 8006400:	1c42      	adds	r2, r0, #1
 8006402:	d101      	bne.n	8006408 <__sflush_r+0x7c>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	b903      	cbnz	r3, 800640a <__sflush_r+0x7e>
 8006408:	6560      	str	r0, [r4, #84]	; 0x54
 800640a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800640c:	602f      	str	r7, [r5, #0]
 800640e:	2900      	cmp	r1, #0
 8006410:	d0c9      	beq.n	80063a6 <__sflush_r+0x1a>
 8006412:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006416:	4299      	cmp	r1, r3
 8006418:	d002      	beq.n	8006420 <__sflush_r+0x94>
 800641a:	4628      	mov	r0, r5
 800641c:	f000 f994 	bl	8006748 <_free_r>
 8006420:	2000      	movs	r0, #0
 8006422:	6360      	str	r0, [r4, #52]	; 0x34
 8006424:	e7c0      	b.n	80063a8 <__sflush_r+0x1c>
 8006426:	2301      	movs	r3, #1
 8006428:	4628      	mov	r0, r5
 800642a:	47b0      	blx	r6
 800642c:	1c41      	adds	r1, r0, #1
 800642e:	d1c8      	bne.n	80063c2 <__sflush_r+0x36>
 8006430:	682b      	ldr	r3, [r5, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d0c5      	beq.n	80063c2 <__sflush_r+0x36>
 8006436:	2b1d      	cmp	r3, #29
 8006438:	d001      	beq.n	800643e <__sflush_r+0xb2>
 800643a:	2b16      	cmp	r3, #22
 800643c:	d101      	bne.n	8006442 <__sflush_r+0xb6>
 800643e:	602f      	str	r7, [r5, #0]
 8006440:	e7b1      	b.n	80063a6 <__sflush_r+0x1a>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006448:	81a3      	strh	r3, [r4, #12]
 800644a:	e7ad      	b.n	80063a8 <__sflush_r+0x1c>
 800644c:	690f      	ldr	r7, [r1, #16]
 800644e:	2f00      	cmp	r7, #0
 8006450:	d0a9      	beq.n	80063a6 <__sflush_r+0x1a>
 8006452:	0793      	lsls	r3, r2, #30
 8006454:	680e      	ldr	r6, [r1, #0]
 8006456:	bf08      	it	eq
 8006458:	694b      	ldreq	r3, [r1, #20]
 800645a:	600f      	str	r7, [r1, #0]
 800645c:	bf18      	it	ne
 800645e:	2300      	movne	r3, #0
 8006460:	eba6 0807 	sub.w	r8, r6, r7
 8006464:	608b      	str	r3, [r1, #8]
 8006466:	f1b8 0f00 	cmp.w	r8, #0
 800646a:	dd9c      	ble.n	80063a6 <__sflush_r+0x1a>
 800646c:	4643      	mov	r3, r8
 800646e:	463a      	mov	r2, r7
 8006470:	6a21      	ldr	r1, [r4, #32]
 8006472:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006474:	4628      	mov	r0, r5
 8006476:	47b0      	blx	r6
 8006478:	2800      	cmp	r0, #0
 800647a:	dc06      	bgt.n	800648a <__sflush_r+0xfe>
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006482:	81a3      	strh	r3, [r4, #12]
 8006484:	f04f 30ff 	mov.w	r0, #4294967295
 8006488:	e78e      	b.n	80063a8 <__sflush_r+0x1c>
 800648a:	4407      	add	r7, r0
 800648c:	eba8 0800 	sub.w	r8, r8, r0
 8006490:	e7e9      	b.n	8006466 <__sflush_r+0xda>
 8006492:	bf00      	nop
 8006494:	20400001 	.word	0x20400001

08006498 <_fflush_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	690b      	ldr	r3, [r1, #16]
 800649c:	4605      	mov	r5, r0
 800649e:	460c      	mov	r4, r1
 80064a0:	b1db      	cbz	r3, 80064da <_fflush_r+0x42>
 80064a2:	b118      	cbz	r0, 80064ac <_fflush_r+0x14>
 80064a4:	6983      	ldr	r3, [r0, #24]
 80064a6:	b90b      	cbnz	r3, 80064ac <_fflush_r+0x14>
 80064a8:	f000 f860 	bl	800656c <__sinit>
 80064ac:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <_fflush_r+0x48>)
 80064ae:	429c      	cmp	r4, r3
 80064b0:	d109      	bne.n	80064c6 <_fflush_r+0x2e>
 80064b2:	686c      	ldr	r4, [r5, #4]
 80064b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064b8:	b17b      	cbz	r3, 80064da <_fflush_r+0x42>
 80064ba:	4621      	mov	r1, r4
 80064bc:	4628      	mov	r0, r5
 80064be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064c2:	f7ff bf63 	b.w	800638c <__sflush_r>
 80064c6:	4b07      	ldr	r3, [pc, #28]	; (80064e4 <_fflush_r+0x4c>)
 80064c8:	429c      	cmp	r4, r3
 80064ca:	d101      	bne.n	80064d0 <_fflush_r+0x38>
 80064cc:	68ac      	ldr	r4, [r5, #8]
 80064ce:	e7f1      	b.n	80064b4 <_fflush_r+0x1c>
 80064d0:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <_fflush_r+0x50>)
 80064d2:	429c      	cmp	r4, r3
 80064d4:	bf08      	it	eq
 80064d6:	68ec      	ldreq	r4, [r5, #12]
 80064d8:	e7ec      	b.n	80064b4 <_fflush_r+0x1c>
 80064da:	2000      	movs	r0, #0
 80064dc:	bd38      	pop	{r3, r4, r5, pc}
 80064de:	bf00      	nop
 80064e0:	08006ba4 	.word	0x08006ba4
 80064e4:	08006bc4 	.word	0x08006bc4
 80064e8:	08006b84 	.word	0x08006b84

080064ec <std>:
 80064ec:	2300      	movs	r3, #0
 80064ee:	b510      	push	{r4, lr}
 80064f0:	4604      	mov	r4, r0
 80064f2:	e9c0 3300 	strd	r3, r3, [r0]
 80064f6:	6083      	str	r3, [r0, #8]
 80064f8:	8181      	strh	r1, [r0, #12]
 80064fa:	6643      	str	r3, [r0, #100]	; 0x64
 80064fc:	81c2      	strh	r2, [r0, #14]
 80064fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006502:	6183      	str	r3, [r0, #24]
 8006504:	4619      	mov	r1, r3
 8006506:	2208      	movs	r2, #8
 8006508:	305c      	adds	r0, #92	; 0x5c
 800650a:	f7ff fe13 	bl	8006134 <memset>
 800650e:	4b05      	ldr	r3, [pc, #20]	; (8006524 <std+0x38>)
 8006510:	6263      	str	r3, [r4, #36]	; 0x24
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <std+0x3c>)
 8006514:	62a3      	str	r3, [r4, #40]	; 0x28
 8006516:	4b05      	ldr	r3, [pc, #20]	; (800652c <std+0x40>)
 8006518:	62e3      	str	r3, [r4, #44]	; 0x2c
 800651a:	4b05      	ldr	r3, [pc, #20]	; (8006530 <std+0x44>)
 800651c:	6224      	str	r4, [r4, #32]
 800651e:	6323      	str	r3, [r4, #48]	; 0x30
 8006520:	bd10      	pop	{r4, pc}
 8006522:	bf00      	nop
 8006524:	080068b9 	.word	0x080068b9
 8006528:	080068db 	.word	0x080068db
 800652c:	08006913 	.word	0x08006913
 8006530:	08006937 	.word	0x08006937

08006534 <_cleanup_r>:
 8006534:	4901      	ldr	r1, [pc, #4]	; (800653c <_cleanup_r+0x8>)
 8006536:	f000 b885 	b.w	8006644 <_fwalk_reent>
 800653a:	bf00      	nop
 800653c:	08006499 	.word	0x08006499

08006540 <__sfmoreglue>:
 8006540:	b570      	push	{r4, r5, r6, lr}
 8006542:	1e4a      	subs	r2, r1, #1
 8006544:	2568      	movs	r5, #104	; 0x68
 8006546:	4355      	muls	r5, r2
 8006548:	460e      	mov	r6, r1
 800654a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800654e:	f000 f949 	bl	80067e4 <_malloc_r>
 8006552:	4604      	mov	r4, r0
 8006554:	b140      	cbz	r0, 8006568 <__sfmoreglue+0x28>
 8006556:	2100      	movs	r1, #0
 8006558:	e9c0 1600 	strd	r1, r6, [r0]
 800655c:	300c      	adds	r0, #12
 800655e:	60a0      	str	r0, [r4, #8]
 8006560:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006564:	f7ff fde6 	bl	8006134 <memset>
 8006568:	4620      	mov	r0, r4
 800656a:	bd70      	pop	{r4, r5, r6, pc}

0800656c <__sinit>:
 800656c:	6983      	ldr	r3, [r0, #24]
 800656e:	b510      	push	{r4, lr}
 8006570:	4604      	mov	r4, r0
 8006572:	bb33      	cbnz	r3, 80065c2 <__sinit+0x56>
 8006574:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006578:	6503      	str	r3, [r0, #80]	; 0x50
 800657a:	4b12      	ldr	r3, [pc, #72]	; (80065c4 <__sinit+0x58>)
 800657c:	4a12      	ldr	r2, [pc, #72]	; (80065c8 <__sinit+0x5c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6282      	str	r2, [r0, #40]	; 0x28
 8006582:	4298      	cmp	r0, r3
 8006584:	bf04      	itt	eq
 8006586:	2301      	moveq	r3, #1
 8006588:	6183      	streq	r3, [r0, #24]
 800658a:	f000 f81f 	bl	80065cc <__sfp>
 800658e:	6060      	str	r0, [r4, #4]
 8006590:	4620      	mov	r0, r4
 8006592:	f000 f81b 	bl	80065cc <__sfp>
 8006596:	60a0      	str	r0, [r4, #8]
 8006598:	4620      	mov	r0, r4
 800659a:	f000 f817 	bl	80065cc <__sfp>
 800659e:	2200      	movs	r2, #0
 80065a0:	60e0      	str	r0, [r4, #12]
 80065a2:	2104      	movs	r1, #4
 80065a4:	6860      	ldr	r0, [r4, #4]
 80065a6:	f7ff ffa1 	bl	80064ec <std>
 80065aa:	2201      	movs	r2, #1
 80065ac:	2109      	movs	r1, #9
 80065ae:	68a0      	ldr	r0, [r4, #8]
 80065b0:	f7ff ff9c 	bl	80064ec <std>
 80065b4:	2202      	movs	r2, #2
 80065b6:	2112      	movs	r1, #18
 80065b8:	68e0      	ldr	r0, [r4, #12]
 80065ba:	f7ff ff97 	bl	80064ec <std>
 80065be:	2301      	movs	r3, #1
 80065c0:	61a3      	str	r3, [r4, #24]
 80065c2:	bd10      	pop	{r4, pc}
 80065c4:	08006b80 	.word	0x08006b80
 80065c8:	08006535 	.word	0x08006535

080065cc <__sfp>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	4b1b      	ldr	r3, [pc, #108]	; (800663c <__sfp+0x70>)
 80065d0:	681e      	ldr	r6, [r3, #0]
 80065d2:	69b3      	ldr	r3, [r6, #24]
 80065d4:	4607      	mov	r7, r0
 80065d6:	b913      	cbnz	r3, 80065de <__sfp+0x12>
 80065d8:	4630      	mov	r0, r6
 80065da:	f7ff ffc7 	bl	800656c <__sinit>
 80065de:	3648      	adds	r6, #72	; 0x48
 80065e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	d503      	bpl.n	80065f0 <__sfp+0x24>
 80065e8:	6833      	ldr	r3, [r6, #0]
 80065ea:	b133      	cbz	r3, 80065fa <__sfp+0x2e>
 80065ec:	6836      	ldr	r6, [r6, #0]
 80065ee:	e7f7      	b.n	80065e0 <__sfp+0x14>
 80065f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80065f4:	b16d      	cbz	r5, 8006612 <__sfp+0x46>
 80065f6:	3468      	adds	r4, #104	; 0x68
 80065f8:	e7f4      	b.n	80065e4 <__sfp+0x18>
 80065fa:	2104      	movs	r1, #4
 80065fc:	4638      	mov	r0, r7
 80065fe:	f7ff ff9f 	bl	8006540 <__sfmoreglue>
 8006602:	6030      	str	r0, [r6, #0]
 8006604:	2800      	cmp	r0, #0
 8006606:	d1f1      	bne.n	80065ec <__sfp+0x20>
 8006608:	230c      	movs	r3, #12
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	4604      	mov	r4, r0
 800660e:	4620      	mov	r0, r4
 8006610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006612:	4b0b      	ldr	r3, [pc, #44]	; (8006640 <__sfp+0x74>)
 8006614:	6665      	str	r5, [r4, #100]	; 0x64
 8006616:	e9c4 5500 	strd	r5, r5, [r4]
 800661a:	60a5      	str	r5, [r4, #8]
 800661c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006620:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006624:	2208      	movs	r2, #8
 8006626:	4629      	mov	r1, r5
 8006628:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800662c:	f7ff fd82 	bl	8006134 <memset>
 8006630:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006634:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006638:	e7e9      	b.n	800660e <__sfp+0x42>
 800663a:	bf00      	nop
 800663c:	08006b80 	.word	0x08006b80
 8006640:	ffff0001 	.word	0xffff0001

08006644 <_fwalk_reent>:
 8006644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006648:	4680      	mov	r8, r0
 800664a:	4689      	mov	r9, r1
 800664c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006650:	2600      	movs	r6, #0
 8006652:	b914      	cbnz	r4, 800665a <_fwalk_reent+0x16>
 8006654:	4630      	mov	r0, r6
 8006656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800665a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800665e:	3f01      	subs	r7, #1
 8006660:	d501      	bpl.n	8006666 <_fwalk_reent+0x22>
 8006662:	6824      	ldr	r4, [r4, #0]
 8006664:	e7f5      	b.n	8006652 <_fwalk_reent+0xe>
 8006666:	89ab      	ldrh	r3, [r5, #12]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d907      	bls.n	800667c <_fwalk_reent+0x38>
 800666c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006670:	3301      	adds	r3, #1
 8006672:	d003      	beq.n	800667c <_fwalk_reent+0x38>
 8006674:	4629      	mov	r1, r5
 8006676:	4640      	mov	r0, r8
 8006678:	47c8      	blx	r9
 800667a:	4306      	orrs	r6, r0
 800667c:	3568      	adds	r5, #104	; 0x68
 800667e:	e7ee      	b.n	800665e <_fwalk_reent+0x1a>

08006680 <__swhatbuf_r>:
 8006680:	b570      	push	{r4, r5, r6, lr}
 8006682:	460e      	mov	r6, r1
 8006684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006688:	2900      	cmp	r1, #0
 800668a:	b096      	sub	sp, #88	; 0x58
 800668c:	4614      	mov	r4, r2
 800668e:	461d      	mov	r5, r3
 8006690:	da07      	bge.n	80066a2 <__swhatbuf_r+0x22>
 8006692:	2300      	movs	r3, #0
 8006694:	602b      	str	r3, [r5, #0]
 8006696:	89b3      	ldrh	r3, [r6, #12]
 8006698:	061a      	lsls	r2, r3, #24
 800669a:	d410      	bmi.n	80066be <__swhatbuf_r+0x3e>
 800669c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066a0:	e00e      	b.n	80066c0 <__swhatbuf_r+0x40>
 80066a2:	466a      	mov	r2, sp
 80066a4:	f000 f96e 	bl	8006984 <_fstat_r>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	dbf2      	blt.n	8006692 <__swhatbuf_r+0x12>
 80066ac:	9a01      	ldr	r2, [sp, #4]
 80066ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80066b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80066b6:	425a      	negs	r2, r3
 80066b8:	415a      	adcs	r2, r3
 80066ba:	602a      	str	r2, [r5, #0]
 80066bc:	e7ee      	b.n	800669c <__swhatbuf_r+0x1c>
 80066be:	2340      	movs	r3, #64	; 0x40
 80066c0:	2000      	movs	r0, #0
 80066c2:	6023      	str	r3, [r4, #0]
 80066c4:	b016      	add	sp, #88	; 0x58
 80066c6:	bd70      	pop	{r4, r5, r6, pc}

080066c8 <__smakebuf_r>:
 80066c8:	898b      	ldrh	r3, [r1, #12]
 80066ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066cc:	079d      	lsls	r5, r3, #30
 80066ce:	4606      	mov	r6, r0
 80066d0:	460c      	mov	r4, r1
 80066d2:	d507      	bpl.n	80066e4 <__smakebuf_r+0x1c>
 80066d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066d8:	6023      	str	r3, [r4, #0]
 80066da:	6123      	str	r3, [r4, #16]
 80066dc:	2301      	movs	r3, #1
 80066de:	6163      	str	r3, [r4, #20]
 80066e0:	b002      	add	sp, #8
 80066e2:	bd70      	pop	{r4, r5, r6, pc}
 80066e4:	ab01      	add	r3, sp, #4
 80066e6:	466a      	mov	r2, sp
 80066e8:	f7ff ffca 	bl	8006680 <__swhatbuf_r>
 80066ec:	9900      	ldr	r1, [sp, #0]
 80066ee:	4605      	mov	r5, r0
 80066f0:	4630      	mov	r0, r6
 80066f2:	f000 f877 	bl	80067e4 <_malloc_r>
 80066f6:	b948      	cbnz	r0, 800670c <__smakebuf_r+0x44>
 80066f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066fc:	059a      	lsls	r2, r3, #22
 80066fe:	d4ef      	bmi.n	80066e0 <__smakebuf_r+0x18>
 8006700:	f023 0303 	bic.w	r3, r3, #3
 8006704:	f043 0302 	orr.w	r3, r3, #2
 8006708:	81a3      	strh	r3, [r4, #12]
 800670a:	e7e3      	b.n	80066d4 <__smakebuf_r+0xc>
 800670c:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <__smakebuf_r+0x7c>)
 800670e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006710:	89a3      	ldrh	r3, [r4, #12]
 8006712:	6020      	str	r0, [r4, #0]
 8006714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006718:	81a3      	strh	r3, [r4, #12]
 800671a:	9b00      	ldr	r3, [sp, #0]
 800671c:	6163      	str	r3, [r4, #20]
 800671e:	9b01      	ldr	r3, [sp, #4]
 8006720:	6120      	str	r0, [r4, #16]
 8006722:	b15b      	cbz	r3, 800673c <__smakebuf_r+0x74>
 8006724:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006728:	4630      	mov	r0, r6
 800672a:	f000 f93d 	bl	80069a8 <_isatty_r>
 800672e:	b128      	cbz	r0, 800673c <__smakebuf_r+0x74>
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	81a3      	strh	r3, [r4, #12]
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	431d      	orrs	r5, r3
 8006740:	81a5      	strh	r5, [r4, #12]
 8006742:	e7cd      	b.n	80066e0 <__smakebuf_r+0x18>
 8006744:	08006535 	.word	0x08006535

08006748 <_free_r>:
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	4605      	mov	r5, r0
 800674c:	2900      	cmp	r1, #0
 800674e:	d045      	beq.n	80067dc <_free_r+0x94>
 8006750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006754:	1f0c      	subs	r4, r1, #4
 8006756:	2b00      	cmp	r3, #0
 8006758:	bfb8      	it	lt
 800675a:	18e4      	addlt	r4, r4, r3
 800675c:	f000 f946 	bl	80069ec <__malloc_lock>
 8006760:	4a1f      	ldr	r2, [pc, #124]	; (80067e0 <_free_r+0x98>)
 8006762:	6813      	ldr	r3, [r2, #0]
 8006764:	4610      	mov	r0, r2
 8006766:	b933      	cbnz	r3, 8006776 <_free_r+0x2e>
 8006768:	6063      	str	r3, [r4, #4]
 800676a:	6014      	str	r4, [r2, #0]
 800676c:	4628      	mov	r0, r5
 800676e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006772:	f000 b93c 	b.w	80069ee <__malloc_unlock>
 8006776:	42a3      	cmp	r3, r4
 8006778:	d90c      	bls.n	8006794 <_free_r+0x4c>
 800677a:	6821      	ldr	r1, [r4, #0]
 800677c:	1862      	adds	r2, r4, r1
 800677e:	4293      	cmp	r3, r2
 8006780:	bf04      	itt	eq
 8006782:	681a      	ldreq	r2, [r3, #0]
 8006784:	685b      	ldreq	r3, [r3, #4]
 8006786:	6063      	str	r3, [r4, #4]
 8006788:	bf04      	itt	eq
 800678a:	1852      	addeq	r2, r2, r1
 800678c:	6022      	streq	r2, [r4, #0]
 800678e:	6004      	str	r4, [r0, #0]
 8006790:	e7ec      	b.n	800676c <_free_r+0x24>
 8006792:	4613      	mov	r3, r2
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	b10a      	cbz	r2, 800679c <_free_r+0x54>
 8006798:	42a2      	cmp	r2, r4
 800679a:	d9fa      	bls.n	8006792 <_free_r+0x4a>
 800679c:	6819      	ldr	r1, [r3, #0]
 800679e:	1858      	adds	r0, r3, r1
 80067a0:	42a0      	cmp	r0, r4
 80067a2:	d10b      	bne.n	80067bc <_free_r+0x74>
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	4401      	add	r1, r0
 80067a8:	1858      	adds	r0, r3, r1
 80067aa:	4282      	cmp	r2, r0
 80067ac:	6019      	str	r1, [r3, #0]
 80067ae:	d1dd      	bne.n	800676c <_free_r+0x24>
 80067b0:	6810      	ldr	r0, [r2, #0]
 80067b2:	6852      	ldr	r2, [r2, #4]
 80067b4:	605a      	str	r2, [r3, #4]
 80067b6:	4401      	add	r1, r0
 80067b8:	6019      	str	r1, [r3, #0]
 80067ba:	e7d7      	b.n	800676c <_free_r+0x24>
 80067bc:	d902      	bls.n	80067c4 <_free_r+0x7c>
 80067be:	230c      	movs	r3, #12
 80067c0:	602b      	str	r3, [r5, #0]
 80067c2:	e7d3      	b.n	800676c <_free_r+0x24>
 80067c4:	6820      	ldr	r0, [r4, #0]
 80067c6:	1821      	adds	r1, r4, r0
 80067c8:	428a      	cmp	r2, r1
 80067ca:	bf04      	itt	eq
 80067cc:	6811      	ldreq	r1, [r2, #0]
 80067ce:	6852      	ldreq	r2, [r2, #4]
 80067d0:	6062      	str	r2, [r4, #4]
 80067d2:	bf04      	itt	eq
 80067d4:	1809      	addeq	r1, r1, r0
 80067d6:	6021      	streq	r1, [r4, #0]
 80067d8:	605c      	str	r4, [r3, #4]
 80067da:	e7c7      	b.n	800676c <_free_r+0x24>
 80067dc:	bd38      	pop	{r3, r4, r5, pc}
 80067de:	bf00      	nop
 80067e0:	2000009c 	.word	0x2000009c

080067e4 <_malloc_r>:
 80067e4:	b570      	push	{r4, r5, r6, lr}
 80067e6:	1ccd      	adds	r5, r1, #3
 80067e8:	f025 0503 	bic.w	r5, r5, #3
 80067ec:	3508      	adds	r5, #8
 80067ee:	2d0c      	cmp	r5, #12
 80067f0:	bf38      	it	cc
 80067f2:	250c      	movcc	r5, #12
 80067f4:	2d00      	cmp	r5, #0
 80067f6:	4606      	mov	r6, r0
 80067f8:	db01      	blt.n	80067fe <_malloc_r+0x1a>
 80067fa:	42a9      	cmp	r1, r5
 80067fc:	d903      	bls.n	8006806 <_malloc_r+0x22>
 80067fe:	230c      	movs	r3, #12
 8006800:	6033      	str	r3, [r6, #0]
 8006802:	2000      	movs	r0, #0
 8006804:	bd70      	pop	{r4, r5, r6, pc}
 8006806:	f000 f8f1 	bl	80069ec <__malloc_lock>
 800680a:	4a21      	ldr	r2, [pc, #132]	; (8006890 <_malloc_r+0xac>)
 800680c:	6814      	ldr	r4, [r2, #0]
 800680e:	4621      	mov	r1, r4
 8006810:	b991      	cbnz	r1, 8006838 <_malloc_r+0x54>
 8006812:	4c20      	ldr	r4, [pc, #128]	; (8006894 <_malloc_r+0xb0>)
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	b91b      	cbnz	r3, 8006820 <_malloc_r+0x3c>
 8006818:	4630      	mov	r0, r6
 800681a:	f000 f83d 	bl	8006898 <_sbrk_r>
 800681e:	6020      	str	r0, [r4, #0]
 8006820:	4629      	mov	r1, r5
 8006822:	4630      	mov	r0, r6
 8006824:	f000 f838 	bl	8006898 <_sbrk_r>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d124      	bne.n	8006876 <_malloc_r+0x92>
 800682c:	230c      	movs	r3, #12
 800682e:	6033      	str	r3, [r6, #0]
 8006830:	4630      	mov	r0, r6
 8006832:	f000 f8dc 	bl	80069ee <__malloc_unlock>
 8006836:	e7e4      	b.n	8006802 <_malloc_r+0x1e>
 8006838:	680b      	ldr	r3, [r1, #0]
 800683a:	1b5b      	subs	r3, r3, r5
 800683c:	d418      	bmi.n	8006870 <_malloc_r+0x8c>
 800683e:	2b0b      	cmp	r3, #11
 8006840:	d90f      	bls.n	8006862 <_malloc_r+0x7e>
 8006842:	600b      	str	r3, [r1, #0]
 8006844:	50cd      	str	r5, [r1, r3]
 8006846:	18cc      	adds	r4, r1, r3
 8006848:	4630      	mov	r0, r6
 800684a:	f000 f8d0 	bl	80069ee <__malloc_unlock>
 800684e:	f104 000b 	add.w	r0, r4, #11
 8006852:	1d23      	adds	r3, r4, #4
 8006854:	f020 0007 	bic.w	r0, r0, #7
 8006858:	1ac3      	subs	r3, r0, r3
 800685a:	d0d3      	beq.n	8006804 <_malloc_r+0x20>
 800685c:	425a      	negs	r2, r3
 800685e:	50e2      	str	r2, [r4, r3]
 8006860:	e7d0      	b.n	8006804 <_malloc_r+0x20>
 8006862:	428c      	cmp	r4, r1
 8006864:	684b      	ldr	r3, [r1, #4]
 8006866:	bf16      	itet	ne
 8006868:	6063      	strne	r3, [r4, #4]
 800686a:	6013      	streq	r3, [r2, #0]
 800686c:	460c      	movne	r4, r1
 800686e:	e7eb      	b.n	8006848 <_malloc_r+0x64>
 8006870:	460c      	mov	r4, r1
 8006872:	6849      	ldr	r1, [r1, #4]
 8006874:	e7cc      	b.n	8006810 <_malloc_r+0x2c>
 8006876:	1cc4      	adds	r4, r0, #3
 8006878:	f024 0403 	bic.w	r4, r4, #3
 800687c:	42a0      	cmp	r0, r4
 800687e:	d005      	beq.n	800688c <_malloc_r+0xa8>
 8006880:	1a21      	subs	r1, r4, r0
 8006882:	4630      	mov	r0, r6
 8006884:	f000 f808 	bl	8006898 <_sbrk_r>
 8006888:	3001      	adds	r0, #1
 800688a:	d0cf      	beq.n	800682c <_malloc_r+0x48>
 800688c:	6025      	str	r5, [r4, #0]
 800688e:	e7db      	b.n	8006848 <_malloc_r+0x64>
 8006890:	2000009c 	.word	0x2000009c
 8006894:	200000a0 	.word	0x200000a0

08006898 <_sbrk_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4c06      	ldr	r4, [pc, #24]	; (80068b4 <_sbrk_r+0x1c>)
 800689c:	2300      	movs	r3, #0
 800689e:	4605      	mov	r5, r0
 80068a0:	4608      	mov	r0, r1
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	f7fa fabc 	bl	8000e20 <_sbrk>
 80068a8:	1c43      	adds	r3, r0, #1
 80068aa:	d102      	bne.n	80068b2 <_sbrk_r+0x1a>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	b103      	cbz	r3, 80068b2 <_sbrk_r+0x1a>
 80068b0:	602b      	str	r3, [r5, #0]
 80068b2:	bd38      	pop	{r3, r4, r5, pc}
 80068b4:	20000300 	.word	0x20000300

080068b8 <__sread>:
 80068b8:	b510      	push	{r4, lr}
 80068ba:	460c      	mov	r4, r1
 80068bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068c0:	f000 f896 	bl	80069f0 <_read_r>
 80068c4:	2800      	cmp	r0, #0
 80068c6:	bfab      	itete	ge
 80068c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068ca:	89a3      	ldrhlt	r3, [r4, #12]
 80068cc:	181b      	addge	r3, r3, r0
 80068ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068d2:	bfac      	ite	ge
 80068d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80068d6:	81a3      	strhlt	r3, [r4, #12]
 80068d8:	bd10      	pop	{r4, pc}

080068da <__swrite>:
 80068da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068de:	461f      	mov	r7, r3
 80068e0:	898b      	ldrh	r3, [r1, #12]
 80068e2:	05db      	lsls	r3, r3, #23
 80068e4:	4605      	mov	r5, r0
 80068e6:	460c      	mov	r4, r1
 80068e8:	4616      	mov	r6, r2
 80068ea:	d505      	bpl.n	80068f8 <__swrite+0x1e>
 80068ec:	2302      	movs	r3, #2
 80068ee:	2200      	movs	r2, #0
 80068f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068f4:	f000 f868 	bl	80069c8 <_lseek_r>
 80068f8:	89a3      	ldrh	r3, [r4, #12]
 80068fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006902:	81a3      	strh	r3, [r4, #12]
 8006904:	4632      	mov	r2, r6
 8006906:	463b      	mov	r3, r7
 8006908:	4628      	mov	r0, r5
 800690a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800690e:	f000 b817 	b.w	8006940 <_write_r>

08006912 <__sseek>:
 8006912:	b510      	push	{r4, lr}
 8006914:	460c      	mov	r4, r1
 8006916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800691a:	f000 f855 	bl	80069c8 <_lseek_r>
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	bf15      	itete	ne
 8006924:	6560      	strne	r0, [r4, #84]	; 0x54
 8006926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800692a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800692e:	81a3      	strheq	r3, [r4, #12]
 8006930:	bf18      	it	ne
 8006932:	81a3      	strhne	r3, [r4, #12]
 8006934:	bd10      	pop	{r4, pc}

08006936 <__sclose>:
 8006936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800693a:	f000 b813 	b.w	8006964 <_close_r>
	...

08006940 <_write_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4c07      	ldr	r4, [pc, #28]	; (8006960 <_write_r+0x20>)
 8006944:	4605      	mov	r5, r0
 8006946:	4608      	mov	r0, r1
 8006948:	4611      	mov	r1, r2
 800694a:	2200      	movs	r2, #0
 800694c:	6022      	str	r2, [r4, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	f7fa fa15 	bl	8000d7e <_write>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d102      	bne.n	800695e <_write_r+0x1e>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	b103      	cbz	r3, 800695e <_write_r+0x1e>
 800695c:	602b      	str	r3, [r5, #0]
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	20000300 	.word	0x20000300

08006964 <_close_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4c06      	ldr	r4, [pc, #24]	; (8006980 <_close_r+0x1c>)
 8006968:	2300      	movs	r3, #0
 800696a:	4605      	mov	r5, r0
 800696c:	4608      	mov	r0, r1
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	f7fa fa21 	bl	8000db6 <_close>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d102      	bne.n	800697e <_close_r+0x1a>
 8006978:	6823      	ldr	r3, [r4, #0]
 800697a:	b103      	cbz	r3, 800697e <_close_r+0x1a>
 800697c:	602b      	str	r3, [r5, #0]
 800697e:	bd38      	pop	{r3, r4, r5, pc}
 8006980:	20000300 	.word	0x20000300

08006984 <_fstat_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4c07      	ldr	r4, [pc, #28]	; (80069a4 <_fstat_r+0x20>)
 8006988:	2300      	movs	r3, #0
 800698a:	4605      	mov	r5, r0
 800698c:	4608      	mov	r0, r1
 800698e:	4611      	mov	r1, r2
 8006990:	6023      	str	r3, [r4, #0]
 8006992:	f7fa fa1c 	bl	8000dce <_fstat>
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	d102      	bne.n	80069a0 <_fstat_r+0x1c>
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	b103      	cbz	r3, 80069a0 <_fstat_r+0x1c>
 800699e:	602b      	str	r3, [r5, #0]
 80069a0:	bd38      	pop	{r3, r4, r5, pc}
 80069a2:	bf00      	nop
 80069a4:	20000300 	.word	0x20000300

080069a8 <_isatty_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4c06      	ldr	r4, [pc, #24]	; (80069c4 <_isatty_r+0x1c>)
 80069ac:	2300      	movs	r3, #0
 80069ae:	4605      	mov	r5, r0
 80069b0:	4608      	mov	r0, r1
 80069b2:	6023      	str	r3, [r4, #0]
 80069b4:	f7fa fa1b 	bl	8000dee <_isatty>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_isatty_r+0x1a>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_isatty_r+0x1a>
 80069c0:	602b      	str	r3, [r5, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	20000300 	.word	0x20000300

080069c8 <_lseek_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4c07      	ldr	r4, [pc, #28]	; (80069e8 <_lseek_r+0x20>)
 80069cc:	4605      	mov	r5, r0
 80069ce:	4608      	mov	r0, r1
 80069d0:	4611      	mov	r1, r2
 80069d2:	2200      	movs	r2, #0
 80069d4:	6022      	str	r2, [r4, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f7fa fa14 	bl	8000e04 <_lseek>
 80069dc:	1c43      	adds	r3, r0, #1
 80069de:	d102      	bne.n	80069e6 <_lseek_r+0x1e>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	b103      	cbz	r3, 80069e6 <_lseek_r+0x1e>
 80069e4:	602b      	str	r3, [r5, #0]
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	20000300 	.word	0x20000300

080069ec <__malloc_lock>:
 80069ec:	4770      	bx	lr

080069ee <__malloc_unlock>:
 80069ee:	4770      	bx	lr

080069f0 <_read_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4c07      	ldr	r4, [pc, #28]	; (8006a10 <_read_r+0x20>)
 80069f4:	4605      	mov	r5, r0
 80069f6:	4608      	mov	r0, r1
 80069f8:	4611      	mov	r1, r2
 80069fa:	2200      	movs	r2, #0
 80069fc:	6022      	str	r2, [r4, #0]
 80069fe:	461a      	mov	r2, r3
 8006a00:	f7fa f9a0 	bl	8000d44 <_read>
 8006a04:	1c43      	adds	r3, r0, #1
 8006a06:	d102      	bne.n	8006a0e <_read_r+0x1e>
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	b103      	cbz	r3, 8006a0e <_read_r+0x1e>
 8006a0c:	602b      	str	r3, [r5, #0]
 8006a0e:	bd38      	pop	{r3, r4, r5, pc}
 8006a10:	20000300 	.word	0x20000300

08006a14 <_init>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	bf00      	nop
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr

08006a20 <_fini>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	bf00      	nop
 8006a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a26:	bc08      	pop	{r3}
 8006a28:	469e      	mov	lr, r3
 8006a2a:	4770      	bx	lr
