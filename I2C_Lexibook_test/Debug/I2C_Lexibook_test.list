
I2C_Lexibook_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006868  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080069a4  080069a4  000169a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006b34  08006b34  00016b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000004  08006b3c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000350  20000074  08006bac  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200003c4  08006bac  000203c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013dde  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002939  00000000  00000000  00033e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016c0  00000000  00000000  000367c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001588  00000000  00000000  00037e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00022db2  00000000  00000000  00039408  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e337  00000000  00000000  0005c1ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d9266  00000000  00000000  0006a4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00143757  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000064a4  00000000  00000000  001437d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000074 	.word	0x20000074
 8000158:	00000000 	.word	0x00000000
 800015c:	0800698c 	.word	0x0800698c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000078 	.word	0x20000078
 8000178:	0800698c 	.word	0x0800698c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	4688      	mov	r8, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0803 	orr.w	r8, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e4:	fa1f fc85 	uxth.w	ip, r5
 80001e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f0:	fb07 f10c 	mul.w	r1, r7, ip
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80001fe:	f080 811b 	bcs.w	8000438 <__udivmoddi4+0x28c>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8118 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000220:	45a4      	cmp	ip, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	192c      	adds	r4, r5, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8107 	bcs.w	800043c <__udivmoddi4+0x290>
 800022e:	45a4      	cmp	ip, r4
 8000230:	f240 8104 	bls.w	800043c <__udivmoddi4+0x290>
 8000234:	3802      	subs	r0, #2
 8000236:	442c      	add	r4, r5
 8000238:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023c:	eba4 040c 	sub.w	r4, r4, ip
 8000240:	2700      	movs	r7, #0
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80eb 	beq.w	8000432 <__udivmoddi4+0x286>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d147      	bne.n	8000302 <__udivmoddi4+0x156>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fa 	bhi.w	8000470 <__udivmoddi4+0x2c4>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	1b49      	subs	r1, r1, r5
 80002a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a4:	fa1f f885 	uxth.w	r8, r5
 80002a8:	2701      	movs	r7, #1
 80002aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002ae:	0c23      	lsrs	r3, r4, #16
 80002b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b8:	fb08 f10c 	mul.w	r1, r8, ip
 80002bc:	4299      	cmp	r1, r3
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002c0:	18eb      	adds	r3, r5, r3
 80002c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4299      	cmp	r1, r3
 80002ca:	f200 80cd 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002ce:	4684      	mov	ip, r0
 80002d0:	1a59      	subs	r1, r3, r1
 80002d2:	b2a3      	uxth	r3, r4
 80002d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e0:	fb08 f800 	mul.w	r8, r8, r0
 80002e4:	45a0      	cmp	r8, r4
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0x14c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x14a>
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	f200 80b6 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002f6:	4618      	mov	r0, r3
 80002f8:	eba4 0408 	sub.w	r4, r4, r8
 80002fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000300:	e79f      	b.n	8000242 <__udivmoddi4+0x96>
 8000302:	f1c7 0c20 	rsb	ip, r7, #32
 8000306:	40bb      	lsls	r3, r7
 8000308:	fa22 fe0c 	lsr.w	lr, r2, ip
 800030c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000310:	fa01 f407 	lsl.w	r4, r1, r7
 8000314:	fa20 f50c 	lsr.w	r5, r0, ip
 8000318:	fa21 f30c 	lsr.w	r3, r1, ip
 800031c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000320:	4325      	orrs	r5, r4
 8000322:	fbb3 f9f8 	udiv	r9, r3, r8
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	fb08 3319 	mls	r3, r8, r9, r3
 800032c:	fa1f fa8e 	uxth.w	sl, lr
 8000330:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000334:	fb09 f40a 	mul.w	r4, r9, sl
 8000338:	429c      	cmp	r4, r3
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f107 	lsl.w	r1, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1e 0303 	adds.w	r3, lr, r3
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8087 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000350:	429c      	cmp	r4, r3
 8000352:	f240 8084 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4473      	add	r3, lr
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	b2ad      	uxth	r5, r5
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800036c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000370:	45a2      	cmp	sl, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1e 0404 	adds.w	r4, lr, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295
 800037c:	d26b      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 800037e:	45a2      	cmp	sl, r4
 8000380:	d969      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000382:	3802      	subs	r0, #2
 8000384:	4474      	add	r4, lr
 8000386:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038a:	fba0 8902 	umull	r8, r9, r0, r2
 800038e:	eba4 040a 	sub.w	r4, r4, sl
 8000392:	454c      	cmp	r4, r9
 8000394:	46c2      	mov	sl, r8
 8000396:	464b      	mov	r3, r9
 8000398:	d354      	bcc.n	8000444 <__udivmoddi4+0x298>
 800039a:	d051      	beq.n	8000440 <__udivmoddi4+0x294>
 800039c:	2e00      	cmp	r6, #0
 800039e:	d069      	beq.n	8000474 <__udivmoddi4+0x2c8>
 80003a0:	ebb1 050a 	subs.w	r5, r1, sl
 80003a4:	eb64 0403 	sbc.w	r4, r4, r3
 80003a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003ac:	40fd      	lsrs	r5, r7
 80003ae:	40fc      	lsrs	r4, r7
 80003b0:	ea4c 0505 	orr.w	r5, ip, r5
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f703 	lsr.w	r7, r0, r3
 80003c4:	4095      	lsls	r5, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	fa21 f303 	lsr.w	r3, r1, r3
 80003ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d2:	4338      	orrs	r0, r7
 80003d4:	0c01      	lsrs	r1, r0, #16
 80003d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003da:	fa1f f885 	uxth.w	r8, r5
 80003de:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e6:	fb07 f308 	mul.w	r3, r7, r8
 80003ea:	428b      	cmp	r3, r1
 80003ec:	fa04 f402 	lsl.w	r4, r4, r2
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f2:	1869      	adds	r1, r5, r1
 80003f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3f02      	subs	r7, #2
 8000400:	4429      	add	r1, r5
 8000402:	1acb      	subs	r3, r1, r3
 8000404:	b281      	uxth	r1, r0
 8000406:	fbb3 f0fe 	udiv	r0, r3, lr
 800040a:	fb0e 3310 	mls	r3, lr, r0, r3
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb00 f308 	mul.w	r3, r0, r8
 8000416:	428b      	cmp	r3, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000420:	d217      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000422:	428b      	cmp	r3, r1
 8000424:	d915      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	1ac9      	subs	r1, r1, r3
 800042c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000430:	e73b      	b.n	80002aa <__udivmoddi4+0xfe>
 8000432:	4637      	mov	r7, r6
 8000434:	4630      	mov	r0, r6
 8000436:	e709      	b.n	800024c <__udivmoddi4+0xa0>
 8000438:	4607      	mov	r7, r0
 800043a:	e6e7      	b.n	800020c <__udivmoddi4+0x60>
 800043c:	4618      	mov	r0, r3
 800043e:	e6fb      	b.n	8000238 <__udivmoddi4+0x8c>
 8000440:	4541      	cmp	r1, r8
 8000442:	d2ab      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000444:	ebb8 0a02 	subs.w	sl, r8, r2
 8000448:	eb69 020e 	sbc.w	r2, r9, lr
 800044c:	3801      	subs	r0, #1
 800044e:	4613      	mov	r3, r2
 8000450:	e7a4      	b.n	800039c <__udivmoddi4+0x1f0>
 8000452:	4660      	mov	r0, ip
 8000454:	e7e9      	b.n	800042a <__udivmoddi4+0x27e>
 8000456:	4618      	mov	r0, r3
 8000458:	e795      	b.n	8000386 <__udivmoddi4+0x1da>
 800045a:	4667      	mov	r7, ip
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	4681      	mov	r9, r0
 8000460:	e77c      	b.n	800035c <__udivmoddi4+0x1b0>
 8000462:	3802      	subs	r0, #2
 8000464:	442c      	add	r4, r5
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0x14c>
 8000468:	f1ac 0c02 	sub.w	ip, ip, #2
 800046c:	442b      	add	r3, r5
 800046e:	e72f      	b.n	80002d0 <__udivmoddi4+0x124>
 8000470:	4638      	mov	r0, r7
 8000472:	e708      	b.n	8000286 <__udivmoddi4+0xda>
 8000474:	4637      	mov	r7, r6
 8000476:	e6e9      	b.n	800024c <__udivmoddi4+0xa0>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b085      	sub	sp, #20
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4013      	ands	r3, r2
 80004d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d2:	68fb      	ldr	r3, [r7, #12]
}
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fde0 	bl	80010a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f818 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f940 	bl	8000770 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f0:	f000 f914 	bl	800071c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f8c6 	bl	8000684 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80004f8:	f000 f884 	bl	8000604 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Start !!! \n");
 80004fc:	4804      	ldr	r0, [pc, #16]	; (8000510 <main+0x30>)
 80004fe:	f005 fe39 	bl	8006174 <puts>
//	  printf("Received !!! \n");
//	  while(HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t *)SlaveRxBuffer, sizeof SlaveRxBuffer, 1000)!= HAL_OK){}
//	  HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
//	  printf("Sent !!! \n");

	  HAL_I2C_Slave_Receive_DMA(&hi2c1, (uint8_t *)SlaveRxBuffer, sizeof SlaveRxBuffer);
 8000502:	2264      	movs	r2, #100	; 0x64
 8000504:	4903      	ldr	r1, [pc, #12]	; (8000514 <main+0x34>)
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x38>)
 8000508:	f001 fd52 	bl	8001fb0 <HAL_I2C_Slave_Receive_DMA>

	  while (1)
 800050c:	e7fe      	b.n	800050c <main+0x2c>
 800050e:	bf00      	nop
 8000510:	080069a4 	.word	0x080069a4
 8000514:	200002f4 	.word	0x200002f4
 8000518:	200000fc 	.word	0x200000fc

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b0ae      	sub	sp, #184	; 0xb8
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000526:	2248      	movs	r2, #72	; 0x48
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f005 fdbe 	bl	80060ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
 8000540:	615a      	str	r2, [r3, #20]
 8000542:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2250      	movs	r2, #80	; 0x50
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f005 fdae 	bl	80060ac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <SystemClock_Config+0xe4>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000558:	4a29      	ldr	r2, [pc, #164]	; (8000600 <SystemClock_Config+0xe4>)
 800055a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <SystemClock_Config+0xe4>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800056c:	2303      	movs	r3, #3
 800056e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000574:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000576:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057c:	2340      	movs	r3, #64	; 0x40
 800057e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000582:	2300      	movs	r3, #0
 8000584:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800058c:	4618      	mov	r0, r3
 800058e:	f003 fb6d 	bl	8003c6c <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000598:	f000 f98e 	bl	80008b8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800059c:	236f      	movs	r3, #111	; 0x6f
 800059e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005a0:	2302      	movs	r3, #2
 80005a2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005bc:	2101      	movs	r1, #1
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fee8 	bl	8004394 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005ca:	f000 f975 	bl	80008b8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 80005ce:	f242 0305 	movw	r3, #8197	; 0x2005
 80005d2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005d8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80005de:	2302      	movs	r3, #2
 80005e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4618      	mov	r0, r3
 80005ea:	f004 fb0e 	bl	8004c0a <HAL_RCCEx_PeriphCLKConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80005f4:	f000 f960 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80005f8:	bf00      	nop
 80005fa:	37b8      	adds	r7, #184	; 0xb8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	58000400 	.word	0x58000400

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_I2C1_Init+0x74>)
 800060a:	4a1c      	ldr	r2, [pc, #112]	; (800067c <MX_I2C1_Init+0x78>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_I2C1_Init+0x74>)
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <MX_I2C1_Init+0x7c>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = SLAVE_ADDRESS;
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_I2C1_Init+0x74>)
 8000616:	22a0      	movs	r2, #160	; 0xa0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061a:	4b17      	ldr	r3, [pc, #92]	; (8000678 <MX_I2C1_Init+0x74>)
 800061c:	2201      	movs	r2, #1
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_I2C1_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_I2C1_Init+0x74>)
 8000628:	2200      	movs	r2, #0
 800062a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800062c:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_I2C1_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_I2C1_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_I2C1_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <MX_I2C1_Init+0x74>)
 8000640:	f001 fb70 	bl	8001d24 <HAL_I2C_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800064a:	f000 f935 	bl	80008b8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064e:	2100      	movs	r1, #0
 8000650:	4809      	ldr	r0, [pc, #36]	; (8000678 <MX_I2C1_Init+0x74>)
 8000652:	f002 fec1 	bl	80033d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800065c:	f000 f92c 	bl	80008b8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000660:	2100      	movs	r1, #0
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_I2C1_Init+0x74>)
 8000664:	f002 ff03 	bl	800346e <HAL_I2CEx_ConfigDigitalFilter>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800066e:	f000 f923 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	200000fc 	.word	0x200000fc
 800067c:	40005400 	.word	0x40005400
 8000680:	00707cbb 	.word	0x00707cbb

08000684 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <MX_USART1_UART_Init+0x90>)
 800068a:	4a23      	ldr	r2, [pc, #140]	; (8000718 <MX_USART1_UART_Init+0x94>)
 800068c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <MX_USART1_UART_Init+0x90>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_USART1_UART_Init+0x90>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_USART1_UART_Init+0x90>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006c0:	4b14      	ldr	r3, [pc, #80]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006cc:	4811      	ldr	r0, [pc, #68]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006ce:	f004 fd42 	bl	8005156 <HAL_UART_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006d8:	f000 f8ee 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006dc:	2100      	movs	r1, #0
 80006de:	480d      	ldr	r0, [pc, #52]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006e0:	f005 fbd6 	bl	8005e90 <HAL_UARTEx_SetTxFifoThreshold>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006ea:	f000 f8e5 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ee:	2100      	movs	r1, #0
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <MX_USART1_UART_Init+0x90>)
 80006f2:	f005 fc0b 	bl	8005f0c <HAL_UARTEx_SetRxFifoThreshold>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006fc:	f000 f8dc 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000700:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_USART1_UART_Init+0x90>)
 8000702:	f005 fb8c 	bl	8005e1e <HAL_UARTEx_DisableFifoMode>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800070c:	f000 f8d4 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000208 	.word	0x20000208
 8000718:	40013800 	.word	0x40013800

0800071c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000720:	2004      	movs	r0, #4
 8000722:	f7ff feab 	bl	800047c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000726:	2001      	movs	r0, #1
 8000728:	f7ff fea8 	bl	800047c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	200b      	movs	r0, #11
 8000732:	f000 fe1a 	bl	800136a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000736:	200b      	movs	r0, #11
 8000738:	f000 fe31 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800073c:	2200      	movs	r2, #0
 800073e:	2100      	movs	r1, #0
 8000740:	200c      	movs	r0, #12
 8000742:	f000 fe12 	bl	800136a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000746:	200c      	movs	r0, #12
 8000748:	f000 fe29 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	200d      	movs	r0, #13
 8000752:	f000 fe0a 	bl	800136a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000756:	200d      	movs	r0, #13
 8000758:	f000 fe21 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	200e      	movs	r0, #14
 8000762:	f000 fe02 	bl	800136a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000766:	200e      	movs	r0, #14
 8000768:	f000 fe19 	bl	800139e <HAL_NVIC_EnableIRQ>

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	1d3b      	adds	r3, r7, #4
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000784:	2004      	movs	r0, #4
 8000786:	f7ff fe92 	bl	80004ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2002      	movs	r0, #2
 800078c:	f7ff fe8f 	bl	80004ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000790:	2008      	movs	r0, #8
 8000792:	f7ff fe8c 	bl	80004ae <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led2_Pin|Led3_Pin|Led1_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2123      	movs	r1, #35	; 0x23
 800079a:	4815      	ldr	r0, [pc, #84]	; (80007f0 <MX_GPIO_Init+0x80>)
 800079c:	f001 fa6c 	bl	8001c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 80007a0:	2310      	movs	r3, #16
 80007a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <MX_GPIO_Init+0x84>)
 80007b2:	f001 f8f1 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led2_Pin Led3_Pin Led1_Pin */
  GPIO_InitStruct.Pin = Led2_Pin|Led3_Pin|Led1_Pin;
 80007b6:	2323      	movs	r3, #35	; 0x23
 80007b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	4619      	mov	r1, r3
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <MX_GPIO_Init+0x80>)
 80007cc:	f001 f8e4 	bl	8001998 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button3_Pin;
 80007d0:	2303      	movs	r3, #3
 80007d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d8:	2301      	movs	r3, #1
 80007da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	4619      	mov	r1, r3
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <MX_GPIO_Init+0x88>)
 80007e2:	f001 f8d9 	bl	8001998 <HAL_GPIO_Init>

}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	48000400 	.word	0x48000400
 80007f4:	48000800 	.word	0x48000800
 80007f8:	48000c00 	.word	0x48000c00

080007fc <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000804:	1d39      	adds	r1, r7, #4
 8000806:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800080a:	2201      	movs	r2, #1
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <__io_putchar+0x20>)
 800080e:	f004 fcf2 	bl	80051f6 <HAL_UART_Transmit>

  return ch;
 8000812:	687b      	ldr	r3, [r7, #4]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000208 	.word	0x20000208

08000820 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
//	printf("Master send \n");
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
//	printf("Master received \n");
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	printf("Slave send CB\n");
 8000850:	4807      	ldr	r0, [pc, #28]	; (8000870 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 8000852:	f005 fc8f 	bl	8006174 <puts>
	HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 8000856:	2102      	movs	r1, #2
 8000858:	4806      	ldr	r0, [pc, #24]	; (8000874 <HAL_I2C_SlaveTxCpltCallback+0x2c>)
 800085a:	f001 fa25 	bl	8001ca8 <HAL_GPIO_TogglePin>
	HAL_I2C_Slave_Receive_DMA(&hi2c1, (uint8_t *)SlaveRxBuffer, sizeof SlaveRxBuffer);
 800085e:	2264      	movs	r2, #100	; 0x64
 8000860:	4905      	ldr	r1, [pc, #20]	; (8000878 <HAL_I2C_SlaveTxCpltCallback+0x30>)
 8000862:	4806      	ldr	r0, [pc, #24]	; (800087c <HAL_I2C_SlaveTxCpltCallback+0x34>)
 8000864:	f001 fba4 	bl	8001fb0 <HAL_I2C_Slave_Receive_DMA>

}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	080069b0 	.word	0x080069b0
 8000874:	48000400 	.word	0x48000400
 8000878:	200002f4 	.word	0x200002f4
 800087c:	200000fc 	.word	0x200000fc

08000880 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
	printf("Slave received CB\n");
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 800088a:	f005 fc73 	bl	8006174 <puts>
	HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 800088e:	2101      	movs	r1, #1
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 8000892:	f001 fa09 	bl	8001ca8 <HAL_GPIO_TogglePin>
	HAL_I2C_Slave_Transmit_DMA(&hi2c1, (uint8_t *)SlaveRxBuffer, sizeof SlaveRxBuffer);
 8000896:	2264      	movs	r2, #100	; 0x64
 8000898:	4905      	ldr	r1, [pc, #20]	; (80008b0 <HAL_I2C_SlaveRxCpltCallback+0x30>)
 800089a:	4806      	ldr	r0, [pc, #24]	; (80008b4 <HAL_I2C_SlaveRxCpltCallback+0x34>)
 800089c:	f001 fad2 	bl	8001e44 <HAL_I2C_Slave_Transmit_DMA>


//	HAL_I2C_Slave_Receive_DMA(&hi2c1, (uint8_t *)SlaveRxBuffer, sizeof SlaveRxBuffer);
//	while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)MessageSend, sizeof MessageSend, 1000)!= HAL_OK){}
//	printf("Ok \n");
}
 80008a0:	bf00      	nop
 80008a2:	3708      	adds	r7, #8
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	080069c0 	.word	0x080069c0
 80008ac:	48000400 	.word	0x48000400
 80008b0:	200002f4 	.word	0x200002f4
 80008b4:	200000fc 	.word	0x200000fc

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <LL_AHB2_GRP1_EnableClock>:
{
 80008c6:	b480      	push	{r7}
 80008c8:	b085      	sub	sp, #20
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4313      	orrs	r3, r2
 80008dc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4013      	ands	r3, r2
 80008e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ea:	68fb      	ldr	r3, [r7, #12]
}
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000900:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000904:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000906:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4313      	orrs	r3, r2
 800090e:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000914:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4013      	ands	r3, r2
 800091a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800091c:	68fb      	ldr	r3, [r7, #12]
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800092a:	b480      	push	{r7}
 800092c:	b085      	sub	sp, #20
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000936:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4313      	orrs	r3, r2
 8000940:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000946:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4013      	ands	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000968:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800096a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4313      	orrs	r3, r2
 8000972:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000978:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4013      	ands	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000980:	68fb      	ldr	r3, [r7, #12]
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098e:	b580      	push	{r7, lr}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000992:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000996:	f7ff ffaf 	bl	80008f8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	202e      	movs	r0, #46	; 0x2e
 80009a0:	f000 fce3 	bl	800136a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80009a4:	202e      	movs	r0, #46	; 0x2e
 80009a6:	f000 fcfa 	bl	800139e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a40      	ldr	r2, [pc, #256]	; (8000ad0 <HAL_I2C_MspInit+0x120>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d179      	bne.n	8000ac6 <HAL_I2C_MspInit+0x116>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2002      	movs	r0, #2
 80009d4:	f7ff ff77 	bl	80008c6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009de:	2312      	movs	r3, #18
 80009e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ea:	2304      	movs	r3, #4
 80009ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	4619      	mov	r1, r3
 80009f4:	4837      	ldr	r0, [pc, #220]	; (8000ad4 <HAL_I2C_MspInit+0x124>)
 80009f6:	f000 ffcf 	bl	8001998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fa:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80009fe:	f7ff ff94 	bl	800092a <LL_APB1_GRP1_EnableClock>

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8000a02:	4b35      	ldr	r3, [pc, #212]	; (8000ad8 <HAL_I2C_MspInit+0x128>)
 8000a04:	4a35      	ldr	r2, [pc, #212]	; (8000adc <HAL_I2C_MspInit+0x12c>)
 8000a06:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000a08:	4b33      	ldr	r3, [pc, #204]	; (8000ad8 <HAL_I2C_MspInit+0x128>)
 8000a0a:	220a      	movs	r2, #10
 8000a0c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0e:	4b32      	ldr	r3, [pc, #200]	; (8000ad8 <HAL_I2C_MspInit+0x128>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a14:	4b30      	ldr	r3, [pc, #192]	; (8000ad8 <HAL_I2C_MspInit+0x128>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a1a:	4b2f      	ldr	r3, [pc, #188]	; (8000ad8 <HAL_I2C_MspInit+0x128>)
 8000a1c:	2280      	movs	r2, #128	; 0x80
 8000a1e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a20:	4b2d      	ldr	r3, [pc, #180]	; (8000ad8 <HAL_I2C_MspInit+0x128>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a26:	4b2c      	ldr	r3, [pc, #176]	; (8000ad8 <HAL_I2C_MspInit+0x128>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a2c:	4b2a      	ldr	r3, [pc, #168]	; (8000ad8 <HAL_I2C_MspInit+0x128>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a32:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <HAL_I2C_MspInit+0x128>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a38:	4827      	ldr	r0, [pc, #156]	; (8000ad8 <HAL_I2C_MspInit+0x128>)
 8000a3a:	f000 fccb 	bl	80013d4 <HAL_DMA_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_I2C_MspInit+0x98>
    {
      Error_Handler();
 8000a44:	f7ff ff38 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a23      	ldr	r2, [pc, #140]	; (8000ad8 <HAL_I2C_MspInit+0x128>)
 8000a4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a4e:	4a22      	ldr	r2, [pc, #136]	; (8000ad8 <HAL_I2C_MspInit+0x128>)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <HAL_I2C_MspInit+0x130>)
 8000a56:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <HAL_I2C_MspInit+0x134>)
 8000a58:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <HAL_I2C_MspInit+0x130>)
 8000a5c:	220b      	movs	r2, #11
 8000a5e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <HAL_I2C_MspInit+0x130>)
 8000a62:	2210      	movs	r2, #16
 8000a64:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a66:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <HAL_I2C_MspInit+0x130>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <HAL_I2C_MspInit+0x130>)
 8000a6e:	2280      	movs	r2, #128	; 0x80
 8000a70:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a72:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <HAL_I2C_MspInit+0x130>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a78:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <HAL_I2C_MspInit+0x130>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <HAL_I2C_MspInit+0x130>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a84:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <HAL_I2C_MspInit+0x130>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000a8a:	4815      	ldr	r0, [pc, #84]	; (8000ae0 <HAL_I2C_MspInit+0x130>)
 8000a8c:	f000 fca2 	bl	80013d4 <HAL_DMA_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_I2C_MspInit+0xea>
    {
      Error_Handler();
 8000a96:	f7ff ff0f 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <HAL_I2C_MspInit+0x130>)
 8000a9e:	639a      	str	r2, [r3, #56]	; 0x38
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <HAL_I2C_MspInit+0x130>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	201e      	movs	r0, #30
 8000aac:	f000 fc5d 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ab0:	201e      	movs	r0, #30
 8000ab2:	f000 fc74 	bl	800139e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	201f      	movs	r0, #31
 8000abc:	f000 fc55 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ac0:	201f      	movs	r0, #31
 8000ac2:	f000 fc6c 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3720      	adds	r7, #32
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40005400 	.word	0x40005400
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	20000294 	.word	0x20000294
 8000adc:	40020030 	.word	0x40020030
 8000ae0:	2000009c 	.word	0x2000009c
 8000ae4:	40020044 	.word	0x40020044

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a3b      	ldr	r2, [pc, #236]	; (8000bf4 <HAL_UART_MspInit+0x10c>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d170      	bne.n	8000bec <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b0a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000b0e:	f7ff ff25 	bl	800095c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2002      	movs	r0, #2
 8000b14:	f7ff fed7 	bl	80008c6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b18:	23c0      	movs	r3, #192	; 0xc0
 8000b1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b28:	2307      	movs	r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4619      	mov	r1, r3
 8000b32:	4831      	ldr	r0, [pc, #196]	; (8000bf8 <HAL_UART_MspInit+0x110>)
 8000b34:	f000 ff30 	bl	8001998 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000b38:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b3a:	4a31      	ldr	r2, [pc, #196]	; (8000c00 <HAL_UART_MspInit+0x118>)
 8000b3c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b40:	220e      	movs	r2, #14
 8000b42:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b44:	4b2d      	ldr	r3, [pc, #180]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4a:	4b2c      	ldr	r3, [pc, #176]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b50:	4b2a      	ldr	r3, [pc, #168]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b56:	4b29      	ldr	r3, [pc, #164]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b5c:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b62:	4b26      	ldr	r3, [pc, #152]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b68:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b6e:	4823      	ldr	r0, [pc, #140]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b70:	f000 fc30 	bl	80013d4 <HAL_DMA_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8000b7a:	f7ff fe9d 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a1e      	ldr	r2, [pc, #120]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b82:	679a      	str	r2, [r3, #120]	; 0x78
 8000b84:	4a1d      	ldr	r2, [pc, #116]	; (8000bfc <HAL_UART_MspInit+0x114>)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000b8a:	4b1e      	ldr	r3, [pc, #120]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000b8c:	4a1e      	ldr	r2, [pc, #120]	; (8000c08 <HAL_UART_MspInit+0x120>)
 8000b8e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000b90:	4b1c      	ldr	r3, [pc, #112]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000b92:	220f      	movs	r2, #15
 8000b94:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b96:	4b1b      	ldr	r3, [pc, #108]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000b98:	2210      	movs	r2, #16
 8000b9a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ba2:	4b18      	ldr	r3, [pc, #96]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ba8:	4b16      	ldr	r3, [pc, #88]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bae:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000bb4:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000bc0:	4810      	ldr	r0, [pc, #64]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000bc2:	f000 fc07 	bl	80013d4 <HAL_DMA_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8000bcc:	f7ff fe74 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000bd4:	675a      	str	r2, [r3, #116]	; 0x74
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <HAL_UART_MspInit+0x11c>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bdc:	2200      	movs	r2, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	2024      	movs	r0, #36	; 0x24
 8000be2:	f000 fbc2 	bl	800136a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000be6:	2024      	movs	r0, #36	; 0x24
 8000be8:	f000 fbd9 	bl	800139e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40013800 	.word	0x40013800
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	200001a8 	.word	0x200001a8
 8000c00:	40020008 	.word	0x40020008
 8000c04:	20000148 	.word	0x20000148
 8000c08:	4002001c 	.word	0x4002001c

08000c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <MemManage_Handler+0x4>

08000c26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2a:	e7fe      	b.n	8000c2a <BusFault_Handler+0x4>

08000c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <UsageFault_Handler+0x4>

08000c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr

08000c40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c60:	f000 fa7c 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <DMA1_Channel1_IRQHandler+0x10>)
 8000c6e:	f000 fd33 	bl	80016d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200001a8 	.word	0x200001a8

08000c7c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <DMA1_Channel2_IRQHandler+0x10>)
 8000c82:	f000 fd29 	bl	80016d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000148 	.word	0x20000148

08000c90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <DMA1_Channel3_IRQHandler+0x10>)
 8000c96:	f000 fd1f 	bl	80016d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000294 	.word	0x20000294

08000ca4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <DMA1_Channel4_IRQHandler+0x10>)
 8000caa:	f000 fd15 	bl	80016d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000009c 	.word	0x2000009c

08000cb8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <I2C1_EV_IRQHandler+0x10>)
 8000cbe:	f001 fa2d 	bl	800211c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200000fc 	.word	0x200000fc

08000ccc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <I2C1_ER_IRQHandler+0x10>)
 8000cd2:	f001 fa3d 	bl	8002150 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000fc 	.word	0x200000fc

08000ce0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <USART1_IRQHandler+0x10>)
 8000ce6:	f004 fb1d 	bl	8005324 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000208 	.word	0x20000208

08000cf4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000cf8:	f000 fff0 	bl	8001cdc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	e00a      	b.n	8000d28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d12:	f3af 8000 	nop.w
 8000d16:	4601      	mov	r1, r0
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	b2ca      	uxtb	r2, r1
 8000d20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	3301      	adds	r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	dbf0      	blt.n	8000d12 <_read+0x12>
	}

return len;
 8000d30:	687b      	ldr	r3, [r7, #4]
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	e009      	b.n	8000d60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fd51 	bl	80007fc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbf1      	blt.n	8000d4c <_write+0x12>
	}
	return len;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_close>:

int _close(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	return -1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_isatty>:

int _isatty(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	return 1;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f005 f924 	bl	8006058 <__errno>
 8000e10:	4602      	mov	r2, r0
 8000e12:	230c      	movs	r3, #12
 8000e14:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20030000 	.word	0x20030000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	20000090 	.word	0x20000090
 8000e44:	200003c8 	.word	0x200003c8

08000e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <SystemInit+0xa0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <SystemInit+0xa0>)
 8000e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e58:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <SystemInit+0xa0>)
 8000e5a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e76:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000e7a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <SystemInit+0xa4>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e98:	f023 0305 	bic.w	r3, r3, #5
 8000e9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000eac:	f023 0301 	bic.w	r3, r3, #1
 8000eb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <SystemInit+0xa8>)
 8000eba:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <SystemInit+0xa8>)
 8000ec2:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000ed00 	.word	0xe000ed00
 8000eec:	faf6fefb 	.word	0xfaf6fefb
 8000ef0:	22041000 	.word	0x22041000

08000ef4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b087      	sub	sp, #28
 8000ef8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	4a47      	ldr	r2, [pc, #284]	; (8001024 <SystemCoreClockUpdate+0x130>)
 8000f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 030c 	and.w	r3, r3, #12
 8000f18:	2b0c      	cmp	r3, #12
 8000f1a:	d867      	bhi.n	8000fec <SystemCoreClockUpdate+0xf8>
 8000f1c:	a201      	add	r2, pc, #4	; (adr r2, 8000f24 <SystemCoreClockUpdate+0x30>)
 8000f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f22:	bf00      	nop
 8000f24:	08000f59 	.word	0x08000f59
 8000f28:	08000fed 	.word	0x08000fed
 8000f2c:	08000fed 	.word	0x08000fed
 8000f30:	08000fed 	.word	0x08000fed
 8000f34:	08000f61 	.word	0x08000f61
 8000f38:	08000fed 	.word	0x08000fed
 8000f3c:	08000fed 	.word	0x08000fed
 8000f40:	08000fed 	.word	0x08000fed
 8000f44:	08000f69 	.word	0x08000f69
 8000f48:	08000fed 	.word	0x08000fed
 8000f4c:	08000fed 	.word	0x08000fed
 8000f50:	08000fed 	.word	0x08000fed
 8000f54:	08000f71 	.word	0x08000f71
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000f58:	4a33      	ldr	r2, [pc, #204]	; (8001028 <SystemCoreClockUpdate+0x134>)
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	6013      	str	r3, [r2, #0]
      break;
 8000f5e:	e049      	b.n	8000ff4 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000f60:	4b31      	ldr	r3, [pc, #196]	; (8001028 <SystemCoreClockUpdate+0x134>)
 8000f62:	4a32      	ldr	r2, [pc, #200]	; (800102c <SystemCoreClockUpdate+0x138>)
 8000f64:	601a      	str	r2, [r3, #0]
      break;
 8000f66:	e045      	b.n	8000ff4 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f68:	4b2f      	ldr	r3, [pc, #188]	; (8001028 <SystemCoreClockUpdate+0x134>)
 8000f6a:	4a31      	ldr	r2, [pc, #196]	; (8001030 <SystemCoreClockUpdate+0x13c>)
 8000f6c:	601a      	str	r2, [r3, #0]
      break;
 8000f6e:	e041      	b.n	8000ff4 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	3301      	adds	r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d105      	bne.n	8000f9e <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000f92:	4a26      	ldr	r2, [pc, #152]	; (800102c <SystemCoreClockUpdate+0x138>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	e00d      	b.n	8000fba <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b03      	cmp	r3, #3
 8000fa2:	d105      	bne.n	8000fb0 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000fa4:	4a22      	ldr	r2, [pc, #136]	; (8001030 <SystemCoreClockUpdate+0x13c>)
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e004      	b.n	8000fba <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb8:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	fb02 f303 	mul.w	r3, r2, r3
 8000fcc:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	0f5b      	lsrs	r3, r3, #29
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	3301      	adds	r3, #1
 8000fdc:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <SystemCoreClockUpdate+0x134>)
 8000fe8:	6013      	str	r3, [r2, #0]
      break;
 8000fea:	e003      	b.n	8000ff4 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000fec:	4a0e      	ldr	r2, [pc, #56]	; (8001028 <SystemCoreClockUpdate+0x134>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	6013      	str	r3, [r2, #0]
      break;
 8000ff2:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	091b      	lsrs	r3, r3, #4
 8000ffc:	f003 030f 	and.w	r3, r3, #15
 8001000:	4a0c      	ldr	r2, [pc, #48]	; (8001034 <SystemCoreClockUpdate+0x140>)
 8001002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001006:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8001008:	4b07      	ldr	r3, [pc, #28]	; (8001028 <SystemCoreClockUpdate+0x134>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <SystemCoreClockUpdate+0x134>)
 8001014:	6013      	str	r3, [r2, #0]

}
 8001016:	bf00      	nop
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	08006a70 	.word	0x08006a70
 8001028:	20000004 	.word	0x20000004
 800102c:	00f42400 	.word	0x00f42400
 8001030:	01e84800 	.word	0x01e84800
 8001034:	08006a10 	.word	0x08006a10

08001038 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001038:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103c:	3304      	adds	r3, #4

0800103e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001040:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001042:	d3f9      	bcc.n	8001038 <CopyDataInit>
  bx lr
 8001044:	4770      	bx	lr

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001046:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001048:	3004      	adds	r0, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800104a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>
  bx lr
 800104e:	4770      	bx	lr

08001050 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001050:	480c      	ldr	r0, [pc, #48]	; (8001084 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001052:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001054:	f7ff fef8 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <LoopForever+0x8>)
 800105a:	490c      	ldr	r1, [pc, #48]	; (800108c <LoopForever+0xc>)
 800105c:	4a0c      	ldr	r2, [pc, #48]	; (8001090 <LoopForever+0x10>)
 800105e:	2300      	movs	r3, #0
 8001060:	f7ff ffed 	bl	800103e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <LoopForever+0x14>)
 8001066:	490c      	ldr	r1, [pc, #48]	; (8001098 <LoopForever+0x18>)
 8001068:	2300      	movs	r3, #0
 800106a:	f7ff ffee 	bl	800104a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800106e:	480b      	ldr	r0, [pc, #44]	; (800109c <LoopForever+0x1c>)
 8001070:	490b      	ldr	r1, [pc, #44]	; (80010a0 <LoopForever+0x20>)
 8001072:	2300      	movs	r3, #0
 8001074:	f7ff ffe9 	bl	800104a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001078:	f004 fff4 	bl	8006064 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800107c:	f7ff fa30 	bl	80004e0 <main>

08001080 <LoopForever>:

LoopForever:
  b LoopForever
 8001080:	e7fe      	b.n	8001080 <LoopForever>
 8001082:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001084:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001088:	20000004 	.word	0x20000004
 800108c:	20000074 	.word	0x20000074
 8001090:	08006b3c 	.word	0x08006b3c
  INIT_BSS _sbss, _ebss
 8001094:	20000074 	.word	0x20000074
 8001098:	200003c4 	.word	0x200003c4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800109c:	20030000 	.word	0x20030000
 80010a0:	20030000 	.word	0x20030000

080010a4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010a4:	e7fe      	b.n	80010a4 <ADC1_IRQHandler>
	...

080010a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <HAL_Init+0x3c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a0b      	ldr	r2, [pc, #44]	; (80010e4 <HAL_Init+0x3c>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010be:	2003      	movs	r0, #3
 80010c0:	f000 f948 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f80f 	bl	80010e8 <HAL_InitTick>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d002      	beq.n	80010d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	e001      	b.n	80010da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010d6:	f7ff fc5a 	bl	800098e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010da:	79fb      	ldrb	r3, [r7, #7]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	58004000 	.word	0x58004000

080010e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80010f4:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_InitTick+0x6c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d024      	beq.n	8001146 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010fc:	f003 faf0 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8001100:	4602      	mov	r2, r0
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_InitTick+0x6c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800110c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001110:	fbb2 f3f3 	udiv	r3, r2, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f000 f950 	bl	80013ba <HAL_SYSTICK_Config>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10f      	bne.n	8001140 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	d809      	bhi.n	800113a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001126:	2200      	movs	r2, #0
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	f04f 30ff 	mov.w	r0, #4294967295
 800112e:	f000 f91c 	bl	800136a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <HAL_InitTick+0x70>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e007      	b.n	800114a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e004      	b.n	800114a <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e001      	b.n	800114a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2000000c 	.word	0x2000000c
 8001158:	20000008 	.word	0x20000008

0800115c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x20>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_IncTick+0x24>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a04      	ldr	r2, [pc, #16]	; (8001180 <HAL_IncTick+0x24>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000000c 	.word	0x2000000c
 8001180:	200003bc 	.word	0x200003bc

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	; (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200003bc 	.word	0x200003bc

0800119c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTickPrio+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008

080011b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ca:	68ba      	ldr	r2, [r7, #8]
 80011cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011d0:	4013      	ands	r3, r2
 80011d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <__NVIC_SetPriorityGrouping+0x44>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	60d3      	str	r3, [r2, #12]
}
 80011ec:	bf00      	nop
 80011ee:	3714      	adds	r7, #20
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001200:	4b04      	ldr	r3, [pc, #16]	; (8001214 <__NVIC_GetPriorityGrouping+0x18>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	0a1b      	lsrs	r3, r3, #8
 8001206:	f003 0307 	and.w	r3, r3, #7
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	db0b      	blt.n	8001242 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	f003 021f 	and.w	r2, r3, #31
 8001230:	4907      	ldr	r1, [pc, #28]	; (8001250 <__NVIC_EnableIRQ+0x38>)
 8001232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	2001      	movs	r0, #1
 800123a:	fa00 f202 	lsl.w	r2, r0, r2
 800123e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	; (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001320:	d301      	bcc.n	8001326 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001322:	2301      	movs	r3, #1
 8001324:	e00f      	b.n	8001346 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <SysTick_Config+0x40>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3b01      	subs	r3, #1
 800132c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132e:	210f      	movs	r1, #15
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f7ff ff8e 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <SysTick_Config+0x40>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <SysTick_Config+0x40>)
 8001340:	2207      	movs	r2, #7
 8001342:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	e000e010 	.word	0xe000e010

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff29 	bl	80011b4 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff40 	bl	80011fc <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff90 	bl	80012a8 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5f 	bl	8001254 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	4603      	mov	r3, r0
 80013a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff ff33 	bl	8001218 <__NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ffa4 	bl	8001310 <SysTick_Config>
 80013c8:	4603      	mov	r3, r0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e08e      	b.n	8001504 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b47      	ldr	r3, [pc, #284]	; (800150c <HAL_DMA_Init+0x138>)
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d80f      	bhi.n	8001412 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b45      	ldr	r3, [pc, #276]	; (8001510 <HAL_DMA_Init+0x13c>)
 80013fa:	4413      	add	r3, r2
 80013fc:	4a45      	ldr	r2, [pc, #276]	; (8001514 <HAL_DMA_Init+0x140>)
 80013fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	009a      	lsls	r2, r3, #2
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a42      	ldr	r2, [pc, #264]	; (8001518 <HAL_DMA_Init+0x144>)
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
 8001410:	e00e      	b.n	8001430 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	4b40      	ldr	r3, [pc, #256]	; (800151c <HAL_DMA_Init+0x148>)
 800141a:	4413      	add	r3, r2
 800141c:	4a3d      	ldr	r2, [pc, #244]	; (8001514 <HAL_DMA_Init+0x140>)
 800141e:	fba2 2303 	umull	r2, r3, r2, r3
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	009a      	lsls	r2, r3, #2
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a3c      	ldr	r2, [pc, #240]	; (8001520 <HAL_DMA_Init+0x14c>)
 800142e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2202      	movs	r2, #2
 8001434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800144a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800146c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fa24 	bl	80018d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001490:	d102      	bne.n	8001498 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80014a4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80014ae:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d010      	beq.n	80014da <HAL_DMA_Init+0x106>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d80c      	bhi.n	80014da <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 fa43 	bl	800194c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	e008      	b.n	80014ec <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2200      	movs	r2, #0
 80014f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2201      	movs	r2, #1
 80014f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40020407 	.word	0x40020407
 8001510:	bffdfff8 	.word	0xbffdfff8
 8001514:	cccccccd 	.word	0xcccccccd
 8001518:	40020000 	.word	0x40020000
 800151c:	bffdfbf8 	.word	0xbffdfbf8
 8001520:	40020400 	.word	0x40020400

08001524 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	60f8      	str	r0, [r7, #12]
 800152c:	60b9      	str	r1, [r7, #8]
 800152e:	607a      	str	r2, [r7, #4]
 8001530:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001532:	2300      	movs	r3, #0
 8001534:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800153c:	2b01      	cmp	r3, #1
 800153e:	d101      	bne.n	8001544 <HAL_DMA_Start_IT+0x20>
 8001540:	2302      	movs	r3, #2
 8001542:	e066      	b.n	8001612 <HAL_DMA_Start_IT+0xee>
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b01      	cmp	r3, #1
 8001556:	d155      	bne.n	8001604 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2202      	movs	r2, #2
 800155c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0201 	bic.w	r2, r2, #1
 8001574:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	68b9      	ldr	r1, [r7, #8]
 800157c:	68f8      	ldr	r0, [r7, #12]
 800157e:	f000 f968 	bl	8001852 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	2b00      	cmp	r3, #0
 8001588:	d008      	beq.n	800159c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f042 020e 	orr.w	r2, r2, #14
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	e00f      	b.n	80015bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0204 	bic.w	r2, r2, #4
 80015aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 020a 	orr.w	r2, r2, #10
 80015ba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d007      	beq.n	80015da <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015d8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d007      	beq.n	80015f2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015f0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 0201 	orr.w	r2, r2, #1
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	e005      	b.n	8001610 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800160c:	2302      	movs	r3, #2
 800160e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001610:	7dfb      	ldrb	r3, [r7, #23]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}

0800161a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b084      	sub	sp, #16
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001622:	2300      	movs	r3, #0
 8001624:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d005      	beq.n	800163e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2204      	movs	r2, #4
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e047      	b.n	80016ce <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f022 020e 	bic.w	r2, r2, #14
 800164c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800166c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	f003 021c 	and.w	r2, r3, #28
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2101      	movs	r1, #1
 800167c:	fa01 f202 	lsl.w	r2, r1, r2
 8001680:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800168a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00c      	beq.n	80016ae <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2201      	movs	r2, #1
 80016b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	4798      	blx	r3
    }
  }
  return status;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f4:	f003 031c 	and.w	r3, r3, #28
 80016f8:	2204      	movs	r2, #4
 80016fa:	409a      	lsls	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	4013      	ands	r3, r2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d026      	beq.n	8001752 <HAL_DMA_IRQHandler+0x7a>
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	2b00      	cmp	r3, #0
 800170c:	d021      	beq.n	8001752 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	2b00      	cmp	r3, #0
 800171a:	d107      	bne.n	800172c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 0204 	bic.w	r2, r2, #4
 800172a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	f003 021c 	and.w	r2, r3, #28
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	2104      	movs	r1, #4
 800173a:	fa01 f202 	lsl.w	r2, r1, r2
 800173e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001744:	2b00      	cmp	r3, #0
 8001746:	d071      	beq.n	800182c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001750:	e06c      	b.n	800182c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f003 031c 	and.w	r3, r3, #28
 800175a:	2202      	movs	r2, #2
 800175c:	409a      	lsls	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	4013      	ands	r3, r2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d02e      	beq.n	80017c4 <HAL_DMA_IRQHandler+0xec>
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d029      	beq.n	80017c4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0320 	and.w	r3, r3, #32
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10b      	bne.n	8001796 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 020a 	bic.w	r2, r2, #10
 800178c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f003 021c 	and.w	r2, r3, #28
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	2102      	movs	r1, #2
 80017a4:	fa01 f202 	lsl.w	r2, r1, r2
 80017a8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d038      	beq.n	800182c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017c2:	e033      	b.n	800182c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c8:	f003 031c 	and.w	r3, r3, #28
 80017cc:	2208      	movs	r2, #8
 80017ce:	409a      	lsls	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d02a      	beq.n	800182e <HAL_DMA_IRQHandler+0x156>
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d025      	beq.n	800182e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 020e 	bic.w	r2, r2, #14
 80017f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f003 021c 	and.w	r2, r3, #28
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f202 	lsl.w	r2, r1, r2
 8001804:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001820:	2b00      	cmp	r3, #0
 8001822:	d004      	beq.n	800182e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800182c:	bf00      	nop
 800182e:	bf00      	nop
}
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001844:	b2db      	uxtb	r3, r3
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001852:	b480      	push	{r7}
 8001854:	b085      	sub	sp, #20
 8001856:	af00      	add	r7, sp, #0
 8001858:	60f8      	str	r0, [r7, #12]
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001868:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800187a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f003 021c 	and.w	r2, r3, #28
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	2101      	movs	r1, #1
 800188a:	fa01 f202 	lsl.w	r2, r1, r2
 800188e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b10      	cmp	r3, #16
 800189e:	d108      	bne.n	80018b2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018b0:	e007      	b.n	80018c2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	60da      	str	r2, [r3, #12]
}
 80018c2:	bf00      	nop
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d80a      	bhi.n	80018fa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e8:	089b      	lsrs	r3, r3, #2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018f0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6493      	str	r3, [r2, #72]	; 0x48
 80018f8:	e007      	b.n	800190a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	009a      	lsls	r2, r3, #2
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001904:	4413      	add	r3, r2
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	3b08      	subs	r3, #8
 8001912:	4a0c      	ldr	r2, [pc, #48]	; (8001944 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001920:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f003 031f 	and.w	r3, r3, #31
 8001928:	2201      	movs	r2, #1
 800192a:	409a      	lsls	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40020407 	.word	0x40020407
 8001940:	4002081c 	.word	0x4002081c
 8001944:	cccccccd 	.word	0xcccccccd
 8001948:	40020880 	.word	0x40020880

0800194c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800195c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	4b0b      	ldr	r3, [pc, #44]	; (8001990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001962:	4413      	add	r3, r2
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	461a      	mov	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a09      	ldr	r2, [pc, #36]	; (8001994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001970:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	3b01      	subs	r3, #1
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2201      	movs	r2, #1
 800197c:	409a      	lsls	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	1000823f 	.word	0x1000823f
 8001994:	40020940 	.word	0x40020940

08001998 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a6:	e14c      	b.n	8001c42 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2101      	movs	r1, #1
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	fa01 f303 	lsl.w	r3, r1, r3
 80019b4:	4013      	ands	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 813e 	beq.w	8001c3c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d00b      	beq.n	80019e0 <HAL_GPIO_Init+0x48>
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d007      	beq.n	80019e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d4:	2b11      	cmp	r3, #17
 80019d6:	d003      	beq.n	80019e0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2b12      	cmp	r3, #18
 80019de:	d130      	bne.n	8001a42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	2203      	movs	r2, #3
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	43db      	mvns	r3, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a16:	2201      	movs	r2, #1
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	f003 0201 	and.w	r2, r3, #1
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_Init+0xea>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b12      	cmp	r3, #18
 8001a80:	d123      	bne.n	8001aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	08da      	lsrs	r2, r3, #3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3208      	adds	r2, #8
 8001a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	220f      	movs	r2, #15
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	691a      	ldr	r2, [r3, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0307 	and.w	r3, r3, #7
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	08da      	lsrs	r2, r3, #3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3208      	adds	r2, #8
 8001ac4:	6939      	ldr	r1, [r7, #16]
 8001ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f003 0203 	and.w	r2, r3, #3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	f000 8098 	beq.w	8001c3c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b0c:	4a54      	ldr	r2, [pc, #336]	; (8001c60 <HAL_GPIO_Init+0x2c8>)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b36:	d019      	beq.n	8001b6c <HAL_GPIO_Init+0x1d4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a4a      	ldr	r2, [pc, #296]	; (8001c64 <HAL_GPIO_Init+0x2cc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d013      	beq.n	8001b68 <HAL_GPIO_Init+0x1d0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a49      	ldr	r2, [pc, #292]	; (8001c68 <HAL_GPIO_Init+0x2d0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d00d      	beq.n	8001b64 <HAL_GPIO_Init+0x1cc>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a48      	ldr	r2, [pc, #288]	; (8001c6c <HAL_GPIO_Init+0x2d4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d007      	beq.n	8001b60 <HAL_GPIO_Init+0x1c8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a47      	ldr	r2, [pc, #284]	; (8001c70 <HAL_GPIO_Init+0x2d8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d101      	bne.n	8001b5c <HAL_GPIO_Init+0x1c4>
 8001b58:	2304      	movs	r3, #4
 8001b5a:	e008      	b.n	8001b6e <HAL_GPIO_Init+0x1d6>
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	e006      	b.n	8001b6e <HAL_GPIO_Init+0x1d6>
 8001b60:	2303      	movs	r3, #3
 8001b62:	e004      	b.n	8001b6e <HAL_GPIO_Init+0x1d6>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e002      	b.n	8001b6e <HAL_GPIO_Init+0x1d6>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_GPIO_Init+0x1d6>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	f002 0203 	and.w	r2, r2, #3
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	4093      	lsls	r3, r2
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b7e:	4938      	ldr	r1, [pc, #224]	; (8001c60 <HAL_GPIO_Init+0x2c8>)
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b8c:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <HAL_GPIO_Init+0x2dc>)
 8001b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bb2:	4a30      	ldr	r2, [pc, #192]	; (8001c74 <HAL_GPIO_Init+0x2dc>)
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001bba:	4b2e      	ldr	r3, [pc, #184]	; (8001c74 <HAL_GPIO_Init+0x2dc>)
 8001bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001be0:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <HAL_GPIO_Init+0x2dc>)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_GPIO_Init+0x2dc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d003      	beq.n	8001c0c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c0c:	4a19      	ldr	r2, [pc, #100]	; (8001c74 <HAL_GPIO_Init+0x2dc>)
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <HAL_GPIO_Init+0x2dc>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c36:	4a0f      	ldr	r2, [pc, #60]	; (8001c74 <HAL_GPIO_Init+0x2dc>)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f47f aeab 	bne.w	80019a8 <HAL_GPIO_Init+0x10>
  }
}
 8001c52:	bf00      	nop
 8001c54:	371c      	adds	r7, #28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40010000 	.word	0x40010000
 8001c64:	48000400 	.word	0x48000400
 8001c68:	48000800 	.word	0x48000800
 8001c6c:	48000c00 	.word	0x48000c00
 8001c70:	48001000 	.word	0x48001000
 8001c74:	58000800 	.word	0x58000800

08001c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	460b      	mov	r3, r1
 8001c82:	807b      	strh	r3, [r7, #2]
 8001c84:	4613      	mov	r3, r2
 8001c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c88:	787b      	ldrb	r3, [r7, #1]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c8e:	887a      	ldrh	r2, [r7, #2]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cba:	887a      	ldrh	r2, [r7, #2]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	43d9      	mvns	r1, r3
 8001cc6:	887b      	ldrh	r3, [r7, #2]
 8001cc8:	400b      	ands	r3, r1
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001ce2:	4b0a      	ldr	r3, [pc, #40]	; (8001d0c <HAL_HSEM_IRQHandler+0x30>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_HSEM_IRQHandler+0x30>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	4906      	ldr	r1, [pc, #24]	; (8001d0c <HAL_HSEM_IRQHandler+0x30>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001cf6:	4a05      	ldr	r2, [pc, #20]	; (8001d0c <HAL_HSEM_IRQHandler+0x30>)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 f807 	bl	8001d10 <HAL_HSEM_FreeCallback>
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	58001500 	.word	0x58001500

08001d10 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e081      	b.n	8001e3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7fe fe30 	bl	80009b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2224      	movs	r2, #36	; 0x24
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0201 	bic.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d107      	bne.n	8001d9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	e006      	b.n	8001dac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001daa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d104      	bne.n	8001dbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6812      	ldr	r2, [r2, #0]
 8001dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001de0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691a      	ldr	r2, [r3, #16]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	ea42 0103 	orr.w	r1, r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	021a      	lsls	r2, r3, #8
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69d9      	ldr	r1, [r3, #28]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a1a      	ldr	r2, [r3, #32]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
	...

08001e44 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	f040 809b 	bne.w	8001f96 <HAL_I2C_Slave_Transmit_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HAL_I2C_Slave_Transmit_DMA+0x28>
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e08f      	b.n	8001f98 <HAL_I2C_Slave_Transmit_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_I2C_Slave_Transmit_DMA+0x42>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e088      	b.n	8001f98 <HAL_I2C_Slave_Transmit_DMA+0x154>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2221      	movs	r2, #33	; 0x21
 8001e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	88fa      	ldrh	r2, [r7, #6]
 8001eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	4a38      	ldr	r2, [pc, #224]	; (8001fa0 <HAL_I2C_Slave_Transmit_DMA+0x15c>)
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4a38      	ldr	r2, [pc, #224]	; (8001fa4 <HAL_I2C_Slave_Transmit_DMA+0x160>)
 8001ec4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmatx != NULL)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d020      	beq.n	8001f10 <HAL_I2C_Slave_Transmit_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	4a35      	ldr	r2, [pc, #212]	; (8001fa8 <HAL_I2C_Slave_Transmit_DMA+0x164>)
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	4a34      	ldr	r2, [pc, #208]	; (8001fac <HAL_I2C_Slave_Transmit_DMA+0x168>)
 8001edc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmatx->XferAbortCallback = NULL;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	2200      	movs	r2, #0
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3328      	adds	r3, #40	; 0x28
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	f7ff fb10 	bl	8001524 <HAL_DMA_Start_IT>
 8001f04:	4603      	mov	r3, r0
 8001f06:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d12f      	bne.n	8001f6e <HAL_I2C_Slave_Transmit_DMA+0x12a>
 8001f0e:	e013      	b.n	8001f38 <HAL_I2C_Slave_Transmit_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2228      	movs	r2, #40	; 0x28
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e02f      	b.n	8001f98 <HAL_I2C_Slave_Transmit_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f46:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f001 f97d 	bl	8003254 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f68:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e014      	b.n	8001f98 <HAL_I2C_Slave_Transmit_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2228      	movs	r2, #40	; 0x28
 8001f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f82:	f043 0210 	orr.w	r2, r3, #16
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <HAL_I2C_Slave_Transmit_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3718      	adds	r7, #24
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	ffff0000 	.word	0xffff0000
 8001fa4:	0800267f 	.word	0x0800267f
 8001fa8:	08003107 	.word	0x08003107
 8001fac:	0800318d 	.word	0x0800318d

08001fb0 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	f040 809b 	bne.w	8002102 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d002      	beq.n	8001fd8 <HAL_I2C_Slave_Receive_DMA+0x28>
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d105      	bne.n	8001fe4 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e08f      	b.n	8002104 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_I2C_Slave_Receive_DMA+0x42>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e088      	b.n	8002104 <HAL_I2C_Slave_Receive_DMA+0x154>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2222      	movs	r2, #34	; 0x22
 8001ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2220      	movs	r2, #32
 8002006:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	88fa      	ldrh	r2, [r7, #6]
 800201a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002020:	b29a      	uxth	r2, r3
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a38      	ldr	r2, [pc, #224]	; (800210c <HAL_I2C_Slave_Receive_DMA+0x15c>)
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4a38      	ldr	r2, [pc, #224]	; (8002110 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8002030:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->hdmarx != NULL)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d020      	beq.n	800207c <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203e:	4a35      	ldr	r2, [pc, #212]	; (8002114 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8002040:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	4a34      	ldr	r2, [pc, #208]	; (8002118 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8002048:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	2200      	movs	r2, #0
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	2200      	movs	r2, #0
 8002058:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3324      	adds	r3, #36	; 0x24
 8002064:	4619      	mov	r1, r3
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800206c:	f7ff fa5a 	bl	8001524 <HAL_DMA_Start_IT>
 8002070:	4603      	mov	r3, r0
 8002072:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8002074:	7dfb      	ldrb	r3, [r7, #23]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d12f      	bne.n	80020da <HAL_I2C_Slave_Receive_DMA+0x12a>
 800207a:	e013      	b.n	80020a4 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2228      	movs	r2, #40	; 0x28
 8002080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e02f      	b.n	8002104 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020b2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80020bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f001 f8c7 	bl	8003254 <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020d4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	e014      	b.n	8002104 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2228      	movs	r2, #40	; 0x28
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f043 0210 	orr.w	r2, r3, #16
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8002102:	2302      	movs	r3, #2
  }
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	ffff0000 	.word	0xffff0000
 8002110:	0800267f 	.word	0x0800267f
 8002114:	08003147 	.word	0x08003147
 8002118:	0800318d 	.word	0x0800318d

0800211c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	68ba      	ldr	r2, [r7, #8]
 8002142:	68f9      	ldr	r1, [r7, #12]
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	4798      	blx	r3
  }
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d010      	beq.n	8002196 <HAL_I2C_ER_IRQHandler+0x46>
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	09db      	lsrs	r3, r3, #7
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00a      	beq.n	8002196 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002184:	f043 0201 	orr.w	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002194:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	0a9b      	lsrs	r3, r3, #10
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d010      	beq.n	80021c4 <HAL_I2C_ER_IRQHandler+0x74>
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	09db      	lsrs	r3, r3, #7
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d00a      	beq.n	80021c4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f043 0208 	orr.w	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	0a5b      	lsrs	r3, r3, #9
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d010      	beq.n	80021f2 <HAL_I2C_ER_IRQHandler+0xa2>
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	09db      	lsrs	r3, r3, #7
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e0:	f043 0202 	orr.w	r2, r3, #2
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 030b 	and.w	r3, r3, #11
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fe63 	bl	8002ed0 <I2C_ITError>
  }
}
 800220a:	bf00      	nop
 800220c:	3718      	adds	r7, #24
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	460b      	mov	r3, r1
 800221c:	70fb      	strb	r3, [r7, #3]
 800221e:	4613      	mov	r3, r2
 8002220:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <I2C_Slave_ISR_IT+0x24>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e0ec      	b.n	8002490 <I2C_Slave_ISR_IT+0x1fe>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <I2C_Slave_ISR_IT+0x4c>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80022d6:	6939      	ldr	r1, [r7, #16]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fc99 	bl	8002c10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d04d      	beq.n	8002386 <I2C_Slave_ISR_IT+0xf4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d047      	beq.n	8002386 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d128      	bne.n	8002352 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b28      	cmp	r3, #40	; 0x28
 800230a:	d108      	bne.n	800231e <I2C_Slave_ISR_IT+0x8c>
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002312:	d104      	bne.n	800231e <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002314:	6939      	ldr	r1, [r7, #16]
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fd84 	bl	8002e24 <I2C_ITListenCplt>
 800231c:	e032      	b.n	8002384 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b29      	cmp	r3, #41	; 0x29
 8002328:	d10e      	bne.n	8002348 <I2C_Slave_ISR_IT+0xb6>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002330:	d00a      	beq.n	8002348 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2210      	movs	r2, #16
 8002338:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800233a:	68f8      	ldr	r0, [r7, #12]
 800233c:	f000 febf 	bl	80030be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002340:	68f8      	ldr	r0, [r7, #12]
 8002342:	f000 fb3d 	bl	80029c0 <I2C_ITSlaveSeqCplt>
 8002346:	e01d      	b.n	8002384 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2210      	movs	r2, #16
 800234e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002350:	e096      	b.n	8002480 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2210      	movs	r2, #16
 8002358:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	f043 0204 	orr.w	r2, r3, #4
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d004      	beq.n	8002376 <I2C_Slave_ISR_IT+0xe4>
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002372:	f040 8085 	bne.w	8002480 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4619      	mov	r1, r3
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	f000 fda7 	bl	8002ed0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002382:	e07d      	b.n	8002480 <I2C_Slave_ISR_IT+0x1ee>
 8002384:	e07c      	b.n	8002480 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	f003 0301 	and.w	r3, r3, #1
 800238e:	2b00      	cmp	r3, #0
 8002390:	d030      	beq.n	80023f4 <I2C_Slave_ISR_IT+0x162>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d02a      	beq.n	80023f4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d018      	beq.n	80023da <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d14f      	bne.n	8002484 <I2C_Slave_ISR_IT+0x1f2>
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023ea:	d04b      	beq.n	8002484 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f000 fae7 	bl	80029c0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80023f2:	e047      	b.n	8002484 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	08db      	lsrs	r3, r3, #3
 80023f8:	f003 0301 	and.w	r3, r3, #1
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00a      	beq.n	8002416 <I2C_Slave_ISR_IT+0x184>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	08db      	lsrs	r3, r3, #3
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800240c:	6939      	ldr	r1, [r7, #16]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fa15 	bl	800283e <I2C_ITAddrCplt>
 8002414:	e037      	b.n	8002486 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	085b      	lsrs	r3, r3, #1
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d031      	beq.n	8002486 <I2C_Slave_ISR_IT+0x1f4>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	085b      	lsrs	r3, r3, #1
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	2b00      	cmp	r3, #0
 800242c:	d02b      	beq.n	8002486 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d018      	beq.n	800246a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29b      	uxth	r3, r3
 8002454:	3b01      	subs	r3, #1
 8002456:	b29a      	uxth	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	; 0x28
 8002468:	e00d      	b.n	8002486 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002470:	d002      	beq.n	8002478 <I2C_Slave_ISR_IT+0x1e6>
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d106      	bne.n	8002486 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 faa1 	bl	80029c0 <I2C_ITSlaveSeqCplt>
 800247e:	e002      	b.n	8002486 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002480:	bf00      	nop
 8002482:	e000      	b.n	8002486 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002484:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800248e:	2300      	movs	r3, #0
}
 8002490:	4618      	mov	r0, r3
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b088      	sub	sp, #32
 800249c:	af02      	add	r7, sp, #8
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <I2C_Master_ISR_DMA+0x1a>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e0e1      	b.n	8002676 <I2C_Master_ISR_DMA+0x1de>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d017      	beq.n	80024f6 <I2C_Master_ISR_DMA+0x5e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d011      	beq.n	80024f6 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2210      	movs	r2, #16
 80024d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	f043 0204 	orr.w	r2, r3, #4
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80024e6:	2120      	movs	r1, #32
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 feb3 	bl	8003254 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 fde5 	bl	80030be <I2C_Flush_TXDR>
 80024f4:	e0ba      	b.n	800266c <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	09db      	lsrs	r3, r3, #7
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d072      	beq.n	80025e8 <I2C_Master_ISR_DMA+0x150>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	099b      	lsrs	r3, r3, #6
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d06c      	beq.n	80025e8 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800251c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d04e      	beq.n	80025c6 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002534:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800253a:	b29b      	uxth	r3, r3
 800253c:	2bff      	cmp	r3, #255	; 0xff
 800253e:	d906      	bls.n	800254e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	22ff      	movs	r2, #255	; 0xff
 8002544:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002546:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	e010      	b.n	8002570 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002560:	d003      	beq.n	800256a <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	e002      	b.n	8002570 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800256a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800256e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002574:	b2da      	uxtb	r2, r3
 8002576:	8a79      	ldrh	r1, [r7, #18]
 8002578:	2300      	movs	r3, #0
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f000 fe3a 	bl	80031f8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b22      	cmp	r3, #34	; 0x22
 80025a0:	d108      	bne.n	80025b4 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80025b2:	e05b      	b.n	800266c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025c2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80025c4:	e052      	b.n	800266c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025d4:	d003      	beq.n	80025de <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f9b5 	bl	8002946 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80025dc:	e046      	b.n	800266c <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80025de:	2140      	movs	r1, #64	; 0x40
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fc75 	bl	8002ed0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80025e6:	e041      	b.n	800266c <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	099b      	lsrs	r3, r3, #6
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d029      	beq.n	8002648 <I2C_Master_ISR_DMA+0x1b0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	099b      	lsrs	r3, r3, #6
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d023      	beq.n	8002648 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d119      	bne.n	800263e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002614:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002618:	d027      	beq.n	800266a <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002622:	d108      	bne.n	8002636 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002632:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002634:	e019      	b.n	800266a <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 f985 	bl	8002946 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800263c:	e015      	b.n	800266a <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800263e:	2140      	movs	r1, #64	; 0x40
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 fc45 	bl	8002ed0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002646:	e010      	b.n	800266a <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	095b      	lsrs	r3, r3, #5
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00b      	beq.n	800266c <I2C_Master_ISR_DMA+0x1d4>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 fa0a 	bl	8002a7c <I2C_ITMasterCplt>
 8002668:	e000      	b.n	800266c <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800266a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b088      	sub	sp, #32
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <I2C_Slave_ISR_DMA+0x24>
 800269e:	2302      	movs	r3, #2
 80026a0:	e0c9      	b.n	8002836 <I2C_Slave_ISR_DMA+0x1b8>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	095b      	lsrs	r3, r3, #5
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d009      	beq.n	80026ca <I2C_Slave_ISR_DMA+0x4c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 faa3 	bl	8002c10 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	091b      	lsrs	r3, r3, #4
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 809a 	beq.w	800280c <I2C_Slave_ISR_DMA+0x18e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f003 0301 	and.w	r3, r3, #1
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8093 	beq.w	800280c <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	0b9b      	lsrs	r3, r3, #14
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	0bdb      	lsrs	r3, r3, #15
 80026f6:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d07f      	beq.n	80027fe <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00d      	beq.n	8002722 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0bdb      	lsrs	r3, r3, #15
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d007      	beq.n	8002722 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 800271e:	2301      	movs	r3, #1
 8002720:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00d      	beq.n	8002746 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	0b9b      	lsrs	r3, r3, #14
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d007      	beq.n	8002746 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8002742:	2301      	movs	r3, #1
 8002744:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d128      	bne.n	800279e <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b28      	cmp	r3, #40	; 0x28
 8002756:	d108      	bne.n	800276a <I2C_Slave_ISR_DMA+0xec>
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800275e:	d104      	bne.n	800276a <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fb5e 	bl	8002e24 <I2C_ITListenCplt>
 8002768:	e048      	b.n	80027fc <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b29      	cmp	r3, #41	; 0x29
 8002774:	d10e      	bne.n	8002794 <I2C_Slave_ISR_DMA+0x116>
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800277c:	d00a      	beq.n	8002794 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2210      	movs	r2, #16
 8002784:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 fc99 	bl	80030be <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f917 	bl	80029c0 <I2C_ITSlaveSeqCplt>
 8002792:	e033      	b.n	80027fc <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2210      	movs	r2, #16
 800279a:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800279c:	e034      	b.n	8002808 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2210      	movs	r2, #16
 80027a4:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f043 0204 	orr.w	r2, r3, #4
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b8:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <I2C_Slave_ISR_DMA+0x14a>
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027c6:	d11f      	bne.n	8002808 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	2b21      	cmp	r3, #33	; 0x21
 80027cc:	d002      	beq.n	80027d4 <I2C_Slave_ISR_DMA+0x156>
 80027ce:	7dfb      	ldrb	r3, [r7, #23]
 80027d0:	2b29      	cmp	r3, #41	; 0x29
 80027d2:	d103      	bne.n	80027dc <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2221      	movs	r2, #33	; 0x21
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30
 80027da:	e008      	b.n	80027ee <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027dc:	7dfb      	ldrb	r3, [r7, #23]
 80027de:	2b22      	cmp	r3, #34	; 0x22
 80027e0:	d002      	beq.n	80027e8 <I2C_Slave_ISR_DMA+0x16a>
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	2b2a      	cmp	r3, #42	; 0x2a
 80027e6:	d102      	bne.n	80027ee <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2222      	movs	r2, #34	; 0x22
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	4619      	mov	r1, r3
 80027f4:	68f8      	ldr	r0, [r7, #12]
 80027f6:	f000 fb6b 	bl	8002ed0 <I2C_ITError>
      if (treatdmanack == 1U)
 80027fa:	e005      	b.n	8002808 <I2C_Slave_ISR_DMA+0x18a>
 80027fc:	e004      	b.n	8002808 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2210      	movs	r2, #16
 8002804:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002806:	e011      	b.n	800282c <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8002808:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800280a:	e00f      	b.n	800282c <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	08db      	lsrs	r3, r3, #3
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <I2C_Slave_ISR_DMA+0x1ae>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	08db      	lsrs	r3, r3, #3
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f809 	bl	800283e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002854:	2b28      	cmp	r3, #40	; 0x28
 8002856:	d16a      	bne.n	800292e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	0c1b      	lsrs	r3, r3, #16
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	0c1b      	lsrs	r3, r3, #16
 8002870:	b29b      	uxth	r3, r3
 8002872:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002876:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	b29b      	uxth	r3, r3
 8002880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002884:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	b29b      	uxth	r3, r3
 800288e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002892:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b02      	cmp	r3, #2
 800289a:	d138      	bne.n	800290e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800289c:	897b      	ldrh	r3, [r7, #10]
 800289e:	09db      	lsrs	r3, r3, #7
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	89bb      	ldrh	r3, [r7, #12]
 80028a4:	4053      	eors	r3, r2
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	f003 0306 	and.w	r3, r3, #6
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d11c      	bne.n	80028ea <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80028b0:	897b      	ldrh	r3, [r7, #10]
 80028b2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d13b      	bne.n	800293e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80028dc:	89ba      	ldrh	r2, [r7, #12]
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff fc95 	bl	8002212 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80028e8:	e029      	b.n	800293e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80028ea:	893b      	ldrh	r3, [r7, #8]
 80028ec:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80028ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fd12 	bl	800331c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002900:	89ba      	ldrh	r2, [r7, #12]
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	4619      	mov	r1, r3
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff fc83 	bl	8002212 <HAL_I2C_AddrCallback>
}
 800290c:	e017      	b.n	800293e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800290e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 fd02 	bl	800331c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002920:	89ba      	ldrh	r2, [r7, #12]
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	4619      	mov	r1, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff fc73 	bl	8002212 <HAL_I2C_AddrCallback>
}
 800292c:	e007      	b.n	800293e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2208      	movs	r2, #8
 8002934:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b21      	cmp	r3, #33	; 0x21
 8002960:	d115      	bne.n	800298e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2211      	movs	r2, #17
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002976:	2101      	movs	r1, #1
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fccf 	bl	800331c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f7fd ff4a 	bl	8000820 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800298c:	e014      	b.n	80029b8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2212      	movs	r2, #18
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80029a2:	2102      	movs	r1, #2
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fcb9 	bl	800331c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fd ff3e 	bl	8000834 <HAL_I2C_MasterRxCpltCallback>
}
 80029b8:	bf00      	nop
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	0b9b      	lsrs	r3, r3, #14
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e00d      	b.n	8002a12 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	0bdb      	lsrs	r3, r3, #15
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d007      	beq.n	8002a12 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a10:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b29      	cmp	r3, #41	; 0x29
 8002a1c:	d112      	bne.n	8002a44 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2228      	movs	r2, #40	; 0x28
 8002a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2221      	movs	r2, #33	; 0x21
 8002a2a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fc74 	bl	800331c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7fd ff03 	bl	8000848 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002a42:	e017      	b.n	8002a74 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a4e:	d111      	bne.n	8002a74 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2228      	movs	r2, #40	; 0x28
 8002a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2222      	movs	r2, #34	; 0x22
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a5e:	2102      	movs	r1, #2
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 fc5b 	bl	800331c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7fd ff06 	bl	8000880 <HAL_I2C_SlaveRxCpltCallback>
}
 8002a74:	bf00      	nop
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b21      	cmp	r3, #33	; 0x21
 8002a9c:	d107      	bne.n	8002aae <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f000 fc3b 	bl	800331c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2211      	movs	r2, #17
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002aac:	e00c      	b.n	8002ac8 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b22      	cmp	r3, #34	; 0x22
 8002ab8:	d106      	bne.n	8002ac8 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002aba:	2102      	movs	r1, #2
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fc2d 	bl	800331c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2212      	movs	r2, #18
 8002ac6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6859      	ldr	r1, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b4d      	ldr	r3, [pc, #308]	; (8002c08 <I2C_ITMasterCplt+0x18c>)
 8002ad4:	400b      	ands	r3, r1
 8002ad6:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4a      	ldr	r2, [pc, #296]	; (8002c0c <I2C_ITMasterCplt+0x190>)
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d009      	beq.n	8002b04 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2210      	movs	r2, #16
 8002af6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b60      	cmp	r3, #96	; 0x60
 8002b0e:	d10b      	bne.n	8002b28 <I2C_ITMasterCplt+0xac>
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	089b      	lsrs	r3, r3, #2
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002b26:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fac8 	bl	80030be <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b60      	cmp	r3, #96	; 0x60
 8002b3e:	d002      	beq.n	8002b46 <I2C_ITMasterCplt+0xca>
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f9bf 	bl	8002ed0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002b52:	e054      	b.n	8002bfe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b21      	cmp	r3, #33	; 0x21
 8002b5e:	d124      	bne.n	8002baa <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2220      	movs	r2, #32
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b40      	cmp	r3, #64	; 0x40
 8002b78:	d10b      	bne.n	8002b92 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff fb59 	bl	8002242 <HAL_I2C_MemTxCpltCallback>
}
 8002b90:	e035      	b.n	8002bfe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f7fd fe3c 	bl	8000820 <HAL_I2C_MasterTxCpltCallback>
}
 8002ba8:	e029      	b.n	8002bfe <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b22      	cmp	r3, #34	; 0x22
 8002bb4:	d123      	bne.n	8002bfe <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b40      	cmp	r3, #64	; 0x40
 8002bce:	d10b      	bne.n	8002be8 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff fb38 	bl	8002256 <HAL_I2C_MemRxCpltCallback>
}
 8002be6:	e00a      	b.n	8002bfe <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f7fd fe1b 	bl	8000834 <HAL_I2C_MasterRxCpltCallback>
}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	fe00e800 	.word	0xfe00e800
 8002c0c:	ffff0000 	.word	0xffff0000

08002c10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c2c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2220      	movs	r2, #32
 8002c34:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	2b21      	cmp	r3, #33	; 0x21
 8002c3a:	d002      	beq.n	8002c42 <I2C_ITSlaveCplt+0x32>
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
 8002c3e:	2b29      	cmp	r3, #41	; 0x29
 8002c40:	d108      	bne.n	8002c54 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002c42:	f248 0101 	movw	r1, #32769	; 0x8001
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 fb68 	bl	800331c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2221      	movs	r2, #33	; 0x21
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
 8002c52:	e00d      	b.n	8002c70 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b22      	cmp	r3, #34	; 0x22
 8002c58:	d002      	beq.n	8002c60 <I2C_ITSlaveCplt+0x50>
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c5e:	d107      	bne.n	8002c70 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002c60:	f248 0102 	movw	r1, #32770	; 0x8002
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fb59 	bl	800331c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2222      	movs	r2, #34	; 0x22
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685a      	ldr	r2, [r3, #4]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	4b64      	ldr	r3, [pc, #400]	; (8002e1c <I2C_ITSlaveCplt+0x20c>)
 8002c8c:	400b      	ands	r3, r1
 8002c8e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fa14 	bl	80030be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	0b9b      	lsrs	r3, r3, #14
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d013      	beq.n	8002cca <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002cb0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d020      	beq.n	8002cfc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cc8:	e018      	b.n	8002cfc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	0bdb      	lsrs	r3, r3, #15
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d012      	beq.n	8002cfc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ce4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d006      	beq.n	8002cfc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	089b      	lsrs	r3, r3, #2
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d020      	beq.n	8002d4a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f023 0304 	bic.w	r3, r3, #4
 8002d0e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00c      	beq.n	8002d4a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	3b01      	subs	r3, #1
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d58:	f043 0204 	orr.w	r2, r3, #4
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d010      	beq.n	8002d98 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 f8a7 	bl	8002ed0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b28      	cmp	r3, #40	; 0x28
 8002d8c:	d141      	bne.n	8002e12 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d8e:	6979      	ldr	r1, [r7, #20]
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f847 	bl	8002e24 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d96:	e03c      	b.n	8002e12 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002da0:	d014      	beq.n	8002dcc <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff fe0c 	bl	80029c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a1d      	ldr	r2, [pc, #116]	; (8002e20 <I2C_ITSlaveCplt+0x210>)
 8002dac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2220      	movs	r2, #32
 8002db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff fa32 	bl	800222e <HAL_I2C_ListenCpltCallback>
}
 8002dca:	e022      	b.n	8002e12 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b22      	cmp	r3, #34	; 0x22
 8002dd6:	d10e      	bne.n	8002df6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fd fd46 	bl	8000880 <HAL_I2C_SlaveRxCpltCallback>
}
 8002df4:	e00d      	b.n	8002e12 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7fd fd1b 	bl	8000848 <HAL_I2C_SlaveTxCpltCallback>
}
 8002e12:	bf00      	nop
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	fe00e800 	.word	0xfe00e800
 8002e20:	ffff0000 	.word	0xffff0000

08002e24 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a26      	ldr	r2, [pc, #152]	; (8002ecc <I2C_ITListenCplt+0xa8>)
 8002e32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d022      	beq.n	8002ea2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d012      	beq.n	8002ea2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	f043 0204 	orr.w	r2, r3, #4
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ea2:	f248 0103 	movw	r1, #32771	; 0x8003
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa38 	bl	800331c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff f9b6 	bl	800222e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	ffff0000 	.word	0xffff0000

08002ed0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a5d      	ldr	r2, [pc, #372]	; (8003064 <I2C_ITError+0x194>)
 8002eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b28      	cmp	r3, #40	; 0x28
 8002f06:	d005      	beq.n	8002f14 <I2C_ITError+0x44>
 8002f08:	7bfb      	ldrb	r3, [r7, #15]
 8002f0a:	2b29      	cmp	r3, #41	; 0x29
 8002f0c:	d002      	beq.n	8002f14 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b2a      	cmp	r3, #42	; 0x2a
 8002f12:	d10b      	bne.n	8002f2c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f14:	2103      	movs	r1, #3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fa00 	bl	800331c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2228      	movs	r2, #40	; 0x28
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a50      	ldr	r2, [pc, #320]	; (8003068 <I2C_ITError+0x198>)
 8002f28:	635a      	str	r2, [r3, #52]	; 0x34
 8002f2a:	e011      	b.n	8002f50 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f2c:	f248 0103 	movw	r1, #32771	; 0x8003
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f9f3 	bl	800331c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b60      	cmp	r3, #96	; 0x60
 8002f40:	d003      	beq.n	8002f4a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d039      	beq.n	8002fd2 <I2C_ITError+0x102>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b11      	cmp	r3, #17
 8002f62:	d002      	beq.n	8002f6a <I2C_ITError+0x9a>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b21      	cmp	r3, #33	; 0x21
 8002f68:	d133      	bne.n	8002fd2 <I2C_ITError+0x102>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f78:	d107      	bne.n	8002f8a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f88:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fc51 	bl	8001836 <HAL_DMA_GetState>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d017      	beq.n	8002fca <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9e:	4a33      	ldr	r2, [pc, #204]	; (800306c <I2C_ITError+0x19c>)
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe fb33 	bl	800161a <HAL_DMA_Abort_IT>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d04d      	beq.n	8003056 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fc4:	4610      	mov	r0, r2
 8002fc6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fc8:	e045      	b.n	8003056 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f850 	bl	8003070 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fd0:	e041      	b.n	8003056 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d039      	beq.n	800304e <I2C_ITError+0x17e>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b12      	cmp	r3, #18
 8002fde:	d002      	beq.n	8002fe6 <I2C_ITError+0x116>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b22      	cmp	r3, #34	; 0x22
 8002fe4:	d133      	bne.n	800304e <I2C_ITError+0x17e>
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff4:	d107      	bne.n	8003006 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003004:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fc13 	bl	8001836 <HAL_DMA_GetState>
 8003010:	4603      	mov	r3, r0
 8003012:	2b01      	cmp	r3, #1
 8003014:	d017      	beq.n	8003046 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <I2C_ITError+0x19c>)
 800301c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe faf5 	bl	800161a <HAL_DMA_Abort_IT>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d011      	beq.n	800305a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003040:	4610      	mov	r0, r2
 8003042:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003044:	e009      	b.n	800305a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f812 	bl	8003070 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800304c:	e005      	b.n	800305a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f80e 	bl	8003070 <I2C_TreatErrorCallback>
  }
}
 8003054:	e002      	b.n	800305c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003056:	bf00      	nop
 8003058:	e000      	b.n	800305c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800305a:	bf00      	nop
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	ffff0000 	.word	0xffff0000
 8003068:	08002293 	.word	0x08002293
 800306c:	080031bb 	.word	0x080031bb

08003070 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800307e:	b2db      	uxtb	r3, r3
 8003080:	2b60      	cmp	r3, #96	; 0x60
 8003082:	d10e      	bne.n	80030a2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff f8ef 	bl	800227e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030a0:	e009      	b.n	80030b6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff f8da 	bl	800226a <HAL_I2C_ErrorCallback>
}
 80030b6:	bf00      	nop
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d103      	bne.n	80030dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2200      	movs	r2, #0
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d007      	beq.n	80030fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	699a      	ldr	r2, [r3, #24]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	619a      	str	r2, [r3, #24]
  }
}
 80030fa:	bf00      	nop
 80030fc:	370c      	adds	r7, #12
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003120:	d002      	beq.n	8003128 <I2C_DMASlaveTransmitCplt+0x22>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10a      	bne.n	800313e <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003136:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff fc41 	bl	80029c0 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b084      	sub	sp, #16
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003152:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	60bb      	str	r3, [r7, #8]

  if ((__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U) && \
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10e      	bne.n	8003184 <I2C_DMASlaveReceiveCplt+0x3e>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800316c:	d00a      	beq.n	8003184 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800317c:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800317e:	68f8      	ldr	r0, [r7, #12]
 8003180:	f7ff fc1e 	bl	80029c0 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8003184:	bf00      	nop
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003198:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031a8:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80031aa:	2110      	movs	r1, #16
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7ff fe8f 	bl	8002ed0 <I2C_ITError>
}
 80031b2:	bf00      	nop
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b084      	sub	sp, #16
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	2200      	movs	r2, #0
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	2200      	movs	r2, #0
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f7ff ff41 	bl	8003070 <I2C_TreatErrorCallback>
}
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	607b      	str	r3, [r7, #4]
 8003202:	460b      	mov	r3, r1
 8003204:	817b      	strh	r3, [r7, #10]
 8003206:	4613      	mov	r3, r2
 8003208:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	0d5b      	lsrs	r3, r3, #21
 8003214:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003218:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <I2C_TransferConfig+0x58>)
 800321a:	430b      	orrs	r3, r1
 800321c:	43db      	mvns	r3, r3
 800321e:	ea02 0103 	and.w	r1, r2, r3
 8003222:	897b      	ldrh	r3, [r7, #10]
 8003224:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003228:	7a7b      	ldrb	r3, [r7, #9]
 800322a:	041b      	lsls	r3, r3, #16
 800322c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	431a      	orrs	r2, r3
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	431a      	orrs	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	03ff63ff 	.word	0x03ff63ff

08003254 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003268:	4a2a      	ldr	r2, [pc, #168]	; (8003314 <I2C_Enable_IRQ+0xc0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003272:	4a29      	ldr	r2, [pc, #164]	; (8003318 <I2C_Enable_IRQ+0xc4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d11d      	bne.n	80032b4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003278:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800327c:	2b00      	cmp	r3, #0
 800327e:	da03      	bge.n	8003288 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003286:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003288:	887b      	ldrh	r3, [r7, #2]
 800328a:	2b10      	cmp	r3, #16
 800328c:	d103      	bne.n	8003296 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003294:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	2b20      	cmp	r3, #32
 800329a:	d103      	bne.n	80032a4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80032a2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80032a4:	887b      	ldrh	r3, [r7, #2]
 80032a6:	2b40      	cmp	r3, #64	; 0x40
 80032a8:	d125      	bne.n	80032f6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80032b2:	e020      	b.n	80032f6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80032b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	da03      	bge.n	80032c4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80032c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80032c4:	887b      	ldrh	r3, [r7, #2]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80032d4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80032d6:	887b      	ldrh	r3, [r7, #2]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80032e6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80032e8:	887b      	ldrh	r3, [r7, #2]
 80032ea:	2b20      	cmp	r3, #32
 80032ec:	d103      	bne.n	80032f6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f043 0320 	orr.w	r3, r3, #32
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	6819      	ldr	r1, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	430a      	orrs	r2, r1
 8003304:	601a      	str	r2, [r3, #0]
}
 8003306:	bf00      	nop
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	08002499 	.word	0x08002499
 8003318:	0800267f 	.word	0x0800267f

0800331c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800332c:	887b      	ldrh	r3, [r7, #2]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00f      	beq.n	8003356 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800333c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003344:	b2db      	uxtb	r3, r3
 8003346:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800334a:	2b28      	cmp	r3, #40	; 0x28
 800334c:	d003      	beq.n	8003356 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003354:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00f      	beq.n	8003380 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003366:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003374:	2b28      	cmp	r3, #40	; 0x28
 8003376:	d003      	beq.n	8003380 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800337e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003380:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003384:	2b00      	cmp	r3, #0
 8003386:	da03      	bge.n	8003390 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800338e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003390:	887b      	ldrh	r3, [r7, #2]
 8003392:	2b10      	cmp	r3, #16
 8003394:	d103      	bne.n	800339e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800339c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800339e:	887b      	ldrh	r3, [r7, #2]
 80033a0:	2b20      	cmp	r3, #32
 80033a2:	d103      	bne.n	80033ac <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f043 0320 	orr.w	r3, r3, #32
 80033aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80033ac:	887b      	ldrh	r3, [r7, #2]
 80033ae:	2b40      	cmp	r3, #64	; 0x40
 80033b0:	d103      	bne.n	80033ba <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	43da      	mvns	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	400a      	ands	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]
}
 80033cc:	bf00      	nop
 80033ce:	3714      	adds	r7, #20
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d138      	bne.n	8003460 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d101      	bne.n	80033fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033f8:	2302      	movs	r3, #2
 80033fa:	e032      	b.n	8003462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2224      	movs	r2, #36	; 0x24
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0201 	bic.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800342a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6819      	ldr	r1, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e000      	b.n	8003462 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003460:	2302      	movs	r3, #2
  }
}
 8003462:	4618      	mov	r0, r3
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800346e:	b480      	push	{r7}
 8003470:	b085      	sub	sp, #20
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
 8003476:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b20      	cmp	r3, #32
 8003482:	d139      	bne.n	80034f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800348e:	2302      	movs	r3, #2
 8003490:	e033      	b.n	80034fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2224      	movs	r2, #36	; 0x24
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f022 0201 	bic.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	021b      	lsls	r3, r3, #8
 80034c6:	68fa      	ldr	r2, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0201 	orr.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e000      	b.n	80034fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034f8:	2302      	movs	r3, #2
  }
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003516:	6013      	str	r3, [r2, #0]
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	58000400 	.word	0x58000400

08003528 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800352c:	4b04      	ldr	r3, [pc, #16]	; (8003540 <HAL_PWREx_GetVoltageRange+0x18>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003534:	4618      	mov	r0, r3
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	58000400 	.word	0x58000400

08003544 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003556:	d101      	bne.n	800355c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800356c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800357a:	6013      	str	r3, [r2, #0]
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800358a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003594:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003598:	6013      	str	r3, [r2, #0]
}
 800359a:	bf00      	nop
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80035a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035b6:	6013      	str	r3, [r2, #0]
}
 80035b8:	bf00      	nop
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80035c2:	b480      	push	{r7}
 80035c4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80035c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d4:	6013      	str	r3, [r2, #0]
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80035e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035f2:	d101      	bne.n	80035f8 <LL_RCC_HSE_IsReady+0x18>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <LL_RCC_HSE_IsReady+0x1a>
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003616:	6013      	str	r3, [r2, #0]
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003634:	6013      	str	r3, [r2, #0]
}
 8003636:	bf00      	nop
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003652:	d101      	bne.n	8003658 <LL_RCC_HSI_IsReady+0x18>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <LL_RCC_HSI_IsReady+0x1a>
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800366c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	061b      	lsls	r3, r3, #24
 800367a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800368e:	b480      	push	{r7}
 8003690:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800369a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80036a6:	bf00      	nop
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80036b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036c0:	f023 0301 	bic.w	r3, r3, #1
 80036c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80036c8:	bf00      	nop
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80036d2:	b480      	push	{r7}
 80036d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80036d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d101      	bne.n	80036ea <LL_RCC_HSI48_IsReady+0x18>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <LL_RCC_HSI48_IsReady+0x1a>
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80036f6:	b480      	push	{r7}
 80036f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003702:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800370e:	bf00      	nop
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800371c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800373a:	b480      	push	{r7}
 800373c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800373e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800375c:	b480      	push	{r7}
 800375e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800376c:	f023 0304 	bic.w	r3, r3, #4
 8003770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800377e:	b480      	push	{r7}
 8003780:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d101      	bne.n	8003796 <LL_RCC_LSE_IsReady+0x18>
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <LL_RCC_LSE_IsReady+0x1a>
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr

080037a2 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80037a2:	b480      	push	{r7}
 80037a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80037ba:	bf00      	nop
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80037c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80037e6:	b480      	push	{r7}
 80037e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80037ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d101      	bne.n	80037fe <LL_RCC_LSI1_IsReady+0x18>
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <LL_RCC_LSI1_IsReady+0x1a>
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800380a:	b480      	push	{r7}
 800380c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800380e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800381a:	f043 0304 	orr.w	r3, r3, #4
 800381e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003834:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003838:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003844:	bf00      	nop
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b08      	cmp	r3, #8
 8003860:	d101      	bne.n	8003866 <LL_RCC_LSI2_IsReady+0x18>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <LL_RCC_LSI2_IsReady+0x1a>
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003882:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	021b      	lsls	r3, r3, #8
 800388a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6013      	str	r3, [r2, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80038be:	b480      	push	{r7}
 80038c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80038c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038cc:	f023 0301 	bic.w	r3, r3, #1
 80038d0:	6013      	str	r3, [r2, #0]
}
 80038d2:	bf00      	nop
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d101      	bne.n	80038f2 <LL_RCC_MSI_IsReady+0x16>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <LL_RCC_MSI_IsReady+0x18>
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr

080038fe <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800392c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003936:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2bb0      	cmp	r3, #176	; 0xb0
 800393c:	d901      	bls.n	8003942 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800393e:	23b0      	movs	r3, #176	; 0xb0
 8003940:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8003942:	687b      	ldr	r3, [r7, #4]
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	021b      	lsls	r3, r3, #8
 8003966:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 0203 	bic.w	r2, r3, #3
 800398c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80039a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f003 030c 	and.w	r3, r3, #12
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80039c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
}
 80039d6:	bf00      	nop
 80039d8:	370c      	adds	r7, #12
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80039e2:	b480      	push	{r7}
 80039e4:	b083      	sub	sp, #12
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80039ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a1e:	f023 020f 	bic.w	r2, r3, #15
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	608b      	str	r3, [r1, #8]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	608b      	str	r3, [r1, #8]
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003aa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aac:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b02:	6013      	str	r3, [r2, #0]
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b20:	6013      	str	r3, [r2, #0]
}
 8003b22:	bf00      	nop
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b3e:	d101      	bne.n	8003b44 <LL_RCC_PLL_IsReady+0x18>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <LL_RCC_PLL_IsReady+0x1a>
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003b82:	b480      	push	{r7}
 8003b84:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 0303 	and.w	r3, r3, #3
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr

08003bb2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc4:	d101      	bne.n	8003bca <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bde:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bea:	d101      	bne.n	8003bf0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c10:	d101      	bne.n	8003c16 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003c12:	2301      	movs	r3, #1
 8003c14:	e000      	b.n	8003c18 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003c22:	b480      	push	{r7}
 8003c24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c34:	d101      	bne.n	8003c3a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003c46:	b480      	push	{r7}
 8003c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c58:	d101      	bne.n	8003c5e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
	...

08003c6c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b08d      	sub	sp, #52	; 0x34
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e386      	b.n	800438c <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 808f 	beq.w	8003daa <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c8c:	f7ff fe89 	bl	80039a2 <LL_RCC_GetSysClkSource>
 8003c90:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c92:	f7ff ff82 	bl	8003b9a <LL_RCC_PLL_GetMainSource>
 8003c96:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d005      	beq.n	8003caa <HAL_RCC_OscConfig+0x3e>
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	2b0c      	cmp	r3, #12
 8003ca2:	d149      	bne.n	8003d38 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d146      	bne.n	8003d38 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003caa:	f7ff fe17 	bl	80038dc <LL_RCC_MSI_IsReady>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x54>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e365      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003cc4:	f7ff fe2f 	bl	8003926 <LL_RCC_MSI_GetRange>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	429c      	cmp	r4, r3
 8003ccc:	d914      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 fd44 	bl	8004760 <RCC_SetFlashLatencyFromMSIRange>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e354      	b.n	800438c <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fe09 	bl	80038fe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f7ff fe2d 	bl	8003950 <LL_RCC_MSI_SetCalibTrimming>
 8003cf6:	e013      	b.n	8003d20 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fdfe 	bl	80038fe <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fe22 	bl	8003950 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 fd25 	bl	8004760 <RCC_SetFlashLatencyFromMSIRange>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e335      	b.n	800438c <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8003d20:	f7fd f8e8 	bl	8000ef4 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d24:	4bb4      	ldr	r3, [pc, #720]	; (8003ff8 <HAL_RCC_OscConfig+0x38c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fd f9dd 	bl	80010e8 <HAL_InitTick>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d039      	beq.n	8003da8 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e329      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01e      	beq.n	8003d7e <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d40:	f7ff fdae 	bl	80038a0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d44:	f7fd fa1e 	bl	8001184 <HAL_GetTick>
 8003d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d4c:	f7fd fa1a 	bl	8001184 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e316      	b.n	800438c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003d5e:	f7ff fdbd 	bl	80038dc <LL_RCC_MSI_IsReady>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d0f1      	beq.n	8003d4c <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fdc6 	bl	80038fe <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fdea 	bl	8003950 <LL_RCC_MSI_SetCalibTrimming>
 8003d7c:	e015      	b.n	8003daa <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d7e:	f7ff fd9e 	bl	80038be <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d82:	f7fd f9ff 	bl	8001184 <HAL_GetTick>
 8003d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d8a:	f7fd f9fb 	bl	8001184 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e2f7      	b.n	800438c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d9c:	f7ff fd9e 	bl	80038dc <LL_RCC_MSI_IsReady>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f1      	bne.n	8003d8a <HAL_RCC_OscConfig+0x11e>
 8003da6:	e000      	b.n	8003daa <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003da8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d05a      	beq.n	8003e6c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003db6:	f7ff fdf4 	bl	80039a2 <LL_RCC_GetSysClkSource>
 8003dba:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dbc:	f7ff feed 	bl	8003b9a <LL_RCC_PLL_GetMainSource>
 8003dc0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d005      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x168>
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	d10d      	bne.n	8003dea <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d10a      	bne.n	8003dea <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd4:	f7ff fc04 	bl	80035e0 <LL_RCC_HSE_IsReady>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d045      	beq.n	8003e6a <HAL_RCC_OscConfig+0x1fe>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d141      	bne.n	8003e6a <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e2d0      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df2:	d102      	bne.n	8003dfa <HAL_RCC_OscConfig+0x18e>
 8003df4:	f7ff fbd6 	bl	80035a4 <LL_RCC_HSE_Enable>
 8003df8:	e00d      	b.n	8003e16 <HAL_RCC_OscConfig+0x1aa>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e02:	d104      	bne.n	8003e0e <HAL_RCC_OscConfig+0x1a2>
 8003e04:	f7ff fbb0 	bl	8003568 <LL_RCC_HSE_EnableBypass>
 8003e08:	f7ff fbcc 	bl	80035a4 <LL_RCC_HSE_Enable>
 8003e0c:	e003      	b.n	8003e16 <HAL_RCC_OscConfig+0x1aa>
 8003e0e:	f7ff fbd8 	bl	80035c2 <LL_RCC_HSE_Disable>
 8003e12:	f7ff fbb8 	bl	8003586 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d012      	beq.n	8003e44 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fd f9b1 	bl	8001184 <HAL_GetTick>
 8003e22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e26:	f7fd f9ad 	bl	8001184 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b64      	cmp	r3, #100	; 0x64
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e2a9      	b.n	800438c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003e38:	f7ff fbd2 	bl	80035e0 <LL_RCC_HSE_IsReady>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f1      	beq.n	8003e26 <HAL_RCC_OscConfig+0x1ba>
 8003e42:	e013      	b.n	8003e6c <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fd f99e 	bl	8001184 <HAL_GetTick>
 8003e48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e4c:	f7fd f99a 	bl	8001184 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b64      	cmp	r3, #100	; 0x64
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e296      	b.n	800438c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003e5e:	f7ff fbbf 	bl	80035e0 <LL_RCC_HSE_IsReady>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f1      	bne.n	8003e4c <HAL_RCC_OscConfig+0x1e0>
 8003e68:	e000      	b.n	8003e6c <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d051      	beq.n	8003f1c <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e78:	f7ff fd93 	bl	80039a2 <LL_RCC_GetSysClkSource>
 8003e7c:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e7e:	f7ff fe8c 	bl	8003b9a <LL_RCC_PLL_GetMainSource>
 8003e82:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d005      	beq.n	8003e96 <HAL_RCC_OscConfig+0x22a>
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	2b0c      	cmp	r3, #12
 8003e8e:	d113      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d110      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e96:	f7ff fbd3 	bl	8003640 <LL_RCC_HSI_IsReady>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_OscConfig+0x240>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e26f      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff fbd7 	bl	8003664 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eb6:	e031      	b.n	8003f1c <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d019      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ec0:	f7ff fba0 	bl	8003604 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec4:	f7fd f95e 	bl	8001184 <HAL_GetTick>
 8003ec8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ecc:	f7fd f95a 	bl	8001184 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e256      	b.n	800438c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003ede:	f7ff fbaf 	bl	8003640 <LL_RCC_HSI_IsReady>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0f1      	beq.n	8003ecc <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff fbb9 	bl	8003664 <LL_RCC_HSI_SetCalibTrimming>
 8003ef2:	e013      	b.n	8003f1c <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ef4:	f7ff fb95 	bl	8003622 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fd f944 	bl	8001184 <HAL_GetTick>
 8003efc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f00:	f7fd f940 	bl	8001184 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e23c      	b.n	800438c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003f12:	f7ff fb95 	bl	8003640 <LL_RCC_HSI_IsReady>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1f1      	bne.n	8003f00 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0308 	and.w	r3, r3, #8
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d106      	bne.n	8003f36 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80a2 	beq.w	800407a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d075      	beq.n	800402a <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d046      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003f4a:	f7ff fc4c 	bl	80037e6 <LL_RCC_LSI1_IsReady>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d113      	bne.n	8003f7c <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003f54:	f7ff fc25 	bl	80037a2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f58:	f7fd f914 	bl	8001184 <HAL_GetTick>
 8003f5c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f60:	f7fd f910 	bl	8001184 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e20c      	b.n	800438c <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003f72:	f7ff fc38 	bl	80037e6 <LL_RCC_LSI1_IsReady>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f1      	beq.n	8003f60 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003f7c:	f7ff fc45 	bl	800380a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f80:	f7fd f900 	bl	8001184 <HAL_GetTick>
 8003f84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003f88:	f7fd f8fc 	bl	8001184 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e1f8      	b.n	800438c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003f9a:	f7ff fc58 	bl	800384e <LL_RCC_LSI2_IsReady>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f1      	beq.n	8003f88 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fc62 	bl	8003872 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003fae:	f7ff fc09 	bl	80037c4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb2:	f7fd f8e7 	bl	8001184 <HAL_GetTick>
 8003fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003fba:	f7fd f8e3 	bl	8001184 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e1df      	b.n	800438c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003fcc:	f7ff fc0b 	bl	80037e6 <LL_RCC_LSI1_IsReady>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f1      	bne.n	8003fba <HAL_RCC_OscConfig+0x34e>
 8003fd6:	e050      	b.n	800407a <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003fd8:	f7ff fbe3 	bl	80037a2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fdc:	f7fd f8d2 	bl	8001184 <HAL_GetTick>
 8003fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003fe2:	e00b      	b.n	8003ffc <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003fe4:	f7fd f8ce 	bl	8001184 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d904      	bls.n	8003ffc <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1ca      	b.n	800438c <HAL_RCC_OscConfig+0x720>
 8003ff6:	bf00      	nop
 8003ff8:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003ffc:	f7ff fbf3 	bl	80037e6 <LL_RCC_LSI1_IsReady>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0ee      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004006:	f7ff fc11 	bl	800382c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800400c:	f7fd f8ba 	bl	8001184 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b03      	cmp	r3, #3
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e1b6      	b.n	800438c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800401e:	f7ff fc16 	bl	800384e <LL_RCC_LSI2_IsReady>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1f1      	bne.n	800400c <HAL_RCC_OscConfig+0x3a0>
 8004028:	e027      	b.n	800407a <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800402a:	f7ff fbff 	bl	800382c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402e:	f7fd f8a9 	bl	8001184 <HAL_GetTick>
 8004032:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004036:	f7fd f8a5 	bl	8001184 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b03      	cmp	r3, #3
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e1a1      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004048:	f7ff fc01 	bl	800384e <LL_RCC_LSI2_IsReady>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f1      	bne.n	8004036 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004052:	f7ff fbb7 	bl	80037c4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7fd f895 	bl	8001184 <HAL_GetTick>
 800405a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800405e:	f7fd f891 	bl	8001184 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e18d      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004070:	f7ff fbb9 	bl	80037e6 <LL_RCC_LSI1_IsReady>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f1      	bne.n	800405e <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d05b      	beq.n	800413e <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004086:	4bb5      	ldr	r3, [pc, #724]	; (800435c <HAL_RCC_OscConfig+0x6f0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d114      	bne.n	80040bc <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004092:	f7ff fa39 	bl	8003508 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004096:	f7fd f875 	bl	8001184 <HAL_GetTick>
 800409a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800409c:	e008      	b.n	80040b0 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800409e:	f7fd f871 	bl	8001184 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e16d      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b0:	4baa      	ldr	r3, [pc, #680]	; (800435c <HAL_RCC_OscConfig+0x6f0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0f0      	beq.n	800409e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d102      	bne.n	80040ca <HAL_RCC_OscConfig+0x45e>
 80040c4:	f7ff fb17 	bl	80036f6 <LL_RCC_LSE_Enable>
 80040c8:	e00c      	b.n	80040e4 <HAL_RCC_OscConfig+0x478>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b05      	cmp	r3, #5
 80040d0:	d104      	bne.n	80040dc <HAL_RCC_OscConfig+0x470>
 80040d2:	f7ff fb32 	bl	800373a <LL_RCC_LSE_EnableBypass>
 80040d6:	f7ff fb0e 	bl	80036f6 <LL_RCC_LSE_Enable>
 80040da:	e003      	b.n	80040e4 <HAL_RCC_OscConfig+0x478>
 80040dc:	f7ff fb1c 	bl	8003718 <LL_RCC_LSE_Disable>
 80040e0:	f7ff fb3c 	bl	800375c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d014      	beq.n	8004116 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fd f84a 	bl	8001184 <HAL_GetTick>
 80040f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80040f2:	e00a      	b.n	800410a <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fd f846 	bl	8001184 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e140      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 800410a:	f7ff fb38 	bl	800377e <LL_RCC_LSE_IsReady>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ef      	beq.n	80040f4 <HAL_RCC_OscConfig+0x488>
 8004114:	e013      	b.n	800413e <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004116:	f7fd f835 	bl	8001184 <HAL_GetTick>
 800411a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fd f831 	bl	8001184 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e12b      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004134:	f7ff fb23 	bl	800377e <LL_RCC_LSE_IsReady>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1ef      	bne.n	800411e <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004146:	2b00      	cmp	r3, #0
 8004148:	d02c      	beq.n	80041a4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	2b00      	cmp	r3, #0
 8004150:	d014      	beq.n	800417c <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004152:	f7ff fa9c 	bl	800368e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fd f815 	bl	8001184 <HAL_GetTick>
 800415a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800415e:	f7fd f811 	bl	8001184 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e10d      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004170:	f7ff faaf 	bl	80036d2 <LL_RCC_HSI48_IsReady>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d0f1      	beq.n	800415e <HAL_RCC_OscConfig+0x4f2>
 800417a:	e013      	b.n	80041a4 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800417c:	f7ff fa98 	bl	80036b0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7fd f800 	bl	8001184 <HAL_GetTick>
 8004184:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004186:	e008      	b.n	800419a <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004188:	f7fc fffc 	bl	8001184 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	2b02      	cmp	r3, #2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0f8      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800419a:	f7ff fa9a 	bl	80036d2 <LL_RCC_HSI48_IsReady>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1f1      	bne.n	8004188 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 80ee 	beq.w	800438a <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ae:	f7ff fbf8 	bl	80039a2 <LL_RCC_GetSysClkSource>
 80041b2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80041b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	f040 80af 	bne.w	8004324 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 0203 	and.w	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d123      	bne.n	800421c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d11c      	bne.n	800421c <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	0a1b      	lsrs	r3, r3, #8
 80041e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d114      	bne.n	800421c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d10d      	bne.n	800421c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d106      	bne.n	800421c <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d05d      	beq.n	80042d8 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d058      	beq.n	80042d4 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0ab      	b.n	800438c <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004234:	f7ff fc6b 	bl	8003b0e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004238:	f7fc ffa4 	bl	8001184 <HAL_GetTick>
 800423c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004240:	f7fc ffa0 	bl	8001184 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e09c      	b.n	800438c <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004252:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ef      	bne.n	8004240 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <HAL_RCC_OscConfig+0x6f4>)
 8004268:	4013      	ands	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004272:	4311      	orrs	r1, r2
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004278:	0212      	lsls	r2, r2, #8
 800427a:	4311      	orrs	r1, r2
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004280:	4311      	orrs	r1, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004286:	4311      	orrs	r1, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800428c:	430a      	orrs	r2, r1
 800428e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004292:	4313      	orrs	r3, r2
 8004294:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004296:	f7ff fc2b 	bl	8003af0 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800429a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042aa:	f7fc ff6b 	bl	8001184 <HAL_GetTick>
 80042ae:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fc ff67 	bl	8001184 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e063      	b.n	800438c <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ef      	beq.n	80042b2 <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042d2:	e05a      	b.n	800438a <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e059      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d151      	bne.n	800438a <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042e6:	f7ff fc03 	bl	8003af0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042fa:	f7fc ff43 	bl	8001184 <HAL_GetTick>
 80042fe:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004302:	f7fc ff3f 	bl	8001184 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e03b      	b.n	800438c <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0ef      	beq.n	8004302 <HAL_RCC_OscConfig+0x696>
 8004322:	e032      	b.n	800438a <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b0c      	cmp	r3, #12
 8004328:	d02d      	beq.n	8004386 <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800432a:	f7ff fbf0 	bl	8003b0e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800432e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004338:	f023 0303 	bic.w	r3, r3, #3
 800433c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800433e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004348:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800434c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004350:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7fc ff17 	bl	8001184 <HAL_GetTick>
 8004356:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004358:	e00d      	b.n	8004376 <HAL_RCC_OscConfig+0x70a>
 800435a:	bf00      	nop
 800435c:	58000400 	.word	0x58000400
 8004360:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004364:	f7fc ff0e 	bl	8001184 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e00a      	b.n	800438c <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1ef      	bne.n	8004364 <HAL_RCC_OscConfig+0x6f8>
 8004384:	e001      	b.n	800438a <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3734      	adds	r7, #52	; 0x34
 8004390:	46bd      	mov	sp, r7
 8004392:	bd90      	pop	{r4, r7, pc}

08004394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e12a      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043a8:	4b97      	ldr	r3, [pc, #604]	; (8004608 <HAL_RCC_ClockConfig+0x274>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	683a      	ldr	r2, [r7, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d91b      	bls.n	80043ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b6:	4b94      	ldr	r3, [pc, #592]	; (8004608 <HAL_RCC_ClockConfig+0x274>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 0207 	bic.w	r2, r3, #7
 80043be:	4992      	ldr	r1, [pc, #584]	; (8004608 <HAL_RCC_ClockConfig+0x274>)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c6:	f7fc fedd 	bl	8001184 <HAL_GetTick>
 80043ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80043ce:	f7fc fed9 	bl	8001184 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e10e      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e0:	4b89      	ldr	r3, [pc, #548]	; (8004608 <HAL_RCC_ClockConfig+0x274>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d1ef      	bne.n	80043ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d016      	beq.n	8004428 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	4618      	mov	r0, r3
 8004400:	f7ff fadb 	bl	80039ba <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004404:	f7fc febe 	bl	8001184 <HAL_GetTick>
 8004408:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800440c:	f7fc feba 	bl	8001184 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0ef      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800441e:	f7ff fbc8 	bl	8003bb2 <LL_RCC_IsActiveFlag_HPRE>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f1      	beq.n	800440c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d016      	beq.n	8004462 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fad2 	bl	80039e2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800443e:	f7fc fea1 	bl	8001184 <HAL_GetTick>
 8004442:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004444:	e008      	b.n	8004458 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004446:	f7fc fe9d 	bl	8001184 <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e0d2      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004458:	f7ff fbbd 	bl	8003bd6 <LL_RCC_IsActiveFlag_C2HPRE>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f1      	beq.n	8004446 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d016      	beq.n	800449c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff facb 	bl	8003a0e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004478:	f7fc fe84 	bl	8001184 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004480:	f7fc fe80 	bl	8001184 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e0b5      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004492:	f7ff fbb3 	bl	8003bfc <LL_RCC_IsActiveFlag_SHDHPRE>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0f1      	beq.n	8004480 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d016      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fac5 	bl	8003a3c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044b2:	f7fc fe67 	bl	8001184 <HAL_GetTick>
 80044b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044ba:	f7fc fe63 	bl	8001184 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e098      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80044cc:	f7ff fba9 	bl	8003c22 <LL_RCC_IsActiveFlag_PPRE1>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f1      	beq.n	80044ba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d017      	beq.n	8004512 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fabb 	bl	8003a64 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80044ee:	f7fc fe49 	bl	8001184 <HAL_GetTick>
 80044f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80044f6:	f7fc fe45 	bl	8001184 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e07a      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004508:	f7ff fb9d 	bl	8003c46 <LL_RCC_IsActiveFlag_PPRE2>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f1      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d043      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d106      	bne.n	8004534 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004526:	f7ff f85b 	bl	80035e0 <LL_RCC_HSE_IsReady>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d11e      	bne.n	800456e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e064      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b03      	cmp	r3, #3
 800453a:	d106      	bne.n	800454a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800453c:	f7ff faf6 	bl	8003b2c <LL_RCC_PLL_IsReady>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d113      	bne.n	800456e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e059      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004552:	f7ff f9c3 	bl	80038dc <LL_RCC_MSI_IsReady>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d108      	bne.n	800456e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e04e      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004560:	f7ff f86e 	bl	8003640 <LL_RCC_HSI_IsReady>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e047      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff fa01 	bl	800397a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004578:	f7fc fe04 	bl	8001184 <HAL_GetTick>
 800457c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457e:	e00a      	b.n	8004596 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004580:	f7fc fe00 	bl	8001184 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f241 3288 	movw	r2, #5000	; 0x1388
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e033      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004596:	f7ff fa04 	bl	80039a2 <LL_RCC_GetSysClkSource>
 800459a:	4602      	mov	r2, r0
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d1ec      	bne.n	8004580 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045a6:	4b18      	ldr	r3, [pc, #96]	; (8004608 <HAL_RCC_ClockConfig+0x274>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d21b      	bcs.n	80045ec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b4:	4b14      	ldr	r3, [pc, #80]	; (8004608 <HAL_RCC_ClockConfig+0x274>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 0207 	bic.w	r2, r3, #7
 80045bc:	4912      	ldr	r1, [pc, #72]	; (8004608 <HAL_RCC_ClockConfig+0x274>)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045c4:	f7fc fdde 	bl	8001184 <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	e008      	b.n	80045de <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80045cc:	f7fc fdda 	bl	8001184 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e00f      	b.n	80045fe <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <HAL_RCC_ClockConfig+0x274>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d1ef      	bne.n	80045cc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80045ec:	f7fc fc82 	bl	8000ef4 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80045f0:	f7fc fdd4 	bl	800119c <HAL_GetTickPrio>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7fc fd76 	bl	80010e8 <HAL_InitTick>
 80045fc:	4603      	mov	r3, r0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3710      	adds	r7, #16
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	58004000 	.word	0x58004000

0800460c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800460c:	b590      	push	{r4, r7, lr}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004612:	f7ff f9c6 	bl	80039a2 <LL_RCC_GetSysClkSource>
 8004616:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800461e:	f7ff f982 	bl	8003926 <LL_RCC_MSI_GetRange>
 8004622:	4603      	mov	r3, r0
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	4a2a      	ldr	r2, [pc, #168]	; (80046d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800462c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e04a      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b04      	cmp	r3, #4
 8004638:	d102      	bne.n	8004640 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800463a:	4b27      	ldr	r3, [pc, #156]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800463c:	60fb      	str	r3, [r7, #12]
 800463e:	e044      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2b08      	cmp	r3, #8
 8004644:	d10a      	bne.n	800465c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004646:	f7fe ff7d 	bl	8003544 <LL_RCC_HSE_IsEnabledDiv2>
 800464a:	4603      	mov	r3, r0
 800464c:	2b01      	cmp	r3, #1
 800464e:	d102      	bne.n	8004656 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004650:	4b21      	ldr	r3, [pc, #132]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	e039      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004656:	4b21      	ldr	r3, [pc, #132]	; (80046dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	e036      	b.n	80046ca <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800465c:	f7ff fa9d 	bl	8003b9a <LL_RCC_PLL_GetMainSource>
 8004660:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d002      	beq.n	800466e <HAL_RCC_GetSysClockFreq+0x62>
 8004668:	2b03      	cmp	r3, #3
 800466a:	d003      	beq.n	8004674 <HAL_RCC_GetSysClockFreq+0x68>
 800466c:	e00d      	b.n	800468a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800466e:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004670:	60bb      	str	r3, [r7, #8]
        break;
 8004672:	e015      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004674:	f7fe ff66 	bl	8003544 <LL_RCC_HSE_IsEnabledDiv2>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d102      	bne.n	8004684 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800467e:	4b16      	ldr	r3, [pc, #88]	; (80046d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004680:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004682:	e00d      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8004684:	4b15      	ldr	r3, [pc, #84]	; (80046dc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004686:	60bb      	str	r3, [r7, #8]
        break;
 8004688:	e00a      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800468a:	f7ff f94c 	bl	8003926 <LL_RCC_MSI_GetRange>
 800468e:	4603      	mov	r3, r0
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	4a0f      	ldr	r2, [pc, #60]	; (80046d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004698:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469c:	60bb      	str	r3, [r7, #8]
        break;
 800469e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80046a0:	f7ff fa56 	bl	8003b50 <LL_RCC_PLL_GetN>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	fb03 f402 	mul.w	r4, r3, r2
 80046ac:	f7ff fa69 	bl	8003b82 <LL_RCC_PLL_GetDivider>
 80046b0:	4603      	mov	r3, r0
 80046b2:	091b      	lsrs	r3, r3, #4
 80046b4:	3301      	adds	r3, #1
 80046b6:	fbb4 f4f3 	udiv	r4, r4, r3
 80046ba:	f7ff fa56 	bl	8003b6a <LL_RCC_PLL_GetR>
 80046be:	4603      	mov	r3, r0
 80046c0:	0f5b      	lsrs	r3, r3, #29
 80046c2:	3301      	adds	r3, #1
 80046c4:	fbb4 f3f3 	udiv	r3, r4, r3
 80046c8:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80046ca:	68fb      	ldr	r3, [r7, #12]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd90      	pop	{r4, r7, pc}
 80046d4:	08006a70 	.word	0x08006a70
 80046d8:	00f42400 	.word	0x00f42400
 80046dc:	01e84800 	.word	0x01e84800

080046e0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e0:	b598      	push	{r3, r4, r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80046e4:	f7ff ff92 	bl	800460c <HAL_RCC_GetSysClockFreq>
 80046e8:	4604      	mov	r4, r0
 80046ea:	f7ff f9cf 	bl	8003a8c <LL_RCC_GetAHBPrescaler>
 80046ee:	4603      	mov	r3, r0
 80046f0:	091b      	lsrs	r3, r3, #4
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	4a03      	ldr	r2, [pc, #12]	; (8004704 <HAL_RCC_GetHCLKFreq+0x24>)
 80046f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046fc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	bd98      	pop	{r3, r4, r7, pc}
 8004704:	08006a10 	.word	0x08006a10

08004708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004708:	b598      	push	{r3, r4, r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800470c:	f7ff ffe8 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8004710:	4604      	mov	r4, r0
 8004712:	f7ff f9d5 	bl	8003ac0 <LL_RCC_GetAPB1Prescaler>
 8004716:	4603      	mov	r3, r0
 8004718:	0a1b      	lsrs	r3, r3, #8
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	4a04      	ldr	r2, [pc, #16]	; (8004730 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	fa24 f303 	lsr.w	r3, r4, r3
}
 800472c:	4618      	mov	r0, r3
 800472e:	bd98      	pop	{r3, r4, r7, pc}
 8004730:	08006a50 	.word	0x08006a50

08004734 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004734:	b598      	push	{r3, r4, r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004738:	f7ff ffd2 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 800473c:	4604      	mov	r4, r0
 800473e:	f7ff f9cb 	bl	8003ad8 <LL_RCC_GetAPB2Prescaler>
 8004742:	4603      	mov	r3, r0
 8004744:	0adb      	lsrs	r3, r3, #11
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	4a04      	ldr	r2, [pc, #16]	; (800475c <HAL_RCC_GetPCLK2Freq+0x28>)
 800474c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004758:	4618      	mov	r0, r3
 800475a:	bd98      	pop	{r3, r4, r7, pc}
 800475c:	08006a50 	.word	0x08006a50

08004760 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004760:	b590      	push	{r4, r7, lr}
 8004762:	b085      	sub	sp, #20
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2bb0      	cmp	r3, #176	; 0xb0
 800476c:	d903      	bls.n	8004776 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800476e:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e007      	b.n	8004786 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	4a11      	ldr	r2, [pc, #68]	; (80047c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004784:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004786:	f7ff f98d 	bl	8003aa4 <LL_RCC_GetAHB4Prescaler>
 800478a:	4603      	mov	r3, r0
 800478c:	091b      	lsrs	r3, r3, #4
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	4a0d      	ldr	r2, [pc, #52]	; (80047c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	fbb2 f3f3 	udiv	r3, r2, r3
 800479e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4a0a      	ldr	r2, [pc, #40]	; (80047cc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	0c9c      	lsrs	r4, r3, #18
 80047aa:	f7fe febd 	bl	8003528 <HAL_PWREx_GetVoltageRange>
 80047ae:	4603      	mov	r3, r0
 80047b0:	4619      	mov	r1, r3
 80047b2:	4620      	mov	r0, r4
 80047b4:	f000 f80c 	bl	80047d0 <RCC_SetFlashLatency>
 80047b8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd90      	pop	{r4, r7, pc}
 80047c2:	bf00      	nop
 80047c4:	08006a70 	.word	0x08006a70
 80047c8:	08006a10 	.word	0x08006a10
 80047cc:	431bde83 	.word	0x431bde83

080047d0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b093      	sub	sp, #76	; 0x4c
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80047da:	4b39      	ldr	r3, [pc, #228]	; (80048c0 <RCC_SetFlashLatency+0xf0>)
 80047dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80047e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80047e6:	4a37      	ldr	r2, [pc, #220]	; (80048c4 <RCC_SetFlashLatency+0xf4>)
 80047e8:	f107 031c 	add.w	r3, r7, #28
 80047ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80047ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80047f2:	4b35      	ldr	r3, [pc, #212]	; (80048c8 <RCC_SetFlashLatency+0xf8>)
 80047f4:	f107 040c 	add.w	r4, r7, #12
 80047f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80047fe:	2300      	movs	r3, #0
 8004800:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004808:	d11c      	bne.n	8004844 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800480a:	2300      	movs	r3, #0
 800480c:	643b      	str	r3, [r7, #64]	; 0x40
 800480e:	e015      	b.n	800483c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004818:	4413      	add	r3, r2
 800481a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d808      	bhi.n	8004836 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800482c:	4413      	add	r3, r2
 800482e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004832:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004834:	e022      	b.n	800487c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004838:	3301      	adds	r3, #1
 800483a:	643b      	str	r3, [r7, #64]	; 0x40
 800483c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800483e:	2b03      	cmp	r3, #3
 8004840:	d9e6      	bls.n	8004810 <RCC_SetFlashLatency+0x40>
 8004842:	e01b      	b.n	800487c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004844:	2300      	movs	r3, #0
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004848:	e015      	b.n	8004876 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800484a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004852:	4413      	add	r3, r2
 8004854:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	429a      	cmp	r2, r3
 800485c:	d808      	bhi.n	8004870 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800485e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004866:	4413      	add	r3, r2
 8004868:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800486c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800486e:	e005      	b.n	800487c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004872:	3301      	adds	r3, #1
 8004874:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004878:	2b02      	cmp	r3, #2
 800487a:	d9e6      	bls.n	800484a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800487c:	4b13      	ldr	r3, [pc, #76]	; (80048cc <RCC_SetFlashLatency+0xfc>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f023 0207 	bic.w	r2, r3, #7
 8004884:	4911      	ldr	r1, [pc, #68]	; (80048cc <RCC_SetFlashLatency+0xfc>)
 8004886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004888:	4313      	orrs	r3, r2
 800488a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800488c:	f7fc fc7a 	bl	8001184 <HAL_GetTick>
 8004890:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004892:	e008      	b.n	80048a6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004894:	f7fc fc76 	bl	8001184 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e007      	b.n	80048b6 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <RCC_SetFlashLatency+0xfc>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0307 	and.w	r3, r3, #7
 80048ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d1ef      	bne.n	8004894 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	374c      	adds	r7, #76	; 0x4c
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd90      	pop	{r4, r7, pc}
 80048be:	bf00      	nop
 80048c0:	080069d4 	.word	0x080069d4
 80048c4:	080069e4 	.word	0x080069e4
 80048c8:	080069f0 	.word	0x080069f0
 80048cc:	58004000 	.word	0x58004000

080048d0 <LL_RCC_LSE_IsEnabled>:
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80048d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <LL_RCC_LSE_IsEnabled+0x18>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <LL_RCC_LSE_IsEnabled+0x1a>
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <LL_RCC_LSE_IsReady>:
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80048f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b02      	cmp	r3, #2
 8004906:	d101      	bne.n	800490c <LL_RCC_LSE_IsReady+0x18>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <LL_RCC_LSE_IsReady+0x1a>
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <LL_RCC_SetRFWKPClockSource>:
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004928:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800492c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <LL_RCC_SetSMPSClockSource>:
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800494c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	f023 0203 	bic.w	r2, r3, #3
 8004956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4313      	orrs	r3, r2
 800495e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <LL_RCC_SetSMPSPrescaler>:
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800497e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4313      	orrs	r3, r2
 8004986:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <LL_RCC_SetUSARTClockSource>:
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800499c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a4:	f023 0203 	bic.w	r2, r3, #3
 80049a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <LL_RCC_SetLPUARTClockSource>:
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80049c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4313      	orrs	r3, r2
 80049dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_RCC_SetI2CClockSource>:
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80049f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a04:	43db      	mvns	r3, r3
 8004a06:	401a      	ands	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	011b      	lsls	r3, r3, #4
 8004a0c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <LL_RCC_SetLPTIMClockSource>:
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a32:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	041b      	lsls	r3, r3, #16
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	401a      	ands	r2, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <LL_RCC_SetSAIClockSource>:
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8004a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a7a:	bf00      	nop
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <LL_RCC_SetRNGClockSource>:
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a96:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <LL_RCC_SetCLK48ClockSource>:
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8004aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ac6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <LL_RCC_SetUSBClockSource>:
{
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b082      	sub	sp, #8
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff ffe3 	bl	8004ab2 <LL_RCC_SetCLK48ClockSource>
}
 8004aec:	bf00      	nop
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <LL_RCC_SetADCClockSource>:
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b04:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <LL_RCC_SetRTCClockSource>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004b28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <LL_RCC_GetRTCClockSource>:
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <LL_RCC_ForceBackupDomainReset>:
{
 8004b66:	b480      	push	{r7}
 8004b68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004b7e:	bf00      	nop
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004ba0:	bf00      	nop
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr

08004baa <LL_RCC_PLLSAI1_Enable>:
{
 8004baa:	b480      	push	{r7}
 8004bac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bb8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bbc:	6013      	str	r3, [r2, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <LL_RCC_PLLSAI1_Disable>:
{
 8004bc8:	b480      	push	{r7}
 8004bca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bda:	6013      	str	r3, [r2, #0]
}
 8004bdc:	bf00      	nop
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <LL_RCC_PLLSAI1_IsReady>:
{
 8004be6:	b480      	push	{r7}
 8004be8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bf8:	d101      	bne.n	8004bfe <LL_RCC_PLLSAI1_IsReady+0x18>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b088      	sub	sp, #32
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004c12:	2300      	movs	r3, #0
 8004c14:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004c16:	2300      	movs	r3, #0
 8004c18:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d033      	beq.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2e:	d00c      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004c30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c34:	d802      	bhi.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d010      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c3a:	e017      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004c3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c40:	d017      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004c42:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c46:	d016      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004c48:	e010      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c58:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004c5a:	e00d      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3304      	adds	r3, #4
 8004c60:	4618      	mov	r0, r3
 8004c62:	f000 f947 	bl	8004ef4 <RCCEx_PLLSAI1_ConfigNP>
 8004c66:	4603      	mov	r3, r0
 8004c68:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004c6a:	e005      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	77fb      	strb	r3, [r7, #31]
        break;
 8004c70:	e002      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004c72:	bf00      	nop
 8004c74:	e000      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c78:	7ffb      	ldrb	r3, [r7, #31]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d105      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff fee9 	bl	8004a5a <LL_RCC_SetSAIClockSource>
 8004c88:	e001      	b.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8a:	7ffb      	ldrb	r3, [r7, #31]
 8004c8c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d046      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004c9a:	f7ff ff57 	bl	8004b4c <LL_RCC_GetRTCClockSource>
 8004c9e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d03c      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004caa:	f7fe fc2d 	bl	8003508 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d105      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff ff31 	bl	8004b20 <LL_RCC_SetRTCClockSource>
 8004cbe:	e02e      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004cca:	f7ff ff4c 	bl	8004b66 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004cce:	f7ff ff5b 	bl	8004b88 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004ce0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004cea:	f7ff fdf1 	bl	80048d0 <LL_RCC_LSE_IsEnabled>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d114      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cf4:	f7fc fa46 	bl	8001184 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004cfa:	e00b      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fc fa42 	bl	8001184 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d902      	bls.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	77fb      	strb	r3, [r7, #31]
              break;
 8004d12:	e004      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004d14:	f7ff fdee 	bl	80048f4 <LL_RCC_LSE_IsReady>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d1ee      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004d1e:	7ffb      	ldrb	r3, [r7, #31]
 8004d20:	77bb      	strb	r3, [r7, #30]
 8004d22:	e001      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d24:	7ffb      	ldrb	r3, [r7, #31]
 8004d26:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d004      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7ff fe2b 	bl	8004994 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff fe36 	bl	80049c0 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0310 	and.w	r3, r3, #16
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d004      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7ff fe5e 	bl	8004a26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0320 	and.w	r3, r3, #32
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d004      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff fe53 	bl	8004a26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fe2b 	bl	80049ec <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0308 	and.w	r3, r3, #8
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d004      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff fe20 	bl	80049ec <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d022      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff fe8e 	bl	8004ade <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dca:	d107      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dda:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de4:	d10b      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 f8dd 	bl	8004faa <RCCEx_PLLSAI1_ConfigNQ>
 8004df0:	4603      	mov	r3, r0
 8004df2:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004df4:	7ffb      	ldrb	r3, [r7, #31]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8004dfa:	7ffb      	ldrb	r3, [r7, #31]
 8004dfc:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d02b      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e12:	d008      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e1c:	d003      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d105      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7ff fe2b 	bl	8004a86 <LL_RCC_SetRNGClockSource>
 8004e30:	e00a      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	60fb      	str	r3, [r7, #12]
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f7ff fe22 	bl	8004a86 <LL_RCC_SetRNGClockSource>
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7ff fe35 	bl	8004ab2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004e50:	d107      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e60:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d022      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fe3e 	bl	8004af4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e80:	d107      	bne.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e90:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e9a:	d10b      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 f8dd 	bl	8005060 <RCCEx_PLLSAI1_ConfigNR>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004eaa:	7ffb      	ldrb	r3, [r7, #31]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8004eb0:	7ffb      	ldrb	r3, [r7, #31]
 8004eb2:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d004      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff fd27 	bl	8004918 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d009      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fd46 	bl	800496c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fd2d 	bl	8004944 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8004eea:	7fbb      	ldrb	r3, [r7, #30]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3720      	adds	r7, #32
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004efc:	2300      	movs	r3, #0
 8004efe:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004f00:	f7ff fe62 	bl	8004bc8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004f04:	f7fc f93e 	bl	8001184 <HAL_GetTick>
 8004f08:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f0a:	e009      	b.n	8004f20 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f0c:	f7fc f93a 	bl	8001184 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d902      	bls.n	8004f20 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1e:	e004      	b.n	8004f2a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f20:	f7ff fe61 	bl	8004be6 <LL_RCC_PLLSAI1_IsReady>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1f0      	bne.n	8004f0c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d137      	bne.n	8004fa0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f44:	4313      	orrs	r3, r2
 8004f46:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004f5e:	f7ff fe24 	bl	8004baa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f62:	f7fc f90f 	bl	8001184 <HAL_GetTick>
 8004f66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f68:	e009      	b.n	8004f7e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f6a:	f7fc f90b 	bl	8001184 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d902      	bls.n	8004f7e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	73fb      	strb	r3, [r7, #15]
        break;
 8004f7c:	e004      	b.n	8004f88 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f7e:	f7ff fe32 	bl	8004be6 <LL_RCC_PLLSAI1_IsReady>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d1f0      	bne.n	8004f6a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d108      	bne.n	8004fa0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004fb6:	f7ff fe07 	bl	8004bc8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fba:	f7fc f8e3 	bl	8001184 <HAL_GetTick>
 8004fbe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fc0:	e009      	b.n	8004fd6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fc2:	f7fc f8df 	bl	8001184 <HAL_GetTick>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d902      	bls.n	8004fd6 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fd4:	e004      	b.n	8004fe0 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fd6:	f7ff fe06 	bl	8004be6 <LL_RCC_PLLSAI1_IsReady>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1f0      	bne.n	8004fc2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004fe0:	7bfb      	ldrb	r3, [r7, #15]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d137      	bne.n	8005056 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	021b      	lsls	r3, r3, #8
 8004ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005010:	4313      	orrs	r3, r2
 8005012:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005014:	f7ff fdc9 	bl	8004baa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005018:	f7fc f8b4 	bl	8001184 <HAL_GetTick>
 800501c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800501e:	e009      	b.n	8005034 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005020:	f7fc f8b0 	bl	8001184 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	2b02      	cmp	r3, #2
 800502c:	d902      	bls.n	8005034 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	73fb      	strb	r3, [r7, #15]
        break;
 8005032:	e004      	b.n	800503e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005034:	f7ff fdd7 	bl	8004be6 <LL_RCC_PLLSAI1_IsReady>
 8005038:	4603      	mov	r3, r0
 800503a:	2b01      	cmp	r3, #1
 800503c:	d1f0      	bne.n	8005020 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d108      	bne.n	8005056 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005052:	4313      	orrs	r3, r2
 8005054:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005056:	7bfb      	ldrb	r3, [r7, #15]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800506c:	f7ff fdac 	bl	8004bc8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005070:	f7fc f888 	bl	8001184 <HAL_GetTick>
 8005074:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005076:	e009      	b.n	800508c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005078:	f7fc f884 	bl	8001184 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d902      	bls.n	800508c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	73fb      	strb	r3, [r7, #15]
      break;
 800508a:	e004      	b.n	8005096 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800508c:	f7ff fdab 	bl	8004be6 <LL_RCC_PLLSAI1_IsReady>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005096:	7bfb      	ldrb	r3, [r7, #15]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d137      	bne.n	800510c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800509c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050b0:	4313      	orrs	r3, r2
 80050b2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80050b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050c6:	4313      	orrs	r3, r2
 80050c8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80050ca:	f7ff fd6e 	bl	8004baa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ce:	f7fc f859 	bl	8001184 <HAL_GetTick>
 80050d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80050d4:	e009      	b.n	80050ea <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050d6:	f7fc f855 	bl	8001184 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d902      	bls.n	80050ea <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	73fb      	strb	r3, [r7, #15]
        break;
 80050e8:	e004      	b.n	80050f4 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80050ea:	f7ff fd7c 	bl	8004be6 <LL_RCC_PLLSAI1_IsReady>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d1f0      	bne.n	80050d6 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80050f4:	7bfb      	ldrb	r3, [r7, #15]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d108      	bne.n	800510c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80050fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005108:	4313      	orrs	r3, r2
 800510a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800510c:	7bfb      	ldrb	r3, [r7, #15]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <LL_RCC_GetUSARTClockSource>:
{
 8005116:	b480      	push	{r7}
 8005118:	b083      	sub	sp, #12
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800511e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005122:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4013      	ands	r3, r2
}
 800512a:	4618      	mov	r0, r3
 800512c:	370c      	adds	r7, #12
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr

08005136 <LL_RCC_GetLPUARTClockSource>:
{
 8005136:	b480      	push	{r7}
 8005138:	b083      	sub	sp, #12
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800513e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005142:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4013      	ands	r3, r2
}
 800514a:	4618      	mov	r0, r3
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e042      	b.n	80051ee <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fb fcb4 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2224      	movs	r2, #36	; 0x24
 8005184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fa57 	bl	800564c <UART_SetConfig>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e022      	b.n	80051ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d002      	beq.n	80051b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fc59 	bl	8005a68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fce0 	bl	8005bac <UART_CheckIdleState>
 80051ec:	4603      	mov	r3, r0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b08a      	sub	sp, #40	; 0x28
 80051fa:	af02      	add	r7, sp, #8
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	603b      	str	r3, [r7, #0]
 8005202:	4613      	mov	r3, r2
 8005204:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800520c:	2b20      	cmp	r3, #32
 800520e:	f040 8083 	bne.w	8005318 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d002      	beq.n	800521e <HAL_UART_Transmit+0x28>
 8005218:	88fb      	ldrh	r3, [r7, #6]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e07b      	b.n	800531a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005228:	2b01      	cmp	r3, #1
 800522a:	d101      	bne.n	8005230 <HAL_UART_Transmit+0x3a>
 800522c:	2302      	movs	r3, #2
 800522e:	e074      	b.n	800531a <HAL_UART_Transmit+0x124>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2200      	movs	r2, #0
 800523c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2221      	movs	r2, #33	; 0x21
 8005244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005248:	f7fb ff9c 	bl	8001184 <HAL_GetTick>
 800524c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	88fa      	ldrh	r2, [r7, #6]
 8005252:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	88fa      	ldrh	r2, [r7, #6]
 800525a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005266:	d108      	bne.n	800527a <HAL_UART_Transmit+0x84>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005270:	2300      	movs	r3, #0
 8005272:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	61bb      	str	r3, [r7, #24]
 8005278:	e003      	b.n	8005282 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800528a:	e02c      	b.n	80052e6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	2200      	movs	r2, #0
 8005294:	2180      	movs	r1, #128	; 0x80
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fcd0 	bl	8005c3c <UART_WaitOnFlagUntilTimeout>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e039      	b.n	800531a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d10b      	bne.n	80052c4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	881b      	ldrh	r3, [r3, #0]
 80052b0:	461a      	mov	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	3302      	adds	r3, #2
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	e007      	b.n	80052d4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	781a      	ldrb	r2, [r3, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	3301      	adds	r3, #1
 80052d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b29a      	uxth	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1cc      	bne.n	800528c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2200      	movs	r2, #0
 80052fa:	2140      	movs	r1, #64	; 0x40
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 fc9d 	bl	8005c3c <UART_WaitOnFlagUntilTimeout>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e006      	b.n	800531a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2220      	movs	r2, #32
 8005310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	e000      	b.n	800531a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005318:	2302      	movs	r3, #2
  }
}
 800531a:	4618      	mov	r0, r3
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
	...

08005324 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b088      	sub	sp, #32
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005344:	69fa      	ldr	r2, [r7, #28]
 8005346:	f640 030f 	movw	r3, #2063	; 0x80f
 800534a:	4013      	ands	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d118      	bne.n	8005386 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f003 0320 	and.w	r3, r3, #32
 800535a:	2b00      	cmp	r3, #0
 800535c:	d013      	beq.n	8005386 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	f003 0320 	and.w	r3, r3, #32
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8145 	beq.w	8005606 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	4798      	blx	r3
      }
      return;
 8005384:	e13f      	b.n	8005606 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 80e8 	beq.w	800555e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4ba1      	ldr	r3, [pc, #644]	; (8005618 <HAL_UART_IRQHandler+0x2f4>)
 8005392:	4013      	ands	r3, r2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d105      	bne.n	80053a4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005398:	69ba      	ldr	r2, [r7, #24]
 800539a:	4ba0      	ldr	r3, [pc, #640]	; (800561c <HAL_UART_IRQHandler+0x2f8>)
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 80dd 	beq.w	800555e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053a4:	69fb      	ldr	r3, [r7, #28]
 80053a6:	f003 0301 	and.w	r3, r3, #1
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d010      	beq.n	80053d0 <HAL_UART_IRQHandler+0xac>
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00b      	beq.n	80053d0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2201      	movs	r2, #1
 80053be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	f043 0201 	orr.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d010      	beq.n	80053fc <HAL_UART_IRQHandler+0xd8>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00b      	beq.n	80053fc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2202      	movs	r2, #2
 80053ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f2:	f043 0204 	orr.w	r2, r3, #4
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f003 0304 	and.w	r3, r3, #4
 8005402:	2b00      	cmp	r3, #0
 8005404:	d010      	beq.n	8005428 <HAL_UART_IRQHandler+0x104>
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00b      	beq.n	8005428 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2204      	movs	r2, #4
 8005416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541e:	f043 0202 	orr.w	r2, r3, #2
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d015      	beq.n	800545e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d104      	bne.n	8005446 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4b76      	ldr	r3, [pc, #472]	; (8005618 <HAL_UART_IRQHandler+0x2f4>)
 8005440:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2208      	movs	r2, #8
 800544c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005454:	f043 0208 	orr.w	r2, r3, #8
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005464:	2b00      	cmp	r3, #0
 8005466:	d011      	beq.n	800548c <HAL_UART_IRQHandler+0x168>
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00c      	beq.n	800548c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800547a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005482:	f043 0220 	orr.w	r2, r3, #32
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80b9 	beq.w	800560a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	f003 0320 	and.w	r3, r3, #32
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d011      	beq.n	80054c6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	f003 0320 	and.w	r3, r3, #32
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d104      	bne.n	80054b6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d003      	beq.n	80054c6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d8:	2b40      	cmp	r3, #64	; 0x40
 80054da:	d004      	beq.n	80054e6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d031      	beq.n	800554a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fc28 	bl	8005d3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f6:	2b40      	cmp	r3, #64	; 0x40
 80054f8:	d123      	bne.n	8005542 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005508:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800550e:	2b00      	cmp	r3, #0
 8005510:	d013      	beq.n	800553a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005516:	4a42      	ldr	r2, [pc, #264]	; (8005620 <HAL_UART_IRQHandler+0x2fc>)
 8005518:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800551e:	4618      	mov	r0, r3
 8005520:	f7fc f87b 	bl	800161a <HAL_DMA_Abort_IT>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d017      	beq.n	800555a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800552e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8005534:	4610      	mov	r0, r2
 8005536:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005538:	e00f      	b.n	800555a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f87c 	bl	8005638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005540:	e00b      	b.n	800555a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f878 	bl	8005638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005548:	e007      	b.n	800555a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f874 	bl	8005638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8005558:	e057      	b.n	800560a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800555a:	bf00      	nop
    return;
 800555c:	e055      	b.n	800560a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00d      	beq.n	8005584 <HAL_UART_IRQHandler+0x260>
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d008      	beq.n	8005584 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800557a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 fc30 	bl	8005de2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005582:	e045      	b.n	8005610 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558a:	2b00      	cmp	r3, #0
 800558c:	d012      	beq.n	80055b4 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800558e:	69bb      	ldr	r3, [r7, #24]
 8005590:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005594:	2b00      	cmp	r3, #0
 8005596:	d104      	bne.n	80055a2 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d008      	beq.n	80055b4 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d031      	beq.n	800560e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	4798      	blx	r3
    }
    return;
 80055b2:	e02c      	b.n	800560e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <HAL_UART_IRQHandler+0x2ac>
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f000 fbf0 	bl	8005dae <UART_EndTransmit_IT>
    return;
 80055ce:	e01f      	b.n	8005610 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d008      	beq.n	80055ec <HAL_UART_IRQHandler+0x2c8>
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fc10 	bl	8005e0a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80055ea:	e011      	b.n	8005610 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_UART_IRQHandler+0x2ec>
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	da09      	bge.n	8005610 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fbfa 	bl	8005df6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005602:	bf00      	nop
 8005604:	e004      	b.n	8005610 <HAL_UART_IRQHandler+0x2ec>
      return;
 8005606:	bf00      	nop
 8005608:	e002      	b.n	8005610 <HAL_UART_IRQHandler+0x2ec>
    return;
 800560a:	bf00      	nop
 800560c:	e000      	b.n	8005610 <HAL_UART_IRQHandler+0x2ec>
    return;
 800560e:	bf00      	nop
  }
}
 8005610:	3720      	adds	r7, #32
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	10000001 	.word	0x10000001
 800561c:	04000120 	.word	0x04000120
 8005620:	08005d83 	.word	0x08005d83

08005624 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800564c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005650:	b088      	sub	sp, #32
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	431a      	orrs	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	4313      	orrs	r3, r2
 8005670:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	4313      	orrs	r3, r2
 800567a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	4ba4      	ldr	r3, [pc, #656]	; (8005914 <UART_SetConfig+0x2c8>)
 8005684:	4013      	ands	r3, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	69f9      	ldr	r1, [r7, #28]
 800568c:	430b      	orrs	r3, r1
 800568e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a99      	ldr	r2, [pc, #612]	; (8005918 <UART_SetConfig+0x2cc>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d004      	beq.n	80056c0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	69fa      	ldr	r2, [r7, #28]
 80056bc:	4313      	orrs	r3, r2
 80056be:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80056ca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6812      	ldr	r2, [r2, #0]
 80056d2:	69f9      	ldr	r1, [r7, #28]
 80056d4:	430b      	orrs	r3, r1
 80056d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	f023 010f 	bic.w	r1, r3, #15
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a8a      	ldr	r2, [pc, #552]	; (800591c <UART_SetConfig+0x2d0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d121      	bne.n	800573c <UART_SetConfig+0xf0>
 80056f8:	2003      	movs	r0, #3
 80056fa:	f7ff fd0c 	bl	8005116 <LL_RCC_GetUSARTClockSource>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b03      	cmp	r3, #3
 8005702:	d817      	bhi.n	8005734 <UART_SetConfig+0xe8>
 8005704:	a201      	add	r2, pc, #4	; (adr r2, 800570c <UART_SetConfig+0xc0>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	0800571d 	.word	0x0800571d
 8005710:	08005729 	.word	0x08005729
 8005714:	08005723 	.word	0x08005723
 8005718:	0800572f 	.word	0x0800572f
 800571c:	2301      	movs	r3, #1
 800571e:	76fb      	strb	r3, [r7, #27]
 8005720:	e038      	b.n	8005794 <UART_SetConfig+0x148>
 8005722:	2302      	movs	r3, #2
 8005724:	76fb      	strb	r3, [r7, #27]
 8005726:	e035      	b.n	8005794 <UART_SetConfig+0x148>
 8005728:	2304      	movs	r3, #4
 800572a:	76fb      	strb	r3, [r7, #27]
 800572c:	e032      	b.n	8005794 <UART_SetConfig+0x148>
 800572e:	2308      	movs	r3, #8
 8005730:	76fb      	strb	r3, [r7, #27]
 8005732:	e02f      	b.n	8005794 <UART_SetConfig+0x148>
 8005734:	2310      	movs	r3, #16
 8005736:	76fb      	strb	r3, [r7, #27]
 8005738:	bf00      	nop
 800573a:	e02b      	b.n	8005794 <UART_SetConfig+0x148>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a75      	ldr	r2, [pc, #468]	; (8005918 <UART_SetConfig+0x2cc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d124      	bne.n	8005790 <UART_SetConfig+0x144>
 8005746:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800574a:	f7ff fcf4 	bl	8005136 <LL_RCC_GetLPUARTClockSource>
 800574e:	4603      	mov	r3, r0
 8005750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005754:	d012      	beq.n	800577c <UART_SetConfig+0x130>
 8005756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800575a:	d802      	bhi.n	8005762 <UART_SetConfig+0x116>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d007      	beq.n	8005770 <UART_SetConfig+0x124>
 8005760:	e012      	b.n	8005788 <UART_SetConfig+0x13c>
 8005762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005766:	d006      	beq.n	8005776 <UART_SetConfig+0x12a>
 8005768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800576c:	d009      	beq.n	8005782 <UART_SetConfig+0x136>
 800576e:	e00b      	b.n	8005788 <UART_SetConfig+0x13c>
 8005770:	2300      	movs	r3, #0
 8005772:	76fb      	strb	r3, [r7, #27]
 8005774:	e00e      	b.n	8005794 <UART_SetConfig+0x148>
 8005776:	2302      	movs	r3, #2
 8005778:	76fb      	strb	r3, [r7, #27]
 800577a:	e00b      	b.n	8005794 <UART_SetConfig+0x148>
 800577c:	2304      	movs	r3, #4
 800577e:	76fb      	strb	r3, [r7, #27]
 8005780:	e008      	b.n	8005794 <UART_SetConfig+0x148>
 8005782:	2308      	movs	r3, #8
 8005784:	76fb      	strb	r3, [r7, #27]
 8005786:	e005      	b.n	8005794 <UART_SetConfig+0x148>
 8005788:	2310      	movs	r3, #16
 800578a:	76fb      	strb	r3, [r7, #27]
 800578c:	bf00      	nop
 800578e:	e001      	b.n	8005794 <UART_SetConfig+0x148>
 8005790:	2310      	movs	r3, #16
 8005792:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a5f      	ldr	r2, [pc, #380]	; (8005918 <UART_SetConfig+0x2cc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	f040 808e 	bne.w	80058bc <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057a0:	7efb      	ldrb	r3, [r7, #27]
 80057a2:	2b08      	cmp	r3, #8
 80057a4:	d823      	bhi.n	80057ee <UART_SetConfig+0x1a2>
 80057a6:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <UART_SetConfig+0x160>)
 80057a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ac:	080057d1 	.word	0x080057d1
 80057b0:	080057ef 	.word	0x080057ef
 80057b4:	080057d9 	.word	0x080057d9
 80057b8:	080057ef 	.word	0x080057ef
 80057bc:	080057df 	.word	0x080057df
 80057c0:	080057ef 	.word	0x080057ef
 80057c4:	080057ef 	.word	0x080057ef
 80057c8:	080057ef 	.word	0x080057ef
 80057cc:	080057e7 	.word	0x080057e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d0:	f7fe ff9a 	bl	8004708 <HAL_RCC_GetPCLK1Freq>
 80057d4:	6178      	str	r0, [r7, #20]
        break;
 80057d6:	e00f      	b.n	80057f8 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057d8:	4b51      	ldr	r3, [pc, #324]	; (8005920 <UART_SetConfig+0x2d4>)
 80057da:	617b      	str	r3, [r7, #20]
        break;
 80057dc:	e00c      	b.n	80057f8 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057de:	f7fe ff15 	bl	800460c <HAL_RCC_GetSysClockFreq>
 80057e2:	6178      	str	r0, [r7, #20]
        break;
 80057e4:	e008      	b.n	80057f8 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ea:	617b      	str	r3, [r7, #20]
        break;
 80057ec:	e004      	b.n	80057f8 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	76bb      	strb	r3, [r7, #26]
        break;
 80057f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 811c 	beq.w	8005a38 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	4a47      	ldr	r2, [pc, #284]	; (8005924 <UART_SetConfig+0x2d8>)
 8005806:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800580a:	461a      	mov	r2, r3
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005812:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	4413      	add	r3, r2
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	429a      	cmp	r2, r3
 8005822:	d305      	bcc.n	8005830 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	429a      	cmp	r2, r3
 800582e:	d902      	bls.n	8005836 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	76bb      	strb	r3, [r7, #26]
 8005834:	e100      	b.n	8005a38 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	4618      	mov	r0, r3
 800583a:	f04f 0100 	mov.w	r1, #0
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	4a38      	ldr	r2, [pc, #224]	; (8005924 <UART_SetConfig+0x2d8>)
 8005844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005848:	b29b      	uxth	r3, r3
 800584a:	f04f 0400 	mov.w	r4, #0
 800584e:	461a      	mov	r2, r3
 8005850:	4623      	mov	r3, r4
 8005852:	f7fa fc93 	bl	800017c <__aeabi_uldivmod>
 8005856:	4603      	mov	r3, r0
 8005858:	460c      	mov	r4, r1
 800585a:	4619      	mov	r1, r3
 800585c:	4622      	mov	r2, r4
 800585e:	f04f 0300 	mov.w	r3, #0
 8005862:	f04f 0400 	mov.w	r4, #0
 8005866:	0214      	lsls	r4, r2, #8
 8005868:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800586c:	020b      	lsls	r3, r1, #8
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	6852      	ldr	r2, [r2, #4]
 8005872:	0852      	lsrs	r2, r2, #1
 8005874:	4611      	mov	r1, r2
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	eb13 0b01 	adds.w	fp, r3, r1
 800587e:	eb44 0c02 	adc.w	ip, r4, r2
 8005882:	4658      	mov	r0, fp
 8005884:	4661      	mov	r1, ip
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f04f 0400 	mov.w	r4, #0
 800588e:	461a      	mov	r2, r3
 8005890:	4623      	mov	r3, r4
 8005892:	f7fa fc73 	bl	800017c <__aeabi_uldivmod>
 8005896:	4603      	mov	r3, r0
 8005898:	460c      	mov	r4, r1
 800589a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058a2:	d308      	bcc.n	80058b6 <UART_SetConfig+0x26a>
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058aa:	d204      	bcs.n	80058b6 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	60da      	str	r2, [r3, #12]
 80058b4:	e0c0      	b.n	8005a38 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	76bb      	strb	r3, [r7, #26]
 80058ba:	e0bd      	b.n	8005a38 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c4:	d169      	bne.n	800599a <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80058c6:	7efb      	ldrb	r3, [r7, #27]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	2b07      	cmp	r3, #7
 80058cc:	d82c      	bhi.n	8005928 <UART_SetConfig+0x2dc>
 80058ce:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <UART_SetConfig+0x288>)
 80058d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d4:	080058f5 	.word	0x080058f5
 80058d8:	080058fd 	.word	0x080058fd
 80058dc:	08005929 	.word	0x08005929
 80058e0:	08005903 	.word	0x08005903
 80058e4:	08005929 	.word	0x08005929
 80058e8:	08005929 	.word	0x08005929
 80058ec:	08005929 	.word	0x08005929
 80058f0:	0800590b 	.word	0x0800590b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058f4:	f7fe ff1e 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 80058f8:	6178      	str	r0, [r7, #20]
        break;
 80058fa:	e01a      	b.n	8005932 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058fc:	4b08      	ldr	r3, [pc, #32]	; (8005920 <UART_SetConfig+0x2d4>)
 80058fe:	617b      	str	r3, [r7, #20]
        break;
 8005900:	e017      	b.n	8005932 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005902:	f7fe fe83 	bl	800460c <HAL_RCC_GetSysClockFreq>
 8005906:	6178      	str	r0, [r7, #20]
        break;
 8005908:	e013      	b.n	8005932 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590e:	617b      	str	r3, [r7, #20]
        break;
 8005910:	e00f      	b.n	8005932 <UART_SetConfig+0x2e6>
 8005912:	bf00      	nop
 8005914:	cfff69f3 	.word	0xcfff69f3
 8005918:	40008000 	.word	0x40008000
 800591c:	40013800 	.word	0x40013800
 8005920:	00f42400 	.word	0x00f42400
 8005924:	08006ab0 	.word	0x08006ab0
      default:
        pclk = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	76bb      	strb	r3, [r7, #26]
        break;
 8005930:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d07f      	beq.n	8005a38 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	4a48      	ldr	r2, [pc, #288]	; (8005a60 <UART_SetConfig+0x414>)
 800593e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005942:	461a      	mov	r2, r3
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	fbb3 f3f2 	udiv	r3, r3, r2
 800594a:	005a      	lsls	r2, r3, #1
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	085b      	lsrs	r3, r3, #1
 8005952:	441a      	add	r2, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	fbb2 f3f3 	udiv	r3, r2, r3
 800595c:	b29b      	uxth	r3, r3
 800595e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	2b0f      	cmp	r3, #15
 8005964:	d916      	bls.n	8005994 <UART_SetConfig+0x348>
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596c:	d212      	bcs.n	8005994 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	b29b      	uxth	r3, r3
 8005972:	f023 030f 	bic.w	r3, r3, #15
 8005976:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	085b      	lsrs	r3, r3, #1
 800597c:	b29b      	uxth	r3, r3
 800597e:	f003 0307 	and.w	r3, r3, #7
 8005982:	b29a      	uxth	r2, r3
 8005984:	89fb      	ldrh	r3, [r7, #14]
 8005986:	4313      	orrs	r3, r2
 8005988:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	89fa      	ldrh	r2, [r7, #14]
 8005990:	60da      	str	r2, [r3, #12]
 8005992:	e051      	b.n	8005a38 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	76bb      	strb	r3, [r7, #26]
 8005998:	e04e      	b.n	8005a38 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800599a:	7efb      	ldrb	r3, [r7, #27]
 800599c:	3b01      	subs	r3, #1
 800599e:	2b07      	cmp	r3, #7
 80059a0:	d821      	bhi.n	80059e6 <UART_SetConfig+0x39a>
 80059a2:	a201      	add	r2, pc, #4	; (adr r2, 80059a8 <UART_SetConfig+0x35c>)
 80059a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a8:	080059c9 	.word	0x080059c9
 80059ac:	080059d1 	.word	0x080059d1
 80059b0:	080059e7 	.word	0x080059e7
 80059b4:	080059d7 	.word	0x080059d7
 80059b8:	080059e7 	.word	0x080059e7
 80059bc:	080059e7 	.word	0x080059e7
 80059c0:	080059e7 	.word	0x080059e7
 80059c4:	080059df 	.word	0x080059df
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059c8:	f7fe feb4 	bl	8004734 <HAL_RCC_GetPCLK2Freq>
 80059cc:	6178      	str	r0, [r7, #20]
        break;
 80059ce:	e00f      	b.n	80059f0 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059d0:	4b24      	ldr	r3, [pc, #144]	; (8005a64 <UART_SetConfig+0x418>)
 80059d2:	617b      	str	r3, [r7, #20]
        break;
 80059d4:	e00c      	b.n	80059f0 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059d6:	f7fe fe19 	bl	800460c <HAL_RCC_GetSysClockFreq>
 80059da:	6178      	str	r0, [r7, #20]
        break;
 80059dc:	e008      	b.n	80059f0 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059e2:	617b      	str	r3, [r7, #20]
        break;
 80059e4:	e004      	b.n	80059f0 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	76bb      	strb	r3, [r7, #26]
        break;
 80059ee:	bf00      	nop
    }

    if (pclk != 0U)
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d020      	beq.n	8005a38 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	4a19      	ldr	r2, [pc, #100]	; (8005a60 <UART_SetConfig+0x414>)
 80059fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a00:	461a      	mov	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	085b      	lsrs	r3, r3, #1
 8005a0e:	441a      	add	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b0f      	cmp	r3, #15
 8005a20:	d908      	bls.n	8005a34 <UART_SetConfig+0x3e8>
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a28:	d204      	bcs.n	8005a34 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	e001      	b.n	8005a38 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005a54:	7ebb      	ldrb	r3, [r7, #26]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3720      	adds	r7, #32
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005a60:	08006ab0 	.word	0x08006ab0
 8005a64:	00f42400 	.word	0x00f42400

08005a68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	f003 0302 	and.w	r3, r3, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	f003 0310 	and.w	r3, r3, #16
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01a      	beq.n	8005b7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b66:	d10a      	bne.n	8005b7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	605a      	str	r2, [r3, #4]
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005bbc:	f7fb fae2 	bl	8001184 <HAL_GetTick>
 8005bc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 0308 	and.w	r3, r3, #8
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d10e      	bne.n	8005bee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f82c 	bl	8005c3c <UART_WaitOnFlagUntilTimeout>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e022      	b.n	8005c34 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b04      	cmp	r3, #4
 8005bfa:	d10e      	bne.n	8005c1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f816 	bl	8005c3c <UART_WaitOnFlagUntilTimeout>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e00c      	b.n	8005c34 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	603b      	str	r3, [r7, #0]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4c:	e062      	b.n	8005d14 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d05e      	beq.n	8005d14 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c56:	f7fb fa95 	bl	8001184 <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d302      	bcc.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d11d      	bne.n	8005ca8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c7a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e045      	b.n	8005d34 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d02e      	beq.n	8005d14 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cc4:	d126      	bne.n	8005d14 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cce:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005cde:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689a      	ldr	r2, [r3, #8]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2220      	movs	r2, #32
 8005cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e00f      	b.n	8005d34 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	69da      	ldr	r2, [r3, #28]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	bf0c      	ite	eq
 8005d24:	2301      	moveq	r3, #1
 8005d26:	2300      	movne	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d08d      	beq.n	8005c4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d52:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6812      	ldr	r2, [r2, #0]
 8005d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005d76:	bf00      	nop
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7ff fc49 	bl	8005638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005da6:	bf00      	nop
 8005da8:	3710      	adds	r7, #16
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff fc25 	bl	8005624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}

08005de2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b083      	sub	sp, #12
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005dea:	bf00      	nop
 8005dec:	370c      	adds	r7, #12
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b083      	sub	sp, #12
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005dfe:	bf00      	nop
 8005e00:	370c      	adds	r7, #12
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005e12:	bf00      	nop
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e027      	b.n	8005e84 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2224      	movs	r2, #36	; 0x24
 8005e40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e02d      	b.n	8005f04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2224      	movs	r2, #36	; 0x24
 8005eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f022 0201 	bic.w	r2, r2, #1
 8005ece:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 f84f 	bl	8005f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2220      	movs	r2, #32
 8005ef6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d101      	bne.n	8005f24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f20:	2302      	movs	r3, #2
 8005f22:	e02d      	b.n	8005f80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2224      	movs	r2, #36	; 0x24
 8005f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 0201 	bic.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f811 	bl	8005f88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005f7e:	2300      	movs	r3, #0
}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b089      	sub	sp, #36	; 0x24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005f90:	4a2f      	ldr	r2, [pc, #188]	; (8006050 <UARTEx_SetNbDataToProcess+0xc8>)
 8005f92:	f107 0314 	add.w	r3, r7, #20
 8005f96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f9a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005f9e:	4a2d      	ldr	r2, [pc, #180]	; (8006054 <UARTEx_SetNbDataToProcess+0xcc>)
 8005fa0:	f107 030c 	add.w	r3, r7, #12
 8005fa4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fa8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d108      	bne.n	8005fc6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fc4:	e03d      	b.n	8006042 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fc6:	2308      	movs	r3, #8
 8005fc8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fca:	2308      	movs	r3, #8
 8005fcc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	0e5b      	lsrs	r3, r3, #25
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	0f5b      	lsrs	r3, r3, #29
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005fee:	7fbb      	ldrb	r3, [r7, #30]
 8005ff0:	7f3a      	ldrb	r2, [r7, #28]
 8005ff2:	f107 0120 	add.w	r1, r7, #32
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005ffc:	fb02 f303 	mul.w	r3, r2, r3
 8006000:	7f3a      	ldrb	r2, [r7, #28]
 8006002:	f107 0120 	add.w	r1, r7, #32
 8006006:	440a      	add	r2, r1
 8006008:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800600c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006010:	b29a      	uxth	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006018:	7ffb      	ldrb	r3, [r7, #31]
 800601a:	7f7a      	ldrb	r2, [r7, #29]
 800601c:	f107 0120 	add.w	r1, r7, #32
 8006020:	440a      	add	r2, r1
 8006022:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006026:	fb02 f303 	mul.w	r3, r2, r3
 800602a:	7f7a      	ldrb	r2, [r7, #29]
 800602c:	f107 0120 	add.w	r1, r7, #32
 8006030:	440a      	add	r2, r1
 8006032:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006036:	fb93 f3f2 	sdiv	r3, r3, r2
 800603a:	b29a      	uxth	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006042:	bf00      	nop
 8006044:	3724      	adds	r7, #36	; 0x24
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	08006a00 	.word	0x08006a00
 8006054:	08006a08 	.word	0x08006a08

08006058 <__errno>:
 8006058:	4b01      	ldr	r3, [pc, #4]	; (8006060 <__errno+0x8>)
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20000010 	.word	0x20000010

08006064 <__libc_init_array>:
 8006064:	b570      	push	{r4, r5, r6, lr}
 8006066:	4e0d      	ldr	r6, [pc, #52]	; (800609c <__libc_init_array+0x38>)
 8006068:	4c0d      	ldr	r4, [pc, #52]	; (80060a0 <__libc_init_array+0x3c>)
 800606a:	1ba4      	subs	r4, r4, r6
 800606c:	10a4      	asrs	r4, r4, #2
 800606e:	2500      	movs	r5, #0
 8006070:	42a5      	cmp	r5, r4
 8006072:	d109      	bne.n	8006088 <__libc_init_array+0x24>
 8006074:	4e0b      	ldr	r6, [pc, #44]	; (80060a4 <__libc_init_array+0x40>)
 8006076:	4c0c      	ldr	r4, [pc, #48]	; (80060a8 <__libc_init_array+0x44>)
 8006078:	f000 fc88 	bl	800698c <_init>
 800607c:	1ba4      	subs	r4, r4, r6
 800607e:	10a4      	asrs	r4, r4, #2
 8006080:	2500      	movs	r5, #0
 8006082:	42a5      	cmp	r5, r4
 8006084:	d105      	bne.n	8006092 <__libc_init_array+0x2e>
 8006086:	bd70      	pop	{r4, r5, r6, pc}
 8006088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800608c:	4798      	blx	r3
 800608e:	3501      	adds	r5, #1
 8006090:	e7ee      	b.n	8006070 <__libc_init_array+0xc>
 8006092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006096:	4798      	blx	r3
 8006098:	3501      	adds	r5, #1
 800609a:	e7f2      	b.n	8006082 <__libc_init_array+0x1e>
 800609c:	08006b34 	.word	0x08006b34
 80060a0:	08006b34 	.word	0x08006b34
 80060a4:	08006b34 	.word	0x08006b34
 80060a8:	08006b38 	.word	0x08006b38

080060ac <memset>:
 80060ac:	4402      	add	r2, r0
 80060ae:	4603      	mov	r3, r0
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d100      	bne.n	80060b6 <memset+0xa>
 80060b4:	4770      	bx	lr
 80060b6:	f803 1b01 	strb.w	r1, [r3], #1
 80060ba:	e7f9      	b.n	80060b0 <memset+0x4>

080060bc <_puts_r>:
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	460e      	mov	r6, r1
 80060c0:	4605      	mov	r5, r0
 80060c2:	b118      	cbz	r0, 80060cc <_puts_r+0x10>
 80060c4:	6983      	ldr	r3, [r0, #24]
 80060c6:	b90b      	cbnz	r3, 80060cc <_puts_r+0x10>
 80060c8:	f000 fa0c 	bl	80064e4 <__sinit>
 80060cc:	69ab      	ldr	r3, [r5, #24]
 80060ce:	68ac      	ldr	r4, [r5, #8]
 80060d0:	b913      	cbnz	r3, 80060d8 <_puts_r+0x1c>
 80060d2:	4628      	mov	r0, r5
 80060d4:	f000 fa06 	bl	80064e4 <__sinit>
 80060d8:	4b23      	ldr	r3, [pc, #140]	; (8006168 <_puts_r+0xac>)
 80060da:	429c      	cmp	r4, r3
 80060dc:	d117      	bne.n	800610e <_puts_r+0x52>
 80060de:	686c      	ldr	r4, [r5, #4]
 80060e0:	89a3      	ldrh	r3, [r4, #12]
 80060e2:	071b      	lsls	r3, r3, #28
 80060e4:	d51d      	bpl.n	8006122 <_puts_r+0x66>
 80060e6:	6923      	ldr	r3, [r4, #16]
 80060e8:	b1db      	cbz	r3, 8006122 <_puts_r+0x66>
 80060ea:	3e01      	subs	r6, #1
 80060ec:	68a3      	ldr	r3, [r4, #8]
 80060ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80060f2:	3b01      	subs	r3, #1
 80060f4:	60a3      	str	r3, [r4, #8]
 80060f6:	b9e9      	cbnz	r1, 8006134 <_puts_r+0x78>
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	da2e      	bge.n	800615a <_puts_r+0x9e>
 80060fc:	4622      	mov	r2, r4
 80060fe:	210a      	movs	r1, #10
 8006100:	4628      	mov	r0, r5
 8006102:	f000 f83f 	bl	8006184 <__swbuf_r>
 8006106:	3001      	adds	r0, #1
 8006108:	d011      	beq.n	800612e <_puts_r+0x72>
 800610a:	200a      	movs	r0, #10
 800610c:	e011      	b.n	8006132 <_puts_r+0x76>
 800610e:	4b17      	ldr	r3, [pc, #92]	; (800616c <_puts_r+0xb0>)
 8006110:	429c      	cmp	r4, r3
 8006112:	d101      	bne.n	8006118 <_puts_r+0x5c>
 8006114:	68ac      	ldr	r4, [r5, #8]
 8006116:	e7e3      	b.n	80060e0 <_puts_r+0x24>
 8006118:	4b15      	ldr	r3, [pc, #84]	; (8006170 <_puts_r+0xb4>)
 800611a:	429c      	cmp	r4, r3
 800611c:	bf08      	it	eq
 800611e:	68ec      	ldreq	r4, [r5, #12]
 8006120:	e7de      	b.n	80060e0 <_puts_r+0x24>
 8006122:	4621      	mov	r1, r4
 8006124:	4628      	mov	r0, r5
 8006126:	f000 f87f 	bl	8006228 <__swsetup_r>
 800612a:	2800      	cmp	r0, #0
 800612c:	d0dd      	beq.n	80060ea <_puts_r+0x2e>
 800612e:	f04f 30ff 	mov.w	r0, #4294967295
 8006132:	bd70      	pop	{r4, r5, r6, pc}
 8006134:	2b00      	cmp	r3, #0
 8006136:	da04      	bge.n	8006142 <_puts_r+0x86>
 8006138:	69a2      	ldr	r2, [r4, #24]
 800613a:	429a      	cmp	r2, r3
 800613c:	dc06      	bgt.n	800614c <_puts_r+0x90>
 800613e:	290a      	cmp	r1, #10
 8006140:	d004      	beq.n	800614c <_puts_r+0x90>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	6022      	str	r2, [r4, #0]
 8006148:	7019      	strb	r1, [r3, #0]
 800614a:	e7cf      	b.n	80060ec <_puts_r+0x30>
 800614c:	4622      	mov	r2, r4
 800614e:	4628      	mov	r0, r5
 8006150:	f000 f818 	bl	8006184 <__swbuf_r>
 8006154:	3001      	adds	r0, #1
 8006156:	d1c9      	bne.n	80060ec <_puts_r+0x30>
 8006158:	e7e9      	b.n	800612e <_puts_r+0x72>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	200a      	movs	r0, #10
 800615e:	1c5a      	adds	r2, r3, #1
 8006160:	6022      	str	r2, [r4, #0]
 8006162:	7018      	strb	r0, [r3, #0]
 8006164:	e7e5      	b.n	8006132 <_puts_r+0x76>
 8006166:	bf00      	nop
 8006168:	08006aec 	.word	0x08006aec
 800616c:	08006b0c 	.word	0x08006b0c
 8006170:	08006acc 	.word	0x08006acc

08006174 <puts>:
 8006174:	4b02      	ldr	r3, [pc, #8]	; (8006180 <puts+0xc>)
 8006176:	4601      	mov	r1, r0
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	f7ff bf9f 	b.w	80060bc <_puts_r>
 800617e:	bf00      	nop
 8006180:	20000010 	.word	0x20000010

08006184 <__swbuf_r>:
 8006184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006186:	460e      	mov	r6, r1
 8006188:	4614      	mov	r4, r2
 800618a:	4605      	mov	r5, r0
 800618c:	b118      	cbz	r0, 8006196 <__swbuf_r+0x12>
 800618e:	6983      	ldr	r3, [r0, #24]
 8006190:	b90b      	cbnz	r3, 8006196 <__swbuf_r+0x12>
 8006192:	f000 f9a7 	bl	80064e4 <__sinit>
 8006196:	4b21      	ldr	r3, [pc, #132]	; (800621c <__swbuf_r+0x98>)
 8006198:	429c      	cmp	r4, r3
 800619a:	d12a      	bne.n	80061f2 <__swbuf_r+0x6e>
 800619c:	686c      	ldr	r4, [r5, #4]
 800619e:	69a3      	ldr	r3, [r4, #24]
 80061a0:	60a3      	str	r3, [r4, #8]
 80061a2:	89a3      	ldrh	r3, [r4, #12]
 80061a4:	071a      	lsls	r2, r3, #28
 80061a6:	d52e      	bpl.n	8006206 <__swbuf_r+0x82>
 80061a8:	6923      	ldr	r3, [r4, #16]
 80061aa:	b363      	cbz	r3, 8006206 <__swbuf_r+0x82>
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	6820      	ldr	r0, [r4, #0]
 80061b0:	1ac0      	subs	r0, r0, r3
 80061b2:	6963      	ldr	r3, [r4, #20]
 80061b4:	b2f6      	uxtb	r6, r6
 80061b6:	4283      	cmp	r3, r0
 80061b8:	4637      	mov	r7, r6
 80061ba:	dc04      	bgt.n	80061c6 <__swbuf_r+0x42>
 80061bc:	4621      	mov	r1, r4
 80061be:	4628      	mov	r0, r5
 80061c0:	f000 f926 	bl	8006410 <_fflush_r>
 80061c4:	bb28      	cbnz	r0, 8006212 <__swbuf_r+0x8e>
 80061c6:	68a3      	ldr	r3, [r4, #8]
 80061c8:	3b01      	subs	r3, #1
 80061ca:	60a3      	str	r3, [r4, #8]
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	1c5a      	adds	r2, r3, #1
 80061d0:	6022      	str	r2, [r4, #0]
 80061d2:	701e      	strb	r6, [r3, #0]
 80061d4:	6963      	ldr	r3, [r4, #20]
 80061d6:	3001      	adds	r0, #1
 80061d8:	4283      	cmp	r3, r0
 80061da:	d004      	beq.n	80061e6 <__swbuf_r+0x62>
 80061dc:	89a3      	ldrh	r3, [r4, #12]
 80061de:	07db      	lsls	r3, r3, #31
 80061e0:	d519      	bpl.n	8006216 <__swbuf_r+0x92>
 80061e2:	2e0a      	cmp	r6, #10
 80061e4:	d117      	bne.n	8006216 <__swbuf_r+0x92>
 80061e6:	4621      	mov	r1, r4
 80061e8:	4628      	mov	r0, r5
 80061ea:	f000 f911 	bl	8006410 <_fflush_r>
 80061ee:	b190      	cbz	r0, 8006216 <__swbuf_r+0x92>
 80061f0:	e00f      	b.n	8006212 <__swbuf_r+0x8e>
 80061f2:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <__swbuf_r+0x9c>)
 80061f4:	429c      	cmp	r4, r3
 80061f6:	d101      	bne.n	80061fc <__swbuf_r+0x78>
 80061f8:	68ac      	ldr	r4, [r5, #8]
 80061fa:	e7d0      	b.n	800619e <__swbuf_r+0x1a>
 80061fc:	4b09      	ldr	r3, [pc, #36]	; (8006224 <__swbuf_r+0xa0>)
 80061fe:	429c      	cmp	r4, r3
 8006200:	bf08      	it	eq
 8006202:	68ec      	ldreq	r4, [r5, #12]
 8006204:	e7cb      	b.n	800619e <__swbuf_r+0x1a>
 8006206:	4621      	mov	r1, r4
 8006208:	4628      	mov	r0, r5
 800620a:	f000 f80d 	bl	8006228 <__swsetup_r>
 800620e:	2800      	cmp	r0, #0
 8006210:	d0cc      	beq.n	80061ac <__swbuf_r+0x28>
 8006212:	f04f 37ff 	mov.w	r7, #4294967295
 8006216:	4638      	mov	r0, r7
 8006218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800621a:	bf00      	nop
 800621c:	08006aec 	.word	0x08006aec
 8006220:	08006b0c 	.word	0x08006b0c
 8006224:	08006acc 	.word	0x08006acc

08006228 <__swsetup_r>:
 8006228:	4b32      	ldr	r3, [pc, #200]	; (80062f4 <__swsetup_r+0xcc>)
 800622a:	b570      	push	{r4, r5, r6, lr}
 800622c:	681d      	ldr	r5, [r3, #0]
 800622e:	4606      	mov	r6, r0
 8006230:	460c      	mov	r4, r1
 8006232:	b125      	cbz	r5, 800623e <__swsetup_r+0x16>
 8006234:	69ab      	ldr	r3, [r5, #24]
 8006236:	b913      	cbnz	r3, 800623e <__swsetup_r+0x16>
 8006238:	4628      	mov	r0, r5
 800623a:	f000 f953 	bl	80064e4 <__sinit>
 800623e:	4b2e      	ldr	r3, [pc, #184]	; (80062f8 <__swsetup_r+0xd0>)
 8006240:	429c      	cmp	r4, r3
 8006242:	d10f      	bne.n	8006264 <__swsetup_r+0x3c>
 8006244:	686c      	ldr	r4, [r5, #4]
 8006246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800624a:	b29a      	uxth	r2, r3
 800624c:	0715      	lsls	r5, r2, #28
 800624e:	d42c      	bmi.n	80062aa <__swsetup_r+0x82>
 8006250:	06d0      	lsls	r0, r2, #27
 8006252:	d411      	bmi.n	8006278 <__swsetup_r+0x50>
 8006254:	2209      	movs	r2, #9
 8006256:	6032      	str	r2, [r6, #0]
 8006258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800625c:	81a3      	strh	r3, [r4, #12]
 800625e:	f04f 30ff 	mov.w	r0, #4294967295
 8006262:	e03e      	b.n	80062e2 <__swsetup_r+0xba>
 8006264:	4b25      	ldr	r3, [pc, #148]	; (80062fc <__swsetup_r+0xd4>)
 8006266:	429c      	cmp	r4, r3
 8006268:	d101      	bne.n	800626e <__swsetup_r+0x46>
 800626a:	68ac      	ldr	r4, [r5, #8]
 800626c:	e7eb      	b.n	8006246 <__swsetup_r+0x1e>
 800626e:	4b24      	ldr	r3, [pc, #144]	; (8006300 <__swsetup_r+0xd8>)
 8006270:	429c      	cmp	r4, r3
 8006272:	bf08      	it	eq
 8006274:	68ec      	ldreq	r4, [r5, #12]
 8006276:	e7e6      	b.n	8006246 <__swsetup_r+0x1e>
 8006278:	0751      	lsls	r1, r2, #29
 800627a:	d512      	bpl.n	80062a2 <__swsetup_r+0x7a>
 800627c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800627e:	b141      	cbz	r1, 8006292 <__swsetup_r+0x6a>
 8006280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006284:	4299      	cmp	r1, r3
 8006286:	d002      	beq.n	800628e <__swsetup_r+0x66>
 8006288:	4630      	mov	r0, r6
 800628a:	f000 fa19 	bl	80066c0 <_free_r>
 800628e:	2300      	movs	r3, #0
 8006290:	6363      	str	r3, [r4, #52]	; 0x34
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	2300      	movs	r3, #0
 800629c:	6063      	str	r3, [r4, #4]
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	f043 0308 	orr.w	r3, r3, #8
 80062a8:	81a3      	strh	r3, [r4, #12]
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	b94b      	cbnz	r3, 80062c2 <__swsetup_r+0x9a>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80062b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062b8:	d003      	beq.n	80062c2 <__swsetup_r+0x9a>
 80062ba:	4621      	mov	r1, r4
 80062bc:	4630      	mov	r0, r6
 80062be:	f000 f9bf 	bl	8006640 <__smakebuf_r>
 80062c2:	89a2      	ldrh	r2, [r4, #12]
 80062c4:	f012 0301 	ands.w	r3, r2, #1
 80062c8:	d00c      	beq.n	80062e4 <__swsetup_r+0xbc>
 80062ca:	2300      	movs	r3, #0
 80062cc:	60a3      	str	r3, [r4, #8]
 80062ce:	6963      	ldr	r3, [r4, #20]
 80062d0:	425b      	negs	r3, r3
 80062d2:	61a3      	str	r3, [r4, #24]
 80062d4:	6923      	ldr	r3, [r4, #16]
 80062d6:	b953      	cbnz	r3, 80062ee <__swsetup_r+0xc6>
 80062d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80062e0:	d1ba      	bne.n	8006258 <__swsetup_r+0x30>
 80062e2:	bd70      	pop	{r4, r5, r6, pc}
 80062e4:	0792      	lsls	r2, r2, #30
 80062e6:	bf58      	it	pl
 80062e8:	6963      	ldrpl	r3, [r4, #20]
 80062ea:	60a3      	str	r3, [r4, #8]
 80062ec:	e7f2      	b.n	80062d4 <__swsetup_r+0xac>
 80062ee:	2000      	movs	r0, #0
 80062f0:	e7f7      	b.n	80062e2 <__swsetup_r+0xba>
 80062f2:	bf00      	nop
 80062f4:	20000010 	.word	0x20000010
 80062f8:	08006aec 	.word	0x08006aec
 80062fc:	08006b0c 	.word	0x08006b0c
 8006300:	08006acc 	.word	0x08006acc

08006304 <__sflush_r>:
 8006304:	898a      	ldrh	r2, [r1, #12]
 8006306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800630a:	4605      	mov	r5, r0
 800630c:	0710      	lsls	r0, r2, #28
 800630e:	460c      	mov	r4, r1
 8006310:	d458      	bmi.n	80063c4 <__sflush_r+0xc0>
 8006312:	684b      	ldr	r3, [r1, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	dc05      	bgt.n	8006324 <__sflush_r+0x20>
 8006318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800631a:	2b00      	cmp	r3, #0
 800631c:	dc02      	bgt.n	8006324 <__sflush_r+0x20>
 800631e:	2000      	movs	r0, #0
 8006320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006326:	2e00      	cmp	r6, #0
 8006328:	d0f9      	beq.n	800631e <__sflush_r+0x1a>
 800632a:	2300      	movs	r3, #0
 800632c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006330:	682f      	ldr	r7, [r5, #0]
 8006332:	6a21      	ldr	r1, [r4, #32]
 8006334:	602b      	str	r3, [r5, #0]
 8006336:	d032      	beq.n	800639e <__sflush_r+0x9a>
 8006338:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	075a      	lsls	r2, r3, #29
 800633e:	d505      	bpl.n	800634c <__sflush_r+0x48>
 8006340:	6863      	ldr	r3, [r4, #4]
 8006342:	1ac0      	subs	r0, r0, r3
 8006344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006346:	b10b      	cbz	r3, 800634c <__sflush_r+0x48>
 8006348:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800634a:	1ac0      	subs	r0, r0, r3
 800634c:	2300      	movs	r3, #0
 800634e:	4602      	mov	r2, r0
 8006350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006352:	6a21      	ldr	r1, [r4, #32]
 8006354:	4628      	mov	r0, r5
 8006356:	47b0      	blx	r6
 8006358:	1c43      	adds	r3, r0, #1
 800635a:	89a3      	ldrh	r3, [r4, #12]
 800635c:	d106      	bne.n	800636c <__sflush_r+0x68>
 800635e:	6829      	ldr	r1, [r5, #0]
 8006360:	291d      	cmp	r1, #29
 8006362:	d848      	bhi.n	80063f6 <__sflush_r+0xf2>
 8006364:	4a29      	ldr	r2, [pc, #164]	; (800640c <__sflush_r+0x108>)
 8006366:	40ca      	lsrs	r2, r1
 8006368:	07d6      	lsls	r6, r2, #31
 800636a:	d544      	bpl.n	80063f6 <__sflush_r+0xf2>
 800636c:	2200      	movs	r2, #0
 800636e:	6062      	str	r2, [r4, #4]
 8006370:	04d9      	lsls	r1, r3, #19
 8006372:	6922      	ldr	r2, [r4, #16]
 8006374:	6022      	str	r2, [r4, #0]
 8006376:	d504      	bpl.n	8006382 <__sflush_r+0x7e>
 8006378:	1c42      	adds	r2, r0, #1
 800637a:	d101      	bne.n	8006380 <__sflush_r+0x7c>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	b903      	cbnz	r3, 8006382 <__sflush_r+0x7e>
 8006380:	6560      	str	r0, [r4, #84]	; 0x54
 8006382:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006384:	602f      	str	r7, [r5, #0]
 8006386:	2900      	cmp	r1, #0
 8006388:	d0c9      	beq.n	800631e <__sflush_r+0x1a>
 800638a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800638e:	4299      	cmp	r1, r3
 8006390:	d002      	beq.n	8006398 <__sflush_r+0x94>
 8006392:	4628      	mov	r0, r5
 8006394:	f000 f994 	bl	80066c0 <_free_r>
 8006398:	2000      	movs	r0, #0
 800639a:	6360      	str	r0, [r4, #52]	; 0x34
 800639c:	e7c0      	b.n	8006320 <__sflush_r+0x1c>
 800639e:	2301      	movs	r3, #1
 80063a0:	4628      	mov	r0, r5
 80063a2:	47b0      	blx	r6
 80063a4:	1c41      	adds	r1, r0, #1
 80063a6:	d1c8      	bne.n	800633a <__sflush_r+0x36>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d0c5      	beq.n	800633a <__sflush_r+0x36>
 80063ae:	2b1d      	cmp	r3, #29
 80063b0:	d001      	beq.n	80063b6 <__sflush_r+0xb2>
 80063b2:	2b16      	cmp	r3, #22
 80063b4:	d101      	bne.n	80063ba <__sflush_r+0xb6>
 80063b6:	602f      	str	r7, [r5, #0]
 80063b8:	e7b1      	b.n	800631e <__sflush_r+0x1a>
 80063ba:	89a3      	ldrh	r3, [r4, #12]
 80063bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063c0:	81a3      	strh	r3, [r4, #12]
 80063c2:	e7ad      	b.n	8006320 <__sflush_r+0x1c>
 80063c4:	690f      	ldr	r7, [r1, #16]
 80063c6:	2f00      	cmp	r7, #0
 80063c8:	d0a9      	beq.n	800631e <__sflush_r+0x1a>
 80063ca:	0793      	lsls	r3, r2, #30
 80063cc:	680e      	ldr	r6, [r1, #0]
 80063ce:	bf08      	it	eq
 80063d0:	694b      	ldreq	r3, [r1, #20]
 80063d2:	600f      	str	r7, [r1, #0]
 80063d4:	bf18      	it	ne
 80063d6:	2300      	movne	r3, #0
 80063d8:	eba6 0807 	sub.w	r8, r6, r7
 80063dc:	608b      	str	r3, [r1, #8]
 80063de:	f1b8 0f00 	cmp.w	r8, #0
 80063e2:	dd9c      	ble.n	800631e <__sflush_r+0x1a>
 80063e4:	4643      	mov	r3, r8
 80063e6:	463a      	mov	r2, r7
 80063e8:	6a21      	ldr	r1, [r4, #32]
 80063ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063ec:	4628      	mov	r0, r5
 80063ee:	47b0      	blx	r6
 80063f0:	2800      	cmp	r0, #0
 80063f2:	dc06      	bgt.n	8006402 <__sflush_r+0xfe>
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063fa:	81a3      	strh	r3, [r4, #12]
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	e78e      	b.n	8006320 <__sflush_r+0x1c>
 8006402:	4407      	add	r7, r0
 8006404:	eba8 0800 	sub.w	r8, r8, r0
 8006408:	e7e9      	b.n	80063de <__sflush_r+0xda>
 800640a:	bf00      	nop
 800640c:	20400001 	.word	0x20400001

08006410 <_fflush_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	690b      	ldr	r3, [r1, #16]
 8006414:	4605      	mov	r5, r0
 8006416:	460c      	mov	r4, r1
 8006418:	b1db      	cbz	r3, 8006452 <_fflush_r+0x42>
 800641a:	b118      	cbz	r0, 8006424 <_fflush_r+0x14>
 800641c:	6983      	ldr	r3, [r0, #24]
 800641e:	b90b      	cbnz	r3, 8006424 <_fflush_r+0x14>
 8006420:	f000 f860 	bl	80064e4 <__sinit>
 8006424:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <_fflush_r+0x48>)
 8006426:	429c      	cmp	r4, r3
 8006428:	d109      	bne.n	800643e <_fflush_r+0x2e>
 800642a:	686c      	ldr	r4, [r5, #4]
 800642c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006430:	b17b      	cbz	r3, 8006452 <_fflush_r+0x42>
 8006432:	4621      	mov	r1, r4
 8006434:	4628      	mov	r0, r5
 8006436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800643a:	f7ff bf63 	b.w	8006304 <__sflush_r>
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <_fflush_r+0x4c>)
 8006440:	429c      	cmp	r4, r3
 8006442:	d101      	bne.n	8006448 <_fflush_r+0x38>
 8006444:	68ac      	ldr	r4, [r5, #8]
 8006446:	e7f1      	b.n	800642c <_fflush_r+0x1c>
 8006448:	4b05      	ldr	r3, [pc, #20]	; (8006460 <_fflush_r+0x50>)
 800644a:	429c      	cmp	r4, r3
 800644c:	bf08      	it	eq
 800644e:	68ec      	ldreq	r4, [r5, #12]
 8006450:	e7ec      	b.n	800642c <_fflush_r+0x1c>
 8006452:	2000      	movs	r0, #0
 8006454:	bd38      	pop	{r3, r4, r5, pc}
 8006456:	bf00      	nop
 8006458:	08006aec 	.word	0x08006aec
 800645c:	08006b0c 	.word	0x08006b0c
 8006460:	08006acc 	.word	0x08006acc

08006464 <std>:
 8006464:	2300      	movs	r3, #0
 8006466:	b510      	push	{r4, lr}
 8006468:	4604      	mov	r4, r0
 800646a:	e9c0 3300 	strd	r3, r3, [r0]
 800646e:	6083      	str	r3, [r0, #8]
 8006470:	8181      	strh	r1, [r0, #12]
 8006472:	6643      	str	r3, [r0, #100]	; 0x64
 8006474:	81c2      	strh	r2, [r0, #14]
 8006476:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800647a:	6183      	str	r3, [r0, #24]
 800647c:	4619      	mov	r1, r3
 800647e:	2208      	movs	r2, #8
 8006480:	305c      	adds	r0, #92	; 0x5c
 8006482:	f7ff fe13 	bl	80060ac <memset>
 8006486:	4b05      	ldr	r3, [pc, #20]	; (800649c <std+0x38>)
 8006488:	6263      	str	r3, [r4, #36]	; 0x24
 800648a:	4b05      	ldr	r3, [pc, #20]	; (80064a0 <std+0x3c>)
 800648c:	62a3      	str	r3, [r4, #40]	; 0x28
 800648e:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <std+0x40>)
 8006490:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006492:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <std+0x44>)
 8006494:	6224      	str	r4, [r4, #32]
 8006496:	6323      	str	r3, [r4, #48]	; 0x30
 8006498:	bd10      	pop	{r4, pc}
 800649a:	bf00      	nop
 800649c:	08006831 	.word	0x08006831
 80064a0:	08006853 	.word	0x08006853
 80064a4:	0800688b 	.word	0x0800688b
 80064a8:	080068af 	.word	0x080068af

080064ac <_cleanup_r>:
 80064ac:	4901      	ldr	r1, [pc, #4]	; (80064b4 <_cleanup_r+0x8>)
 80064ae:	f000 b885 	b.w	80065bc <_fwalk_reent>
 80064b2:	bf00      	nop
 80064b4:	08006411 	.word	0x08006411

080064b8 <__sfmoreglue>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	1e4a      	subs	r2, r1, #1
 80064bc:	2568      	movs	r5, #104	; 0x68
 80064be:	4355      	muls	r5, r2
 80064c0:	460e      	mov	r6, r1
 80064c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064c6:	f000 f949 	bl	800675c <_malloc_r>
 80064ca:	4604      	mov	r4, r0
 80064cc:	b140      	cbz	r0, 80064e0 <__sfmoreglue+0x28>
 80064ce:	2100      	movs	r1, #0
 80064d0:	e9c0 1600 	strd	r1, r6, [r0]
 80064d4:	300c      	adds	r0, #12
 80064d6:	60a0      	str	r0, [r4, #8]
 80064d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064dc:	f7ff fde6 	bl	80060ac <memset>
 80064e0:	4620      	mov	r0, r4
 80064e2:	bd70      	pop	{r4, r5, r6, pc}

080064e4 <__sinit>:
 80064e4:	6983      	ldr	r3, [r0, #24]
 80064e6:	b510      	push	{r4, lr}
 80064e8:	4604      	mov	r4, r0
 80064ea:	bb33      	cbnz	r3, 800653a <__sinit+0x56>
 80064ec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80064f0:	6503      	str	r3, [r0, #80]	; 0x50
 80064f2:	4b12      	ldr	r3, [pc, #72]	; (800653c <__sinit+0x58>)
 80064f4:	4a12      	ldr	r2, [pc, #72]	; (8006540 <__sinit+0x5c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6282      	str	r2, [r0, #40]	; 0x28
 80064fa:	4298      	cmp	r0, r3
 80064fc:	bf04      	itt	eq
 80064fe:	2301      	moveq	r3, #1
 8006500:	6183      	streq	r3, [r0, #24]
 8006502:	f000 f81f 	bl	8006544 <__sfp>
 8006506:	6060      	str	r0, [r4, #4]
 8006508:	4620      	mov	r0, r4
 800650a:	f000 f81b 	bl	8006544 <__sfp>
 800650e:	60a0      	str	r0, [r4, #8]
 8006510:	4620      	mov	r0, r4
 8006512:	f000 f817 	bl	8006544 <__sfp>
 8006516:	2200      	movs	r2, #0
 8006518:	60e0      	str	r0, [r4, #12]
 800651a:	2104      	movs	r1, #4
 800651c:	6860      	ldr	r0, [r4, #4]
 800651e:	f7ff ffa1 	bl	8006464 <std>
 8006522:	2201      	movs	r2, #1
 8006524:	2109      	movs	r1, #9
 8006526:	68a0      	ldr	r0, [r4, #8]
 8006528:	f7ff ff9c 	bl	8006464 <std>
 800652c:	2202      	movs	r2, #2
 800652e:	2112      	movs	r1, #18
 8006530:	68e0      	ldr	r0, [r4, #12]
 8006532:	f7ff ff97 	bl	8006464 <std>
 8006536:	2301      	movs	r3, #1
 8006538:	61a3      	str	r3, [r4, #24]
 800653a:	bd10      	pop	{r4, pc}
 800653c:	08006ac8 	.word	0x08006ac8
 8006540:	080064ad 	.word	0x080064ad

08006544 <__sfp>:
 8006544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006546:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <__sfp+0x70>)
 8006548:	681e      	ldr	r6, [r3, #0]
 800654a:	69b3      	ldr	r3, [r6, #24]
 800654c:	4607      	mov	r7, r0
 800654e:	b913      	cbnz	r3, 8006556 <__sfp+0x12>
 8006550:	4630      	mov	r0, r6
 8006552:	f7ff ffc7 	bl	80064e4 <__sinit>
 8006556:	3648      	adds	r6, #72	; 0x48
 8006558:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800655c:	3b01      	subs	r3, #1
 800655e:	d503      	bpl.n	8006568 <__sfp+0x24>
 8006560:	6833      	ldr	r3, [r6, #0]
 8006562:	b133      	cbz	r3, 8006572 <__sfp+0x2e>
 8006564:	6836      	ldr	r6, [r6, #0]
 8006566:	e7f7      	b.n	8006558 <__sfp+0x14>
 8006568:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800656c:	b16d      	cbz	r5, 800658a <__sfp+0x46>
 800656e:	3468      	adds	r4, #104	; 0x68
 8006570:	e7f4      	b.n	800655c <__sfp+0x18>
 8006572:	2104      	movs	r1, #4
 8006574:	4638      	mov	r0, r7
 8006576:	f7ff ff9f 	bl	80064b8 <__sfmoreglue>
 800657a:	6030      	str	r0, [r6, #0]
 800657c:	2800      	cmp	r0, #0
 800657e:	d1f1      	bne.n	8006564 <__sfp+0x20>
 8006580:	230c      	movs	r3, #12
 8006582:	603b      	str	r3, [r7, #0]
 8006584:	4604      	mov	r4, r0
 8006586:	4620      	mov	r0, r4
 8006588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800658a:	4b0b      	ldr	r3, [pc, #44]	; (80065b8 <__sfp+0x74>)
 800658c:	6665      	str	r5, [r4, #100]	; 0x64
 800658e:	e9c4 5500 	strd	r5, r5, [r4]
 8006592:	60a5      	str	r5, [r4, #8]
 8006594:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006598:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800659c:	2208      	movs	r2, #8
 800659e:	4629      	mov	r1, r5
 80065a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065a4:	f7ff fd82 	bl	80060ac <memset>
 80065a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065b0:	e7e9      	b.n	8006586 <__sfp+0x42>
 80065b2:	bf00      	nop
 80065b4:	08006ac8 	.word	0x08006ac8
 80065b8:	ffff0001 	.word	0xffff0001

080065bc <_fwalk_reent>:
 80065bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065c0:	4680      	mov	r8, r0
 80065c2:	4689      	mov	r9, r1
 80065c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80065c8:	2600      	movs	r6, #0
 80065ca:	b914      	cbnz	r4, 80065d2 <_fwalk_reent+0x16>
 80065cc:	4630      	mov	r0, r6
 80065ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065d2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80065d6:	3f01      	subs	r7, #1
 80065d8:	d501      	bpl.n	80065de <_fwalk_reent+0x22>
 80065da:	6824      	ldr	r4, [r4, #0]
 80065dc:	e7f5      	b.n	80065ca <_fwalk_reent+0xe>
 80065de:	89ab      	ldrh	r3, [r5, #12]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d907      	bls.n	80065f4 <_fwalk_reent+0x38>
 80065e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065e8:	3301      	adds	r3, #1
 80065ea:	d003      	beq.n	80065f4 <_fwalk_reent+0x38>
 80065ec:	4629      	mov	r1, r5
 80065ee:	4640      	mov	r0, r8
 80065f0:	47c8      	blx	r9
 80065f2:	4306      	orrs	r6, r0
 80065f4:	3568      	adds	r5, #104	; 0x68
 80065f6:	e7ee      	b.n	80065d6 <_fwalk_reent+0x1a>

080065f8 <__swhatbuf_r>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	460e      	mov	r6, r1
 80065fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006600:	2900      	cmp	r1, #0
 8006602:	b096      	sub	sp, #88	; 0x58
 8006604:	4614      	mov	r4, r2
 8006606:	461d      	mov	r5, r3
 8006608:	da07      	bge.n	800661a <__swhatbuf_r+0x22>
 800660a:	2300      	movs	r3, #0
 800660c:	602b      	str	r3, [r5, #0]
 800660e:	89b3      	ldrh	r3, [r6, #12]
 8006610:	061a      	lsls	r2, r3, #24
 8006612:	d410      	bmi.n	8006636 <__swhatbuf_r+0x3e>
 8006614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006618:	e00e      	b.n	8006638 <__swhatbuf_r+0x40>
 800661a:	466a      	mov	r2, sp
 800661c:	f000 f96e 	bl	80068fc <_fstat_r>
 8006620:	2800      	cmp	r0, #0
 8006622:	dbf2      	blt.n	800660a <__swhatbuf_r+0x12>
 8006624:	9a01      	ldr	r2, [sp, #4]
 8006626:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800662a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800662e:	425a      	negs	r2, r3
 8006630:	415a      	adcs	r2, r3
 8006632:	602a      	str	r2, [r5, #0]
 8006634:	e7ee      	b.n	8006614 <__swhatbuf_r+0x1c>
 8006636:	2340      	movs	r3, #64	; 0x40
 8006638:	2000      	movs	r0, #0
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	b016      	add	sp, #88	; 0x58
 800663e:	bd70      	pop	{r4, r5, r6, pc}

08006640 <__smakebuf_r>:
 8006640:	898b      	ldrh	r3, [r1, #12]
 8006642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006644:	079d      	lsls	r5, r3, #30
 8006646:	4606      	mov	r6, r0
 8006648:	460c      	mov	r4, r1
 800664a:	d507      	bpl.n	800665c <__smakebuf_r+0x1c>
 800664c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	6123      	str	r3, [r4, #16]
 8006654:	2301      	movs	r3, #1
 8006656:	6163      	str	r3, [r4, #20]
 8006658:	b002      	add	sp, #8
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	ab01      	add	r3, sp, #4
 800665e:	466a      	mov	r2, sp
 8006660:	f7ff ffca 	bl	80065f8 <__swhatbuf_r>
 8006664:	9900      	ldr	r1, [sp, #0]
 8006666:	4605      	mov	r5, r0
 8006668:	4630      	mov	r0, r6
 800666a:	f000 f877 	bl	800675c <_malloc_r>
 800666e:	b948      	cbnz	r0, 8006684 <__smakebuf_r+0x44>
 8006670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006674:	059a      	lsls	r2, r3, #22
 8006676:	d4ef      	bmi.n	8006658 <__smakebuf_r+0x18>
 8006678:	f023 0303 	bic.w	r3, r3, #3
 800667c:	f043 0302 	orr.w	r3, r3, #2
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	e7e3      	b.n	800664c <__smakebuf_r+0xc>
 8006684:	4b0d      	ldr	r3, [pc, #52]	; (80066bc <__smakebuf_r+0x7c>)
 8006686:	62b3      	str	r3, [r6, #40]	; 0x28
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	6020      	str	r0, [r4, #0]
 800668c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	9b00      	ldr	r3, [sp, #0]
 8006694:	6163      	str	r3, [r4, #20]
 8006696:	9b01      	ldr	r3, [sp, #4]
 8006698:	6120      	str	r0, [r4, #16]
 800669a:	b15b      	cbz	r3, 80066b4 <__smakebuf_r+0x74>
 800669c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066a0:	4630      	mov	r0, r6
 80066a2:	f000 f93d 	bl	8006920 <_isatty_r>
 80066a6:	b128      	cbz	r0, 80066b4 <__smakebuf_r+0x74>
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	f043 0301 	orr.w	r3, r3, #1
 80066b2:	81a3      	strh	r3, [r4, #12]
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	431d      	orrs	r5, r3
 80066b8:	81a5      	strh	r5, [r4, #12]
 80066ba:	e7cd      	b.n	8006658 <__smakebuf_r+0x18>
 80066bc:	080064ad 	.word	0x080064ad

080066c0 <_free_r>:
 80066c0:	b538      	push	{r3, r4, r5, lr}
 80066c2:	4605      	mov	r5, r0
 80066c4:	2900      	cmp	r1, #0
 80066c6:	d045      	beq.n	8006754 <_free_r+0x94>
 80066c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066cc:	1f0c      	subs	r4, r1, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	bfb8      	it	lt
 80066d2:	18e4      	addlt	r4, r4, r3
 80066d4:	f000 f946 	bl	8006964 <__malloc_lock>
 80066d8:	4a1f      	ldr	r2, [pc, #124]	; (8006758 <_free_r+0x98>)
 80066da:	6813      	ldr	r3, [r2, #0]
 80066dc:	4610      	mov	r0, r2
 80066de:	b933      	cbnz	r3, 80066ee <_free_r+0x2e>
 80066e0:	6063      	str	r3, [r4, #4]
 80066e2:	6014      	str	r4, [r2, #0]
 80066e4:	4628      	mov	r0, r5
 80066e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ea:	f000 b93c 	b.w	8006966 <__malloc_unlock>
 80066ee:	42a3      	cmp	r3, r4
 80066f0:	d90c      	bls.n	800670c <_free_r+0x4c>
 80066f2:	6821      	ldr	r1, [r4, #0]
 80066f4:	1862      	adds	r2, r4, r1
 80066f6:	4293      	cmp	r3, r2
 80066f8:	bf04      	itt	eq
 80066fa:	681a      	ldreq	r2, [r3, #0]
 80066fc:	685b      	ldreq	r3, [r3, #4]
 80066fe:	6063      	str	r3, [r4, #4]
 8006700:	bf04      	itt	eq
 8006702:	1852      	addeq	r2, r2, r1
 8006704:	6022      	streq	r2, [r4, #0]
 8006706:	6004      	str	r4, [r0, #0]
 8006708:	e7ec      	b.n	80066e4 <_free_r+0x24>
 800670a:	4613      	mov	r3, r2
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	b10a      	cbz	r2, 8006714 <_free_r+0x54>
 8006710:	42a2      	cmp	r2, r4
 8006712:	d9fa      	bls.n	800670a <_free_r+0x4a>
 8006714:	6819      	ldr	r1, [r3, #0]
 8006716:	1858      	adds	r0, r3, r1
 8006718:	42a0      	cmp	r0, r4
 800671a:	d10b      	bne.n	8006734 <_free_r+0x74>
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	4401      	add	r1, r0
 8006720:	1858      	adds	r0, r3, r1
 8006722:	4282      	cmp	r2, r0
 8006724:	6019      	str	r1, [r3, #0]
 8006726:	d1dd      	bne.n	80066e4 <_free_r+0x24>
 8006728:	6810      	ldr	r0, [r2, #0]
 800672a:	6852      	ldr	r2, [r2, #4]
 800672c:	605a      	str	r2, [r3, #4]
 800672e:	4401      	add	r1, r0
 8006730:	6019      	str	r1, [r3, #0]
 8006732:	e7d7      	b.n	80066e4 <_free_r+0x24>
 8006734:	d902      	bls.n	800673c <_free_r+0x7c>
 8006736:	230c      	movs	r3, #12
 8006738:	602b      	str	r3, [r5, #0]
 800673a:	e7d3      	b.n	80066e4 <_free_r+0x24>
 800673c:	6820      	ldr	r0, [r4, #0]
 800673e:	1821      	adds	r1, r4, r0
 8006740:	428a      	cmp	r2, r1
 8006742:	bf04      	itt	eq
 8006744:	6811      	ldreq	r1, [r2, #0]
 8006746:	6852      	ldreq	r2, [r2, #4]
 8006748:	6062      	str	r2, [r4, #4]
 800674a:	bf04      	itt	eq
 800674c:	1809      	addeq	r1, r1, r0
 800674e:	6021      	streq	r1, [r4, #0]
 8006750:	605c      	str	r4, [r3, #4]
 8006752:	e7c7      	b.n	80066e4 <_free_r+0x24>
 8006754:	bd38      	pop	{r3, r4, r5, pc}
 8006756:	bf00      	nop
 8006758:	20000094 	.word	0x20000094

0800675c <_malloc_r>:
 800675c:	b570      	push	{r4, r5, r6, lr}
 800675e:	1ccd      	adds	r5, r1, #3
 8006760:	f025 0503 	bic.w	r5, r5, #3
 8006764:	3508      	adds	r5, #8
 8006766:	2d0c      	cmp	r5, #12
 8006768:	bf38      	it	cc
 800676a:	250c      	movcc	r5, #12
 800676c:	2d00      	cmp	r5, #0
 800676e:	4606      	mov	r6, r0
 8006770:	db01      	blt.n	8006776 <_malloc_r+0x1a>
 8006772:	42a9      	cmp	r1, r5
 8006774:	d903      	bls.n	800677e <_malloc_r+0x22>
 8006776:	230c      	movs	r3, #12
 8006778:	6033      	str	r3, [r6, #0]
 800677a:	2000      	movs	r0, #0
 800677c:	bd70      	pop	{r4, r5, r6, pc}
 800677e:	f000 f8f1 	bl	8006964 <__malloc_lock>
 8006782:	4a21      	ldr	r2, [pc, #132]	; (8006808 <_malloc_r+0xac>)
 8006784:	6814      	ldr	r4, [r2, #0]
 8006786:	4621      	mov	r1, r4
 8006788:	b991      	cbnz	r1, 80067b0 <_malloc_r+0x54>
 800678a:	4c20      	ldr	r4, [pc, #128]	; (800680c <_malloc_r+0xb0>)
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	b91b      	cbnz	r3, 8006798 <_malloc_r+0x3c>
 8006790:	4630      	mov	r0, r6
 8006792:	f000 f83d 	bl	8006810 <_sbrk_r>
 8006796:	6020      	str	r0, [r4, #0]
 8006798:	4629      	mov	r1, r5
 800679a:	4630      	mov	r0, r6
 800679c:	f000 f838 	bl	8006810 <_sbrk_r>
 80067a0:	1c43      	adds	r3, r0, #1
 80067a2:	d124      	bne.n	80067ee <_malloc_r+0x92>
 80067a4:	230c      	movs	r3, #12
 80067a6:	6033      	str	r3, [r6, #0]
 80067a8:	4630      	mov	r0, r6
 80067aa:	f000 f8dc 	bl	8006966 <__malloc_unlock>
 80067ae:	e7e4      	b.n	800677a <_malloc_r+0x1e>
 80067b0:	680b      	ldr	r3, [r1, #0]
 80067b2:	1b5b      	subs	r3, r3, r5
 80067b4:	d418      	bmi.n	80067e8 <_malloc_r+0x8c>
 80067b6:	2b0b      	cmp	r3, #11
 80067b8:	d90f      	bls.n	80067da <_malloc_r+0x7e>
 80067ba:	600b      	str	r3, [r1, #0]
 80067bc:	50cd      	str	r5, [r1, r3]
 80067be:	18cc      	adds	r4, r1, r3
 80067c0:	4630      	mov	r0, r6
 80067c2:	f000 f8d0 	bl	8006966 <__malloc_unlock>
 80067c6:	f104 000b 	add.w	r0, r4, #11
 80067ca:	1d23      	adds	r3, r4, #4
 80067cc:	f020 0007 	bic.w	r0, r0, #7
 80067d0:	1ac3      	subs	r3, r0, r3
 80067d2:	d0d3      	beq.n	800677c <_malloc_r+0x20>
 80067d4:	425a      	negs	r2, r3
 80067d6:	50e2      	str	r2, [r4, r3]
 80067d8:	e7d0      	b.n	800677c <_malloc_r+0x20>
 80067da:	428c      	cmp	r4, r1
 80067dc:	684b      	ldr	r3, [r1, #4]
 80067de:	bf16      	itet	ne
 80067e0:	6063      	strne	r3, [r4, #4]
 80067e2:	6013      	streq	r3, [r2, #0]
 80067e4:	460c      	movne	r4, r1
 80067e6:	e7eb      	b.n	80067c0 <_malloc_r+0x64>
 80067e8:	460c      	mov	r4, r1
 80067ea:	6849      	ldr	r1, [r1, #4]
 80067ec:	e7cc      	b.n	8006788 <_malloc_r+0x2c>
 80067ee:	1cc4      	adds	r4, r0, #3
 80067f0:	f024 0403 	bic.w	r4, r4, #3
 80067f4:	42a0      	cmp	r0, r4
 80067f6:	d005      	beq.n	8006804 <_malloc_r+0xa8>
 80067f8:	1a21      	subs	r1, r4, r0
 80067fa:	4630      	mov	r0, r6
 80067fc:	f000 f808 	bl	8006810 <_sbrk_r>
 8006800:	3001      	adds	r0, #1
 8006802:	d0cf      	beq.n	80067a4 <_malloc_r+0x48>
 8006804:	6025      	str	r5, [r4, #0]
 8006806:	e7db      	b.n	80067c0 <_malloc_r+0x64>
 8006808:	20000094 	.word	0x20000094
 800680c:	20000098 	.word	0x20000098

08006810 <_sbrk_r>:
 8006810:	b538      	push	{r3, r4, r5, lr}
 8006812:	4c06      	ldr	r4, [pc, #24]	; (800682c <_sbrk_r+0x1c>)
 8006814:	2300      	movs	r3, #0
 8006816:	4605      	mov	r5, r0
 8006818:	4608      	mov	r0, r1
 800681a:	6023      	str	r3, [r4, #0]
 800681c:	f7fa fade 	bl	8000ddc <_sbrk>
 8006820:	1c43      	adds	r3, r0, #1
 8006822:	d102      	bne.n	800682a <_sbrk_r+0x1a>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	b103      	cbz	r3, 800682a <_sbrk_r+0x1a>
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	bd38      	pop	{r3, r4, r5, pc}
 800682c:	200003c0 	.word	0x200003c0

08006830 <__sread>:
 8006830:	b510      	push	{r4, lr}
 8006832:	460c      	mov	r4, r1
 8006834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006838:	f000 f896 	bl	8006968 <_read_r>
 800683c:	2800      	cmp	r0, #0
 800683e:	bfab      	itete	ge
 8006840:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006842:	89a3      	ldrhlt	r3, [r4, #12]
 8006844:	181b      	addge	r3, r3, r0
 8006846:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800684a:	bfac      	ite	ge
 800684c:	6563      	strge	r3, [r4, #84]	; 0x54
 800684e:	81a3      	strhlt	r3, [r4, #12]
 8006850:	bd10      	pop	{r4, pc}

08006852 <__swrite>:
 8006852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006856:	461f      	mov	r7, r3
 8006858:	898b      	ldrh	r3, [r1, #12]
 800685a:	05db      	lsls	r3, r3, #23
 800685c:	4605      	mov	r5, r0
 800685e:	460c      	mov	r4, r1
 8006860:	4616      	mov	r6, r2
 8006862:	d505      	bpl.n	8006870 <__swrite+0x1e>
 8006864:	2302      	movs	r3, #2
 8006866:	2200      	movs	r2, #0
 8006868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800686c:	f000 f868 	bl	8006940 <_lseek_r>
 8006870:	89a3      	ldrh	r3, [r4, #12]
 8006872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800687a:	81a3      	strh	r3, [r4, #12]
 800687c:	4632      	mov	r2, r6
 800687e:	463b      	mov	r3, r7
 8006880:	4628      	mov	r0, r5
 8006882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006886:	f000 b817 	b.w	80068b8 <_write_r>

0800688a <__sseek>:
 800688a:	b510      	push	{r4, lr}
 800688c:	460c      	mov	r4, r1
 800688e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006892:	f000 f855 	bl	8006940 <_lseek_r>
 8006896:	1c43      	adds	r3, r0, #1
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	bf15      	itete	ne
 800689c:	6560      	strne	r0, [r4, #84]	; 0x54
 800689e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068a6:	81a3      	strheq	r3, [r4, #12]
 80068a8:	bf18      	it	ne
 80068aa:	81a3      	strhne	r3, [r4, #12]
 80068ac:	bd10      	pop	{r4, pc}

080068ae <__sclose>:
 80068ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b2:	f000 b813 	b.w	80068dc <_close_r>
	...

080068b8 <_write_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	4c07      	ldr	r4, [pc, #28]	; (80068d8 <_write_r+0x20>)
 80068bc:	4605      	mov	r5, r0
 80068be:	4608      	mov	r0, r1
 80068c0:	4611      	mov	r1, r2
 80068c2:	2200      	movs	r2, #0
 80068c4:	6022      	str	r2, [r4, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f7fa fa37 	bl	8000d3a <_write>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_write_r+0x1e>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_write_r+0x1e>
 80068d4:	602b      	str	r3, [r5, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	200003c0 	.word	0x200003c0

080068dc <_close_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	4c06      	ldr	r4, [pc, #24]	; (80068f8 <_close_r+0x1c>)
 80068e0:	2300      	movs	r3, #0
 80068e2:	4605      	mov	r5, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	6023      	str	r3, [r4, #0]
 80068e8:	f7fa fa43 	bl	8000d72 <_close>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_close_r+0x1a>
 80068f0:	6823      	ldr	r3, [r4, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_close_r+0x1a>
 80068f4:	602b      	str	r3, [r5, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	200003c0 	.word	0x200003c0

080068fc <_fstat_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4c07      	ldr	r4, [pc, #28]	; (800691c <_fstat_r+0x20>)
 8006900:	2300      	movs	r3, #0
 8006902:	4605      	mov	r5, r0
 8006904:	4608      	mov	r0, r1
 8006906:	4611      	mov	r1, r2
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	f7fa fa3e 	bl	8000d8a <_fstat>
 800690e:	1c43      	adds	r3, r0, #1
 8006910:	d102      	bne.n	8006918 <_fstat_r+0x1c>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	b103      	cbz	r3, 8006918 <_fstat_r+0x1c>
 8006916:	602b      	str	r3, [r5, #0]
 8006918:	bd38      	pop	{r3, r4, r5, pc}
 800691a:	bf00      	nop
 800691c:	200003c0 	.word	0x200003c0

08006920 <_isatty_r>:
 8006920:	b538      	push	{r3, r4, r5, lr}
 8006922:	4c06      	ldr	r4, [pc, #24]	; (800693c <_isatty_r+0x1c>)
 8006924:	2300      	movs	r3, #0
 8006926:	4605      	mov	r5, r0
 8006928:	4608      	mov	r0, r1
 800692a:	6023      	str	r3, [r4, #0]
 800692c:	f7fa fa3d 	bl	8000daa <_isatty>
 8006930:	1c43      	adds	r3, r0, #1
 8006932:	d102      	bne.n	800693a <_isatty_r+0x1a>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	b103      	cbz	r3, 800693a <_isatty_r+0x1a>
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	bd38      	pop	{r3, r4, r5, pc}
 800693c:	200003c0 	.word	0x200003c0

08006940 <_lseek_r>:
 8006940:	b538      	push	{r3, r4, r5, lr}
 8006942:	4c07      	ldr	r4, [pc, #28]	; (8006960 <_lseek_r+0x20>)
 8006944:	4605      	mov	r5, r0
 8006946:	4608      	mov	r0, r1
 8006948:	4611      	mov	r1, r2
 800694a:	2200      	movs	r2, #0
 800694c:	6022      	str	r2, [r4, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	f7fa fa36 	bl	8000dc0 <_lseek>
 8006954:	1c43      	adds	r3, r0, #1
 8006956:	d102      	bne.n	800695e <_lseek_r+0x1e>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	b103      	cbz	r3, 800695e <_lseek_r+0x1e>
 800695c:	602b      	str	r3, [r5, #0]
 800695e:	bd38      	pop	{r3, r4, r5, pc}
 8006960:	200003c0 	.word	0x200003c0

08006964 <__malloc_lock>:
 8006964:	4770      	bx	lr

08006966 <__malloc_unlock>:
 8006966:	4770      	bx	lr

08006968 <_read_r>:
 8006968:	b538      	push	{r3, r4, r5, lr}
 800696a:	4c07      	ldr	r4, [pc, #28]	; (8006988 <_read_r+0x20>)
 800696c:	4605      	mov	r5, r0
 800696e:	4608      	mov	r0, r1
 8006970:	4611      	mov	r1, r2
 8006972:	2200      	movs	r2, #0
 8006974:	6022      	str	r2, [r4, #0]
 8006976:	461a      	mov	r2, r3
 8006978:	f7fa f9c2 	bl	8000d00 <_read>
 800697c:	1c43      	adds	r3, r0, #1
 800697e:	d102      	bne.n	8006986 <_read_r+0x1e>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	b103      	cbz	r3, 8006986 <_read_r+0x1e>
 8006984:	602b      	str	r3, [r5, #0]
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	200003c0 	.word	0x200003c0

0800698c <_init>:
 800698c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800698e:	bf00      	nop
 8006990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006992:	bc08      	pop	{r3}
 8006994:	469e      	mov	lr, r3
 8006996:	4770      	bx	lr

08006998 <_fini>:
 8006998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800699a:	bf00      	nop
 800699c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699e:	bc08      	pop	{r3}
 80069a0:	469e      	mov	lr, r3
 80069a2:	4770      	bx	lr
