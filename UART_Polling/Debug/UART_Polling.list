
UART_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  080046fc  080046fc  000146fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004874  08004874  00014874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004880  08004880  00014880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000004  08004884  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000bc  20000074  080048f4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000130  080048f4  00020130  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fe7d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000243a  00000000  00000000  0002ff21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001358  00000000  00000000  00032360  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001240  00000000  00000000  000336b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000223df  00000000  00000000  000348f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ba6d  00000000  00000000  00056cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d64a8  00000000  00000000  00062744  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00138bec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000556c  00000000  00000000  00138c68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000074 	.word	0x20000074
 8000158:	00000000 	.word	0x00000000
 800015c:	080046e4 	.word	0x080046e4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000078 	.word	0x20000078
 8000178:	080046e4 	.word	0x080046e4

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	4688      	mov	r8, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0803 	orr.w	r8, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e4:	fa1f fc85 	uxth.w	ip, r5
 80001e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f0:	fb07 f10c 	mul.w	r1, r7, ip
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80001fe:	f080 811b 	bcs.w	8000438 <__udivmoddi4+0x28c>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8118 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000220:	45a4      	cmp	ip, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	192c      	adds	r4, r5, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8107 	bcs.w	800043c <__udivmoddi4+0x290>
 800022e:	45a4      	cmp	ip, r4
 8000230:	f240 8104 	bls.w	800043c <__udivmoddi4+0x290>
 8000234:	3802      	subs	r0, #2
 8000236:	442c      	add	r4, r5
 8000238:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023c:	eba4 040c 	sub.w	r4, r4, ip
 8000240:	2700      	movs	r7, #0
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80eb 	beq.w	8000432 <__udivmoddi4+0x286>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d147      	bne.n	8000302 <__udivmoddi4+0x156>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fa 	bhi.w	8000470 <__udivmoddi4+0x2c4>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	1b49      	subs	r1, r1, r5
 80002a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a4:	fa1f f885 	uxth.w	r8, r5
 80002a8:	2701      	movs	r7, #1
 80002aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002ae:	0c23      	lsrs	r3, r4, #16
 80002b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b8:	fb08 f10c 	mul.w	r1, r8, ip
 80002bc:	4299      	cmp	r1, r3
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002c0:	18eb      	adds	r3, r5, r3
 80002c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4299      	cmp	r1, r3
 80002ca:	f200 80cd 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002ce:	4684      	mov	ip, r0
 80002d0:	1a59      	subs	r1, r3, r1
 80002d2:	b2a3      	uxth	r3, r4
 80002d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e0:	fb08 f800 	mul.w	r8, r8, r0
 80002e4:	45a0      	cmp	r8, r4
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0x14c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x14a>
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	f200 80b6 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002f6:	4618      	mov	r0, r3
 80002f8:	eba4 0408 	sub.w	r4, r4, r8
 80002fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000300:	e79f      	b.n	8000242 <__udivmoddi4+0x96>
 8000302:	f1c7 0c20 	rsb	ip, r7, #32
 8000306:	40bb      	lsls	r3, r7
 8000308:	fa22 fe0c 	lsr.w	lr, r2, ip
 800030c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000310:	fa01 f407 	lsl.w	r4, r1, r7
 8000314:	fa20 f50c 	lsr.w	r5, r0, ip
 8000318:	fa21 f30c 	lsr.w	r3, r1, ip
 800031c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000320:	4325      	orrs	r5, r4
 8000322:	fbb3 f9f8 	udiv	r9, r3, r8
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	fb08 3319 	mls	r3, r8, r9, r3
 800032c:	fa1f fa8e 	uxth.w	sl, lr
 8000330:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000334:	fb09 f40a 	mul.w	r4, r9, sl
 8000338:	429c      	cmp	r4, r3
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f107 	lsl.w	r1, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1e 0303 	adds.w	r3, lr, r3
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8087 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000350:	429c      	cmp	r4, r3
 8000352:	f240 8084 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4473      	add	r3, lr
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	b2ad      	uxth	r5, r5
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800036c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000370:	45a2      	cmp	sl, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1e 0404 	adds.w	r4, lr, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295
 800037c:	d26b      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 800037e:	45a2      	cmp	sl, r4
 8000380:	d969      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000382:	3802      	subs	r0, #2
 8000384:	4474      	add	r4, lr
 8000386:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038a:	fba0 8902 	umull	r8, r9, r0, r2
 800038e:	eba4 040a 	sub.w	r4, r4, sl
 8000392:	454c      	cmp	r4, r9
 8000394:	46c2      	mov	sl, r8
 8000396:	464b      	mov	r3, r9
 8000398:	d354      	bcc.n	8000444 <__udivmoddi4+0x298>
 800039a:	d051      	beq.n	8000440 <__udivmoddi4+0x294>
 800039c:	2e00      	cmp	r6, #0
 800039e:	d069      	beq.n	8000474 <__udivmoddi4+0x2c8>
 80003a0:	ebb1 050a 	subs.w	r5, r1, sl
 80003a4:	eb64 0403 	sbc.w	r4, r4, r3
 80003a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003ac:	40fd      	lsrs	r5, r7
 80003ae:	40fc      	lsrs	r4, r7
 80003b0:	ea4c 0505 	orr.w	r5, ip, r5
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f703 	lsr.w	r7, r0, r3
 80003c4:	4095      	lsls	r5, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	fa21 f303 	lsr.w	r3, r1, r3
 80003ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d2:	4338      	orrs	r0, r7
 80003d4:	0c01      	lsrs	r1, r0, #16
 80003d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003da:	fa1f f885 	uxth.w	r8, r5
 80003de:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e6:	fb07 f308 	mul.w	r3, r7, r8
 80003ea:	428b      	cmp	r3, r1
 80003ec:	fa04 f402 	lsl.w	r4, r4, r2
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f2:	1869      	adds	r1, r5, r1
 80003f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3f02      	subs	r7, #2
 8000400:	4429      	add	r1, r5
 8000402:	1acb      	subs	r3, r1, r3
 8000404:	b281      	uxth	r1, r0
 8000406:	fbb3 f0fe 	udiv	r0, r3, lr
 800040a:	fb0e 3310 	mls	r3, lr, r0, r3
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb00 f308 	mul.w	r3, r0, r8
 8000416:	428b      	cmp	r3, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000420:	d217      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000422:	428b      	cmp	r3, r1
 8000424:	d915      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	1ac9      	subs	r1, r1, r3
 800042c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000430:	e73b      	b.n	80002aa <__udivmoddi4+0xfe>
 8000432:	4637      	mov	r7, r6
 8000434:	4630      	mov	r0, r6
 8000436:	e709      	b.n	800024c <__udivmoddi4+0xa0>
 8000438:	4607      	mov	r7, r0
 800043a:	e6e7      	b.n	800020c <__udivmoddi4+0x60>
 800043c:	4618      	mov	r0, r3
 800043e:	e6fb      	b.n	8000238 <__udivmoddi4+0x8c>
 8000440:	4541      	cmp	r1, r8
 8000442:	d2ab      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000444:	ebb8 0a02 	subs.w	sl, r8, r2
 8000448:	eb69 020e 	sbc.w	r2, r9, lr
 800044c:	3801      	subs	r0, #1
 800044e:	4613      	mov	r3, r2
 8000450:	e7a4      	b.n	800039c <__udivmoddi4+0x1f0>
 8000452:	4660      	mov	r0, ip
 8000454:	e7e9      	b.n	800042a <__udivmoddi4+0x27e>
 8000456:	4618      	mov	r0, r3
 8000458:	e795      	b.n	8000386 <__udivmoddi4+0x1da>
 800045a:	4667      	mov	r7, ip
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	4681      	mov	r9, r0
 8000460:	e77c      	b.n	800035c <__udivmoddi4+0x1b0>
 8000462:	3802      	subs	r0, #2
 8000464:	442c      	add	r4, r5
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0x14c>
 8000468:	f1ac 0c02 	sub.w	ip, ip, #2
 800046c:	442b      	add	r3, r5
 800046e:	e72f      	b.n	80002d0 <__udivmoddi4+0x124>
 8000470:	4638      	mov	r0, r7
 8000472:	e708      	b.n	8000286 <__udivmoddi4+0xda>
 8000474:	4637      	mov	r7, r6
 8000476:	e6e9      	b.n	800024c <__udivmoddi4+0xa0>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b089      	sub	sp, #36	; 0x24
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 fbdd 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f82b 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f000 f8e7 	bl	8000690 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004c2:	f000 f899 	bl	80005f8 <MX_USART1_UART_Init>

    /* USER CODE BEGIN 3 */
	  //	  HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
	  //	  while (HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) != GPIO_PIN_RESET) {}

	  printf("Using printf \n");
 80004c6:	4810      	ldr	r0, [pc, #64]	; (8000508 <main+0x58>)
 80004c8:	f003 fd00 	bl	8003ecc <puts>

	  uint8_t data_tx[]= {'U','s','i','n','g',' ','T','X',' ','1','2','3','\n'};
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <main+0x5c>)
 80004ce:	f107 0410 	add.w	r4, r7, #16
 80004d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004d4:	c407      	stmia	r4!, {r0, r1, r2}
 80004d6:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart1,data_tx,sizeof data_tx,100);
 80004d8:	f107 0110 	add.w	r1, r7, #16
 80004dc:	2364      	movs	r3, #100	; 0x64
 80004de:	220d      	movs	r2, #13
 80004e0:	480b      	ldr	r0, [pc, #44]	; (8000510 <main+0x60>)
 80004e2:	f002 fe0c 	bl	80030fe <HAL_UART_Transmit>

	  uint8_t data_rx[10];
	  while ( HAL_UART_Receive(&huart1,data_rx,sizeof data_rx,100)!= HAL_OK ) { HAL_UART_AbortReceive(&huart1); /* Reset buffer */ }
 80004e6:	e002      	b.n	80004ee <main+0x3e>
 80004e8:	4809      	ldr	r0, [pc, #36]	; (8000510 <main+0x60>)
 80004ea:	f002 ff6e 	bl	80033ca <HAL_UART_AbortReceive>
 80004ee:	1d39      	adds	r1, r7, #4
 80004f0:	2364      	movs	r3, #100	; 0x64
 80004f2:	220a      	movs	r2, #10
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <main+0x60>)
 80004f6:	f002 fe98 	bl	800322a <HAL_UART_Receive>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d1f3      	bne.n	80004e8 <main+0x38>

	  HAL_Delay(100);
 8000500:	2064      	movs	r0, #100	; 0x64
 8000502:	f000 fc3d 	bl	8000d80 <HAL_Delay>
  {
 8000506:	e7de      	b.n	80004c6 <main+0x16>
 8000508:	080046fc 	.word	0x080046fc
 800050c:	0800470c 	.word	0x0800470c
 8000510:	2000009c 	.word	0x2000009c

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b0ae      	sub	sp, #184	; 0xb8
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800051e:	2248      	movs	r2, #72	; 0x48
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fc6e 	bl	8003e04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
 8000538:	615a      	str	r2, [r3, #20]
 800053a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2250      	movs	r2, #80	; 0x50
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 fc5e 	bl	8003e04 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <SystemClock_Config+0xe0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000550:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <SystemClock_Config+0xe0>)
 8000552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <SystemClock_Config+0xe0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000564:	2303      	movs	r3, #3
 8000566:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000572:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2340      	movs	r3, #64	; 0x40
 8000576:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057a:	2300      	movs	r3, #0
 800057c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000584:	4618      	mov	r0, r3
 8000586:	f001 faf5 	bl	8001b74 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000590:	f000 f8d6 	bl	8000740 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000594:	236f      	movs	r3, #111	; 0x6f
 8000596:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000598:	2302      	movs	r3, #2
 800059a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005b4:	2101      	movs	r1, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 fe70 	bl	800229c <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005c2:	f000 f8bd 	bl	8000740 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1;
 80005c6:	f242 0301 	movw	r3, #8193	; 0x2001
 80005ca:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fa99 	bl	8002b12 <HAL_RCCEx_PeriphCLKConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80005e6:	f000 f8ab 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80005ea:	bf00      	nop
 80005ec:	37b8      	adds	r7, #184	; 0xb8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	58000400 	.word	0x58000400

080005f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <MX_USART1_UART_Init+0x90>)
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <MX_USART1_UART_Init+0x94>)
 8000600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_USART1_UART_Init+0x90>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_USART1_UART_Init+0x90>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_USART1_UART_Init+0x90>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_USART1_UART_Init+0x90>)
 800063c:	2200      	movs	r2, #0
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000642:	f002 fd0c 	bl	800305e <HAL_UART_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800064c:	f000 f878 	bl	8000740 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000650:	2100      	movs	r1, #0
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000654:	f003 fac7 	bl	8003be6 <HAL_UARTEx_SetTxFifoThreshold>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800065e:	f000 f86f 	bl	8000740 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000662:	2100      	movs	r1, #0
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000666:	f003 fafc 	bl	8003c62 <HAL_UARTEx_SetRxFifoThreshold>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000670:	f000 f866 	bl	8000740 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000676:	f003 fa7d 	bl	8003b74 <HAL_UARTEx_DisableFifoMode>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000680:	f000 f85e 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000009c 	.word	0x2000009c
 800068c:	40013800 	.word	0x40013800

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a4:	2004      	movs	r0, #4
 80006a6:	f7ff fee9 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2002      	movs	r0, #2
 80006ac:	f7ff fee6 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b0:	2008      	movs	r0, #8
 80006b2:	f7ff fee3 	bl	800047c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led2_Pin|Led3_Pin|Led1_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2123      	movs	r1, #35	; 0x23
 80006ba:	4815      	ldr	r0, [pc, #84]	; (8000710 <MX_GPIO_Init+0x80>)
 80006bc:	f000 fe6c 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 80006c0:	2310      	movs	r3, #16
 80006c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4810      	ldr	r0, [pc, #64]	; (8000714 <MX_GPIO_Init+0x84>)
 80006d2:	f000 fcf1 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led2_Pin Led3_Pin Led1_Pin */
  GPIO_InitStruct.Pin = Led2_Pin|Led3_Pin|Led1_Pin;
 80006d6:	2323      	movs	r3, #35	; 0x23
 80006d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_GPIO_Init+0x80>)
 80006ec:	f000 fce4 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button3_Pin;
 80006f0:	2303      	movs	r3, #3
 80006f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_GPIO_Init+0x88>)
 8000702:	f000 fcd9 	bl	80010b8 <HAL_GPIO_Init>

}
 8000706:	bf00      	nop
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	48000400 	.word	0x48000400
 8000714:	48000800 	.word	0x48000800
 8000718:	48000c00 	.word	0x48000c00

0800071c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000724:	1d39      	adds	r1, r7, #4
 8000726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072a:	2201      	movs	r2, #1
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <__io_putchar+0x20>)
 800072e:	f002 fce6 	bl	80030fe <HAL_UART_Transmit>

  return ch;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000009c 	.word	0x2000009c

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr

0800074e <LL_AHB2_GRP1_EnableClock>:
{
 800074e:	b480      	push	{r7}
 8000750:	b085      	sub	sp, #20
 8000752:	af00      	add	r7, sp, #0
 8000754:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800075c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4313      	orrs	r3, r2
 8000764:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800076a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4013      	ands	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000772:	68fb      	ldr	r3, [r7, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800078c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800078e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4313      	orrs	r3, r2
 8000796:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800079c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4013      	ands	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a4:	68fb      	ldr	r3, [r7, #12]
}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b085      	sub	sp, #20
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4013      	ands	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007d6:	68fb      	ldr	r3, [r7, #12]
}
 80007d8:	bf00      	nop
 80007da:	3714      	adds	r7, #20
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80007e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80007ec:	f7ff ffc8 	bl	8000780 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	202e      	movs	r0, #46	; 0x2e
 80007f6:	f000 fbc0 	bl	8000f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80007fa:	202e      	movs	r0, #46	; 0x2e
 80007fc:	f000 fbd7 	bl	8000fae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b088      	sub	sp, #32
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a0e      	ldr	r2, [pc, #56]	; (800085c <HAL_UART_MspInit+0x58>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d116      	bne.n	8000854 <HAL_UART_MspInit+0x50>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000826:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800082a:	f7ff ffc2 	bl	80007b2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff ff8d 	bl	800074e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000834:	23c0      	movs	r3, #192	; 0xc0
 8000836:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000838:	2302      	movs	r3, #2
 800083a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000844:	2307      	movs	r3, #7
 8000846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	4804      	ldr	r0, [pc, #16]	; (8000860 <HAL_UART_MspInit+0x5c>)
 8000850:	f000 fc32 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000854:	bf00      	nop
 8000856:	3720      	adds	r7, #32
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	40013800 	.word	0x40013800
 8000860:	48000400 	.word	0x48000400

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <HardFault_Handler+0x4>

08000878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <MemManage_Handler+0x4>

0800087e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000882:	e7fe      	b.n	8000882 <BusFault_Handler+0x4>

08000884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <UsageFault_Handler+0x4>

0800088a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b8:	f000 fa36 	bl	8000d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	bd80      	pop	{r7, pc}

080008c0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80008c4:	f000 fd80 	bl	80013c8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}

080008cc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	60f8      	str	r0, [r7, #12]
 80008d4:	60b9      	str	r1, [r7, #8]
 80008d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e00a      	b.n	80008f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008de:	f3af 8000 	nop.w
 80008e2:	4601      	mov	r1, r0
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	1c5a      	adds	r2, r3, #1
 80008e8:	60ba      	str	r2, [r7, #8]
 80008ea:	b2ca      	uxtb	r2, r1
 80008ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	3301      	adds	r3, #1
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	697a      	ldr	r2, [r7, #20]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	dbf0      	blt.n	80008de <_read+0x12>
	}

return len;
 80008fc:	687b      	ldr	r3, [r7, #4]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af00      	add	r7, sp, #0
 800090c:	60f8      	str	r0, [r7, #12]
 800090e:	60b9      	str	r1, [r7, #8]
 8000910:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
 8000916:	e009      	b.n	800092c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	1c5a      	adds	r2, r3, #1
 800091c:	60ba      	str	r2, [r7, #8]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fefb 	bl	800071c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	3301      	adds	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	429a      	cmp	r2, r3
 8000932:	dbf1      	blt.n	8000918 <_write+0x12>
	}
	return len;
 8000934:	687b      	ldr	r3, [r7, #4]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <_close>:

int _close(int file)
{
 800093e:	b480      	push	{r7}
 8000940:	b083      	sub	sp, #12
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
	return -1;
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
}
 800094a:	4618      	mov	r0, r3
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr

08000956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000956:	b480      	push	{r7}
 8000958:	b083      	sub	sp, #12
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000966:	605a      	str	r2, [r3, #4]
	return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <_isatty>:

int _isatty(int file)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
	return 1;
 800097e:	2301      	movs	r3, #1
}
 8000980:	4618      	mov	r0, r3
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
	return 0;
 8000998:	2300      	movs	r3, #0
}
 800099a:	4618      	mov	r0, r3
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <_sbrk+0x5c>)
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <_sbrk+0x60>)
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d102      	bne.n	80009ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <_sbrk+0x64>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <_sbrk+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d207      	bcs.n	80009e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d8:	f003 f9ea 	bl	8003db0 <__errno>
 80009dc:	4602      	mov	r2, r0
 80009de:	230c      	movs	r3, #12
 80009e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	e009      	b.n	80009fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <_sbrk+0x64>)
 80009f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20030000 	.word	0x20030000
 8000a08:	00000400 	.word	0x00000400
 8000a0c:	20000090 	.word	0x20000090
 8000a10:	20000130 	.word	0x20000130

08000a14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000a18:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <SystemInit+0xa0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <SystemInit+0xa0>)
 8000a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a24:	4a23      	ldr	r2, [pc, #140]	; (8000ab4 <SystemInit+0xa0>)
 8000a26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a2a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a42:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000a46:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <SystemInit+0xa4>)
 8000a54:	4013      	ands	r3, r2
 8000a56:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a64:	f023 0305 	bic.w	r3, r3, #5
 8000a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a78:	f023 0301 	bic.w	r3, r3, #1
 8000a7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a84:	4a0d      	ldr	r2, [pc, #52]	; (8000abc <SystemInit+0xa8>)
 8000a86:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a8c:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <SystemInit+0xa8>)
 8000a8e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	619a      	str	r2, [r3, #24]
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	e000ed00 	.word	0xe000ed00
 8000ab8:	faf6fefb 	.word	0xfaf6fefb
 8000abc:	22041000 	.word	0x22041000

08000ac0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000ac6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	f003 030f 	and.w	r3, r3, #15
 8000ad2:	4a47      	ldr	r2, [pc, #284]	; (8000bf0 <SystemCoreClockUpdate+0x130>)
 8000ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f003 030c 	and.w	r3, r3, #12
 8000ae4:	2b0c      	cmp	r3, #12
 8000ae6:	d867      	bhi.n	8000bb8 <SystemCoreClockUpdate+0xf8>
 8000ae8:	a201      	add	r2, pc, #4	; (adr r2, 8000af0 <SystemCoreClockUpdate+0x30>)
 8000aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aee:	bf00      	nop
 8000af0:	08000b25 	.word	0x08000b25
 8000af4:	08000bb9 	.word	0x08000bb9
 8000af8:	08000bb9 	.word	0x08000bb9
 8000afc:	08000bb9 	.word	0x08000bb9
 8000b00:	08000b2d 	.word	0x08000b2d
 8000b04:	08000bb9 	.word	0x08000bb9
 8000b08:	08000bb9 	.word	0x08000bb9
 8000b0c:	08000bb9 	.word	0x08000bb9
 8000b10:	08000b35 	.word	0x08000b35
 8000b14:	08000bb9 	.word	0x08000bb9
 8000b18:	08000bb9 	.word	0x08000bb9
 8000b1c:	08000bb9 	.word	0x08000bb9
 8000b20:	08000b3d 	.word	0x08000b3d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000b24:	4a33      	ldr	r2, [pc, #204]	; (8000bf4 <SystemCoreClockUpdate+0x134>)
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	6013      	str	r3, [r2, #0]
      break;
 8000b2a:	e049      	b.n	8000bc0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000b2c:	4b31      	ldr	r3, [pc, #196]	; (8000bf4 <SystemCoreClockUpdate+0x134>)
 8000b2e:	4a32      	ldr	r2, [pc, #200]	; (8000bf8 <SystemCoreClockUpdate+0x138>)
 8000b30:	601a      	str	r2, [r3, #0]
      break;
 8000b32:	e045      	b.n	8000bc0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000b34:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <SystemCoreClockUpdate+0x134>)
 8000b36:	4a31      	ldr	r2, [pc, #196]	; (8000bfc <SystemCoreClockUpdate+0x13c>)
 8000b38:	601a      	str	r2, [r3, #0]
      break;
 8000b3a:	e041      	b.n	8000bc0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	091b      	lsrs	r3, r3, #4
 8000b50:	f003 0307 	and.w	r3, r3, #7
 8000b54:	3301      	adds	r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d105      	bne.n	8000b6a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000b5e:	4a26      	ldr	r2, [pc, #152]	; (8000bf8 <SystemCoreClockUpdate+0x138>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e00d      	b.n	8000b86 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d105      	bne.n	8000b7c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000b70:	4a22      	ldr	r2, [pc, #136]	; (8000bfc <SystemCoreClockUpdate+0x13c>)
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	e004      	b.n	8000b86 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b84:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	fb02 f303 	mul.w	r3, r2, r3
 8000b98:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000b9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0f5b      	lsrs	r3, r3, #29
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000baa:	697a      	ldr	r2, [r7, #20]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <SystemCoreClockUpdate+0x134>)
 8000bb4:	6013      	str	r3, [r2, #0]
      break;
 8000bb6:	e003      	b.n	8000bc0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000bb8:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <SystemCoreClockUpdate+0x134>)
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	6013      	str	r3, [r2, #0]
      break;
 8000bbe:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	091b      	lsrs	r3, r3, #4
 8000bc8:	f003 030f 	and.w	r3, r3, #15
 8000bcc:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <SystemCoreClockUpdate+0x140>)
 8000bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <SystemCoreClockUpdate+0x134>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <SystemCoreClockUpdate+0x134>)
 8000be0:	6013      	str	r3, [r2, #0]

}
 8000be2:	bf00      	nop
 8000be4:	371c      	adds	r7, #28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	080047b8 	.word	0x080047b8
 8000bf4:	20000004 	.word	0x20000004
 8000bf8:	00f42400 	.word	0x00f42400
 8000bfc:	01e84800 	.word	0x01e84800
 8000c00:	08004758 	.word	0x08004758

08000c04 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000c04:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c06:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c08:	3304      	adds	r3, #4

08000c0a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000c0e:	d3f9      	bcc.n	8000c04 <CopyDataInit>
  bx lr
 8000c10:	4770      	bx	lr

08000c12 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000c12:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000c14:	3004      	adds	r0, #4

08000c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000c16:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000c18:	d3fb      	bcc.n	8000c12 <FillZerobss>
  bx lr
 8000c1a:	4770      	bx	lr

08000c1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000c1e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c20:	f7ff fef8 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000c24:	480b      	ldr	r0, [pc, #44]	; (8000c54 <LoopForever+0x8>)
 8000c26:	490c      	ldr	r1, [pc, #48]	; (8000c58 <LoopForever+0xc>)
 8000c28:	4a0c      	ldr	r2, [pc, #48]	; (8000c5c <LoopForever+0x10>)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f7ff ffed 	bl	8000c0a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000c30:	480b      	ldr	r0, [pc, #44]	; (8000c60 <LoopForever+0x14>)
 8000c32:	490c      	ldr	r1, [pc, #48]	; (8000c64 <LoopForever+0x18>)
 8000c34:	2300      	movs	r3, #0
 8000c36:	f7ff ffee 	bl	8000c16 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000c3a:	480b      	ldr	r0, [pc, #44]	; (8000c68 <LoopForever+0x1c>)
 8000c3c:	490b      	ldr	r1, [pc, #44]	; (8000c6c <LoopForever+0x20>)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	f7ff ffe9 	bl	8000c16 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c44:	f003 f8ba 	bl	8003dbc <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000c48:	f7ff fc32 	bl	80004b0 <main>

08000c4c <LoopForever>:

LoopForever:
  b LoopForever
 8000c4c:	e7fe      	b.n	8000c4c <LoopForever>
 8000c4e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000c50:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000c54:	20000004 	.word	0x20000004
 8000c58:	20000074 	.word	0x20000074
 8000c5c:	08004884 	.word	0x08004884
  INIT_BSS _sbss, _ebss
 8000c60:	20000074 	.word	0x20000074
 8000c64:	20000130 	.word	0x20000130
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000c68:	20030000 	.word	0x20030000
 8000c6c:	20030000 	.word	0x20030000

08000c70 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_Init+0x3c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <HAL_Init+0x3c>)
 8000c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f000 f96a 	bl	8000f64 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c90:	2000      	movs	r0, #0
 8000c92:	f000 f80f 	bl	8000cb4 <HAL_InitTick>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d002      	beq.n	8000ca2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	71fb      	strb	r3, [r7, #7]
 8000ca0:	e001      	b.n	8000ca6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ca2:	f7ff fd9f 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	58004000 	.word	0x58004000

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_InitTick+0x6c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d024      	beq.n	8000d12 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000cc8:	f001 fc8e 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_InitTick+0x6c>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f000 f972 	bl	8000fca <HAL_SYSTICK_Config>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d10f      	bne.n	8000d0c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b0f      	cmp	r3, #15
 8000cf0:	d809      	bhi.n	8000d06 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfa:	f000 f93e 	bl	8000f7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfe:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <HAL_InitTick+0x70>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	e007      	b.n	8000d16 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	73fb      	strb	r3, [r7, #15]
 8000d0a:	e004      	b.n	8000d16 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
 8000d10:	e001      	b.n	8000d16 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	2000000c 	.word	0x2000000c
 8000d24:	20000008 	.word	0x20000008

08000d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x20>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	461a      	mov	r2, r3
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_IncTick+0x24>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4413      	add	r3, r2
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <HAL_IncTick+0x24>)
 8000d3a:	6013      	str	r3, [r2, #0]
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	2000000c 	.word	0x2000000c
 8000d4c:	20000128 	.word	0x20000128

08000d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return uwTick;
 8000d54:	4b03      	ldr	r3, [pc, #12]	; (8000d64 <HAL_GetTick+0x14>)
 8000d56:	681b      	ldr	r3, [r3, #0]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000128 	.word	0x20000128

08000d68 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	; (8000d7c <HAL_GetTickPrio+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008

08000d80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000d88:	f7ff ffe2 	bl	8000d50 <HAL_GetTick>
 8000d8c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d98:	d005      	beq.n	8000da6 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_Delay+0x40>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000da6:	bf00      	nop
 8000da8:	f7ff ffd2 	bl	8000d50 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d8f7      	bhi.n	8000da8 <HAL_Delay+0x28>
    {
    }
  }
 8000db8:	bf00      	nop
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000000c 	.word	0x2000000c

08000dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de0:	4013      	ands	r3, r2
 8000de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df6:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <__NVIC_SetPriorityGrouping+0x44>)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	3714      	adds	r7, #20
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <__NVIC_GetPriorityGrouping+0x18>)
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0307 	and.w	r3, r3, #7
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	db0b      	blt.n	8000e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	f003 021f 	and.w	r2, r3, #31
 8000e40:	4907      	ldr	r1, [pc, #28]	; (8000e60 <__NVIC_EnableIRQ+0x38>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	095b      	lsrs	r3, r3, #5
 8000e48:	2001      	movs	r0, #1
 8000e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000e100 	.word	0xe000e100

08000e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	db0a      	blt.n	8000e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	490c      	ldr	r1, [pc, #48]	; (8000eb0 <__NVIC_SetPriority+0x4c>)
 8000e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e82:	0112      	lsls	r2, r2, #4
 8000e84:	b2d2      	uxtb	r2, r2
 8000e86:	440b      	add	r3, r1
 8000e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e8c:	e00a      	b.n	8000ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	b2da      	uxtb	r2, r3
 8000e92:	4908      	ldr	r1, [pc, #32]	; (8000eb4 <__NVIC_SetPriority+0x50>)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	3b04      	subs	r3, #4
 8000e9c:	0112      	lsls	r2, r2, #4
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	440b      	add	r3, r1
 8000ea2:	761a      	strb	r2, [r3, #24]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	f1c3 0307 	rsb	r3, r3, #7
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	bf28      	it	cs
 8000ed6:	2304      	movcs	r3, #4
 8000ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3304      	adds	r3, #4
 8000ede:	2b06      	cmp	r3, #6
 8000ee0:	d902      	bls.n	8000ee8 <NVIC_EncodePriority+0x30>
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3b03      	subs	r3, #3
 8000ee6:	e000      	b.n	8000eea <NVIC_EncodePriority+0x32>
 8000ee8:	2300      	movs	r3, #0
 8000eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43da      	mvns	r2, r3
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	401a      	ands	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f00:	f04f 31ff 	mov.w	r1, #4294967295
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0a:	43d9      	mvns	r1, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	4313      	orrs	r3, r2
         );
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f30:	d301      	bcc.n	8000f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00f      	b.n	8000f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f36:	4a0a      	ldr	r2, [pc, #40]	; (8000f60 <SysTick_Config+0x40>)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3e:	210f      	movs	r1, #15
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f7ff ff8e 	bl	8000e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SysTick_Config+0x40>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4e:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <SysTick_Config+0x40>)
 8000f50:	2207      	movs	r2, #7
 8000f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	e000e010 	.word	0xe000e010

08000f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f7ff ff29 	bl	8000dc4 <__NVIC_SetPriorityGrouping>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b086      	sub	sp, #24
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
 8000f86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff40 	bl	8000e0c <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff90 	bl	8000eb8 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5f 	bl	8000e64 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff33 	bl	8000e28 <__NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffa4 	bl	8000f20 <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e04f      	b.n	8001094 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	2b02      	cmp	r3, #2
 8000ffe:	d008      	beq.n	8001012 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2204      	movs	r2, #4
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e040      	b.n	8001094 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 020e 	bic.w	r2, r2, #14
 8001020:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001030:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f022 0201 	bic.w	r2, r2, #1
 8001040:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	f003 021c 	and.w	r2, r3, #28
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800105e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001064:	2b00      	cmp	r3, #0
 8001066:	d00c      	beq.n	8001082 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800106c:	681a      	ldr	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001072:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001076:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001080:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001092:	2300      	movs	r3, #0
}
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_DMA_GetError>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b087      	sub	sp, #28
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010c6:	e14c      	b.n	8001362 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	2101      	movs	r1, #1
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 813e 	beq.w	800135c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d00b      	beq.n	8001100 <HAL_GPIO_Init+0x48>
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d007      	beq.n	8001100 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010f4:	2b11      	cmp	r3, #17
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b12      	cmp	r3, #18
 80010fe:	d130      	bne.n	8001162 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68da      	ldr	r2, [r3, #12]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001136:	2201      	movs	r2, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	091b      	lsrs	r3, r3, #4
 800114c:	f003 0201 	and.w	r2, r3, #1
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4313      	orrs	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	2203      	movs	r2, #3
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b02      	cmp	r3, #2
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0xea>
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b12      	cmp	r3, #18
 80011a0:	d123      	bne.n	80011ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	220f      	movs	r2, #15
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	691a      	ldr	r2, [r3, #16]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	f003 0307 	and.w	r3, r3, #7
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	08da      	lsrs	r2, r3, #3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3208      	adds	r2, #8
 80011e4:	6939      	ldr	r1, [r7, #16]
 80011e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0203 	and.w	r2, r3, #3
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 8098 	beq.w	800135c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800122c:	4a54      	ldr	r2, [pc, #336]	; (8001380 <HAL_GPIO_Init+0x2c8>)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f003 0303 	and.w	r3, r3, #3
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001256:	d019      	beq.n	800128c <HAL_GPIO_Init+0x1d4>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a4a      	ldr	r2, [pc, #296]	; (8001384 <HAL_GPIO_Init+0x2cc>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d013      	beq.n	8001288 <HAL_GPIO_Init+0x1d0>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a49      	ldr	r2, [pc, #292]	; (8001388 <HAL_GPIO_Init+0x2d0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00d      	beq.n	8001284 <HAL_GPIO_Init+0x1cc>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a48      	ldr	r2, [pc, #288]	; (800138c <HAL_GPIO_Init+0x2d4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d007      	beq.n	8001280 <HAL_GPIO_Init+0x1c8>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a47      	ldr	r2, [pc, #284]	; (8001390 <HAL_GPIO_Init+0x2d8>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d101      	bne.n	800127c <HAL_GPIO_Init+0x1c4>
 8001278:	2304      	movs	r3, #4
 800127a:	e008      	b.n	800128e <HAL_GPIO_Init+0x1d6>
 800127c:	2307      	movs	r3, #7
 800127e:	e006      	b.n	800128e <HAL_GPIO_Init+0x1d6>
 8001280:	2303      	movs	r3, #3
 8001282:	e004      	b.n	800128e <HAL_GPIO_Init+0x1d6>
 8001284:	2302      	movs	r3, #2
 8001286:	e002      	b.n	800128e <HAL_GPIO_Init+0x1d6>
 8001288:	2301      	movs	r3, #1
 800128a:	e000      	b.n	800128e <HAL_GPIO_Init+0x1d6>
 800128c:	2300      	movs	r3, #0
 800128e:	697a      	ldr	r2, [r7, #20]
 8001290:	f002 0203 	and.w	r2, r2, #3
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4093      	lsls	r3, r2
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800129e:	4938      	ldr	r1, [pc, #224]	; (8001380 <HAL_GPIO_Init+0x2c8>)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	3302      	adds	r3, #2
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012ac:	4b39      	ldr	r3, [pc, #228]	; (8001394 <HAL_GPIO_Init+0x2dc>)
 80012ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012d2:	4a30      	ldr	r2, [pc, #192]	; (8001394 <HAL_GPIO_Init+0x2dc>)
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80012da:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <HAL_GPIO_Init+0x2dc>)
 80012dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <HAL_GPIO_Init+0x2dc>)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <HAL_GPIO_Init+0x2dc>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	43db      	mvns	r3, r3
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4013      	ands	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_GPIO_Init+0x2dc>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001332:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_GPIO_Init+0x2dc>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <HAL_GPIO_Init+0x2dc>)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	3301      	adds	r3, #1
 8001360:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	f47f aeab 	bne.w	80010c8 <HAL_GPIO_Init+0x10>
  }
}
 8001372:	bf00      	nop
 8001374:	371c      	adds	r7, #28
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40010000 	.word	0x40010000
 8001384:	48000400 	.word	0x48000400
 8001388:	48000800 	.word	0x48000800
 800138c:	48000c00 	.word	0x48000c00
 8001390:	48001000 	.word	0x48001000
 8001394:	58000800 	.word	0x58000800

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b4:	e002      	b.n	80013bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b6:	887a      	ldrh	r2, [r7, #2]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80013ce:	4b0a      	ldr	r3, [pc, #40]	; (80013f8 <HAL_HSEM_IRQHandler+0x30>)
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_HSEM_IRQHandler+0x30>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	43db      	mvns	r3, r3
 80013dc:	4906      	ldr	r1, [pc, #24]	; (80013f8 <HAL_HSEM_IRQHandler+0x30>)
 80013de:	4013      	ands	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80013e2:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <HAL_HSEM_IRQHandler+0x30>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f807 	bl	80013fc <HAL_HSEM_FreeCallback>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	58001500 	.word	0x58001500

080013fc <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001404:	bf00      	nop
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800141a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	58000400 	.word	0x58000400

08001430 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001434:	4b04      	ldr	r3, [pc, #16]	; (8001448 <HAL_PWREx_GetVoltageRange+0x18>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	58000400 	.word	0x58000400

0800144c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001450:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800145e:	d101      	bne.n	8001464 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001460:	2301      	movs	r3, #1
 8001462:	e000      	b.n	8001466 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800147e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001482:	6013      	str	r3, [r2, #0]
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001492:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800149c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a0:	6013      	str	r3, [r2, #0]
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80014b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80014ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80014ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014fa:	d101      	bne.n	8001500 <LL_RCC_HSE_IsReady+0x18>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <LL_RCC_HSE_IsReady+0x1a>
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800151a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800152e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001538:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800153c:	6013      	str	r3, [r2, #0]
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800154c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155a:	d101      	bne.n	8001560 <LL_RCC_HSI_IsReady+0x18>
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <LL_RCC_HSI_IsReady+0x1a>
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	061b      	lsls	r3, r3, #24
 8001582:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800159a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80015bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d101      	bne.n	80015f2 <LL_RCC_HSI48_IsReady+0x18>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <LL_RCC_HSI48_IsReady+0x1a>
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80015fe:	b480      	push	{r7}
 8001600:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001652:	f043 0304 	orr.w	r3, r3, #4
 8001656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001670:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b02      	cmp	r3, #2
 8001698:	d101      	bne.n	800169e <LL_RCC_LSE_IsReady+0x18>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <LL_RCC_LSE_IsReady+0x1a>
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80016ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80016d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80016f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d101      	bne.n	8001706 <LL_RCC_LSI1_IsReady+0x18>
 8001702:	2301      	movs	r3, #1
 8001704:	e000      	b.n	8001708 <LL_RCC_LSI1_IsReady+0x1a>
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800171a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800171e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001722:	f043 0304 	orr.w	r3, r3, #4
 8001726:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800173c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001740:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001744:	f023 0304 	bic.w	r3, r3, #4
 8001748:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800175a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b08      	cmp	r3, #8
 8001768:	d101      	bne.n	800176e <LL_RCC_LSI2_IsReady+0x18>
 800176a:	2301      	movs	r3, #1
 800176c:	e000      	b.n	8001770 <LL_RCC_LSI2_IsReady+0x1a>
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001786:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800178a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001796:	4313      	orrs	r3, r2
 8001798:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80017ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d4:	f023 0301 	bic.w	r3, r3, #1
 80017d8:	6013      	str	r3, [r2, #0]
}
 80017da:	bf00      	nop
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80017e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d101      	bne.n	80017fa <LL_RCC_MSI_IsReady+0x16>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <LL_RCC_MSI_IsReady+0x18>
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800180e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001818:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800183e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2bb0      	cmp	r3, #176	; 0xb0
 8001844:	d901      	bls.n	800184a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001846:	23b0      	movs	r3, #176	; 0xb0
 8001848:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800184a:	687b      	ldr	r3, [r7, #4]
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001872:	4313      	orrs	r3, r2
 8001874:	604b      	str	r3, [r1, #4]
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800188a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f023 0203 	bic.w	r2, r3, #3
 8001894:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr

080018aa <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4313      	orrs	r3, r2
 8001906:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800191e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001922:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001926:	f023 020f 	bic.w	r2, r3, #15
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001932:	4313      	orrs	r3, r2
 8001934:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800197e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019b8:	011b      	lsls	r3, r3, #4
 80019ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80019cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80019e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a24:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a28:	6013      	str	r3, [r2, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a46:	d101      	bne.n	8001a4c <LL_RCC_PLL_IsReady+0x18>
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e000      	b.n	8001a4e <LL_RCC_PLL_IsReady+0x1a>
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	f003 0303 	and.w	r3, r3, #3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001acc:	d101      	bne.n	8001ad2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e000      	b.n	8001ad4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001af2:	d101      	bne.n	8001af8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e000      	b.n	8001afa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b0c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b18:	d101      	bne.n	8001b1e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b3c:	d101      	bne.n	8001b42 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b60:	d101      	bne.n	8001b66 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b08d      	sub	sp, #52	; 0x34
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e386      	b.n	8002294 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0320 	and.w	r3, r3, #32
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 808f 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b94:	f7ff fe89 	bl	80018aa <LL_RCC_GetSysClkSource>
 8001b98:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b9a:	f7ff ff82 	bl	8001aa2 <LL_RCC_PLL_GetMainSource>
 8001b9e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d005      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x3e>
 8001ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d149      	bne.n	8001c40 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d146      	bne.n	8001c40 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bb2:	f7ff fe17 	bl	80017e4 <LL_RCC_MSI_IsReady>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x54>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e365      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001bcc:	f7ff fe2f 	bl	800182e <LL_RCC_MSI_GetRange>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	429c      	cmp	r4, r3
 8001bd4:	d914      	bls.n	8001c00 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 fd44 	bl	8002668 <RCC_SetFlashLatencyFromMSIRange>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e354      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fe09 	bl	8001806 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fe2d 	bl	8001858 <LL_RCC_MSI_SetCalibTrimming>
 8001bfe:	e013      	b.n	8001c28 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff fdfe 	bl	8001806 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fe22 	bl	8001858 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f000 fd25 	bl	8002668 <RCC_SetFlashLatencyFromMSIRange>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e335      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8001c28:	f7fe ff4a 	bl	8000ac0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c2c:	4bb4      	ldr	r3, [pc, #720]	; (8001f00 <HAL_RCC_OscConfig+0x38c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff f83f 	bl	8000cb4 <HAL_InitTick>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d039      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e329      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d01e      	beq.n	8001c86 <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c48:	f7ff fdae 	bl	80017a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff f880 	bl	8000d50 <HAL_GetTick>
 8001c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c54:	f7ff f87c 	bl	8000d50 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e316      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c66:	f7ff fdbd 	bl	80017e4 <LL_RCC_MSI_IsReady>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0f1      	beq.n	8001c54 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fdc6 	bl	8001806 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fdea 	bl	8001858 <LL_RCC_MSI_SetCalibTrimming>
 8001c84:	e015      	b.n	8001cb2 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c86:	f7ff fd9e 	bl	80017c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f861 	bl	8000d50 <HAL_GetTick>
 8001c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c92:	f7ff f85d 	bl	8000d50 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e2f7      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001ca4:	f7ff fd9e 	bl	80017e4 <LL_RCC_MSI_IsReady>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f1      	bne.n	8001c92 <HAL_RCC_OscConfig+0x11e>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d05a      	beq.n	8001d74 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cbe:	f7ff fdf4 	bl	80018aa <LL_RCC_GetSysClkSource>
 8001cc2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc4:	f7ff feed 	bl	8001aa2 <LL_RCC_PLL_GetMainSource>
 8001cc8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_OscConfig+0x168>
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d10d      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d10a      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	f7ff fc04 	bl	80014e8 <LL_RCC_HSE_IsReady>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d045      	beq.n	8001d72 <HAL_RCC_OscConfig+0x1fe>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d141      	bne.n	8001d72 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e2d0      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_OscConfig+0x18e>
 8001cfc:	f7ff fbd6 	bl	80014ac <LL_RCC_HSE_Enable>
 8001d00:	e00d      	b.n	8001d1e <HAL_RCC_OscConfig+0x1aa>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d0a:	d104      	bne.n	8001d16 <HAL_RCC_OscConfig+0x1a2>
 8001d0c:	f7ff fbb0 	bl	8001470 <LL_RCC_HSE_EnableBypass>
 8001d10:	f7ff fbcc 	bl	80014ac <LL_RCC_HSE_Enable>
 8001d14:	e003      	b.n	8001d1e <HAL_RCC_OscConfig+0x1aa>
 8001d16:	f7ff fbd8 	bl	80014ca <LL_RCC_HSE_Disable>
 8001d1a:	f7ff fbb8 	bl	800148e <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d012      	beq.n	8001d4c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff f813 	bl	8000d50 <HAL_GetTick>
 8001d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2e:	f7ff f80f 	bl	8000d50 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b64      	cmp	r3, #100	; 0x64
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e2a9      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d40:	f7ff fbd2 	bl	80014e8 <LL_RCC_HSE_IsReady>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f1      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1ba>
 8001d4a:	e013      	b.n	8001d74 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f800 	bl	8000d50 <HAL_GetTick>
 8001d50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7fe fffc 	bl	8000d50 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	; 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e296      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d66:	f7ff fbbf 	bl	80014e8 <LL_RCC_HSE_IsReady>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f1      	bne.n	8001d54 <HAL_RCC_OscConfig+0x1e0>
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d72:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d051      	beq.n	8001e24 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d80:	f7ff fd93 	bl	80018aa <LL_RCC_GetSysClkSource>
 8001d84:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d86:	f7ff fe8c 	bl	8001aa2 <LL_RCC_PLL_GetMainSource>
 8001d8a:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b04      	cmp	r3, #4
 8001d90:	d005      	beq.n	8001d9e <HAL_RCC_OscConfig+0x22a>
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	2b0c      	cmp	r3, #12
 8001d96:	d113      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d110      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d9e:	f7ff fbd3 	bl	8001548 <LL_RCC_HSI_IsReady>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <HAL_RCC_OscConfig+0x240>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e26f      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fbd7 	bl	800156c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dbe:	e031      	b.n	8001e24 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d019      	beq.n	8001dfc <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc8:	f7ff fba0 	bl	800150c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe ffc0 	bl	8000d50 <HAL_GetTick>
 8001dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd4:	f7fe ffbc 	bl	8000d50 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e256      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001de6:	f7ff fbaf 	bl	8001548 <LL_RCC_HSI_IsReady>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f1      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff fbb9 	bl	800156c <LL_RCC_HSI_SetCalibTrimming>
 8001dfa:	e013      	b.n	8001e24 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dfc:	f7ff fb95 	bl	800152a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7fe ffa6 	bl	8000d50 <HAL_GetTick>
 8001e04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7fe ffa2 	bl	8000d50 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e23c      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e1a:	f7ff fb95 	bl	8001548 <LL_RCC_HSI_IsReady>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f1      	bne.n	8001e08 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80a2 	beq.w	8001f82 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d075      	beq.n	8001f32 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d046      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001e52:	f7ff fc4c 	bl	80016ee <LL_RCC_LSI1_IsReady>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d113      	bne.n	8001e84 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001e5c:	f7ff fc25 	bl	80016aa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e60:	f7fe ff76 	bl	8000d50 <HAL_GetTick>
 8001e64:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001e68:	f7fe ff72 	bl	8000d50 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e20c      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001e7a:	f7ff fc38 	bl	80016ee <LL_RCC_LSI1_IsReady>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0f1      	beq.n	8001e68 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001e84:	f7ff fc45 	bl	8001712 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7fe ff62 	bl	8000d50 <HAL_GetTick>
 8001e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001e90:	f7fe ff5e 	bl	8000d50 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b03      	cmp	r3, #3
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1f8      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001ea2:	f7ff fc58 	bl	8001756 <LL_RCC_LSI2_IsReady>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f1      	beq.n	8001e90 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fc62 	bl	800177a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001eb6:	f7ff fc09 	bl	80016cc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7fe ff49 	bl	8000d50 <HAL_GetTick>
 8001ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001ec2:	f7fe ff45 	bl	8000d50 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e1df      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001ed4:	f7ff fc0b 	bl	80016ee <LL_RCC_LSI1_IsReady>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f1      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x34e>
 8001ede:	e050      	b.n	8001f82 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001ee0:	f7ff fbe3 	bl	80016aa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee4:	f7fe ff34 	bl	8000d50 <HAL_GetTick>
 8001ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001eea:	e00b      	b.n	8001f04 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001eec:	f7fe ff30 	bl	8000d50 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d904      	bls.n	8001f04 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e1ca      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
 8001efe:	bf00      	nop
 8001f00:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f04:	f7ff fbf3 	bl	80016ee <LL_RCC_LSI1_IsReady>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0ee      	beq.n	8001eec <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001f0e:	f7ff fc11 	bl	8001734 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f14:	f7fe ff1c 	bl	8000d50 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e1b6      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f26:	f7ff fc16 	bl	8001756 <LL_RCC_LSI2_IsReady>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f1      	bne.n	8001f14 <HAL_RCC_OscConfig+0x3a0>
 8001f30:	e027      	b.n	8001f82 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001f32:	f7ff fbff 	bl	8001734 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f36:	f7fe ff0b 	bl	8000d50 <HAL_GetTick>
 8001f3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001f3c:	e008      	b.n	8001f50 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f3e:	f7fe ff07 	bl	8000d50 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e1a1      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001f50:	f7ff fc01 	bl	8001756 <LL_RCC_LSI2_IsReady>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f1      	bne.n	8001f3e <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001f5a:	f7ff fbb7 	bl	80016cc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fef7 	bl	8000d50 <HAL_GetTick>
 8001f62:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f66:	f7fe fef3 	bl	8000d50 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e18d      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001f78:	f7ff fbb9 	bl	80016ee <LL_RCC_LSI1_IsReady>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f1      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d05b      	beq.n	8002046 <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f8e:	4bb5      	ldr	r3, [pc, #724]	; (8002264 <HAL_RCC_OscConfig+0x6f0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d114      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001f9a:	f7ff fa39 	bl	8001410 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7fe fed7 	bl	8000d50 <HAL_GetTick>
 8001fa2:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7fe fed3 	bl	8000d50 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e16d      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fb8:	4baa      	ldr	r3, [pc, #680]	; (8002264 <HAL_RCC_OscConfig+0x6f0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x45e>
 8001fcc:	f7ff fb17 	bl	80015fe <LL_RCC_LSE_Enable>
 8001fd0:	e00c      	b.n	8001fec <HAL_RCC_OscConfig+0x478>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	2b05      	cmp	r3, #5
 8001fd8:	d104      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x470>
 8001fda:	f7ff fb32 	bl	8001642 <LL_RCC_LSE_EnableBypass>
 8001fde:	f7ff fb0e 	bl	80015fe <LL_RCC_LSE_Enable>
 8001fe2:	e003      	b.n	8001fec <HAL_RCC_OscConfig+0x478>
 8001fe4:	f7ff fb1c 	bl	8001620 <LL_RCC_LSE_Disable>
 8001fe8:	f7ff fb3c 	bl	8001664 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d014      	beq.n	800201e <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff4:	f7fe feac 	bl	8000d50 <HAL_GetTick>
 8001ff8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001ffa:	e00a      	b.n	8002012 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ffc:	f7fe fea8 	bl	8000d50 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	f241 3288 	movw	r2, #5000	; 0x1388
 800200a:	4293      	cmp	r3, r2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e140      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002012:	f7ff fb38 	bl	8001686 <LL_RCC_LSE_IsReady>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ef      	beq.n	8001ffc <HAL_RCC_OscConfig+0x488>
 800201c:	e013      	b.n	8002046 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7fe fe97 	bl	8000d50 <HAL_GetTick>
 8002022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7fe fe93 	bl	8000d50 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e12b      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 800203c:	f7ff fb23 	bl	8001686 <LL_RCC_LSE_IsReady>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1ef      	bne.n	8002026 <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800204e:	2b00      	cmp	r3, #0
 8002050:	d02c      	beq.n	80020ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	2b00      	cmp	r3, #0
 8002058:	d014      	beq.n	8002084 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800205a:	f7ff fa9c 	bl	8001596 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205e:	f7fe fe77 	bl	8000d50 <HAL_GetTick>
 8002062:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002066:	f7fe fe73 	bl	8000d50 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e10d      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002078:	f7ff faaf 	bl	80015da <LL_RCC_HSI48_IsReady>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f1      	beq.n	8002066 <HAL_RCC_OscConfig+0x4f2>
 8002082:	e013      	b.n	80020ac <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002084:	f7ff fa98 	bl	80015b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002088:	f7fe fe62 	bl	8000d50 <HAL_GetTick>
 800208c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002090:	f7fe fe5e 	bl	8000d50 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0f8      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80020a2:	f7ff fa9a 	bl	80015da <LL_RCC_HSI48_IsReady>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f1      	bne.n	8002090 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80ee 	beq.w	8002292 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b6:	f7ff fbf8 	bl	80018aa <LL_RCC_GetSysClkSource>
 80020ba:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	f040 80af 	bne.w	800222c <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0203 	and.w	r2, r3, #3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	429a      	cmp	r2, r3
 80020da:	d123      	bne.n	8002124 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d11c      	bne.n	8002124 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d114      	bne.n	8002124 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d10d      	bne.n	8002124 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d106      	bne.n	8002124 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002120:	429a      	cmp	r2, r3
 8002122:	d05d      	beq.n	80021e0 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d058      	beq.n	80021dc <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800212a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0ab      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800213c:	f7ff fc6b 	bl	8001a16 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002140:	f7fe fe06 	bl	8000d50 <HAL_GetTick>
 8002144:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002148:	f7fe fe02 	bl	8000d50 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e09c      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ef      	bne.n	8002148 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	4b3e      	ldr	r3, [pc, #248]	; (8002268 <HAL_RCC_OscConfig+0x6f4>)
 8002170:	4013      	ands	r3, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800217a:	4311      	orrs	r1, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002180:	0212      	lsls	r2, r2, #8
 8002182:	4311      	orrs	r1, r2
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002188:	4311      	orrs	r1, r2
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800218e:	4311      	orrs	r1, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002194:	430a      	orrs	r2, r1
 8002196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800219a:	4313      	orrs	r3, r2
 800219c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800219e:	f7ff fc2b 	bl	80019f8 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b0:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021b2:	f7fe fdcd 	bl	8000d50 <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe fdc9 	bl	8000d50 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e063      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0ef      	beq.n	80021ba <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021da:	e05a      	b.n	8002292 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e059      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d151      	bne.n	8002292 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021ee:	f7ff fc03 	bl	80019f8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002200:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002202:	f7fe fda5 	bl	8000d50 <HAL_GetTick>
 8002206:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220a:	f7fe fda1 	bl	8000d50 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e03b      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ef      	beq.n	800220a <HAL_RCC_OscConfig+0x696>
 800222a:	e032      	b.n	8002292 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d02d      	beq.n	800228e <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	f7ff fbf0 	bl	8001a16 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002240:	f023 0303 	bic.w	r3, r3, #3
 8002244:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002250:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002258:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7fe fd79 	bl	8000d50 <HAL_GetTick>
 800225e:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	e00d      	b.n	800227e <HAL_RCC_OscConfig+0x70a>
 8002262:	bf00      	nop
 8002264:	58000400 	.word	0x58000400
 8002268:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7fe fd70 	bl	8000d50 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e00a      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1ef      	bne.n	800226c <HAL_RCC_OscConfig+0x6f8>
 800228c:	e001      	b.n	8002292 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	4618      	mov	r0, r3
 8002296:	3734      	adds	r7, #52	; 0x34
 8002298:	46bd      	mov	sp, r7
 800229a:	bd90      	pop	{r4, r7, pc}

0800229c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e12a      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b97      	ldr	r3, [pc, #604]	; (8002510 <HAL_RCC_ClockConfig+0x274>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d91b      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b94      	ldr	r3, [pc, #592]	; (8002510 <HAL_RCC_ClockConfig+0x274>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4992      	ldr	r1, [pc, #584]	; (8002510 <HAL_RCC_ClockConfig+0x274>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ce:	f7fe fd3f 	bl	8000d50 <HAL_GetTick>
 80022d2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022d6:	f7fe fd3b 	bl	8000d50 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e10e      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e8:	4b89      	ldr	r3, [pc, #548]	; (8002510 <HAL_RCC_ClockConfig+0x274>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d1ef      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d016      	beq.n	8002330 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fadb 	bl	80018c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800230c:	f7fe fd20 	bl	8000d50 <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002314:	f7fe fd1c 	bl	8000d50 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e0ef      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002326:	f7ff fbc8 	bl	8001aba <LL_RCC_IsActiveFlag_HPRE>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d0f1      	beq.n	8002314 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b00      	cmp	r3, #0
 800233a:	d016      	beq.n	800236a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	695b      	ldr	r3, [r3, #20]
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff fad2 	bl	80018ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002346:	f7fe fd03 	bl	8000d50 <HAL_GetTick>
 800234a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800234e:	f7fe fcff 	bl	8000d50 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0d2      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002360:	f7ff fbbd 	bl	8001ade <LL_RCC_IsActiveFlag_C2HPRE>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f1      	beq.n	800234e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff facb 	bl	8001916 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002380:	f7fe fce6 	bl	8000d50 <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002388:	f7fe fce2 	bl	8000d50 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e0b5      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800239a:	f7ff fbb3 	bl	8001b04 <LL_RCC_IsActiveFlag_SHDHPRE>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f1      	beq.n	8002388 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d016      	beq.n	80023de <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fac5 	bl	8001944 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023ba:	f7fe fcc9 	bl	8000d50 <HAL_GetTick>
 80023be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023c2:	f7fe fcc5 	bl	8000d50 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e098      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023d4:	f7ff fba9 	bl	8001b2a <LL_RCC_IsActiveFlag_PPRE1>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f1      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0308 	and.w	r3, r3, #8
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d017      	beq.n	800241a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fabb 	bl	800196c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023f6:	f7fe fcab 	bl	8000d50 <HAL_GetTick>
 80023fa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023fe:	f7fe fca7 	bl	8000d50 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e07a      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002410:	f7ff fb9d 	bl	8001b4e <LL_RCC_IsActiveFlag_PPRE2>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f1      	beq.n	80023fe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d043      	beq.n	80024ae <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d106      	bne.n	800243c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800242e:	f7ff f85b 	bl	80014e8 <LL_RCC_HSE_IsReady>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d11e      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e064      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b03      	cmp	r3, #3
 8002442:	d106      	bne.n	8002452 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002444:	f7ff faf6 	bl	8001a34 <LL_RCC_PLL_IsReady>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d113      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e059      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800245a:	f7ff f9c3 	bl	80017e4 <LL_RCC_MSI_IsReady>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d108      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e04e      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002468:	f7ff f86e 	bl	8001548 <LL_RCC_HSI_IsReady>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e047      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff fa01 	bl	8001882 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002480:	f7fe fc66 	bl	8000d50 <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	e00a      	b.n	800249e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002488:	f7fe fc62 	bl	8000d50 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	; 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e033      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249e:	f7ff fa04 	bl	80018aa <LL_RCC_GetSysClkSource>
 80024a2:	4602      	mov	r2, r0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d1ec      	bne.n	8002488 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <HAL_RCC_ClockConfig+0x274>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d21b      	bcs.n	80024f4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_RCC_ClockConfig+0x274>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f023 0207 	bic.w	r2, r3, #7
 80024c4:	4912      	ldr	r1, [pc, #72]	; (8002510 <HAL_RCC_ClockConfig+0x274>)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024cc:	f7fe fc40 	bl	8000d50 <HAL_GetTick>
 80024d0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024d4:	f7fe fc3c 	bl	8000d50 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e00f      	b.n	8002506 <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <HAL_RCC_ClockConfig+0x274>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d1ef      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 80024f4:	f7fe fae4 	bl	8000ac0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80024f8:	f7fe fc36 	bl	8000d68 <HAL_GetTickPrio>
 80024fc:	4603      	mov	r3, r0
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fbd8 	bl	8000cb4 <HAL_InitTick>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	58004000 	.word	0x58004000

08002514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251a:	f7ff f9c6 	bl	80018aa <LL_RCC_GetSysClkSource>
 800251e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10a      	bne.n	800253c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002526:	f7ff f982 	bl	800182e <LL_RCC_MSI_GetRange>
 800252a:	4603      	mov	r3, r0
 800252c:	091b      	lsrs	r3, r3, #4
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	4a2a      	ldr	r2, [pc, #168]	; (80025dc <HAL_RCC_GetSysClockFreq+0xc8>)
 8002534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	e04a      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b04      	cmp	r3, #4
 8002540:	d102      	bne.n	8002548 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002542:	4b27      	ldr	r3, [pc, #156]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	e044      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b08      	cmp	r3, #8
 800254c:	d10a      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800254e:	f7fe ff7d 	bl	800144c <LL_RCC_HSE_IsEnabledDiv2>
 8002552:	4603      	mov	r3, r0
 8002554:	2b01      	cmp	r3, #1
 8002556:	d102      	bne.n	800255e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002558:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	e039      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002560:	60fb      	str	r3, [r7, #12]
 8002562:	e036      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002564:	f7ff fa9d 	bl	8001aa2 <LL_RCC_PLL_GetMainSource>
 8002568:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d002      	beq.n	8002576 <HAL_RCC_GetSysClockFreq+0x62>
 8002570:	2b03      	cmp	r3, #3
 8002572:	d003      	beq.n	800257c <HAL_RCC_GetSysClockFreq+0x68>
 8002574:	e00d      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002578:	60bb      	str	r3, [r7, #8]
        break;
 800257a:	e015      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800257c:	f7fe ff66 	bl	800144c <LL_RCC_HSE_IsEnabledDiv2>
 8002580:	4603      	mov	r3, r0
 8002582:	2b01      	cmp	r3, #1
 8002584:	d102      	bne.n	800258c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002588:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800258a:	e00d      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800258c:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800258e:	60bb      	str	r3, [r7, #8]
        break;
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002592:	f7ff f94c 	bl	800182e <LL_RCC_MSI_GetRange>
 8002596:	4603      	mov	r3, r0
 8002598:	091b      	lsrs	r3, r3, #4
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <HAL_RCC_GetSysClockFreq+0xc8>)
 80025a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a4:	60bb      	str	r3, [r7, #8]
        break;
 80025a6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 80025a8:	f7ff fa56 	bl	8001a58 <LL_RCC_PLL_GetN>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	fb03 f402 	mul.w	r4, r3, r2
 80025b4:	f7ff fa69 	bl	8001a8a <LL_RCC_PLL_GetDivider>
 80025b8:	4603      	mov	r3, r0
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	3301      	adds	r3, #1
 80025be:	fbb4 f4f3 	udiv	r4, r4, r3
 80025c2:	f7ff fa56 	bl	8001a72 <LL_RCC_PLL_GetR>
 80025c6:	4603      	mov	r3, r0
 80025c8:	0f5b      	lsrs	r3, r3, #29
 80025ca:	3301      	adds	r3, #1
 80025cc:	fbb4 f3f3 	udiv	r3, r4, r3
 80025d0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80025d2:	68fb      	ldr	r3, [r7, #12]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	080047b8 	.word	0x080047b8
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	01e84800 	.word	0x01e84800

080025e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b598      	push	{r3, r4, r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80025ec:	f7ff ff92 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80025f0:	4604      	mov	r4, r0
 80025f2:	f7ff f9cf 	bl	8001994 <LL_RCC_GetAHBPrescaler>
 80025f6:	4603      	mov	r3, r0
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	4a03      	ldr	r2, [pc, #12]	; (800260c <HAL_RCC_GetHCLKFreq+0x24>)
 8002600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002604:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd98      	pop	{r3, r4, r7, pc}
 800260c:	08004758 	.word	0x08004758

08002610 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b598      	push	{r3, r4, r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002614:	f7ff ffe8 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002618:	4604      	mov	r4, r0
 800261a:	f7ff f9d5 	bl	80019c8 <LL_RCC_GetAPB1Prescaler>
 800261e:	4603      	mov	r3, r0
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd98      	pop	{r3, r4, r7, pc}
 8002638:	08004798 	.word	0x08004798

0800263c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800263c:	b598      	push	{r3, r4, r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002640:	f7ff ffd2 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002644:	4604      	mov	r4, r0
 8002646:	f7ff f9cb 	bl	80019e0 <LL_RCC_GetAPB2Prescaler>
 800264a:	4603      	mov	r3, r0
 800264c:	0adb      	lsrs	r3, r3, #11
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	4a04      	ldr	r2, [pc, #16]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd98      	pop	{r3, r4, r7, pc}
 8002664:	08004798 	.word	0x08004798

08002668 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2bb0      	cmp	r3, #176	; 0xb0
 8002674:	d903      	bls.n	800267e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	e007      	b.n	800268e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	091b      	lsrs	r3, r3, #4
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	4a11      	ldr	r2, [pc, #68]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800268e:	f7ff f98d 	bl	80019ac <LL_RCC_GetAHB4Prescaler>
 8002692:	4603      	mov	r3, r0
 8002694:	091b      	lsrs	r3, r3, #4
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	4a0d      	ldr	r2, [pc, #52]	; (80026d0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4a0a      	ldr	r2, [pc, #40]	; (80026d4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80026ac:	fba2 2303 	umull	r2, r3, r2, r3
 80026b0:	0c9c      	lsrs	r4, r3, #18
 80026b2:	f7fe febd 	bl	8001430 <HAL_PWREx_GetVoltageRange>
 80026b6:	4603      	mov	r3, r0
 80026b8:	4619      	mov	r1, r3
 80026ba:	4620      	mov	r0, r4
 80026bc:	f000 f80c 	bl	80026d8 <RCC_SetFlashLatency>
 80026c0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd90      	pop	{r4, r7, pc}
 80026ca:	bf00      	nop
 80026cc:	080047b8 	.word	0x080047b8
 80026d0:	08004758 	.word	0x08004758
 80026d4:	431bde83 	.word	0x431bde83

080026d8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b093      	sub	sp, #76	; 0x4c
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <RCC_SetFlashLatency+0xf0>)
 80026e4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80026e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80026ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80026ee:	4a37      	ldr	r2, [pc, #220]	; (80027cc <RCC_SetFlashLatency+0xf4>)
 80026f0:	f107 031c 	add.w	r3, r7, #28
 80026f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80026f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80026fa:	4b35      	ldr	r3, [pc, #212]	; (80027d0 <RCC_SetFlashLatency+0xf8>)
 80026fc:	f107 040c 	add.w	r4, r7, #12
 8002700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002702:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002706:	2300      	movs	r3, #0
 8002708:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002710:	d11c      	bne.n	800274c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002712:	2300      	movs	r3, #0
 8002714:	643b      	str	r3, [r7, #64]	; 0x40
 8002716:	e015      	b.n	8002744 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002718:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002720:	4413      	add	r3, r2
 8002722:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	d808      	bhi.n	800273e <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800272c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002734:	4413      	add	r3, r2
 8002736:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800273a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800273c:	e022      	b.n	8002784 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800273e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002740:	3301      	adds	r3, #1
 8002742:	643b      	str	r3, [r7, #64]	; 0x40
 8002744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002746:	2b03      	cmp	r3, #3
 8002748:	d9e6      	bls.n	8002718 <RCC_SetFlashLatency+0x40>
 800274a:	e01b      	b.n	8002784 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800274c:	2300      	movs	r3, #0
 800274e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002750:	e015      	b.n	800277e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800275a:	4413      	add	r3, r2
 800275c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	429a      	cmp	r2, r3
 8002764:	d808      	bhi.n	8002778 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800276e:	4413      	add	r3, r2
 8002770:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002774:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002776:	e005      	b.n	8002784 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277a:	3301      	adds	r3, #1
 800277c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800277e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002780:	2b02      	cmp	r3, #2
 8002782:	d9e6      	bls.n	8002752 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <RCC_SetFlashLatency+0xfc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 0207 	bic.w	r2, r3, #7
 800278c:	4911      	ldr	r1, [pc, #68]	; (80027d4 <RCC_SetFlashLatency+0xfc>)
 800278e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002794:	f7fe fadc 	bl	8000d50 <HAL_GetTick>
 8002798:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800279a:	e008      	b.n	80027ae <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800279c:	f7fe fad8 	bl	8000d50 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e007      	b.n	80027be <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <RCC_SetFlashLatency+0xfc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d1ef      	bne.n	800279c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	374c      	adds	r7, #76	; 0x4c
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	bf00      	nop
 80027c8:	0800471c 	.word	0x0800471c
 80027cc:	0800472c 	.word	0x0800472c
 80027d0:	08004738 	.word	0x08004738
 80027d4:	58004000 	.word	0x58004000

080027d8 <LL_RCC_LSE_IsEnabled>:
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80027dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e4:	f003 0301 	and.w	r3, r3, #1
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <LL_RCC_LSE_IsEnabled+0x18>
 80027ec:	2301      	movs	r3, #1
 80027ee:	e000      	b.n	80027f2 <LL_RCC_LSE_IsEnabled+0x1a>
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_RCC_LSE_IsReady>:
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b02      	cmp	r3, #2
 800280e:	d101      	bne.n	8002814 <LL_RCC_LSE_IsReady+0x18>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <LL_RCC_LSE_IsReady+0x1a>
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_RCC_SetRFWKPClockSource>:
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002830:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002834:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_RCC_SetSMPSClockSource>:
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	f023 0203 	bic.w	r2, r3, #3
 800285e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4313      	orrs	r3, r2
 8002866:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <LL_RCC_SetSMPSPrescaler>:
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800287c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4313      	orrs	r3, r2
 800288e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <LL_RCC_SetUSARTClockSource>:
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80028a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	f023 0203 	bic.w	r2, r3, #3
 80028b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <LL_RCC_SetLPUARTClockSource>:
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80028d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <LL_RCC_SetI2CClockSource>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80028fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002900:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	091b      	lsrs	r3, r3, #4
 8002908:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800290c:	43db      	mvns	r3, r3
 800290e:	401a      	ands	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	011b      	lsls	r3, r3, #4
 8002914:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_RCC_SetLPTIMClockSource>:
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	0c1b      	lsrs	r3, r3, #16
 8002942:	041b      	lsls	r3, r3, #16
 8002944:	43db      	mvns	r3, r3
 8002946:	401a      	ands	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	041b      	lsls	r3, r3, #16
 800294c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <LL_RCC_SetSAIClockSource>:
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800296a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002976:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_RCC_SetRNGClockSource>:
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80029a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_RCC_SetCLK48ClockSource>:
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_RCC_SetUSBClockSource>:
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b082      	sub	sp, #8
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7ff ffe3 	bl	80029ba <LL_RCC_SetCLK48ClockSource>
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <LL_RCC_SetADCClockSource>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_RCC_SetRTCClockSource>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_RCC_GetRTCClockSource>:
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <LL_RCC_ForceBackupDomainReset>:
{
 8002a6e:	b480      	push	{r7}
 8002a70:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a86:	bf00      	nop
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <LL_RCC_PLLSAI1_Enable>:
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ac4:	6013      	str	r3, [r2, #0]
}
 8002ac6:	bf00      	nop
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_RCC_PLLSAI1_Disable>:
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ade:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr

08002aee <LL_RCC_PLLSAI1_IsReady>:
{
 8002aee:	b480      	push	{r7}
 8002af0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b00:	d101      	bne.n	8002b06 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b088      	sub	sp, #32
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002b1e:	2300      	movs	r3, #0
 8002b20:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d033      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b36:	d00c      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b3c:	d802      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d010      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b42:	e017      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002b44:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b48:	d017      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002b4a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b4e:	d016      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002b50:	e010      	b.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b60:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002b62:	e00d      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 f947 	bl	8002dfc <RCCEx_PLLSAI1_ConfigNP>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002b72:	e005      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	77fb      	strb	r3, [r7, #31]
        break;
 8002b78:	e002      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b80:	7ffb      	ldrb	r3, [r7, #31]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d105      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fee9 	bl	8002962 <LL_RCC_SetSAIClockSource>
 8002b90:	e001      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b92:	7ffb      	ldrb	r3, [r7, #31]
 8002b94:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d046      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002ba2:	f7ff ff57 	bl	8002a54 <LL_RCC_GetRTCClockSource>
 8002ba6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d03c      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002bb2:	f7fe fc2d 	bl	8001410 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff31 	bl	8002a28 <LL_RCC_SetRTCClockSource>
 8002bc6:	e02e      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002bd2:	f7ff ff4c 	bl	8002a6e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002bd6:	f7ff ff5b 	bl	8002a90 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002bf2:	f7ff fdf1 	bl	80027d8 <LL_RCC_LSE_IsEnabled>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d114      	bne.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bfc:	f7fe f8a8 	bl	8000d50 <HAL_GetTick>
 8002c00:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c02:	e00b      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c04:	f7fe f8a4 	bl	8000d50 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d902      	bls.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	77fb      	strb	r3, [r7, #31]
              break;
 8002c1a:	e004      	b.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c1c:	f7ff fdee 	bl	80027fc <LL_RCC_LSE_IsReady>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d1ee      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002c26:	7ffb      	ldrb	r3, [r7, #31]
 8002c28:	77bb      	strb	r3, [r7, #30]
 8002c2a:	e001      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c2c:	7ffb      	ldrb	r3, [r7, #31]
 8002c2e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d004      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fe2b 	bl	800289c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d004      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fe36 	bl	80028c8 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0310 	and.w	r3, r3, #16
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d004      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff fe5e 	bl	800292e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 0320 	and.w	r3, r3, #32
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d004      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff fe53 	bl	800292e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d004      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1b      	ldr	r3, [r3, #32]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fe2b 	bl	80028f4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d004      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fe20 	bl	80028f4 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d022      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff fe8e 	bl	80029e6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cd2:	d107      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002cd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ce2:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cec:	d10b      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 f8dd 	bl	8002eb2 <RCCEx_PLLSAI1_ConfigNQ>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002cfc:	7ffb      	ldrb	r3, [r7, #31]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8002d02:	7ffb      	ldrb	r3, [r7, #31]
 8002d04:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d02b      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d008      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d24:	d003      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d105      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fe2b 	bl	800298e <LL_RCC_SetRNGClockSource>
 8002d38:	e00a      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7ff fe22 	bl	800298e <LL_RCC_SetRNGClockSource>
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f7ff fe35 	bl	80029ba <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002d58:	d107      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d68:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d022      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fe3e 	bl	80029fc <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d88:	d107      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002da2:	d10b      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3304      	adds	r3, #4
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f8dd 	bl	8002f68 <RCCEx_PLLSAI1_ConfigNR>
 8002dae:	4603      	mov	r3, r0
 8002db0:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002db2:	7ffb      	ldrb	r3, [r7, #31]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8002db8:	7ffb      	ldrb	r3, [r7, #31]
 8002dba:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d004      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fd27 	bl	8002820 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fd46 	bl	8002874 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fd2d 	bl	800284c <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8002df2:	7fbb      	ldrb	r3, [r7, #30]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e08:	f7ff fe62 	bl	8002ad0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e0c:	f7fd ffa0 	bl	8000d50 <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e12:	e009      	b.n	8002e28 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e14:	f7fd ff9c 	bl	8000d50 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d902      	bls.n	8002e28 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	73fb      	strb	r3, [r7, #15]
      break;
 8002e26:	e004      	b.n	8002e32 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e28:	f7ff fe61 	bl	8002aee <LL_RCC_PLLSAI1_IsReady>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d137      	bne.n	8002ea8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002e38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	021b      	lsls	r3, r3, #8
 8002e48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e62:	4313      	orrs	r3, r2
 8002e64:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002e66:	f7ff fe24 	bl	8002ab2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e6a:	f7fd ff71 	bl	8000d50 <HAL_GetTick>
 8002e6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e70:	e009      	b.n	8002e86 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e72:	f7fd ff6d 	bl	8000d50 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d902      	bls.n	8002e86 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	73fb      	strb	r3, [r7, #15]
        break;
 8002e84:	e004      	b.n	8002e90 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002e86:	f7ff fe32 	bl	8002aee <LL_RCC_PLLSAI1_IsReady>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d1f0      	bne.n	8002e72 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d108      	bne.n	8002ea8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002ebe:	f7ff fe07 	bl	8002ad0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ec2:	f7fd ff45 	bl	8000d50 <HAL_GetTick>
 8002ec6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ec8:	e009      	b.n	8002ede <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002eca:	f7fd ff41 	bl	8000d50 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d902      	bls.n	8002ede <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	73fb      	strb	r3, [r7, #15]
      break;
 8002edc:	e004      	b.n	8002ee8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ede:	f7ff fe06 	bl	8002aee <LL_RCC_PLLSAI1_IsReady>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1f0      	bne.n	8002eca <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d137      	bne.n	8002f5e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	021b      	lsls	r3, r3, #8
 8002efe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f02:	4313      	orrs	r3, r2
 8002f04:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f1c:	f7ff fdc9 	bl	8002ab2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f20:	f7fd ff16 	bl	8000d50 <HAL_GetTick>
 8002f24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f26:	e009      	b.n	8002f3c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f28:	f7fd ff12 	bl	8000d50 <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	2b02      	cmp	r3, #2
 8002f34:	d902      	bls.n	8002f3c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	73fb      	strb	r3, [r7, #15]
        break;
 8002f3a:	e004      	b.n	8002f46 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f3c:	f7ff fdd7 	bl	8002aee <LL_RCC_PLLSAI1_IsReady>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d1f0      	bne.n	8002f28 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d108      	bne.n	8002f5e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f74:	f7ff fdac 	bl	8002ad0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f78:	f7fd feea 	bl	8000d50 <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f7e:	e009      	b.n	8002f94 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f80:	f7fd fee6 	bl	8000d50 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d902      	bls.n	8002f94 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	73fb      	strb	r3, [r7, #15]
      break;
 8002f92:	e004      	b.n	8002f9e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f94:	f7ff fdab 	bl	8002aee <LL_RCC_PLLSAI1_IsReady>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d137      	bne.n	8003014 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002fd2:	f7ff fd6e 	bl	8002ab2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd6:	f7fd febb 	bl	8000d50 <HAL_GetTick>
 8002fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fdc:	e009      	b.n	8002ff2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fde:	f7fd feb7 	bl	8000d50 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d902      	bls.n	8002ff2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	73fb      	strb	r3, [r7, #15]
        break;
 8002ff0:	e004      	b.n	8002ffc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002ff2:	f7ff fd7c 	bl	8002aee <LL_RCC_PLLSAI1_IsReady>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d1f0      	bne.n	8002fde <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d108      	bne.n	8003014 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003006:	691a      	ldr	r2, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003010:	4313      	orrs	r3, r2
 8003012:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003014:	7bfb      	ldrb	r3, [r7, #15]
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <LL_RCC_GetUSARTClockSource>:
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4013      	ands	r3, r2
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <LL_RCC_GetLPUARTClockSource>:
{
 800303e:	b480      	push	{r7}
 8003040:	b083      	sub	sp, #12
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4013      	ands	r3, r2
}
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b082      	sub	sp, #8
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e042      	b.n	80030f6 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003076:	2b00      	cmp	r3, #0
 8003078:	d106      	bne.n	8003088 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fd fbbe 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2224      	movs	r2, #36	; 0x24
 800308c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0201 	bic.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f9ef 	bl	8003484 <UART_SetConfig>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e022      	b.n	80030f6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fbf1 	bl	80038a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fc78 	bl	80039e4 <UART_CheckIdleState>
 80030f4:	4603      	mov	r3, r0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b08a      	sub	sp, #40	; 0x28
 8003102:	af02      	add	r7, sp, #8
 8003104:	60f8      	str	r0, [r7, #12]
 8003106:	60b9      	str	r1, [r7, #8]
 8003108:	603b      	str	r3, [r7, #0]
 800310a:	4613      	mov	r3, r2
 800310c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003114:	2b20      	cmp	r3, #32
 8003116:	f040 8083 	bne.w	8003220 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_UART_Transmit+0x28>
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e07b      	b.n	8003222 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_UART_Transmit+0x3a>
 8003134:	2302      	movs	r3, #2
 8003136:	e074      	b.n	8003222 <HAL_UART_Transmit+0x124>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2221      	movs	r2, #33	; 0x21
 800314c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003150:	f7fd fdfe 	bl	8000d50 <HAL_GetTick>
 8003154:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	88fa      	ldrh	r2, [r7, #6]
 800315a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	88fa      	ldrh	r2, [r7, #6]
 8003162:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316e:	d108      	bne.n	8003182 <HAL_UART_Transmit+0x84>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003178:	2300      	movs	r3, #0
 800317a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	61bb      	str	r3, [r7, #24]
 8003180:	e003      	b.n	800318a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003192:	e02c      	b.n	80031ee <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2200      	movs	r2, #0
 800319c:	2180      	movs	r1, #128	; 0x80
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fc68 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e039      	b.n	8003222 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	3302      	adds	r3, #2
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	e007      	b.n	80031dc <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	781a      	ldrb	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3301      	adds	r3, #1
 80031da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1cc      	bne.n	8003194 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2200      	movs	r2, #0
 8003202:	2140      	movs	r1, #64	; 0x40
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fc35 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e006      	b.n	8003222 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	e000      	b.n	8003222 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003220:	2302      	movs	r3, #2
  }
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b08a      	sub	sp, #40	; 0x28
 800322e:	af02      	add	r7, sp, #8
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003240:	2b20      	cmp	r3, #32
 8003242:	f040 80bd 	bne.w	80033c0 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_UART_Receive+0x28>
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0b5      	b.n	80033c2 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800325c:	2b01      	cmp	r3, #1
 800325e:	d101      	bne.n	8003264 <HAL_UART_Receive+0x3a>
 8003260:	2302      	movs	r3, #2
 8003262:	e0ae      	b.n	80033c2 <HAL_UART_Receive+0x198>
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2222      	movs	r2, #34	; 0x22
 8003278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800327c:	f7fd fd68 	bl	8000d50 <HAL_GetTick>
 8003280:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	88fa      	ldrh	r2, [r7, #6]
 8003286:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	88fa      	ldrh	r2, [r7, #6]
 800328e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329a:	d10e      	bne.n	80032ba <HAL_UART_Receive+0x90>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d105      	bne.n	80032b0 <HAL_UART_Receive+0x86>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80032aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80032ae:	e02d      	b.n	800330c <HAL_UART_Receive+0xe2>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	22ff      	movs	r2, #255	; 0xff
 80032b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80032b8:	e028      	b.n	800330c <HAL_UART_Receive+0xe2>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10d      	bne.n	80032de <HAL_UART_Receive+0xb4>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d104      	bne.n	80032d4 <HAL_UART_Receive+0xaa>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	22ff      	movs	r2, #255	; 0xff
 80032ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80032d2:	e01b      	b.n	800330c <HAL_UART_Receive+0xe2>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	227f      	movs	r2, #127	; 0x7f
 80032d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80032dc:	e016      	b.n	800330c <HAL_UART_Receive+0xe2>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032e6:	d10d      	bne.n	8003304 <HAL_UART_Receive+0xda>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d104      	bne.n	80032fa <HAL_UART_Receive+0xd0>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	227f      	movs	r2, #127	; 0x7f
 80032f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80032f8:	e008      	b.n	800330c <HAL_UART_Receive+0xe2>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	223f      	movs	r2, #63	; 0x3f
 80032fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003302:	e003      	b.n	800330c <HAL_UART_Receive+0xe2>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8003312:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331c:	d108      	bne.n	8003330 <HAL_UART_Receive+0x106>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d104      	bne.n	8003330 <HAL_UART_Receive+0x106>
    {
      pdata8bits  = NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	61bb      	str	r3, [r7, #24]
 800332e:	e003      	b.n	8003338 <HAL_UART_Receive+0x10e>
    }
    else
    {
      pdata8bits  = pData;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003334:	2300      	movs	r3, #0
 8003336:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003340:	e032      	b.n	80033a8 <HAL_UART_Receive+0x17e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2200      	movs	r2, #0
 800334a:	2120      	movs	r1, #32
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 fb91 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_UART_Receive+0x132>
      {
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e032      	b.n	80033c2 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10c      	bne.n	800337c <HAL_UART_Receive+0x152>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	b29a      	uxth	r2, r3
 800336a:	8a7b      	ldrh	r3, [r7, #18]
 800336c:	4013      	ands	r3, r2
 800336e:	b29a      	uxth	r2, r3
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	3302      	adds	r3, #2
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	e00c      	b.n	8003396 <HAL_UART_Receive+0x16c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	b2da      	uxtb	r2, r3
 8003384:	8a7b      	ldrh	r3, [r7, #18]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	4013      	ands	r3, r2
 800338a:	b2da      	uxtb	r2, r3
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	3301      	adds	r3, #1
 8003394:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1c6      	bne.n	8003342 <HAL_UART_Receive+0x118>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	e000      	b.n	80033c2 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 80033c0:	2302      	movs	r3, #2
  }
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3720      	adds	r7, #32
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033e0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	6093      	str	r3, [r2, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d125      	bne.n	8003450 <HAL_UART_AbortReceive+0x86>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003412:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003418:	2b00      	cmp	r3, #0
 800341a:	d019      	beq.n	8003450 <HAL_UART_AbortReceive+0x86>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003420:	2200      	movs	r2, #0
 8003422:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd fdda 	bl	8000fe2 <HAL_DMA_Abort>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00d      	beq.n	8003450 <HAL_UART_AbortReceive+0x86>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd fe31 	bl	80010a0 <HAL_DMA_GetError>
 800343e:	4603      	mov	r3, r0
 8003440:	2b20      	cmp	r3, #32
 8003442:	d105      	bne.n	8003450 <HAL_UART_AbortReceive+0x86>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2210      	movs	r2, #16
 8003448:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e014      	b.n	800347a <HAL_UART_AbortReceive+0xb0>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	220f      	movs	r2, #15
 800345e:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0208 	orr.w	r2, r2, #8
 800346e:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003484:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003488:	b088      	sub	sp, #32
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4ba4      	ldr	r3, [pc, #656]	; (800374c <UART_SetConfig+0x2c8>)
 80034bc:	4013      	ands	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	69f9      	ldr	r1, [r7, #28]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a99      	ldr	r2, [pc, #612]	; (8003750 <UART_SetConfig+0x2cc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d004      	beq.n	80034f8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003502:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	69f9      	ldr	r1, [r7, #28]
 800350c:	430b      	orrs	r3, r1
 800350e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	f023 010f 	bic.w	r1, r3, #15
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a8a      	ldr	r2, [pc, #552]	; (8003754 <UART_SetConfig+0x2d0>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d121      	bne.n	8003574 <UART_SetConfig+0xf0>
 8003530:	2003      	movs	r0, #3
 8003532:	f7ff fd74 	bl	800301e <LL_RCC_GetUSARTClockSource>
 8003536:	4603      	mov	r3, r0
 8003538:	2b03      	cmp	r3, #3
 800353a:	d817      	bhi.n	800356c <UART_SetConfig+0xe8>
 800353c:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <UART_SetConfig+0xc0>)
 800353e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003542:	bf00      	nop
 8003544:	08003555 	.word	0x08003555
 8003548:	08003561 	.word	0x08003561
 800354c:	0800355b 	.word	0x0800355b
 8003550:	08003567 	.word	0x08003567
 8003554:	2301      	movs	r3, #1
 8003556:	76fb      	strb	r3, [r7, #27]
 8003558:	e038      	b.n	80035cc <UART_SetConfig+0x148>
 800355a:	2302      	movs	r3, #2
 800355c:	76fb      	strb	r3, [r7, #27]
 800355e:	e035      	b.n	80035cc <UART_SetConfig+0x148>
 8003560:	2304      	movs	r3, #4
 8003562:	76fb      	strb	r3, [r7, #27]
 8003564:	e032      	b.n	80035cc <UART_SetConfig+0x148>
 8003566:	2308      	movs	r3, #8
 8003568:	76fb      	strb	r3, [r7, #27]
 800356a:	e02f      	b.n	80035cc <UART_SetConfig+0x148>
 800356c:	2310      	movs	r3, #16
 800356e:	76fb      	strb	r3, [r7, #27]
 8003570:	bf00      	nop
 8003572:	e02b      	b.n	80035cc <UART_SetConfig+0x148>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a75      	ldr	r2, [pc, #468]	; (8003750 <UART_SetConfig+0x2cc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d124      	bne.n	80035c8 <UART_SetConfig+0x144>
 800357e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003582:	f7ff fd5c 	bl	800303e <LL_RCC_GetLPUARTClockSource>
 8003586:	4603      	mov	r3, r0
 8003588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358c:	d012      	beq.n	80035b4 <UART_SetConfig+0x130>
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003592:	d802      	bhi.n	800359a <UART_SetConfig+0x116>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <UART_SetConfig+0x124>
 8003598:	e012      	b.n	80035c0 <UART_SetConfig+0x13c>
 800359a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800359e:	d006      	beq.n	80035ae <UART_SetConfig+0x12a>
 80035a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035a4:	d009      	beq.n	80035ba <UART_SetConfig+0x136>
 80035a6:	e00b      	b.n	80035c0 <UART_SetConfig+0x13c>
 80035a8:	2300      	movs	r3, #0
 80035aa:	76fb      	strb	r3, [r7, #27]
 80035ac:	e00e      	b.n	80035cc <UART_SetConfig+0x148>
 80035ae:	2302      	movs	r3, #2
 80035b0:	76fb      	strb	r3, [r7, #27]
 80035b2:	e00b      	b.n	80035cc <UART_SetConfig+0x148>
 80035b4:	2304      	movs	r3, #4
 80035b6:	76fb      	strb	r3, [r7, #27]
 80035b8:	e008      	b.n	80035cc <UART_SetConfig+0x148>
 80035ba:	2308      	movs	r3, #8
 80035bc:	76fb      	strb	r3, [r7, #27]
 80035be:	e005      	b.n	80035cc <UART_SetConfig+0x148>
 80035c0:	2310      	movs	r3, #16
 80035c2:	76fb      	strb	r3, [r7, #27]
 80035c4:	bf00      	nop
 80035c6:	e001      	b.n	80035cc <UART_SetConfig+0x148>
 80035c8:	2310      	movs	r3, #16
 80035ca:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a5f      	ldr	r2, [pc, #380]	; (8003750 <UART_SetConfig+0x2cc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	f040 808e 	bne.w	80036f4 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035d8:	7efb      	ldrb	r3, [r7, #27]
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d823      	bhi.n	8003626 <UART_SetConfig+0x1a2>
 80035de:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <UART_SetConfig+0x160>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	08003609 	.word	0x08003609
 80035e8:	08003627 	.word	0x08003627
 80035ec:	08003611 	.word	0x08003611
 80035f0:	08003627 	.word	0x08003627
 80035f4:	08003617 	.word	0x08003617
 80035f8:	08003627 	.word	0x08003627
 80035fc:	08003627 	.word	0x08003627
 8003600:	08003627 	.word	0x08003627
 8003604:	0800361f 	.word	0x0800361f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003608:	f7ff f802 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 800360c:	6178      	str	r0, [r7, #20]
        break;
 800360e:	e00f      	b.n	8003630 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003610:	4b51      	ldr	r3, [pc, #324]	; (8003758 <UART_SetConfig+0x2d4>)
 8003612:	617b      	str	r3, [r7, #20]
        break;
 8003614:	e00c      	b.n	8003630 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003616:	f7fe ff7d 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 800361a:	6178      	str	r0, [r7, #20]
        break;
 800361c:	e008      	b.n	8003630 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800361e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003622:	617b      	str	r3, [r7, #20]
        break;
 8003624:	e004      	b.n	8003630 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	76bb      	strb	r3, [r7, #26]
        break;
 800362e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 811c 	beq.w	8003870 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	4a47      	ldr	r2, [pc, #284]	; (800375c <UART_SetConfig+0x2d8>)
 800363e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003642:	461a      	mov	r2, r3
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	fbb3 f3f2 	udiv	r3, r3, r2
 800364a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	4413      	add	r3, r2
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	429a      	cmp	r2, r3
 800365a:	d305      	bcc.n	8003668 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	429a      	cmp	r2, r3
 8003666:	d902      	bls.n	800366e <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	76bb      	strb	r3, [r7, #26]
 800366c:	e100      	b.n	8003870 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4618      	mov	r0, r3
 8003672:	f04f 0100 	mov.w	r1, #0
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	4a38      	ldr	r2, [pc, #224]	; (800375c <UART_SetConfig+0x2d8>)
 800367c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003680:	b29b      	uxth	r3, r3
 8003682:	f04f 0400 	mov.w	r4, #0
 8003686:	461a      	mov	r2, r3
 8003688:	4623      	mov	r3, r4
 800368a:	f7fc fd77 	bl	800017c <__aeabi_uldivmod>
 800368e:	4603      	mov	r3, r0
 8003690:	460c      	mov	r4, r1
 8003692:	4619      	mov	r1, r3
 8003694:	4622      	mov	r2, r4
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	f04f 0400 	mov.w	r4, #0
 800369e:	0214      	lsls	r4, r2, #8
 80036a0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80036a4:	020b      	lsls	r3, r1, #8
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6852      	ldr	r2, [r2, #4]
 80036aa:	0852      	lsrs	r2, r2, #1
 80036ac:	4611      	mov	r1, r2
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	eb13 0b01 	adds.w	fp, r3, r1
 80036b6:	eb44 0c02 	adc.w	ip, r4, r2
 80036ba:	4658      	mov	r0, fp
 80036bc:	4661      	mov	r1, ip
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f04f 0400 	mov.w	r4, #0
 80036c6:	461a      	mov	r2, r3
 80036c8:	4623      	mov	r3, r4
 80036ca:	f7fc fd57 	bl	800017c <__aeabi_uldivmod>
 80036ce:	4603      	mov	r3, r0
 80036d0:	460c      	mov	r4, r1
 80036d2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036da:	d308      	bcc.n	80036ee <UART_SetConfig+0x26a>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036e2:	d204      	bcs.n	80036ee <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	60da      	str	r2, [r3, #12]
 80036ec:	e0c0      	b.n	8003870 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	76bb      	strb	r3, [r7, #26]
 80036f2:	e0bd      	b.n	8003870 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fc:	d169      	bne.n	80037d2 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80036fe:	7efb      	ldrb	r3, [r7, #27]
 8003700:	3b01      	subs	r3, #1
 8003702:	2b07      	cmp	r3, #7
 8003704:	d82c      	bhi.n	8003760 <UART_SetConfig+0x2dc>
 8003706:	a201      	add	r2, pc, #4	; (adr r2, 800370c <UART_SetConfig+0x288>)
 8003708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370c:	0800372d 	.word	0x0800372d
 8003710:	08003735 	.word	0x08003735
 8003714:	08003761 	.word	0x08003761
 8003718:	0800373b 	.word	0x0800373b
 800371c:	08003761 	.word	0x08003761
 8003720:	08003761 	.word	0x08003761
 8003724:	08003761 	.word	0x08003761
 8003728:	08003743 	.word	0x08003743
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800372c:	f7fe ff86 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 8003730:	6178      	str	r0, [r7, #20]
        break;
 8003732:	e01a      	b.n	800376a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <UART_SetConfig+0x2d4>)
 8003736:	617b      	str	r3, [r7, #20]
        break;
 8003738:	e017      	b.n	800376a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800373a:	f7fe feeb 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 800373e:	6178      	str	r0, [r7, #20]
        break;
 8003740:	e013      	b.n	800376a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003746:	617b      	str	r3, [r7, #20]
        break;
 8003748:	e00f      	b.n	800376a <UART_SetConfig+0x2e6>
 800374a:	bf00      	nop
 800374c:	cfff69f3 	.word	0xcfff69f3
 8003750:	40008000 	.word	0x40008000
 8003754:	40013800 	.word	0x40013800
 8003758:	00f42400 	.word	0x00f42400
 800375c:	080047f8 	.word	0x080047f8
      default:
        pclk = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	76bb      	strb	r3, [r7, #26]
        break;
 8003768:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d07f      	beq.n	8003870 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	4a48      	ldr	r2, [pc, #288]	; (8003898 <UART_SetConfig+0x414>)
 8003776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800377a:	461a      	mov	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003782:	005a      	lsls	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	085b      	lsrs	r3, r3, #1
 800378a:	441a      	add	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	fbb2 f3f3 	udiv	r3, r2, r3
 8003794:	b29b      	uxth	r3, r3
 8003796:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	2b0f      	cmp	r3, #15
 800379c:	d916      	bls.n	80037cc <UART_SetConfig+0x348>
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a4:	d212      	bcs.n	80037cc <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	f023 030f 	bic.w	r3, r3, #15
 80037ae:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	89fb      	ldrh	r3, [r7, #14]
 80037be:	4313      	orrs	r3, r2
 80037c0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	89fa      	ldrh	r2, [r7, #14]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	e051      	b.n	8003870 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	76bb      	strb	r3, [r7, #26]
 80037d0:	e04e      	b.n	8003870 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037d2:	7efb      	ldrb	r3, [r7, #27]
 80037d4:	3b01      	subs	r3, #1
 80037d6:	2b07      	cmp	r3, #7
 80037d8:	d821      	bhi.n	800381e <UART_SetConfig+0x39a>
 80037da:	a201      	add	r2, pc, #4	; (adr r2, 80037e0 <UART_SetConfig+0x35c>)
 80037dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e0:	08003801 	.word	0x08003801
 80037e4:	08003809 	.word	0x08003809
 80037e8:	0800381f 	.word	0x0800381f
 80037ec:	0800380f 	.word	0x0800380f
 80037f0:	0800381f 	.word	0x0800381f
 80037f4:	0800381f 	.word	0x0800381f
 80037f8:	0800381f 	.word	0x0800381f
 80037fc:	08003817 	.word	0x08003817
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003800:	f7fe ff1c 	bl	800263c <HAL_RCC_GetPCLK2Freq>
 8003804:	6178      	str	r0, [r7, #20]
        break;
 8003806:	e00f      	b.n	8003828 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003808:	4b24      	ldr	r3, [pc, #144]	; (800389c <UART_SetConfig+0x418>)
 800380a:	617b      	str	r3, [r7, #20]
        break;
 800380c:	e00c      	b.n	8003828 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800380e:	f7fe fe81 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 8003812:	6178      	str	r0, [r7, #20]
        break;
 8003814:	e008      	b.n	8003828 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800381a:	617b      	str	r3, [r7, #20]
        break;
 800381c:	e004      	b.n	8003828 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	76bb      	strb	r3, [r7, #26]
        break;
 8003826:	bf00      	nop
    }

    if (pclk != 0U)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d020      	beq.n	8003870 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	4a19      	ldr	r2, [pc, #100]	; (8003898 <UART_SetConfig+0x414>)
 8003834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003838:	461a      	mov	r2, r3
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	085b      	lsrs	r3, r3, #1
 8003846:	441a      	add	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	b29b      	uxth	r3, r3
 8003852:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	2b0f      	cmp	r3, #15
 8003858:	d908      	bls.n	800386c <UART_SetConfig+0x3e8>
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003860:	d204      	bcs.n	800386c <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	e001      	b.n	8003870 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800388c:	7ebb      	ldrb	r3, [r7, #26]
}
 800388e:	4618      	mov	r0, r3
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003898:	080047f8 	.word	0x080047f8
 800389c:	00f42400 	.word	0x00f42400

080038a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00a      	beq.n	80038ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00a      	beq.n	8003930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	430a      	orrs	r2, r1
 800392e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003934:	f003 0310 	and.w	r3, r3, #16
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00a      	beq.n	8003952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d01a      	beq.n	80039b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800399e:	d10a      	bne.n	80039b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]
  }
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af02      	add	r7, sp, #8
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80039f4:	f7fd f9ac 	bl	8000d50 <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d10e      	bne.n	8003a26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f82c 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e022      	b.n	8003a6c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b04      	cmp	r3, #4
 8003a32:	d10e      	bne.n	8003a52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 f816 	bl	8003a74 <UART_WaitOnFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e00c      	b.n	8003a6c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3710      	adds	r7, #16
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	603b      	str	r3, [r7, #0]
 8003a80:	4613      	mov	r3, r2
 8003a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a84:	e062      	b.n	8003b4c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8c:	d05e      	beq.n	8003b4c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8e:	f7fd f95f 	bl	8000d50 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d302      	bcc.n	8003aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d11d      	bne.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ab2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0201 	bic.w	r2, r2, #1
 8003ac2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e045      	b.n	8003b6c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0304 	and.w	r3, r3, #4
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02e      	beq.n	8003b4c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003afc:	d126      	bne.n	8003b4c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b06:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b16:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0201 	bic.w	r2, r2, #1
 8003b26:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2220      	movs	r2, #32
 8003b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e00f      	b.n	8003b6c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	69da      	ldr	r2, [r3, #28]
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	4013      	ands	r3, r2
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	461a      	mov	r2, r3
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d08d      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_UARTEx_DisableFifoMode+0x16>
 8003b86:	2302      	movs	r3, #2
 8003b88:	e027      	b.n	8003bda <HAL_UARTEx_DisableFifoMode+0x66>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2224      	movs	r2, #36	; 0x24
 8003b96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0201 	bic.w	r2, r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003bb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b084      	sub	sp, #16
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e02d      	b.n	8003c5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2224      	movs	r2, #36	; 0x24
 8003c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f022 0201 	bic.w	r2, r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f850 	bl	8003ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e02d      	b.n	8003cd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2224      	movs	r2, #36	; 0x24
 8003c86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 0201 	bic.w	r2, r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f812 	bl	8003ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b089      	sub	sp, #36	; 0x24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003ce8:	4a2f      	ldr	r2, [pc, #188]	; (8003da8 <UARTEx_SetNbDataToProcess+0xc8>)
 8003cea:	f107 0314 	add.w	r3, r7, #20
 8003cee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cf2:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003cf6:	4a2d      	ldr	r2, [pc, #180]	; (8003dac <UARTEx_SetNbDataToProcess+0xcc>)
 8003cf8:	f107 030c 	add.w	r3, r7, #12
 8003cfc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d00:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d108      	bne.n	8003d1e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d1c:	e03d      	b.n	8003d9a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d1e:	2308      	movs	r3, #8
 8003d20:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d22:	2308      	movs	r3, #8
 8003d24:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	0e5b      	lsrs	r3, r3, #25
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	0f5b      	lsrs	r3, r3, #29
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003d46:	7fbb      	ldrb	r3, [r7, #30]
 8003d48:	7f3a      	ldrb	r2, [r7, #28]
 8003d4a:	f107 0120 	add.w	r1, r7, #32
 8003d4e:	440a      	add	r2, r1
 8003d50:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003d54:	fb02 f303 	mul.w	r3, r2, r3
 8003d58:	7f3a      	ldrb	r2, [r7, #28]
 8003d5a:	f107 0120 	add.w	r1, r7, #32
 8003d5e:	440a      	add	r2, r1
 8003d60:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003d64:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003d70:	7ffb      	ldrb	r3, [r7, #31]
 8003d72:	7f7a      	ldrb	r2, [r7, #29]
 8003d74:	f107 0120 	add.w	r1, r7, #32
 8003d78:	440a      	add	r2, r1
 8003d7a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003d7e:	fb02 f303 	mul.w	r3, r2, r3
 8003d82:	7f7a      	ldrb	r2, [r7, #29]
 8003d84:	f107 0120 	add.w	r1, r7, #32
 8003d88:	440a      	add	r2, r1
 8003d8a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003d8e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003d9a:	bf00      	nop
 8003d9c:	3724      	adds	r7, #36	; 0x24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	08004748 	.word	0x08004748
 8003dac:	08004750 	.word	0x08004750

08003db0 <__errno>:
 8003db0:	4b01      	ldr	r3, [pc, #4]	; (8003db8 <__errno+0x8>)
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	20000010 	.word	0x20000010

08003dbc <__libc_init_array>:
 8003dbc:	b570      	push	{r4, r5, r6, lr}
 8003dbe:	4e0d      	ldr	r6, [pc, #52]	; (8003df4 <__libc_init_array+0x38>)
 8003dc0:	4c0d      	ldr	r4, [pc, #52]	; (8003df8 <__libc_init_array+0x3c>)
 8003dc2:	1ba4      	subs	r4, r4, r6
 8003dc4:	10a4      	asrs	r4, r4, #2
 8003dc6:	2500      	movs	r5, #0
 8003dc8:	42a5      	cmp	r5, r4
 8003dca:	d109      	bne.n	8003de0 <__libc_init_array+0x24>
 8003dcc:	4e0b      	ldr	r6, [pc, #44]	; (8003dfc <__libc_init_array+0x40>)
 8003dce:	4c0c      	ldr	r4, [pc, #48]	; (8003e00 <__libc_init_array+0x44>)
 8003dd0:	f000 fc88 	bl	80046e4 <_init>
 8003dd4:	1ba4      	subs	r4, r4, r6
 8003dd6:	10a4      	asrs	r4, r4, #2
 8003dd8:	2500      	movs	r5, #0
 8003dda:	42a5      	cmp	r5, r4
 8003ddc:	d105      	bne.n	8003dea <__libc_init_array+0x2e>
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003de4:	4798      	blx	r3
 8003de6:	3501      	adds	r5, #1
 8003de8:	e7ee      	b.n	8003dc8 <__libc_init_array+0xc>
 8003dea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003dee:	4798      	blx	r3
 8003df0:	3501      	adds	r5, #1
 8003df2:	e7f2      	b.n	8003dda <__libc_init_array+0x1e>
 8003df4:	0800487c 	.word	0x0800487c
 8003df8:	0800487c 	.word	0x0800487c
 8003dfc:	0800487c 	.word	0x0800487c
 8003e00:	08004880 	.word	0x08004880

08003e04 <memset>:
 8003e04:	4402      	add	r2, r0
 8003e06:	4603      	mov	r3, r0
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <memset+0xa>
 8003e0c:	4770      	bx	lr
 8003e0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e12:	e7f9      	b.n	8003e08 <memset+0x4>

08003e14 <_puts_r>:
 8003e14:	b570      	push	{r4, r5, r6, lr}
 8003e16:	460e      	mov	r6, r1
 8003e18:	4605      	mov	r5, r0
 8003e1a:	b118      	cbz	r0, 8003e24 <_puts_r+0x10>
 8003e1c:	6983      	ldr	r3, [r0, #24]
 8003e1e:	b90b      	cbnz	r3, 8003e24 <_puts_r+0x10>
 8003e20:	f000 fa0c 	bl	800423c <__sinit>
 8003e24:	69ab      	ldr	r3, [r5, #24]
 8003e26:	68ac      	ldr	r4, [r5, #8]
 8003e28:	b913      	cbnz	r3, 8003e30 <_puts_r+0x1c>
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f000 fa06 	bl	800423c <__sinit>
 8003e30:	4b23      	ldr	r3, [pc, #140]	; (8003ec0 <_puts_r+0xac>)
 8003e32:	429c      	cmp	r4, r3
 8003e34:	d117      	bne.n	8003e66 <_puts_r+0x52>
 8003e36:	686c      	ldr	r4, [r5, #4]
 8003e38:	89a3      	ldrh	r3, [r4, #12]
 8003e3a:	071b      	lsls	r3, r3, #28
 8003e3c:	d51d      	bpl.n	8003e7a <_puts_r+0x66>
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	b1db      	cbz	r3, 8003e7a <_puts_r+0x66>
 8003e42:	3e01      	subs	r6, #1
 8003e44:	68a3      	ldr	r3, [r4, #8]
 8003e46:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	60a3      	str	r3, [r4, #8]
 8003e4e:	b9e9      	cbnz	r1, 8003e8c <_puts_r+0x78>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	da2e      	bge.n	8003eb2 <_puts_r+0x9e>
 8003e54:	4622      	mov	r2, r4
 8003e56:	210a      	movs	r1, #10
 8003e58:	4628      	mov	r0, r5
 8003e5a:	f000 f83f 	bl	8003edc <__swbuf_r>
 8003e5e:	3001      	adds	r0, #1
 8003e60:	d011      	beq.n	8003e86 <_puts_r+0x72>
 8003e62:	200a      	movs	r0, #10
 8003e64:	e011      	b.n	8003e8a <_puts_r+0x76>
 8003e66:	4b17      	ldr	r3, [pc, #92]	; (8003ec4 <_puts_r+0xb0>)
 8003e68:	429c      	cmp	r4, r3
 8003e6a:	d101      	bne.n	8003e70 <_puts_r+0x5c>
 8003e6c:	68ac      	ldr	r4, [r5, #8]
 8003e6e:	e7e3      	b.n	8003e38 <_puts_r+0x24>
 8003e70:	4b15      	ldr	r3, [pc, #84]	; (8003ec8 <_puts_r+0xb4>)
 8003e72:	429c      	cmp	r4, r3
 8003e74:	bf08      	it	eq
 8003e76:	68ec      	ldreq	r4, [r5, #12]
 8003e78:	e7de      	b.n	8003e38 <_puts_r+0x24>
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	f000 f87f 	bl	8003f80 <__swsetup_r>
 8003e82:	2800      	cmp	r0, #0
 8003e84:	d0dd      	beq.n	8003e42 <_puts_r+0x2e>
 8003e86:	f04f 30ff 	mov.w	r0, #4294967295
 8003e8a:	bd70      	pop	{r4, r5, r6, pc}
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	da04      	bge.n	8003e9a <_puts_r+0x86>
 8003e90:	69a2      	ldr	r2, [r4, #24]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	dc06      	bgt.n	8003ea4 <_puts_r+0x90>
 8003e96:	290a      	cmp	r1, #10
 8003e98:	d004      	beq.n	8003ea4 <_puts_r+0x90>
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	6022      	str	r2, [r4, #0]
 8003ea0:	7019      	strb	r1, [r3, #0]
 8003ea2:	e7cf      	b.n	8003e44 <_puts_r+0x30>
 8003ea4:	4622      	mov	r2, r4
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f000 f818 	bl	8003edc <__swbuf_r>
 8003eac:	3001      	adds	r0, #1
 8003eae:	d1c9      	bne.n	8003e44 <_puts_r+0x30>
 8003eb0:	e7e9      	b.n	8003e86 <_puts_r+0x72>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	200a      	movs	r0, #10
 8003eb6:	1c5a      	adds	r2, r3, #1
 8003eb8:	6022      	str	r2, [r4, #0]
 8003eba:	7018      	strb	r0, [r3, #0]
 8003ebc:	e7e5      	b.n	8003e8a <_puts_r+0x76>
 8003ebe:	bf00      	nop
 8003ec0:	08004834 	.word	0x08004834
 8003ec4:	08004854 	.word	0x08004854
 8003ec8:	08004814 	.word	0x08004814

08003ecc <puts>:
 8003ecc:	4b02      	ldr	r3, [pc, #8]	; (8003ed8 <puts+0xc>)
 8003ece:	4601      	mov	r1, r0
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	f7ff bf9f 	b.w	8003e14 <_puts_r>
 8003ed6:	bf00      	nop
 8003ed8:	20000010 	.word	0x20000010

08003edc <__swbuf_r>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	460e      	mov	r6, r1
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	4605      	mov	r5, r0
 8003ee4:	b118      	cbz	r0, 8003eee <__swbuf_r+0x12>
 8003ee6:	6983      	ldr	r3, [r0, #24]
 8003ee8:	b90b      	cbnz	r3, 8003eee <__swbuf_r+0x12>
 8003eea:	f000 f9a7 	bl	800423c <__sinit>
 8003eee:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <__swbuf_r+0x98>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	d12a      	bne.n	8003f4a <__swbuf_r+0x6e>
 8003ef4:	686c      	ldr	r4, [r5, #4]
 8003ef6:	69a3      	ldr	r3, [r4, #24]
 8003ef8:	60a3      	str	r3, [r4, #8]
 8003efa:	89a3      	ldrh	r3, [r4, #12]
 8003efc:	071a      	lsls	r2, r3, #28
 8003efe:	d52e      	bpl.n	8003f5e <__swbuf_r+0x82>
 8003f00:	6923      	ldr	r3, [r4, #16]
 8003f02:	b363      	cbz	r3, 8003f5e <__swbuf_r+0x82>
 8003f04:	6923      	ldr	r3, [r4, #16]
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	1ac0      	subs	r0, r0, r3
 8003f0a:	6963      	ldr	r3, [r4, #20]
 8003f0c:	b2f6      	uxtb	r6, r6
 8003f0e:	4283      	cmp	r3, r0
 8003f10:	4637      	mov	r7, r6
 8003f12:	dc04      	bgt.n	8003f1e <__swbuf_r+0x42>
 8003f14:	4621      	mov	r1, r4
 8003f16:	4628      	mov	r0, r5
 8003f18:	f000 f926 	bl	8004168 <_fflush_r>
 8003f1c:	bb28      	cbnz	r0, 8003f6a <__swbuf_r+0x8e>
 8003f1e:	68a3      	ldr	r3, [r4, #8]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	60a3      	str	r3, [r4, #8]
 8003f24:	6823      	ldr	r3, [r4, #0]
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	6022      	str	r2, [r4, #0]
 8003f2a:	701e      	strb	r6, [r3, #0]
 8003f2c:	6963      	ldr	r3, [r4, #20]
 8003f2e:	3001      	adds	r0, #1
 8003f30:	4283      	cmp	r3, r0
 8003f32:	d004      	beq.n	8003f3e <__swbuf_r+0x62>
 8003f34:	89a3      	ldrh	r3, [r4, #12]
 8003f36:	07db      	lsls	r3, r3, #31
 8003f38:	d519      	bpl.n	8003f6e <__swbuf_r+0x92>
 8003f3a:	2e0a      	cmp	r6, #10
 8003f3c:	d117      	bne.n	8003f6e <__swbuf_r+0x92>
 8003f3e:	4621      	mov	r1, r4
 8003f40:	4628      	mov	r0, r5
 8003f42:	f000 f911 	bl	8004168 <_fflush_r>
 8003f46:	b190      	cbz	r0, 8003f6e <__swbuf_r+0x92>
 8003f48:	e00f      	b.n	8003f6a <__swbuf_r+0x8e>
 8003f4a:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <__swbuf_r+0x9c>)
 8003f4c:	429c      	cmp	r4, r3
 8003f4e:	d101      	bne.n	8003f54 <__swbuf_r+0x78>
 8003f50:	68ac      	ldr	r4, [r5, #8]
 8003f52:	e7d0      	b.n	8003ef6 <__swbuf_r+0x1a>
 8003f54:	4b09      	ldr	r3, [pc, #36]	; (8003f7c <__swbuf_r+0xa0>)
 8003f56:	429c      	cmp	r4, r3
 8003f58:	bf08      	it	eq
 8003f5a:	68ec      	ldreq	r4, [r5, #12]
 8003f5c:	e7cb      	b.n	8003ef6 <__swbuf_r+0x1a>
 8003f5e:	4621      	mov	r1, r4
 8003f60:	4628      	mov	r0, r5
 8003f62:	f000 f80d 	bl	8003f80 <__swsetup_r>
 8003f66:	2800      	cmp	r0, #0
 8003f68:	d0cc      	beq.n	8003f04 <__swbuf_r+0x28>
 8003f6a:	f04f 37ff 	mov.w	r7, #4294967295
 8003f6e:	4638      	mov	r0, r7
 8003f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	08004834 	.word	0x08004834
 8003f78:	08004854 	.word	0x08004854
 8003f7c:	08004814 	.word	0x08004814

08003f80 <__swsetup_r>:
 8003f80:	4b32      	ldr	r3, [pc, #200]	; (800404c <__swsetup_r+0xcc>)
 8003f82:	b570      	push	{r4, r5, r6, lr}
 8003f84:	681d      	ldr	r5, [r3, #0]
 8003f86:	4606      	mov	r6, r0
 8003f88:	460c      	mov	r4, r1
 8003f8a:	b125      	cbz	r5, 8003f96 <__swsetup_r+0x16>
 8003f8c:	69ab      	ldr	r3, [r5, #24]
 8003f8e:	b913      	cbnz	r3, 8003f96 <__swsetup_r+0x16>
 8003f90:	4628      	mov	r0, r5
 8003f92:	f000 f953 	bl	800423c <__sinit>
 8003f96:	4b2e      	ldr	r3, [pc, #184]	; (8004050 <__swsetup_r+0xd0>)
 8003f98:	429c      	cmp	r4, r3
 8003f9a:	d10f      	bne.n	8003fbc <__swsetup_r+0x3c>
 8003f9c:	686c      	ldr	r4, [r5, #4]
 8003f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	0715      	lsls	r5, r2, #28
 8003fa6:	d42c      	bmi.n	8004002 <__swsetup_r+0x82>
 8003fa8:	06d0      	lsls	r0, r2, #27
 8003faa:	d411      	bmi.n	8003fd0 <__swsetup_r+0x50>
 8003fac:	2209      	movs	r2, #9
 8003fae:	6032      	str	r2, [r6, #0]
 8003fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fb4:	81a3      	strh	r3, [r4, #12]
 8003fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fba:	e03e      	b.n	800403a <__swsetup_r+0xba>
 8003fbc:	4b25      	ldr	r3, [pc, #148]	; (8004054 <__swsetup_r+0xd4>)
 8003fbe:	429c      	cmp	r4, r3
 8003fc0:	d101      	bne.n	8003fc6 <__swsetup_r+0x46>
 8003fc2:	68ac      	ldr	r4, [r5, #8]
 8003fc4:	e7eb      	b.n	8003f9e <__swsetup_r+0x1e>
 8003fc6:	4b24      	ldr	r3, [pc, #144]	; (8004058 <__swsetup_r+0xd8>)
 8003fc8:	429c      	cmp	r4, r3
 8003fca:	bf08      	it	eq
 8003fcc:	68ec      	ldreq	r4, [r5, #12]
 8003fce:	e7e6      	b.n	8003f9e <__swsetup_r+0x1e>
 8003fd0:	0751      	lsls	r1, r2, #29
 8003fd2:	d512      	bpl.n	8003ffa <__swsetup_r+0x7a>
 8003fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fd6:	b141      	cbz	r1, 8003fea <__swsetup_r+0x6a>
 8003fd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fdc:	4299      	cmp	r1, r3
 8003fde:	d002      	beq.n	8003fe6 <__swsetup_r+0x66>
 8003fe0:	4630      	mov	r0, r6
 8003fe2:	f000 fa19 	bl	8004418 <_free_r>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	6363      	str	r3, [r4, #52]	; 0x34
 8003fea:	89a3      	ldrh	r3, [r4, #12]
 8003fec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ff0:	81a3      	strh	r3, [r4, #12]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	6063      	str	r3, [r4, #4]
 8003ff6:	6923      	ldr	r3, [r4, #16]
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	89a3      	ldrh	r3, [r4, #12]
 8003ffc:	f043 0308 	orr.w	r3, r3, #8
 8004000:	81a3      	strh	r3, [r4, #12]
 8004002:	6923      	ldr	r3, [r4, #16]
 8004004:	b94b      	cbnz	r3, 800401a <__swsetup_r+0x9a>
 8004006:	89a3      	ldrh	r3, [r4, #12]
 8004008:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800400c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004010:	d003      	beq.n	800401a <__swsetup_r+0x9a>
 8004012:	4621      	mov	r1, r4
 8004014:	4630      	mov	r0, r6
 8004016:	f000 f9bf 	bl	8004398 <__smakebuf_r>
 800401a:	89a2      	ldrh	r2, [r4, #12]
 800401c:	f012 0301 	ands.w	r3, r2, #1
 8004020:	d00c      	beq.n	800403c <__swsetup_r+0xbc>
 8004022:	2300      	movs	r3, #0
 8004024:	60a3      	str	r3, [r4, #8]
 8004026:	6963      	ldr	r3, [r4, #20]
 8004028:	425b      	negs	r3, r3
 800402a:	61a3      	str	r3, [r4, #24]
 800402c:	6923      	ldr	r3, [r4, #16]
 800402e:	b953      	cbnz	r3, 8004046 <__swsetup_r+0xc6>
 8004030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004034:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004038:	d1ba      	bne.n	8003fb0 <__swsetup_r+0x30>
 800403a:	bd70      	pop	{r4, r5, r6, pc}
 800403c:	0792      	lsls	r2, r2, #30
 800403e:	bf58      	it	pl
 8004040:	6963      	ldrpl	r3, [r4, #20]
 8004042:	60a3      	str	r3, [r4, #8]
 8004044:	e7f2      	b.n	800402c <__swsetup_r+0xac>
 8004046:	2000      	movs	r0, #0
 8004048:	e7f7      	b.n	800403a <__swsetup_r+0xba>
 800404a:	bf00      	nop
 800404c:	20000010 	.word	0x20000010
 8004050:	08004834 	.word	0x08004834
 8004054:	08004854 	.word	0x08004854
 8004058:	08004814 	.word	0x08004814

0800405c <__sflush_r>:
 800405c:	898a      	ldrh	r2, [r1, #12]
 800405e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004062:	4605      	mov	r5, r0
 8004064:	0710      	lsls	r0, r2, #28
 8004066:	460c      	mov	r4, r1
 8004068:	d458      	bmi.n	800411c <__sflush_r+0xc0>
 800406a:	684b      	ldr	r3, [r1, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	dc05      	bgt.n	800407c <__sflush_r+0x20>
 8004070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004072:	2b00      	cmp	r3, #0
 8004074:	dc02      	bgt.n	800407c <__sflush_r+0x20>
 8004076:	2000      	movs	r0, #0
 8004078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800407e:	2e00      	cmp	r6, #0
 8004080:	d0f9      	beq.n	8004076 <__sflush_r+0x1a>
 8004082:	2300      	movs	r3, #0
 8004084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004088:	682f      	ldr	r7, [r5, #0]
 800408a:	6a21      	ldr	r1, [r4, #32]
 800408c:	602b      	str	r3, [r5, #0]
 800408e:	d032      	beq.n	80040f6 <__sflush_r+0x9a>
 8004090:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004092:	89a3      	ldrh	r3, [r4, #12]
 8004094:	075a      	lsls	r2, r3, #29
 8004096:	d505      	bpl.n	80040a4 <__sflush_r+0x48>
 8004098:	6863      	ldr	r3, [r4, #4]
 800409a:	1ac0      	subs	r0, r0, r3
 800409c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800409e:	b10b      	cbz	r3, 80040a4 <__sflush_r+0x48>
 80040a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040a2:	1ac0      	subs	r0, r0, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	4602      	mov	r2, r0
 80040a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80040aa:	6a21      	ldr	r1, [r4, #32]
 80040ac:	4628      	mov	r0, r5
 80040ae:	47b0      	blx	r6
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	d106      	bne.n	80040c4 <__sflush_r+0x68>
 80040b6:	6829      	ldr	r1, [r5, #0]
 80040b8:	291d      	cmp	r1, #29
 80040ba:	d848      	bhi.n	800414e <__sflush_r+0xf2>
 80040bc:	4a29      	ldr	r2, [pc, #164]	; (8004164 <__sflush_r+0x108>)
 80040be:	40ca      	lsrs	r2, r1
 80040c0:	07d6      	lsls	r6, r2, #31
 80040c2:	d544      	bpl.n	800414e <__sflush_r+0xf2>
 80040c4:	2200      	movs	r2, #0
 80040c6:	6062      	str	r2, [r4, #4]
 80040c8:	04d9      	lsls	r1, r3, #19
 80040ca:	6922      	ldr	r2, [r4, #16]
 80040cc:	6022      	str	r2, [r4, #0]
 80040ce:	d504      	bpl.n	80040da <__sflush_r+0x7e>
 80040d0:	1c42      	adds	r2, r0, #1
 80040d2:	d101      	bne.n	80040d8 <__sflush_r+0x7c>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b903      	cbnz	r3, 80040da <__sflush_r+0x7e>
 80040d8:	6560      	str	r0, [r4, #84]	; 0x54
 80040da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040dc:	602f      	str	r7, [r5, #0]
 80040de:	2900      	cmp	r1, #0
 80040e0:	d0c9      	beq.n	8004076 <__sflush_r+0x1a>
 80040e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040e6:	4299      	cmp	r1, r3
 80040e8:	d002      	beq.n	80040f0 <__sflush_r+0x94>
 80040ea:	4628      	mov	r0, r5
 80040ec:	f000 f994 	bl	8004418 <_free_r>
 80040f0:	2000      	movs	r0, #0
 80040f2:	6360      	str	r0, [r4, #52]	; 0x34
 80040f4:	e7c0      	b.n	8004078 <__sflush_r+0x1c>
 80040f6:	2301      	movs	r3, #1
 80040f8:	4628      	mov	r0, r5
 80040fa:	47b0      	blx	r6
 80040fc:	1c41      	adds	r1, r0, #1
 80040fe:	d1c8      	bne.n	8004092 <__sflush_r+0x36>
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0c5      	beq.n	8004092 <__sflush_r+0x36>
 8004106:	2b1d      	cmp	r3, #29
 8004108:	d001      	beq.n	800410e <__sflush_r+0xb2>
 800410a:	2b16      	cmp	r3, #22
 800410c:	d101      	bne.n	8004112 <__sflush_r+0xb6>
 800410e:	602f      	str	r7, [r5, #0]
 8004110:	e7b1      	b.n	8004076 <__sflush_r+0x1a>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004118:	81a3      	strh	r3, [r4, #12]
 800411a:	e7ad      	b.n	8004078 <__sflush_r+0x1c>
 800411c:	690f      	ldr	r7, [r1, #16]
 800411e:	2f00      	cmp	r7, #0
 8004120:	d0a9      	beq.n	8004076 <__sflush_r+0x1a>
 8004122:	0793      	lsls	r3, r2, #30
 8004124:	680e      	ldr	r6, [r1, #0]
 8004126:	bf08      	it	eq
 8004128:	694b      	ldreq	r3, [r1, #20]
 800412a:	600f      	str	r7, [r1, #0]
 800412c:	bf18      	it	ne
 800412e:	2300      	movne	r3, #0
 8004130:	eba6 0807 	sub.w	r8, r6, r7
 8004134:	608b      	str	r3, [r1, #8]
 8004136:	f1b8 0f00 	cmp.w	r8, #0
 800413a:	dd9c      	ble.n	8004076 <__sflush_r+0x1a>
 800413c:	4643      	mov	r3, r8
 800413e:	463a      	mov	r2, r7
 8004140:	6a21      	ldr	r1, [r4, #32]
 8004142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004144:	4628      	mov	r0, r5
 8004146:	47b0      	blx	r6
 8004148:	2800      	cmp	r0, #0
 800414a:	dc06      	bgt.n	800415a <__sflush_r+0xfe>
 800414c:	89a3      	ldrh	r3, [r4, #12]
 800414e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004152:	81a3      	strh	r3, [r4, #12]
 8004154:	f04f 30ff 	mov.w	r0, #4294967295
 8004158:	e78e      	b.n	8004078 <__sflush_r+0x1c>
 800415a:	4407      	add	r7, r0
 800415c:	eba8 0800 	sub.w	r8, r8, r0
 8004160:	e7e9      	b.n	8004136 <__sflush_r+0xda>
 8004162:	bf00      	nop
 8004164:	20400001 	.word	0x20400001

08004168 <_fflush_r>:
 8004168:	b538      	push	{r3, r4, r5, lr}
 800416a:	690b      	ldr	r3, [r1, #16]
 800416c:	4605      	mov	r5, r0
 800416e:	460c      	mov	r4, r1
 8004170:	b1db      	cbz	r3, 80041aa <_fflush_r+0x42>
 8004172:	b118      	cbz	r0, 800417c <_fflush_r+0x14>
 8004174:	6983      	ldr	r3, [r0, #24]
 8004176:	b90b      	cbnz	r3, 800417c <_fflush_r+0x14>
 8004178:	f000 f860 	bl	800423c <__sinit>
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <_fflush_r+0x48>)
 800417e:	429c      	cmp	r4, r3
 8004180:	d109      	bne.n	8004196 <_fflush_r+0x2e>
 8004182:	686c      	ldr	r4, [r5, #4]
 8004184:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004188:	b17b      	cbz	r3, 80041aa <_fflush_r+0x42>
 800418a:	4621      	mov	r1, r4
 800418c:	4628      	mov	r0, r5
 800418e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004192:	f7ff bf63 	b.w	800405c <__sflush_r>
 8004196:	4b07      	ldr	r3, [pc, #28]	; (80041b4 <_fflush_r+0x4c>)
 8004198:	429c      	cmp	r4, r3
 800419a:	d101      	bne.n	80041a0 <_fflush_r+0x38>
 800419c:	68ac      	ldr	r4, [r5, #8]
 800419e:	e7f1      	b.n	8004184 <_fflush_r+0x1c>
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <_fflush_r+0x50>)
 80041a2:	429c      	cmp	r4, r3
 80041a4:	bf08      	it	eq
 80041a6:	68ec      	ldreq	r4, [r5, #12]
 80041a8:	e7ec      	b.n	8004184 <_fflush_r+0x1c>
 80041aa:	2000      	movs	r0, #0
 80041ac:	bd38      	pop	{r3, r4, r5, pc}
 80041ae:	bf00      	nop
 80041b0:	08004834 	.word	0x08004834
 80041b4:	08004854 	.word	0x08004854
 80041b8:	08004814 	.word	0x08004814

080041bc <std>:
 80041bc:	2300      	movs	r3, #0
 80041be:	b510      	push	{r4, lr}
 80041c0:	4604      	mov	r4, r0
 80041c2:	e9c0 3300 	strd	r3, r3, [r0]
 80041c6:	6083      	str	r3, [r0, #8]
 80041c8:	8181      	strh	r1, [r0, #12]
 80041ca:	6643      	str	r3, [r0, #100]	; 0x64
 80041cc:	81c2      	strh	r2, [r0, #14]
 80041ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041d2:	6183      	str	r3, [r0, #24]
 80041d4:	4619      	mov	r1, r3
 80041d6:	2208      	movs	r2, #8
 80041d8:	305c      	adds	r0, #92	; 0x5c
 80041da:	f7ff fe13 	bl	8003e04 <memset>
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <std+0x38>)
 80041e0:	6263      	str	r3, [r4, #36]	; 0x24
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <std+0x3c>)
 80041e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80041e6:	4b05      	ldr	r3, [pc, #20]	; (80041fc <std+0x40>)
 80041e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041ea:	4b05      	ldr	r3, [pc, #20]	; (8004200 <std+0x44>)
 80041ec:	6224      	str	r4, [r4, #32]
 80041ee:	6323      	str	r3, [r4, #48]	; 0x30
 80041f0:	bd10      	pop	{r4, pc}
 80041f2:	bf00      	nop
 80041f4:	08004589 	.word	0x08004589
 80041f8:	080045ab 	.word	0x080045ab
 80041fc:	080045e3 	.word	0x080045e3
 8004200:	08004607 	.word	0x08004607

08004204 <_cleanup_r>:
 8004204:	4901      	ldr	r1, [pc, #4]	; (800420c <_cleanup_r+0x8>)
 8004206:	f000 b885 	b.w	8004314 <_fwalk_reent>
 800420a:	bf00      	nop
 800420c:	08004169 	.word	0x08004169

08004210 <__sfmoreglue>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	1e4a      	subs	r2, r1, #1
 8004214:	2568      	movs	r5, #104	; 0x68
 8004216:	4355      	muls	r5, r2
 8004218:	460e      	mov	r6, r1
 800421a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800421e:	f000 f949 	bl	80044b4 <_malloc_r>
 8004222:	4604      	mov	r4, r0
 8004224:	b140      	cbz	r0, 8004238 <__sfmoreglue+0x28>
 8004226:	2100      	movs	r1, #0
 8004228:	e9c0 1600 	strd	r1, r6, [r0]
 800422c:	300c      	adds	r0, #12
 800422e:	60a0      	str	r0, [r4, #8]
 8004230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004234:	f7ff fde6 	bl	8003e04 <memset>
 8004238:	4620      	mov	r0, r4
 800423a:	bd70      	pop	{r4, r5, r6, pc}

0800423c <__sinit>:
 800423c:	6983      	ldr	r3, [r0, #24]
 800423e:	b510      	push	{r4, lr}
 8004240:	4604      	mov	r4, r0
 8004242:	bb33      	cbnz	r3, 8004292 <__sinit+0x56>
 8004244:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004248:	6503      	str	r3, [r0, #80]	; 0x50
 800424a:	4b12      	ldr	r3, [pc, #72]	; (8004294 <__sinit+0x58>)
 800424c:	4a12      	ldr	r2, [pc, #72]	; (8004298 <__sinit+0x5c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6282      	str	r2, [r0, #40]	; 0x28
 8004252:	4298      	cmp	r0, r3
 8004254:	bf04      	itt	eq
 8004256:	2301      	moveq	r3, #1
 8004258:	6183      	streq	r3, [r0, #24]
 800425a:	f000 f81f 	bl	800429c <__sfp>
 800425e:	6060      	str	r0, [r4, #4]
 8004260:	4620      	mov	r0, r4
 8004262:	f000 f81b 	bl	800429c <__sfp>
 8004266:	60a0      	str	r0, [r4, #8]
 8004268:	4620      	mov	r0, r4
 800426a:	f000 f817 	bl	800429c <__sfp>
 800426e:	2200      	movs	r2, #0
 8004270:	60e0      	str	r0, [r4, #12]
 8004272:	2104      	movs	r1, #4
 8004274:	6860      	ldr	r0, [r4, #4]
 8004276:	f7ff ffa1 	bl	80041bc <std>
 800427a:	2201      	movs	r2, #1
 800427c:	2109      	movs	r1, #9
 800427e:	68a0      	ldr	r0, [r4, #8]
 8004280:	f7ff ff9c 	bl	80041bc <std>
 8004284:	2202      	movs	r2, #2
 8004286:	2112      	movs	r1, #18
 8004288:	68e0      	ldr	r0, [r4, #12]
 800428a:	f7ff ff97 	bl	80041bc <std>
 800428e:	2301      	movs	r3, #1
 8004290:	61a3      	str	r3, [r4, #24]
 8004292:	bd10      	pop	{r4, pc}
 8004294:	08004810 	.word	0x08004810
 8004298:	08004205 	.word	0x08004205

0800429c <__sfp>:
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429e:	4b1b      	ldr	r3, [pc, #108]	; (800430c <__sfp+0x70>)
 80042a0:	681e      	ldr	r6, [r3, #0]
 80042a2:	69b3      	ldr	r3, [r6, #24]
 80042a4:	4607      	mov	r7, r0
 80042a6:	b913      	cbnz	r3, 80042ae <__sfp+0x12>
 80042a8:	4630      	mov	r0, r6
 80042aa:	f7ff ffc7 	bl	800423c <__sinit>
 80042ae:	3648      	adds	r6, #72	; 0x48
 80042b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	d503      	bpl.n	80042c0 <__sfp+0x24>
 80042b8:	6833      	ldr	r3, [r6, #0]
 80042ba:	b133      	cbz	r3, 80042ca <__sfp+0x2e>
 80042bc:	6836      	ldr	r6, [r6, #0]
 80042be:	e7f7      	b.n	80042b0 <__sfp+0x14>
 80042c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042c4:	b16d      	cbz	r5, 80042e2 <__sfp+0x46>
 80042c6:	3468      	adds	r4, #104	; 0x68
 80042c8:	e7f4      	b.n	80042b4 <__sfp+0x18>
 80042ca:	2104      	movs	r1, #4
 80042cc:	4638      	mov	r0, r7
 80042ce:	f7ff ff9f 	bl	8004210 <__sfmoreglue>
 80042d2:	6030      	str	r0, [r6, #0]
 80042d4:	2800      	cmp	r0, #0
 80042d6:	d1f1      	bne.n	80042bc <__sfp+0x20>
 80042d8:	230c      	movs	r3, #12
 80042da:	603b      	str	r3, [r7, #0]
 80042dc:	4604      	mov	r4, r0
 80042de:	4620      	mov	r0, r4
 80042e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <__sfp+0x74>)
 80042e4:	6665      	str	r5, [r4, #100]	; 0x64
 80042e6:	e9c4 5500 	strd	r5, r5, [r4]
 80042ea:	60a5      	str	r5, [r4, #8]
 80042ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80042f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80042f4:	2208      	movs	r2, #8
 80042f6:	4629      	mov	r1, r5
 80042f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042fc:	f7ff fd82 	bl	8003e04 <memset>
 8004300:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004304:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004308:	e7e9      	b.n	80042de <__sfp+0x42>
 800430a:	bf00      	nop
 800430c:	08004810 	.word	0x08004810
 8004310:	ffff0001 	.word	0xffff0001

08004314 <_fwalk_reent>:
 8004314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004318:	4680      	mov	r8, r0
 800431a:	4689      	mov	r9, r1
 800431c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004320:	2600      	movs	r6, #0
 8004322:	b914      	cbnz	r4, 800432a <_fwalk_reent+0x16>
 8004324:	4630      	mov	r0, r6
 8004326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800432a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800432e:	3f01      	subs	r7, #1
 8004330:	d501      	bpl.n	8004336 <_fwalk_reent+0x22>
 8004332:	6824      	ldr	r4, [r4, #0]
 8004334:	e7f5      	b.n	8004322 <_fwalk_reent+0xe>
 8004336:	89ab      	ldrh	r3, [r5, #12]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d907      	bls.n	800434c <_fwalk_reent+0x38>
 800433c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004340:	3301      	adds	r3, #1
 8004342:	d003      	beq.n	800434c <_fwalk_reent+0x38>
 8004344:	4629      	mov	r1, r5
 8004346:	4640      	mov	r0, r8
 8004348:	47c8      	blx	r9
 800434a:	4306      	orrs	r6, r0
 800434c:	3568      	adds	r5, #104	; 0x68
 800434e:	e7ee      	b.n	800432e <_fwalk_reent+0x1a>

08004350 <__swhatbuf_r>:
 8004350:	b570      	push	{r4, r5, r6, lr}
 8004352:	460e      	mov	r6, r1
 8004354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004358:	2900      	cmp	r1, #0
 800435a:	b096      	sub	sp, #88	; 0x58
 800435c:	4614      	mov	r4, r2
 800435e:	461d      	mov	r5, r3
 8004360:	da07      	bge.n	8004372 <__swhatbuf_r+0x22>
 8004362:	2300      	movs	r3, #0
 8004364:	602b      	str	r3, [r5, #0]
 8004366:	89b3      	ldrh	r3, [r6, #12]
 8004368:	061a      	lsls	r2, r3, #24
 800436a:	d410      	bmi.n	800438e <__swhatbuf_r+0x3e>
 800436c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004370:	e00e      	b.n	8004390 <__swhatbuf_r+0x40>
 8004372:	466a      	mov	r2, sp
 8004374:	f000 f96e 	bl	8004654 <_fstat_r>
 8004378:	2800      	cmp	r0, #0
 800437a:	dbf2      	blt.n	8004362 <__swhatbuf_r+0x12>
 800437c:	9a01      	ldr	r2, [sp, #4]
 800437e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004382:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004386:	425a      	negs	r2, r3
 8004388:	415a      	adcs	r2, r3
 800438a:	602a      	str	r2, [r5, #0]
 800438c:	e7ee      	b.n	800436c <__swhatbuf_r+0x1c>
 800438e:	2340      	movs	r3, #64	; 0x40
 8004390:	2000      	movs	r0, #0
 8004392:	6023      	str	r3, [r4, #0]
 8004394:	b016      	add	sp, #88	; 0x58
 8004396:	bd70      	pop	{r4, r5, r6, pc}

08004398 <__smakebuf_r>:
 8004398:	898b      	ldrh	r3, [r1, #12]
 800439a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800439c:	079d      	lsls	r5, r3, #30
 800439e:	4606      	mov	r6, r0
 80043a0:	460c      	mov	r4, r1
 80043a2:	d507      	bpl.n	80043b4 <__smakebuf_r+0x1c>
 80043a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	6123      	str	r3, [r4, #16]
 80043ac:	2301      	movs	r3, #1
 80043ae:	6163      	str	r3, [r4, #20]
 80043b0:	b002      	add	sp, #8
 80043b2:	bd70      	pop	{r4, r5, r6, pc}
 80043b4:	ab01      	add	r3, sp, #4
 80043b6:	466a      	mov	r2, sp
 80043b8:	f7ff ffca 	bl	8004350 <__swhatbuf_r>
 80043bc:	9900      	ldr	r1, [sp, #0]
 80043be:	4605      	mov	r5, r0
 80043c0:	4630      	mov	r0, r6
 80043c2:	f000 f877 	bl	80044b4 <_malloc_r>
 80043c6:	b948      	cbnz	r0, 80043dc <__smakebuf_r+0x44>
 80043c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043cc:	059a      	lsls	r2, r3, #22
 80043ce:	d4ef      	bmi.n	80043b0 <__smakebuf_r+0x18>
 80043d0:	f023 0303 	bic.w	r3, r3, #3
 80043d4:	f043 0302 	orr.w	r3, r3, #2
 80043d8:	81a3      	strh	r3, [r4, #12]
 80043da:	e7e3      	b.n	80043a4 <__smakebuf_r+0xc>
 80043dc:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <__smakebuf_r+0x7c>)
 80043de:	62b3      	str	r3, [r6, #40]	; 0x28
 80043e0:	89a3      	ldrh	r3, [r4, #12]
 80043e2:	6020      	str	r0, [r4, #0]
 80043e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e8:	81a3      	strh	r3, [r4, #12]
 80043ea:	9b00      	ldr	r3, [sp, #0]
 80043ec:	6163      	str	r3, [r4, #20]
 80043ee:	9b01      	ldr	r3, [sp, #4]
 80043f0:	6120      	str	r0, [r4, #16]
 80043f2:	b15b      	cbz	r3, 800440c <__smakebuf_r+0x74>
 80043f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043f8:	4630      	mov	r0, r6
 80043fa:	f000 f93d 	bl	8004678 <_isatty_r>
 80043fe:	b128      	cbz	r0, 800440c <__smakebuf_r+0x74>
 8004400:	89a3      	ldrh	r3, [r4, #12]
 8004402:	f023 0303 	bic.w	r3, r3, #3
 8004406:	f043 0301 	orr.w	r3, r3, #1
 800440a:	81a3      	strh	r3, [r4, #12]
 800440c:	89a3      	ldrh	r3, [r4, #12]
 800440e:	431d      	orrs	r5, r3
 8004410:	81a5      	strh	r5, [r4, #12]
 8004412:	e7cd      	b.n	80043b0 <__smakebuf_r+0x18>
 8004414:	08004205 	.word	0x08004205

08004418 <_free_r>:
 8004418:	b538      	push	{r3, r4, r5, lr}
 800441a:	4605      	mov	r5, r0
 800441c:	2900      	cmp	r1, #0
 800441e:	d045      	beq.n	80044ac <_free_r+0x94>
 8004420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004424:	1f0c      	subs	r4, r1, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	bfb8      	it	lt
 800442a:	18e4      	addlt	r4, r4, r3
 800442c:	f000 f946 	bl	80046bc <__malloc_lock>
 8004430:	4a1f      	ldr	r2, [pc, #124]	; (80044b0 <_free_r+0x98>)
 8004432:	6813      	ldr	r3, [r2, #0]
 8004434:	4610      	mov	r0, r2
 8004436:	b933      	cbnz	r3, 8004446 <_free_r+0x2e>
 8004438:	6063      	str	r3, [r4, #4]
 800443a:	6014      	str	r4, [r2, #0]
 800443c:	4628      	mov	r0, r5
 800443e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004442:	f000 b93c 	b.w	80046be <__malloc_unlock>
 8004446:	42a3      	cmp	r3, r4
 8004448:	d90c      	bls.n	8004464 <_free_r+0x4c>
 800444a:	6821      	ldr	r1, [r4, #0]
 800444c:	1862      	adds	r2, r4, r1
 800444e:	4293      	cmp	r3, r2
 8004450:	bf04      	itt	eq
 8004452:	681a      	ldreq	r2, [r3, #0]
 8004454:	685b      	ldreq	r3, [r3, #4]
 8004456:	6063      	str	r3, [r4, #4]
 8004458:	bf04      	itt	eq
 800445a:	1852      	addeq	r2, r2, r1
 800445c:	6022      	streq	r2, [r4, #0]
 800445e:	6004      	str	r4, [r0, #0]
 8004460:	e7ec      	b.n	800443c <_free_r+0x24>
 8004462:	4613      	mov	r3, r2
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	b10a      	cbz	r2, 800446c <_free_r+0x54>
 8004468:	42a2      	cmp	r2, r4
 800446a:	d9fa      	bls.n	8004462 <_free_r+0x4a>
 800446c:	6819      	ldr	r1, [r3, #0]
 800446e:	1858      	adds	r0, r3, r1
 8004470:	42a0      	cmp	r0, r4
 8004472:	d10b      	bne.n	800448c <_free_r+0x74>
 8004474:	6820      	ldr	r0, [r4, #0]
 8004476:	4401      	add	r1, r0
 8004478:	1858      	adds	r0, r3, r1
 800447a:	4282      	cmp	r2, r0
 800447c:	6019      	str	r1, [r3, #0]
 800447e:	d1dd      	bne.n	800443c <_free_r+0x24>
 8004480:	6810      	ldr	r0, [r2, #0]
 8004482:	6852      	ldr	r2, [r2, #4]
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	4401      	add	r1, r0
 8004488:	6019      	str	r1, [r3, #0]
 800448a:	e7d7      	b.n	800443c <_free_r+0x24>
 800448c:	d902      	bls.n	8004494 <_free_r+0x7c>
 800448e:	230c      	movs	r3, #12
 8004490:	602b      	str	r3, [r5, #0]
 8004492:	e7d3      	b.n	800443c <_free_r+0x24>
 8004494:	6820      	ldr	r0, [r4, #0]
 8004496:	1821      	adds	r1, r4, r0
 8004498:	428a      	cmp	r2, r1
 800449a:	bf04      	itt	eq
 800449c:	6811      	ldreq	r1, [r2, #0]
 800449e:	6852      	ldreq	r2, [r2, #4]
 80044a0:	6062      	str	r2, [r4, #4]
 80044a2:	bf04      	itt	eq
 80044a4:	1809      	addeq	r1, r1, r0
 80044a6:	6021      	streq	r1, [r4, #0]
 80044a8:	605c      	str	r4, [r3, #4]
 80044aa:	e7c7      	b.n	800443c <_free_r+0x24>
 80044ac:	bd38      	pop	{r3, r4, r5, pc}
 80044ae:	bf00      	nop
 80044b0:	20000094 	.word	0x20000094

080044b4 <_malloc_r>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	1ccd      	adds	r5, r1, #3
 80044b8:	f025 0503 	bic.w	r5, r5, #3
 80044bc:	3508      	adds	r5, #8
 80044be:	2d0c      	cmp	r5, #12
 80044c0:	bf38      	it	cc
 80044c2:	250c      	movcc	r5, #12
 80044c4:	2d00      	cmp	r5, #0
 80044c6:	4606      	mov	r6, r0
 80044c8:	db01      	blt.n	80044ce <_malloc_r+0x1a>
 80044ca:	42a9      	cmp	r1, r5
 80044cc:	d903      	bls.n	80044d6 <_malloc_r+0x22>
 80044ce:	230c      	movs	r3, #12
 80044d0:	6033      	str	r3, [r6, #0]
 80044d2:	2000      	movs	r0, #0
 80044d4:	bd70      	pop	{r4, r5, r6, pc}
 80044d6:	f000 f8f1 	bl	80046bc <__malloc_lock>
 80044da:	4a21      	ldr	r2, [pc, #132]	; (8004560 <_malloc_r+0xac>)
 80044dc:	6814      	ldr	r4, [r2, #0]
 80044de:	4621      	mov	r1, r4
 80044e0:	b991      	cbnz	r1, 8004508 <_malloc_r+0x54>
 80044e2:	4c20      	ldr	r4, [pc, #128]	; (8004564 <_malloc_r+0xb0>)
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	b91b      	cbnz	r3, 80044f0 <_malloc_r+0x3c>
 80044e8:	4630      	mov	r0, r6
 80044ea:	f000 f83d 	bl	8004568 <_sbrk_r>
 80044ee:	6020      	str	r0, [r4, #0]
 80044f0:	4629      	mov	r1, r5
 80044f2:	4630      	mov	r0, r6
 80044f4:	f000 f838 	bl	8004568 <_sbrk_r>
 80044f8:	1c43      	adds	r3, r0, #1
 80044fa:	d124      	bne.n	8004546 <_malloc_r+0x92>
 80044fc:	230c      	movs	r3, #12
 80044fe:	6033      	str	r3, [r6, #0]
 8004500:	4630      	mov	r0, r6
 8004502:	f000 f8dc 	bl	80046be <__malloc_unlock>
 8004506:	e7e4      	b.n	80044d2 <_malloc_r+0x1e>
 8004508:	680b      	ldr	r3, [r1, #0]
 800450a:	1b5b      	subs	r3, r3, r5
 800450c:	d418      	bmi.n	8004540 <_malloc_r+0x8c>
 800450e:	2b0b      	cmp	r3, #11
 8004510:	d90f      	bls.n	8004532 <_malloc_r+0x7e>
 8004512:	600b      	str	r3, [r1, #0]
 8004514:	50cd      	str	r5, [r1, r3]
 8004516:	18cc      	adds	r4, r1, r3
 8004518:	4630      	mov	r0, r6
 800451a:	f000 f8d0 	bl	80046be <__malloc_unlock>
 800451e:	f104 000b 	add.w	r0, r4, #11
 8004522:	1d23      	adds	r3, r4, #4
 8004524:	f020 0007 	bic.w	r0, r0, #7
 8004528:	1ac3      	subs	r3, r0, r3
 800452a:	d0d3      	beq.n	80044d4 <_malloc_r+0x20>
 800452c:	425a      	negs	r2, r3
 800452e:	50e2      	str	r2, [r4, r3]
 8004530:	e7d0      	b.n	80044d4 <_malloc_r+0x20>
 8004532:	428c      	cmp	r4, r1
 8004534:	684b      	ldr	r3, [r1, #4]
 8004536:	bf16      	itet	ne
 8004538:	6063      	strne	r3, [r4, #4]
 800453a:	6013      	streq	r3, [r2, #0]
 800453c:	460c      	movne	r4, r1
 800453e:	e7eb      	b.n	8004518 <_malloc_r+0x64>
 8004540:	460c      	mov	r4, r1
 8004542:	6849      	ldr	r1, [r1, #4]
 8004544:	e7cc      	b.n	80044e0 <_malloc_r+0x2c>
 8004546:	1cc4      	adds	r4, r0, #3
 8004548:	f024 0403 	bic.w	r4, r4, #3
 800454c:	42a0      	cmp	r0, r4
 800454e:	d005      	beq.n	800455c <_malloc_r+0xa8>
 8004550:	1a21      	subs	r1, r4, r0
 8004552:	4630      	mov	r0, r6
 8004554:	f000 f808 	bl	8004568 <_sbrk_r>
 8004558:	3001      	adds	r0, #1
 800455a:	d0cf      	beq.n	80044fc <_malloc_r+0x48>
 800455c:	6025      	str	r5, [r4, #0]
 800455e:	e7db      	b.n	8004518 <_malloc_r+0x64>
 8004560:	20000094 	.word	0x20000094
 8004564:	20000098 	.word	0x20000098

08004568 <_sbrk_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4c06      	ldr	r4, [pc, #24]	; (8004584 <_sbrk_r+0x1c>)
 800456c:	2300      	movs	r3, #0
 800456e:	4605      	mov	r5, r0
 8004570:	4608      	mov	r0, r1
 8004572:	6023      	str	r3, [r4, #0]
 8004574:	f7fc fa18 	bl	80009a8 <_sbrk>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_sbrk_r+0x1a>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	b103      	cbz	r3, 8004582 <_sbrk_r+0x1a>
 8004580:	602b      	str	r3, [r5, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	2000012c 	.word	0x2000012c

08004588 <__sread>:
 8004588:	b510      	push	{r4, lr}
 800458a:	460c      	mov	r4, r1
 800458c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004590:	f000 f896 	bl	80046c0 <_read_r>
 8004594:	2800      	cmp	r0, #0
 8004596:	bfab      	itete	ge
 8004598:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800459a:	89a3      	ldrhlt	r3, [r4, #12]
 800459c:	181b      	addge	r3, r3, r0
 800459e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045a2:	bfac      	ite	ge
 80045a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80045a6:	81a3      	strhlt	r3, [r4, #12]
 80045a8:	bd10      	pop	{r4, pc}

080045aa <__swrite>:
 80045aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ae:	461f      	mov	r7, r3
 80045b0:	898b      	ldrh	r3, [r1, #12]
 80045b2:	05db      	lsls	r3, r3, #23
 80045b4:	4605      	mov	r5, r0
 80045b6:	460c      	mov	r4, r1
 80045b8:	4616      	mov	r6, r2
 80045ba:	d505      	bpl.n	80045c8 <__swrite+0x1e>
 80045bc:	2302      	movs	r3, #2
 80045be:	2200      	movs	r2, #0
 80045c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c4:	f000 f868 	bl	8004698 <_lseek_r>
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045d2:	81a3      	strh	r3, [r4, #12]
 80045d4:	4632      	mov	r2, r6
 80045d6:	463b      	mov	r3, r7
 80045d8:	4628      	mov	r0, r5
 80045da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045de:	f000 b817 	b.w	8004610 <_write_r>

080045e2 <__sseek>:
 80045e2:	b510      	push	{r4, lr}
 80045e4:	460c      	mov	r4, r1
 80045e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ea:	f000 f855 	bl	8004698 <_lseek_r>
 80045ee:	1c43      	adds	r3, r0, #1
 80045f0:	89a3      	ldrh	r3, [r4, #12]
 80045f2:	bf15      	itete	ne
 80045f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80045f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045fe:	81a3      	strheq	r3, [r4, #12]
 8004600:	bf18      	it	ne
 8004602:	81a3      	strhne	r3, [r4, #12]
 8004604:	bd10      	pop	{r4, pc}

08004606 <__sclose>:
 8004606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460a:	f000 b813 	b.w	8004634 <_close_r>
	...

08004610 <_write_r>:
 8004610:	b538      	push	{r3, r4, r5, lr}
 8004612:	4c07      	ldr	r4, [pc, #28]	; (8004630 <_write_r+0x20>)
 8004614:	4605      	mov	r5, r0
 8004616:	4608      	mov	r0, r1
 8004618:	4611      	mov	r1, r2
 800461a:	2200      	movs	r2, #0
 800461c:	6022      	str	r2, [r4, #0]
 800461e:	461a      	mov	r2, r3
 8004620:	f7fc f971 	bl	8000906 <_write>
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	d102      	bne.n	800462e <_write_r+0x1e>
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	b103      	cbz	r3, 800462e <_write_r+0x1e>
 800462c:	602b      	str	r3, [r5, #0]
 800462e:	bd38      	pop	{r3, r4, r5, pc}
 8004630:	2000012c 	.word	0x2000012c

08004634 <_close_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4c06      	ldr	r4, [pc, #24]	; (8004650 <_close_r+0x1c>)
 8004638:	2300      	movs	r3, #0
 800463a:	4605      	mov	r5, r0
 800463c:	4608      	mov	r0, r1
 800463e:	6023      	str	r3, [r4, #0]
 8004640:	f7fc f97d 	bl	800093e <_close>
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d102      	bne.n	800464e <_close_r+0x1a>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	b103      	cbz	r3, 800464e <_close_r+0x1a>
 800464c:	602b      	str	r3, [r5, #0]
 800464e:	bd38      	pop	{r3, r4, r5, pc}
 8004650:	2000012c 	.word	0x2000012c

08004654 <_fstat_r>:
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	4c07      	ldr	r4, [pc, #28]	; (8004674 <_fstat_r+0x20>)
 8004658:	2300      	movs	r3, #0
 800465a:	4605      	mov	r5, r0
 800465c:	4608      	mov	r0, r1
 800465e:	4611      	mov	r1, r2
 8004660:	6023      	str	r3, [r4, #0]
 8004662:	f7fc f978 	bl	8000956 <_fstat>
 8004666:	1c43      	adds	r3, r0, #1
 8004668:	d102      	bne.n	8004670 <_fstat_r+0x1c>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	b103      	cbz	r3, 8004670 <_fstat_r+0x1c>
 800466e:	602b      	str	r3, [r5, #0]
 8004670:	bd38      	pop	{r3, r4, r5, pc}
 8004672:	bf00      	nop
 8004674:	2000012c 	.word	0x2000012c

08004678 <_isatty_r>:
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	4c06      	ldr	r4, [pc, #24]	; (8004694 <_isatty_r+0x1c>)
 800467c:	2300      	movs	r3, #0
 800467e:	4605      	mov	r5, r0
 8004680:	4608      	mov	r0, r1
 8004682:	6023      	str	r3, [r4, #0]
 8004684:	f7fc f977 	bl	8000976 <_isatty>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d102      	bne.n	8004692 <_isatty_r+0x1a>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	b103      	cbz	r3, 8004692 <_isatty_r+0x1a>
 8004690:	602b      	str	r3, [r5, #0]
 8004692:	bd38      	pop	{r3, r4, r5, pc}
 8004694:	2000012c 	.word	0x2000012c

08004698 <_lseek_r>:
 8004698:	b538      	push	{r3, r4, r5, lr}
 800469a:	4c07      	ldr	r4, [pc, #28]	; (80046b8 <_lseek_r+0x20>)
 800469c:	4605      	mov	r5, r0
 800469e:	4608      	mov	r0, r1
 80046a0:	4611      	mov	r1, r2
 80046a2:	2200      	movs	r2, #0
 80046a4:	6022      	str	r2, [r4, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	f7fc f970 	bl	800098c <_lseek>
 80046ac:	1c43      	adds	r3, r0, #1
 80046ae:	d102      	bne.n	80046b6 <_lseek_r+0x1e>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	b103      	cbz	r3, 80046b6 <_lseek_r+0x1e>
 80046b4:	602b      	str	r3, [r5, #0]
 80046b6:	bd38      	pop	{r3, r4, r5, pc}
 80046b8:	2000012c 	.word	0x2000012c

080046bc <__malloc_lock>:
 80046bc:	4770      	bx	lr

080046be <__malloc_unlock>:
 80046be:	4770      	bx	lr

080046c0 <_read_r>:
 80046c0:	b538      	push	{r3, r4, r5, lr}
 80046c2:	4c07      	ldr	r4, [pc, #28]	; (80046e0 <_read_r+0x20>)
 80046c4:	4605      	mov	r5, r0
 80046c6:	4608      	mov	r0, r1
 80046c8:	4611      	mov	r1, r2
 80046ca:	2200      	movs	r2, #0
 80046cc:	6022      	str	r2, [r4, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	f7fc f8fc 	bl	80008cc <_read>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_read_r+0x1e>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	b103      	cbz	r3, 80046de <_read_r+0x1e>
 80046dc:	602b      	str	r3, [r5, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	2000012c 	.word	0x2000012c

080046e4 <_init>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr

080046f0 <_fini>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	bf00      	nop
 80046f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f6:	bc08      	pop	{r3}
 80046f8:	469e      	mov	lr, r3
 80046fa:	4770      	bx	lr
