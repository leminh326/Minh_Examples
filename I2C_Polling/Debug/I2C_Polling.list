
I2C_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08005934  08005934  00015934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005ab4  08005ab4  00015ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000004  08005abc  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001c8  20000084  08005b3c  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000024c  08005b3c  0002024c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   000139e8  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000028c8  00000000  00000000  00033a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001680  00000000  00000000  00036368  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001548  00000000  00000000  000379e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00022dba  00000000  00000000  00038f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000e2a3  00000000  00000000  0005bcea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d920e  00000000  00000000  00069f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0014319b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000063a0  00000000  00000000  00143218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000084 	.word	0x20000084
 8000158:	00000000 	.word	0x00000000
 800015c:	0800591c 	.word	0x0800591c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000088 	.word	0x20000088
 8000178:	0800591c 	.word	0x0800591c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	4688      	mov	r8, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0803 	orr.w	r8, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e4:	fa1f fc85 	uxth.w	ip, r5
 80001e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f0:	fb07 f10c 	mul.w	r1, r7, ip
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80001fe:	f080 811b 	bcs.w	8000438 <__udivmoddi4+0x28c>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8118 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000220:	45a4      	cmp	ip, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	192c      	adds	r4, r5, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8107 	bcs.w	800043c <__udivmoddi4+0x290>
 800022e:	45a4      	cmp	ip, r4
 8000230:	f240 8104 	bls.w	800043c <__udivmoddi4+0x290>
 8000234:	3802      	subs	r0, #2
 8000236:	442c      	add	r4, r5
 8000238:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023c:	eba4 040c 	sub.w	r4, r4, ip
 8000240:	2700      	movs	r7, #0
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80eb 	beq.w	8000432 <__udivmoddi4+0x286>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d147      	bne.n	8000302 <__udivmoddi4+0x156>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fa 	bhi.w	8000470 <__udivmoddi4+0x2c4>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	1b49      	subs	r1, r1, r5
 80002a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a4:	fa1f f885 	uxth.w	r8, r5
 80002a8:	2701      	movs	r7, #1
 80002aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002ae:	0c23      	lsrs	r3, r4, #16
 80002b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b8:	fb08 f10c 	mul.w	r1, r8, ip
 80002bc:	4299      	cmp	r1, r3
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002c0:	18eb      	adds	r3, r5, r3
 80002c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4299      	cmp	r1, r3
 80002ca:	f200 80cd 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002ce:	4684      	mov	ip, r0
 80002d0:	1a59      	subs	r1, r3, r1
 80002d2:	b2a3      	uxth	r3, r4
 80002d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e0:	fb08 f800 	mul.w	r8, r8, r0
 80002e4:	45a0      	cmp	r8, r4
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0x14c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x14a>
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	f200 80b6 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002f6:	4618      	mov	r0, r3
 80002f8:	eba4 0408 	sub.w	r4, r4, r8
 80002fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000300:	e79f      	b.n	8000242 <__udivmoddi4+0x96>
 8000302:	f1c7 0c20 	rsb	ip, r7, #32
 8000306:	40bb      	lsls	r3, r7
 8000308:	fa22 fe0c 	lsr.w	lr, r2, ip
 800030c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000310:	fa01 f407 	lsl.w	r4, r1, r7
 8000314:	fa20 f50c 	lsr.w	r5, r0, ip
 8000318:	fa21 f30c 	lsr.w	r3, r1, ip
 800031c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000320:	4325      	orrs	r5, r4
 8000322:	fbb3 f9f8 	udiv	r9, r3, r8
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	fb08 3319 	mls	r3, r8, r9, r3
 800032c:	fa1f fa8e 	uxth.w	sl, lr
 8000330:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000334:	fb09 f40a 	mul.w	r4, r9, sl
 8000338:	429c      	cmp	r4, r3
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f107 	lsl.w	r1, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1e 0303 	adds.w	r3, lr, r3
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8087 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000350:	429c      	cmp	r4, r3
 8000352:	f240 8084 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4473      	add	r3, lr
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	b2ad      	uxth	r5, r5
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800036c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000370:	45a2      	cmp	sl, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1e 0404 	adds.w	r4, lr, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295
 800037c:	d26b      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 800037e:	45a2      	cmp	sl, r4
 8000380:	d969      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000382:	3802      	subs	r0, #2
 8000384:	4474      	add	r4, lr
 8000386:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038a:	fba0 8902 	umull	r8, r9, r0, r2
 800038e:	eba4 040a 	sub.w	r4, r4, sl
 8000392:	454c      	cmp	r4, r9
 8000394:	46c2      	mov	sl, r8
 8000396:	464b      	mov	r3, r9
 8000398:	d354      	bcc.n	8000444 <__udivmoddi4+0x298>
 800039a:	d051      	beq.n	8000440 <__udivmoddi4+0x294>
 800039c:	2e00      	cmp	r6, #0
 800039e:	d069      	beq.n	8000474 <__udivmoddi4+0x2c8>
 80003a0:	ebb1 050a 	subs.w	r5, r1, sl
 80003a4:	eb64 0403 	sbc.w	r4, r4, r3
 80003a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003ac:	40fd      	lsrs	r5, r7
 80003ae:	40fc      	lsrs	r4, r7
 80003b0:	ea4c 0505 	orr.w	r5, ip, r5
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f703 	lsr.w	r7, r0, r3
 80003c4:	4095      	lsls	r5, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	fa21 f303 	lsr.w	r3, r1, r3
 80003ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d2:	4338      	orrs	r0, r7
 80003d4:	0c01      	lsrs	r1, r0, #16
 80003d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003da:	fa1f f885 	uxth.w	r8, r5
 80003de:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e6:	fb07 f308 	mul.w	r3, r7, r8
 80003ea:	428b      	cmp	r3, r1
 80003ec:	fa04 f402 	lsl.w	r4, r4, r2
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f2:	1869      	adds	r1, r5, r1
 80003f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3f02      	subs	r7, #2
 8000400:	4429      	add	r1, r5
 8000402:	1acb      	subs	r3, r1, r3
 8000404:	b281      	uxth	r1, r0
 8000406:	fbb3 f0fe 	udiv	r0, r3, lr
 800040a:	fb0e 3310 	mls	r3, lr, r0, r3
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb00 f308 	mul.w	r3, r0, r8
 8000416:	428b      	cmp	r3, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000420:	d217      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000422:	428b      	cmp	r3, r1
 8000424:	d915      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	1ac9      	subs	r1, r1, r3
 800042c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000430:	e73b      	b.n	80002aa <__udivmoddi4+0xfe>
 8000432:	4637      	mov	r7, r6
 8000434:	4630      	mov	r0, r6
 8000436:	e709      	b.n	800024c <__udivmoddi4+0xa0>
 8000438:	4607      	mov	r7, r0
 800043a:	e6e7      	b.n	800020c <__udivmoddi4+0x60>
 800043c:	4618      	mov	r0, r3
 800043e:	e6fb      	b.n	8000238 <__udivmoddi4+0x8c>
 8000440:	4541      	cmp	r1, r8
 8000442:	d2ab      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000444:	ebb8 0a02 	subs.w	sl, r8, r2
 8000448:	eb69 020e 	sbc.w	r2, r9, lr
 800044c:	3801      	subs	r0, #1
 800044e:	4613      	mov	r3, r2
 8000450:	e7a4      	b.n	800039c <__udivmoddi4+0x1f0>
 8000452:	4660      	mov	r0, ip
 8000454:	e7e9      	b.n	800042a <__udivmoddi4+0x27e>
 8000456:	4618      	mov	r0, r3
 8000458:	e795      	b.n	8000386 <__udivmoddi4+0x1da>
 800045a:	4667      	mov	r7, ip
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	4681      	mov	r9, r0
 8000460:	e77c      	b.n	800035c <__udivmoddi4+0x1b0>
 8000462:	3802      	subs	r0, #2
 8000464:	442c      	add	r4, r5
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0x14c>
 8000468:	f1ac 0c02 	sub.w	ip, ip, #2
 800046c:	442b      	add	r3, r5
 800046e:	e72f      	b.n	80002d0 <__udivmoddi4+0x124>
 8000470:	4638      	mov	r0, r7
 8000472:	e708      	b.n	8000286 <__udivmoddi4+0xda>
 8000474:	4637      	mov	r7, r6
 8000476:	e6e9      	b.n	800024c <__udivmoddi4+0xa0>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b085      	sub	sp, #20
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4013      	ands	r3, r2
 80004d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d2:	68fb      	ldr	r3, [r7, #12]
}
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e6:	f000 fd35 	bl	8000f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ea:	f000 f85b 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ee:	f000 f973 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f2:	f000 f957 	bl	80007a4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004f6:	f000 f909 	bl	800070c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80004fa:	f000 f8c7 	bl	800068c <MX_I2C1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("!!! Start !!! \n");
 80004fe:	4821      	ldr	r0, [pc, #132]	; (8000584 <main+0xa4>)
 8000500:	f004 fe00 	bl	8005104 <puts>

#define MASTER
#define I2C_ADDRESS 0x30F

#ifdef MASTER
	  HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
 8000504:	2120      	movs	r1, #32
 8000506:	4820      	ldr	r0, [pc, #128]	; (8000588 <main+0xa8>)
 8000508:	f001 fa96 	bl	8001a38 <HAL_GPIO_TogglePin>
	  while (HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) != GPIO_PIN_RESET) {}
 800050c:	bf00      	nop
 800050e:	2110      	movs	r1, #16
 8000510:	481e      	ldr	r0, [pc, #120]	; (800058c <main+0xac>)
 8000512:	f001 fa61 	bl	80019d8 <HAL_GPIO_ReadPin>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d1f8      	bne.n	800050e <main+0x2e>

	  while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)MessageSend, sizeof MessageSend, 1000)!= HAL_OK){}
 800051c:	bf00      	nop
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2308      	movs	r3, #8
 8000526:	4a1a      	ldr	r2, [pc, #104]	; (8000590 <main+0xb0>)
 8000528:	f240 310f 	movw	r1, #783	; 0x30f
 800052c:	4819      	ldr	r0, [pc, #100]	; (8000594 <main+0xb4>)
 800052e:	f001 fb51 	bl	8001bd4 <HAL_I2C_Master_Transmit>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d1f2      	bne.n	800051e <main+0x3e>
	  HAL_GPIO_TogglePin(Led2_GPIO_Port, Led2_Pin);
 8000538:	2101      	movs	r1, #1
 800053a:	4813      	ldr	r0, [pc, #76]	; (8000588 <main+0xa8>)
 800053c:	f001 fa7c 	bl	8001a38 <HAL_GPIO_TogglePin>
	  while(HAL_I2C_Master_Receive (&hi2c1, (uint16_t)I2C_ADDRESS, (uint8_t*)MasterRxBuffer, sizeof MasterRxBuffer, 1000) != HAL_OK){}
 8000540:	bf00      	nop
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	2308      	movs	r3, #8
 800054a:	4a13      	ldr	r2, [pc, #76]	; (8000598 <main+0xb8>)
 800054c:	f240 310f 	movw	r1, #783	; 0x30f
 8000550:	4810      	ldr	r0, [pc, #64]	; (8000594 <main+0xb4>)
 8000552:	f001 fc33 	bl	8001dbc <HAL_I2C_Master_Receive>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d1f2      	bne.n	8000542 <main+0x62>
	  HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
 800055c:	2102      	movs	r1, #2
 800055e:	480a      	ldr	r0, [pc, #40]	; (8000588 <main+0xa8>)
 8000560:	f001 fa6a 	bl	8001a38 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
#endif

	  while (1)
	  {
		  HAL_Delay(1000);
 8000564:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000568:	f000 fd7a 	bl	8001060 <HAL_Delay>
		  printf("!!! Loop !!! \n");
 800056c:	480b      	ldr	r0, [pc, #44]	; (800059c <main+0xbc>)
 800056e:	f004 fdc9 	bl	8005104 <puts>

		#ifdef MASTER
		  HAL_UART_Transmit(&huart1,MasterRxBuffer,sizeof MasterRxBuffer,1000);
 8000572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000576:	2208      	movs	r2, #8
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <main+0xb8>)
 800057a:	4809      	ldr	r0, [pc, #36]	; (80005a0 <main+0xc0>)
 800057c:	f003 fe03 	bl	8004186 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8000580:	e7f0      	b.n	8000564 <main+0x84>
 8000582:	bf00      	nop
 8000584:	08005934 	.word	0x08005934
 8000588:	48000400 	.word	0x48000400
 800058c:	48000800 	.word	0x48000800
 8000590:	2000000c 	.word	0x2000000c
 8000594:	200000ac 	.word	0x200000ac
 8000598:	20000004 	.word	0x20000004
 800059c:	08005944 	.word	0x08005944
 80005a0:	200001b8 	.word	0x200001b8

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b0ae      	sub	sp, #184	; 0xb8
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005ae:	2248      	movs	r2, #72	; 0x48
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 fd42 	bl	800503c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]
 80005c8:	615a      	str	r2, [r3, #20]
 80005ca:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2250      	movs	r2, #80	; 0x50
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fd32 	bl	800503c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	4b2b      	ldr	r3, [pc, #172]	; (8000688 <SystemClock_Config+0xe4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005e0:	4a29      	ldr	r2, [pc, #164]	; (8000688 <SystemClock_Config+0xe4>)
 80005e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xe4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005f4:	2303      	movs	r3, #3
 80005f6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005fc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000602:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2340      	movs	r3, #64	; 0x40
 8000606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000614:	4618      	mov	r0, r3
 8000616:	f002 faf1 	bl	8002bfc <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000620:	f000 f932 	bl	8000888 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000624:	236f      	movs	r3, #111	; 0x6f
 8000626:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000628:	2302      	movs	r3, #2
 800062a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000640:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000644:	2101      	movs	r1, #1
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fe6c 	bl	8003324 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000652:	f000 f919 	bl	8000888 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1
 8000656:	f242 0305 	movw	r3, #8197	; 0x2005
 800065a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000660:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8000666:	2302      	movs	r3, #2
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800066a:	2300      	movs	r3, #0
 800066c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fa92 	bl	8003b9a <HAL_RCCEx_PeriphCLKConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800067c:	f000 f904 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000680:	bf00      	nop
 8000682:	37b8      	adds	r7, #184	; 0xb8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	58000400 	.word	0x58000400

0800068c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_I2C1_Init+0x74>)
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <MX_I2C1_Init+0x78>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_I2C1_Init+0x74>)
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <MX_I2C1_Init+0x7c>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = SLAVE_ADDRESS;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_I2C1_Init+0x74>)
 800069e:	f240 320f 	movw	r2, #783	; 0x30f
 80006a2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a4:	4b16      	ldr	r3, [pc, #88]	; (8000700 <MX_I2C1_Init+0x74>)
 80006a6:	2201      	movs	r2, #1
 80006a8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_I2C1_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b0:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c8:	480d      	ldr	r0, [pc, #52]	; (8000700 <MX_I2C1_Init+0x74>)
 80006ca:	f001 f9f3 	bl	8001ab4 <HAL_I2C_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d4:	f000 f8d8 	bl	8000888 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d8:	2100      	movs	r1, #0
 80006da:	4809      	ldr	r0, [pc, #36]	; (8000700 <MX_I2C1_Init+0x74>)
 80006dc:	f001 fe44 	bl	8002368 <HAL_I2CEx_ConfigAnalogFilter>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006e6:	f000 f8cf 	bl	8000888 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ea:	2100      	movs	r1, #0
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_I2C1_Init+0x74>)
 80006ee:	f001 fe86 	bl	80023fe <HAL_I2CEx_ConfigDigitalFilter>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006f8:	f000 f8c6 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	200000ac 	.word	0x200000ac
 8000704:	40005400 	.word	0x40005400
 8000708:	00707cbb 	.word	0x00707cbb

0800070c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000710:	4b22      	ldr	r3, [pc, #136]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000712:	4a23      	ldr	r2, [pc, #140]	; (80007a0 <MX_USART1_UART_Init+0x94>)
 8000714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800071c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000724:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072a:	4b1c      	ldr	r3, [pc, #112]	; (800079c <MX_USART1_UART_Init+0x90>)
 800072c:	2200      	movs	r2, #0
 800072e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000730:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000732:	220c      	movs	r2, #12
 8000734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000738:	2200      	movs	r2, #0
 800073a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800073c:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_USART1_UART_Init+0x90>)
 800073e:	2200      	movs	r2, #0
 8000740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000742:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000744:	2200      	movs	r2, #0
 8000746:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USART1_UART_Init+0x90>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000750:	2200      	movs	r2, #0
 8000752:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000754:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000756:	f003 fcc6 	bl	80040e6 <HAL_UART_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000760:	f000 f892 	bl	8000888 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000764:	2100      	movs	r1, #0
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_USART1_UART_Init+0x90>)
 8000768:	f004 fb5a 	bl	8004e20 <HAL_UARTEx_SetTxFifoThreshold>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000772:	f000 f889 	bl	8000888 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4808      	ldr	r0, [pc, #32]	; (800079c <MX_USART1_UART_Init+0x90>)
 800077a:	f004 fb8f 	bl	8004e9c <HAL_UARTEx_SetRxFifoThreshold>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000784:	f000 f880 	bl	8000888 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_USART1_UART_Init+0x90>)
 800078a:	f004 fb10 	bl	8004dae <HAL_UARTEx_DisableFifoMode>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000794:	f000 f878 	bl	8000888 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200001b8 	.word	0x200001b8
 80007a0:	40013800 	.word	0x40013800

080007a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007a8:	2004      	movs	r0, #4
 80007aa:	f7ff fe67 	bl	800047c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ae:	2001      	movs	r0, #1
 80007b0:	f7ff fe64 	bl	800047c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2100      	movs	r1, #0
 80007b8:	200b      	movs	r0, #11
 80007ba:	f000 fd4e 	bl	800125a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007be:	200b      	movs	r0, #11
 80007c0:	f000 fd65 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2100      	movs	r1, #0
 80007c8:	200c      	movs	r0, #12
 80007ca:	f000 fd46 	bl	800125a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007ce:	200c      	movs	r0, #12
 80007d0:	f000 fd5d 	bl	800128e <HAL_NVIC_EnableIRQ>

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ec:	2004      	movs	r0, #4
 80007ee:	f7ff fe5e 	bl	80004ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff fe5b 	bl	80004ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f8:	2008      	movs	r0, #8
 80007fa:	f7ff fe58 	bl	80004ae <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led2_Pin|Led3_Pin|Led1_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2123      	movs	r1, #35	; 0x23
 8000802:	4815      	ldr	r0, [pc, #84]	; (8000858 <MX_GPIO_Init+0x80>)
 8000804:	f001 f900 	bl	8001a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000808:	2310      	movs	r3, #16
 800080a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000810:	2301      	movs	r3, #1
 8000812:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	4619      	mov	r1, r3
 8000818:	4810      	ldr	r0, [pc, #64]	; (800085c <MX_GPIO_Init+0x84>)
 800081a:	f000 ff6d 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led2_Pin Led3_Pin Led1_Pin */
  GPIO_InitStruct.Pin = Led2_Pin|Led3_Pin|Led1_Pin;
 800081e:	2323      	movs	r3, #35	; 0x23
 8000820:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000822:	2301      	movs	r3, #1
 8000824:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <MX_GPIO_Init+0x80>)
 8000834:	f000 ff60 	bl	80016f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button3_Pin;
 8000838:	2303      	movs	r3, #3
 800083a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000840:	2301      	movs	r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000844:	1d3b      	adds	r3, r7, #4
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_GPIO_Init+0x88>)
 800084a:	f000 ff55 	bl	80016f8 <HAL_GPIO_Init>

}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	48000400 	.word	0x48000400
 800085c:	48000800 	.word	0x48000800
 8000860:	48000c00 	.word	0x48000c00

08000864 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800086c:	1d39      	adds	r1, r7, #4
 800086e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000872:	2201      	movs	r2, #1
 8000874:	4803      	ldr	r0, [pc, #12]	; (8000884 <__io_putchar+0x20>)
 8000876:	f003 fc86 	bl	8004186 <HAL_UART_Transmit>

  return ch;
 800087a:	687b      	ldr	r3, [r7, #4]
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200001b8 	.word	0x200001b8

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr

08000896 <LL_AHB2_GRP1_EnableClock>:
{
 8000896:	b480      	push	{r7}
 8000898:	b085      	sub	sp, #20
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800089e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4013      	ands	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80008d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4313      	orrs	r3, r2
 80008de:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80008e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ec:	68fb      	ldr	r3, [r7, #12]
}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b085      	sub	sp, #20
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000906:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4313      	orrs	r3, r2
 8000910:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000916:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4013      	ands	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000938:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800093a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4313      	orrs	r3, r2
 8000942:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000950:	68fb      	ldr	r3, [r7, #12]
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000962:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000966:	f7ff ffaf 	bl	80008c8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	202e      	movs	r0, #46	; 0x2e
 8000970:	f000 fc73 	bl	800125a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000974:	202e      	movs	r0, #46	; 0x2e
 8000976:	f000 fc8a 	bl	800128e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <HAL_I2C_MspInit+0x5c>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d117      	bne.n	80009d2 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2002      	movs	r0, #2
 80009a4:	f7ff ff77 	bl	8000896 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ae:	2312      	movs	r3, #18
 80009b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b2:	2301      	movs	r3, #1
 80009b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ba:	2304      	movs	r3, #4
 80009bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	4806      	ldr	r0, [pc, #24]	; (80009e0 <HAL_I2C_MspInit+0x60>)
 80009c6:	f000 fe97 	bl	80016f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ca:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80009ce:	f7ff ff94 	bl	80008fa <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3720      	adds	r7, #32
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40005400 	.word	0x40005400
 80009e0:	48000400 	.word	0x48000400

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 030c 	add.w	r3, r7, #12
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a3b      	ldr	r2, [pc, #236]	; (8000af0 <HAL_UART_MspInit+0x10c>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d170      	bne.n	8000ae8 <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000a0a:	f7ff ff8f 	bl	800092c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2002      	movs	r0, #2
 8000a10:	f7ff ff41 	bl	8000896 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a14:	23c0      	movs	r3, #192	; 0xc0
 8000a16:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a24:	2307      	movs	r3, #7
 8000a26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4831      	ldr	r0, [pc, #196]	; (8000af4 <HAL_UART_MspInit+0x110>)
 8000a30:	f000 fe62 	bl	80016f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000a34:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <HAL_UART_MspInit+0x114>)
 8000a36:	4a31      	ldr	r2, [pc, #196]	; (8000afc <HAL_UART_MspInit+0x118>)
 8000a38:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000a3a:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <HAL_UART_MspInit+0x114>)
 8000a3c:	220e      	movs	r2, #14
 8000a3e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <HAL_UART_MspInit+0x114>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <HAL_UART_MspInit+0x114>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <HAL_UART_MspInit+0x114>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a52:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <HAL_UART_MspInit+0x114>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <HAL_UART_MspInit+0x114>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a5e:	4b26      	ldr	r3, [pc, #152]	; (8000af8 <HAL_UART_MspInit+0x114>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a64:	4b24      	ldr	r3, [pc, #144]	; (8000af8 <HAL_UART_MspInit+0x114>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a6a:	4823      	ldr	r0, [pc, #140]	; (8000af8 <HAL_UART_MspInit+0x114>)
 8000a6c:	f000 fc2a 	bl	80012c4 <HAL_DMA_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8000a76:	f7ff ff07 	bl	8000888 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4a1e      	ldr	r2, [pc, #120]	; (8000af8 <HAL_UART_MspInit+0x114>)
 8000a7e:	679a      	str	r2, [r3, #120]	; 0x78
 8000a80:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <HAL_UART_MspInit+0x114>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000a86:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <HAL_UART_MspInit+0x11c>)
 8000a88:	4a1e      	ldr	r2, [pc, #120]	; (8000b04 <HAL_UART_MspInit+0x120>)
 8000a8a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <HAL_UART_MspInit+0x11c>)
 8000a8e:	220f      	movs	r2, #15
 8000a90:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <HAL_UART_MspInit+0x11c>)
 8000a94:	2210      	movs	r2, #16
 8000a96:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_UART_MspInit+0x11c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <HAL_UART_MspInit+0x11c>)
 8000aa0:	2280      	movs	r2, #128	; 0x80
 8000aa2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <HAL_UART_MspInit+0x11c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <HAL_UART_MspInit+0x11c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <HAL_UART_MspInit+0x11c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <HAL_UART_MspInit+0x11c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000abc:	4810      	ldr	r0, [pc, #64]	; (8000b00 <HAL_UART_MspInit+0x11c>)
 8000abe:	f000 fc01 	bl	80012c4 <HAL_DMA_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8000ac8:	f7ff fede 	bl	8000888 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <HAL_UART_MspInit+0x11c>)
 8000ad0:	675a      	str	r2, [r3, #116]	; 0x74
 8000ad2:	4a0b      	ldr	r2, [pc, #44]	; (8000b00 <HAL_UART_MspInit+0x11c>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2100      	movs	r1, #0
 8000adc:	2024      	movs	r0, #36	; 0x24
 8000ade:	f000 fbbc 	bl	800125a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ae2:	2024      	movs	r0, #36	; 0x24
 8000ae4:	f000 fbd3 	bl	800128e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3720      	adds	r7, #32
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40013800 	.word	0x40013800
 8000af4:	48000400 	.word	0x48000400
 8000af8:	20000158 	.word	0x20000158
 8000afc:	40020008 	.word	0x40020008
 8000b00:	200000f8 	.word	0x200000f8
 8000b04:	4002001c 	.word	0x4002001c

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 fa54 	bl	8001008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <DMA1_Channel1_IRQHandler+0x10>)
 8000b6a:	f000 fcb2 	bl	80014d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000158 	.word	0x20000158

08000b78 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <DMA1_Channel2_IRQHandler+0x10>)
 8000b7e:	f000 fca8 	bl	80014d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200000f8 	.word	0x200000f8

08000b8c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <USART1_IRQHandler+0x10>)
 8000b92:	f003 fb8f 	bl	80042b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200001b8 	.word	0x200001b8

08000ba0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000ba4:	f000 ff62 	bl	8001a6c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8000ba8:	bf00      	nop
 8000baa:	bd80      	pop	{r7, pc}

08000bac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e00a      	b.n	8000bd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bbe:	f3af 8000 	nop.w
 8000bc2:	4601      	mov	r1, r0
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	1c5a      	adds	r2, r3, #1
 8000bc8:	60ba      	str	r2, [r7, #8]
 8000bca:	b2ca      	uxtb	r2, r1
 8000bcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	697a      	ldr	r2, [r7, #20]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	dbf0      	blt.n	8000bbe <_read+0x12>
	}

return len;
 8000bdc:	687b      	ldr	r3, [r7, #4]
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3718      	adds	r7, #24
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b086      	sub	sp, #24
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
 8000bf6:	e009      	b.n	8000c0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	60ba      	str	r2, [r7, #8]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fe2f 	bl	8000864 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	697a      	ldr	r2, [r7, #20]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	dbf1      	blt.n	8000bf8 <_write+0x12>
	}
	return len;
 8000c14:	687b      	ldr	r3, [r7, #4]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3718      	adds	r7, #24
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <_close>:

int _close(int file)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
	return -1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c46:	605a      	str	r2, [r3, #4]
	return 0;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <_isatty>:

int _isatty(int file)
{
 8000c56:	b480      	push	{r7}
 8000c58:	b083      	sub	sp, #12
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c5e:	2301      	movs	r3, #1
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
	return 0;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3714      	adds	r7, #20
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c90:	4a14      	ldr	r2, [pc, #80]	; (8000ce4 <_sbrk+0x5c>)
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <_sbrk+0x60>)
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c9c:	4b13      	ldr	r3, [pc, #76]	; (8000cec <_sbrk+0x64>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d102      	bne.n	8000caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <_sbrk+0x64>)
 8000ca6:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <_sbrk+0x68>)
 8000ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d207      	bcs.n	8000cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb8:	f004 f996 	bl	8004fe8 <__errno>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	230c      	movs	r3, #12
 8000cc0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	e009      	b.n	8000cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <_sbrk+0x64>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cce:	4b07      	ldr	r3, [pc, #28]	; (8000cec <_sbrk+0x64>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <_sbrk+0x64>)
 8000cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cda:	68fb      	ldr	r3, [r7, #12]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20030000 	.word	0x20030000
 8000ce8:	00000400 	.word	0x00000400
 8000cec:	200000a0 	.word	0x200000a0
 8000cf0:	20000250 	.word	0x20000250

08000cf4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000cf8:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <SystemInit+0xa0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <SystemInit+0xa0>)
 8000d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d04:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <SystemInit+0xa0>)
 8000d06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d22:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000d26:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <SystemInit+0xa4>)
 8000d34:	4013      	ands	r3, r2
 8000d36:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d44:	f023 0305 	bic.w	r3, r3, #5
 8000d48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000d4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d58:	f023 0301 	bic.w	r3, r3, #1
 8000d5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d64:	4a0d      	ldr	r2, [pc, #52]	; (8000d9c <SystemInit+0xa8>)
 8000d66:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6c:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <SystemInit+0xa8>)
 8000d6e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00
 8000d98:	faf6fefb 	.word	0xfaf6fefb
 8000d9c:	22041000 	.word	0x22041000

08000da0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b087      	sub	sp, #28
 8000da4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	091b      	lsrs	r3, r3, #4
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	4a47      	ldr	r2, [pc, #284]	; (8000ed0 <SystemCoreClockUpdate+0x130>)
 8000db4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db8:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f003 030c 	and.w	r3, r3, #12
 8000dc4:	2b0c      	cmp	r3, #12
 8000dc6:	d867      	bhi.n	8000e98 <SystemCoreClockUpdate+0xf8>
 8000dc8:	a201      	add	r2, pc, #4	; (adr r2, 8000dd0 <SystemCoreClockUpdate+0x30>)
 8000dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dce:	bf00      	nop
 8000dd0:	08000e05 	.word	0x08000e05
 8000dd4:	08000e99 	.word	0x08000e99
 8000dd8:	08000e99 	.word	0x08000e99
 8000ddc:	08000e99 	.word	0x08000e99
 8000de0:	08000e0d 	.word	0x08000e0d
 8000de4:	08000e99 	.word	0x08000e99
 8000de8:	08000e99 	.word	0x08000e99
 8000dec:	08000e99 	.word	0x08000e99
 8000df0:	08000e15 	.word	0x08000e15
 8000df4:	08000e99 	.word	0x08000e99
 8000df8:	08000e99 	.word	0x08000e99
 8000dfc:	08000e99 	.word	0x08000e99
 8000e00:	08000e1d 	.word	0x08000e1d
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000e04:	4a33      	ldr	r2, [pc, #204]	; (8000ed4 <SystemCoreClockUpdate+0x134>)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	6013      	str	r3, [r2, #0]
      break;
 8000e0a:	e049      	b.n	8000ea0 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000e0c:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <SystemCoreClockUpdate+0x134>)
 8000e0e:	4a32      	ldr	r2, [pc, #200]	; (8000ed8 <SystemCoreClockUpdate+0x138>)
 8000e10:	601a      	str	r2, [r3, #0]
      break;
 8000e12:	e045      	b.n	8000ea0 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000e14:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <SystemCoreClockUpdate+0x134>)
 8000e16:	4a31      	ldr	r2, [pc, #196]	; (8000edc <SystemCoreClockUpdate+0x13c>)
 8000e18:	601a      	str	r2, [r3, #0]
      break;
 8000e1a:	e041      	b.n	8000ea0 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	f003 0307 	and.w	r3, r3, #7
 8000e34:	3301      	adds	r3, #1
 8000e36:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d105      	bne.n	8000e4a <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000e3e:	4a26      	ldr	r2, [pc, #152]	; (8000ed8 <SystemCoreClockUpdate+0x138>)
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	e00d      	b.n	8000e66 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	d105      	bne.n	8000e5c <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000e50:	4a22      	ldr	r2, [pc, #136]	; (8000edc <SystemCoreClockUpdate+0x13c>)
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	e004      	b.n	8000e66 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e64:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	0f5b      	lsrs	r3, r3, #29
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	3301      	adds	r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000e8a:	697a      	ldr	r2, [r7, #20]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <SystemCoreClockUpdate+0x134>)
 8000e94:	6013      	str	r3, [r2, #0]
      break;
 8000e96:	e003      	b.n	8000ea0 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <SystemCoreClockUpdate+0x134>)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	6013      	str	r3, [r2, #0]
      break;
 8000e9e:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea4:	689b      	ldr	r3, [r3, #8]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	f003 030f 	and.w	r3, r3, #15
 8000eac:	4a0c      	ldr	r2, [pc, #48]	; (8000ee0 <SystemCoreClockUpdate+0x140>)
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <SystemCoreClockUpdate+0x134>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <SystemCoreClockUpdate+0x134>)
 8000ec0:	6013      	str	r3, [r2, #0]

}
 8000ec2:	bf00      	nop
 8000ec4:	371c      	adds	r7, #28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	080059f0 	.word	0x080059f0
 8000ed4:	20000014 	.word	0x20000014
 8000ed8:	00f42400 	.word	0x00f42400
 8000edc:	01e84800 	.word	0x01e84800
 8000ee0:	08005990 	.word	0x08005990

08000ee4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000ee4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee8:	3304      	adds	r3, #4

08000eea <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eea:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eec:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000eee:	d3f9      	bcc.n	8000ee4 <CopyDataInit>
  bx lr
 8000ef0:	4770      	bx	lr

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000ef2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ef4:	3004      	adds	r0, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ef6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>
  bx lr
 8000efa:	4770      	bx	lr

08000efc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000efc:	480c      	ldr	r0, [pc, #48]	; (8000f30 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000efe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f00:	f7ff fef8 	bl	8000cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000f04:	480b      	ldr	r0, [pc, #44]	; (8000f34 <LoopForever+0x8>)
 8000f06:	490c      	ldr	r1, [pc, #48]	; (8000f38 <LoopForever+0xc>)
 8000f08:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <LoopForever+0x10>)
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f7ff ffed 	bl	8000eea <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000f10:	480b      	ldr	r0, [pc, #44]	; (8000f40 <LoopForever+0x14>)
 8000f12:	490c      	ldr	r1, [pc, #48]	; (8000f44 <LoopForever+0x18>)
 8000f14:	2300      	movs	r3, #0
 8000f16:	f7ff ffee 	bl	8000ef6 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000f1a:	480b      	ldr	r0, [pc, #44]	; (8000f48 <LoopForever+0x1c>)
 8000f1c:	490b      	ldr	r1, [pc, #44]	; (8000f4c <LoopForever+0x20>)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f7ff ffe9 	bl	8000ef6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f24:	f004 f866 	bl	8004ff4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000f28:	f7ff fada 	bl	80004e0 <main>

08000f2c <LoopForever>:

LoopForever:
  b LoopForever
 8000f2c:	e7fe      	b.n	8000f2c <LoopForever>
 8000f2e:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000f30:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000f34:	20000004 	.word	0x20000004
 8000f38:	20000084 	.word	0x20000084
 8000f3c:	08005abc 	.word	0x08005abc
  INIT_BSS _sbss, _ebss
 8000f40:	20000084 	.word	0x20000084
 8000f44:	2000024c 	.word	0x2000024c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000f48:	20030000 	.word	0x20030000
 8000f4c:	20030000 	.word	0x20030000

08000f50 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC1_IRQHandler>
	...

08000f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_Init+0x3c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <HAL_Init+0x3c>)
 8000f64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f96a 	bl	8001244 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 f80f 	bl	8000f94 <HAL_InitTick>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	e001      	b.n	8000f86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f82:	f7ff fcec 	bl	800095e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f86:	79fb      	ldrb	r3, [r7, #7]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	58004000 	.word	0x58004000

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_InitTick+0x6c>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d024      	beq.n	8000ff2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fa8:	f002 fb62 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8000fac:	4602      	mov	r2, r0
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_InitTick+0x6c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f000 f972 	bl	80012aa <HAL_SYSTICK_Config>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d10f      	bne.n	8000fec <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b0f      	cmp	r3, #15
 8000fd0:	d809      	bhi.n	8000fe6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fda:	f000 f93e 	bl	800125a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fde:	4a09      	ldr	r2, [pc, #36]	; (8001004 <HAL_InitTick+0x70>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6013      	str	r3, [r2, #0]
 8000fe4:	e007      	b.n	8000ff6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e004      	b.n	8000ff6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	e001      	b.n	8000ff6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000001c 	.word	0x2000001c
 8001004:	20000018 	.word	0x20000018

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	2000001c 	.word	0x2000001c
 800102c:	20000244 	.word	0x20000244

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	20000244 	.word	0x20000244

08001048 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTickPrio+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000018 	.word	0x20000018

08001060 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8001068:	f7ff ffe2 	bl	8001030 <HAL_GetTick>
 800106c:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001078:	d005      	beq.n	8001086 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800107a:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <HAL_Delay+0x40>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8001086:	bf00      	nop
 8001088:	f7ff ffd2 	bl	8001030 <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8f7      	bhi.n	8001088 <HAL_Delay+0x28>
    {
    }
  }
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000001c 	.word	0x2000001c

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4907      	ldr	r1, [pc, #28]	; (8001140 <__NVIC_EnableIRQ+0x38>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000e100 	.word	0xe000e100

08001144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	6039      	str	r1, [r7, #0]
 800114e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db0a      	blt.n	800116e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	b2da      	uxtb	r2, r3
 800115c:	490c      	ldr	r1, [pc, #48]	; (8001190 <__NVIC_SetPriority+0x4c>)
 800115e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001162:	0112      	lsls	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	440b      	add	r3, r1
 8001168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800116c:	e00a      	b.n	8001184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	b2da      	uxtb	r2, r3
 8001172:	4908      	ldr	r1, [pc, #32]	; (8001194 <__NVIC_SetPriority+0x50>)
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	3b04      	subs	r3, #4
 800117c:	0112      	lsls	r2, r2, #4
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	440b      	add	r3, r1
 8001182:	761a      	strb	r2, [r3, #24]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000e100 	.word	0xe000e100
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001198:	b480      	push	{r7}
 800119a:	b089      	sub	sp, #36	; 0x24
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f1c3 0307 	rsb	r3, r3, #7
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	bf28      	it	cs
 80011b6:	2304      	movcs	r3, #4
 80011b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3304      	adds	r3, #4
 80011be:	2b06      	cmp	r3, #6
 80011c0:	d902      	bls.n	80011c8 <NVIC_EncodePriority+0x30>
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3b03      	subs	r3, #3
 80011c6:	e000      	b.n	80011ca <NVIC_EncodePriority+0x32>
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	401a      	ands	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011e0:	f04f 31ff 	mov.w	r1, #4294967295
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ea:	43d9      	mvns	r1, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f0:	4313      	orrs	r3, r2
         );
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3724      	adds	r7, #36	; 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3b01      	subs	r3, #1
 800120c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001210:	d301      	bcc.n	8001216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001212:	2301      	movs	r3, #1
 8001214:	e00f      	b.n	8001236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <SysTick_Config+0x40>)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800121e:	210f      	movs	r1, #15
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	f7ff ff8e 	bl	8001144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <SysTick_Config+0x40>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <SysTick_Config+0x40>)
 8001230:	2207      	movs	r2, #7
 8001232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001234:	2300      	movs	r3, #0
}
 8001236:	4618      	mov	r0, r3
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	e000e010 	.word	0xe000e010

08001244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff29 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
 8001266:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001268:	f7ff ff40 	bl	80010ec <__NVIC_GetPriorityGrouping>
 800126c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f7ff ff90 	bl	8001198 <NVIC_EncodePriority>
 8001278:	4602      	mov	r2, r0
 800127a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff5f 	bl	8001144 <__NVIC_SetPriority>
}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	4603      	mov	r3, r0
 8001296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff33 	bl	8001108 <__NVIC_EnableIRQ>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffa4 	bl	8001200 <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e08e      	b.n	80013f4 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	4b47      	ldr	r3, [pc, #284]	; (80013fc <HAL_DMA_Init+0x138>)
 80012de:	429a      	cmp	r2, r3
 80012e0:	d80f      	bhi.n	8001302 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b45      	ldr	r3, [pc, #276]	; (8001400 <HAL_DMA_Init+0x13c>)
 80012ea:	4413      	add	r3, r2
 80012ec:	4a45      	ldr	r2, [pc, #276]	; (8001404 <HAL_DMA_Init+0x140>)
 80012ee:	fba2 2303 	umull	r2, r3, r2, r3
 80012f2:	091b      	lsrs	r3, r3, #4
 80012f4:	009a      	lsls	r2, r3, #2
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a42      	ldr	r2, [pc, #264]	; (8001408 <HAL_DMA_Init+0x144>)
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001300:	e00e      	b.n	8001320 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	461a      	mov	r2, r3
 8001308:	4b40      	ldr	r3, [pc, #256]	; (800140c <HAL_DMA_Init+0x148>)
 800130a:	4413      	add	r3, r2
 800130c:	4a3d      	ldr	r2, [pc, #244]	; (8001404 <HAL_DMA_Init+0x140>)
 800130e:	fba2 2303 	umull	r2, r3, r2, r3
 8001312:	091b      	lsrs	r3, r3, #4
 8001314:	009a      	lsls	r2, r3, #2
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a3c      	ldr	r2, [pc, #240]	; (8001410 <HAL_DMA_Init+0x14c>)
 800131e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2202      	movs	r2, #2
 8001324:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800133a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001344:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	691b      	ldr	r3, [r3, #16]
 800134a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001350:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800135c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	4313      	orrs	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f95c 	bl	8001630 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001380:	d102      	bne.n	8001388 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001390:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001394:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800139e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d010      	beq.n	80013ca <HAL_DMA_Init+0x106>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b04      	cmp	r3, #4
 80013ae:	d80c      	bhi.n	80013ca <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f97b 	bl	80016ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	e008      	b.n	80013dc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40020407 	.word	0x40020407
 8001400:	bffdfff8 	.word	0xbffdfff8
 8001404:	cccccccd 	.word	0xcccccccd
 8001408:	40020000 	.word	0x40020000
 800140c:	bffdfbf8 	.word	0xbffdfbf8
 8001410:	40020400 	.word	0x40020400

08001414 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d005      	beq.n	8001438 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2204      	movs	r2, #4
 8001430:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
 8001436:	e047      	b.n	80014c8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 020e 	bic.w	r2, r2, #14
 8001446:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001466:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	f003 021c 	and.w	r2, r3, #28
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	2101      	movs	r1, #1
 8001476:	fa01 f202 	lsl.w	r2, r1, r2
 800147a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001484:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00c      	beq.n	80014a8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800149c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c4:	6878      	ldr	r0, [r7, #4]
 80014c6:	4798      	blx	r3
    }
  }
  return status;
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f003 031c 	and.w	r3, r3, #28
 80014f2:	2204      	movs	r2, #4
 80014f4:	409a      	lsls	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d026      	beq.n	800154c <HAL_DMA_IRQHandler+0x7a>
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	2b00      	cmp	r3, #0
 8001506:	d021      	beq.n	800154c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0320 	and.w	r3, r3, #32
 8001512:	2b00      	cmp	r3, #0
 8001514:	d107      	bne.n	8001526 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0204 	bic.w	r2, r2, #4
 8001524:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f003 021c 	and.w	r2, r3, #28
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	2104      	movs	r1, #4
 8001534:	fa01 f202 	lsl.w	r2, r1, r2
 8001538:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	2b00      	cmp	r3, #0
 8001540:	d071      	beq.n	8001626 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800154a:	e06c      	b.n	8001626 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001550:	f003 031c 	and.w	r3, r3, #28
 8001554:	2202      	movs	r2, #2
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	d02e      	beq.n	80015be <HAL_DMA_IRQHandler+0xec>
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d029      	beq.n	80015be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0320 	and.w	r3, r3, #32
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10b      	bne.n	8001590 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 020a 	bic.w	r2, r2, #10
 8001586:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001594:	f003 021c 	and.w	r2, r3, #28
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	2102      	movs	r1, #2
 800159e:	fa01 f202 	lsl.w	r2, r1, r2
 80015a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d038      	beq.n	8001626 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80015bc:	e033      	b.n	8001626 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	f003 031c 	and.w	r3, r3, #28
 80015c6:	2208      	movs	r2, #8
 80015c8:	409a      	lsls	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4013      	ands	r3, r2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d02a      	beq.n	8001628 <HAL_DMA_IRQHandler+0x156>
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d025      	beq.n	8001628 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 020e 	bic.w	r2, r2, #14
 80015ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f0:	f003 021c 	and.w	r2, r3, #28
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	2101      	movs	r1, #1
 80015fa:	fa01 f202 	lsl.w	r2, r1, r2
 80015fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161a:	2b00      	cmp	r3, #0
 800161c:	d004      	beq.n	8001628 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001626:	bf00      	nop
 8001628:	bf00      	nop
}
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001640:	429a      	cmp	r2, r3
 8001642:	d80a      	bhi.n	800165a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001650:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6493      	str	r3, [r2, #72]	; 0x48
 8001658:	e007      	b.n	800166a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165e:	089b      	lsrs	r3, r3, #2
 8001660:	009a      	lsls	r2, r3, #2
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001664:	4413      	add	r3, r2
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b2db      	uxtb	r3, r3
 8001670:	3b08      	subs	r3, #8
 8001672:	4a0c      	ldr	r2, [pc, #48]	; (80016a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	091b      	lsrs	r3, r3, #4
 800167a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001680:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f003 031f 	and.w	r3, r3, #31
 8001688:	2201      	movs	r2, #1
 800168a:	409a      	lsls	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40020407 	.word	0x40020407
 80016a0:	4002081c 	.word	0x4002081c
 80016a4:	cccccccd 	.word	0xcccccccd
 80016a8:	40020880 	.word	0x40020880

080016ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016c2:	4413      	add	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	461a      	mov	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4a09      	ldr	r2, [pc, #36]	; (80016f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80016d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	2201      	movs	r2, #1
 80016dc:	409a      	lsls	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	1000823f 	.word	0x1000823f
 80016f4:	40020940 	.word	0x40020940

080016f8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001702:	2300      	movs	r3, #0
 8001704:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001706:	e14c      	b.n	80019a2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	fa01 f303 	lsl.w	r3, r1, r3
 8001714:	4013      	ands	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 813e 	beq.w	800199c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d00b      	beq.n	8001740 <HAL_GPIO_Init+0x48>
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d007      	beq.n	8001740 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001734:	2b11      	cmp	r3, #17
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b12      	cmp	r3, #18
 800173e:	d130      	bne.n	80017a2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	2203      	movs	r2, #3
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001776:	2201      	movs	r2, #1
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	f003 0201 	and.w	r2, r3, #1
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4313      	orrs	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	4013      	ands	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_Init+0xea>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d123      	bne.n	800182a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	08da      	lsrs	r2, r3, #3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3208      	adds	r2, #8
 80017ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	220f      	movs	r2, #15
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	691a      	ldr	r2, [r3, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	08da      	lsrs	r2, r3, #3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3208      	adds	r2, #8
 8001824:	6939      	ldr	r1, [r7, #16]
 8001826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0203 	and.w	r2, r3, #3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8098 	beq.w	800199c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800186c:	4a54      	ldr	r2, [pc, #336]	; (80019c0 <HAL_GPIO_Init+0x2c8>)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	089b      	lsrs	r3, r3, #2
 8001872:	3302      	adds	r3, #2
 8001874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001896:	d019      	beq.n	80018cc <HAL_GPIO_Init+0x1d4>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_GPIO_Init+0x2cc>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d013      	beq.n	80018c8 <HAL_GPIO_Init+0x1d0>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	4a49      	ldr	r2, [pc, #292]	; (80019c8 <HAL_GPIO_Init+0x2d0>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d00d      	beq.n	80018c4 <HAL_GPIO_Init+0x1cc>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a48      	ldr	r2, [pc, #288]	; (80019cc <HAL_GPIO_Init+0x2d4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d007      	beq.n	80018c0 <HAL_GPIO_Init+0x1c8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <HAL_GPIO_Init+0x2d8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d101      	bne.n	80018bc <HAL_GPIO_Init+0x1c4>
 80018b8:	2304      	movs	r3, #4
 80018ba:	e008      	b.n	80018ce <HAL_GPIO_Init+0x1d6>
 80018bc:	2307      	movs	r3, #7
 80018be:	e006      	b.n	80018ce <HAL_GPIO_Init+0x1d6>
 80018c0:	2303      	movs	r3, #3
 80018c2:	e004      	b.n	80018ce <HAL_GPIO_Init+0x1d6>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e002      	b.n	80018ce <HAL_GPIO_Init+0x1d6>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <HAL_GPIO_Init+0x1d6>
 80018cc:	2300      	movs	r3, #0
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	f002 0203 	and.w	r2, r2, #3
 80018d4:	0092      	lsls	r2, r2, #2
 80018d6:	4093      	lsls	r3, r2
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018de:	4938      	ldr	r1, [pc, #224]	; (80019c0 <HAL_GPIO_Init+0x2c8>)
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	089b      	lsrs	r3, r3, #2
 80018e4:	3302      	adds	r3, #2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018ec:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <HAL_GPIO_Init+0x2dc>)
 80018ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001912:	4a30      	ldr	r2, [pc, #192]	; (80019d4 <HAL_GPIO_Init+0x2dc>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <HAL_GPIO_Init+0x2dc>)
 800191c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001940:	4a24      	ldr	r2, [pc, #144]	; (80019d4 <HAL_GPIO_Init+0x2dc>)
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <HAL_GPIO_Init+0x2dc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800196c:	4a19      	ldr	r2, [pc, #100]	; (80019d4 <HAL_GPIO_Init+0x2dc>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_GPIO_Init+0x2dc>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_GPIO_Init+0x2dc>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	3301      	adds	r3, #1
 80019a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	fa22 f303 	lsr.w	r3, r2, r3
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f47f aeab 	bne.w	8001708 <HAL_GPIO_Init+0x10>
  }
}
 80019b2:	bf00      	nop
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40010000 	.word	0x40010000
 80019c4:	48000400 	.word	0x48000400
 80019c8:	48000800 	.word	0x48000800
 80019cc:	48000c00 	.word	0x48000c00
 80019d0:	48001000 	.word	0x48001000
 80019d4:	58000800 	.word	0x58000800

080019d8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019f0:	2301      	movs	r3, #1
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e001      	b.n	80019fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019f6:	2300      	movs	r3, #0
 80019f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
 8001a14:	4613      	mov	r3, r2
 8001a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a18:	787b      	ldrb	r3, [r7, #1]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a1e:	887a      	ldrh	r2, [r7, #2]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a24:	e002      	b.n	8001a2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	041a      	lsls	r2, r3, #16
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	43d9      	mvns	r1, r3
 8001a56:	887b      	ldrh	r3, [r7, #2]
 8001a58:	400b      	ands	r3, r1
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_HSEM_IRQHandler+0x30>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_HSEM_IRQHandler+0x30>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	4906      	ldr	r1, [pc, #24]	; (8001a9c <HAL_HSEM_IRQHandler+0x30>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <HAL_HSEM_IRQHandler+0x30>)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f807 	bl	8001aa0 <HAL_HSEM_FreeCallback>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	58001500 	.word	0x58001500

08001aa0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e081      	b.n	8001bca <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7fe ff50 	bl	8000980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2224      	movs	r2, #36	; 0x24
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	e006      	b.n	8001b3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d104      	bne.n	8001b4e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	68da      	ldr	r2, [r3, #12]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	ea42 0103 	orr.w	r1, r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	021a      	lsls	r2, r3, #8
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69d9      	ldr	r1, [r3, #28]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2220      	movs	r2, #32
 8001bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b088      	sub	sp, #32
 8001bd8:	af02      	add	r7, sp, #8
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	461a      	mov	r2, r3
 8001be0:	460b      	mov	r3, r1
 8001be2:	817b      	strh	r3, [r7, #10]
 8001be4:	4613      	mov	r3, r2
 8001be6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b20      	cmp	r3, #32
 8001bf2:	f040 80da 	bne.w	8001daa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d101      	bne.n	8001c04 <HAL_I2C_Master_Transmit+0x30>
 8001c00:	2302      	movs	r3, #2
 8001c02:	e0d3      	b.n	8001dac <HAL_I2C_Master_Transmit+0x1d8>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c0c:	f7ff fa10 	bl	8001030 <HAL_GetTick>
 8001c10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2319      	movs	r3, #25
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	f000 f9e6 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0be      	b.n	8001dac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2221      	movs	r2, #33	; 0x21
 8001c32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2210      	movs	r2, #16
 8001c3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	893a      	ldrh	r2, [r7, #8]
 8001c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	2bff      	cmp	r3, #255	; 0xff
 8001c5e:	d90e      	bls.n	8001c7e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	22ff      	movs	r2, #255	; 0xff
 8001c64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	8979      	ldrh	r1, [r7, #10]
 8001c6e:	4b51      	ldr	r3, [pc, #324]	; (8001db4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	f000 fb48 	bl	800230c <I2C_TransferConfig>
 8001c7c:	e06c      	b.n	8001d58 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	8979      	ldrh	r1, [r7, #10]
 8001c90:	4b48      	ldr	r3, [pc, #288]	; (8001db4 <HAL_I2C_Master_Transmit+0x1e0>)
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 fb37 	bl	800230c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001c9e:	e05b      	b.n	8001d58 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	6a39      	ldr	r1, [r7, #32]
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f000 f9e3 	bl	8002070 <I2C_WaitOnTXISFlagUntilTimeout>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e07b      	b.n	8001dac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	781a      	ldrb	r2, [r3, #0]
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d034      	beq.n	8001d58 <HAL_I2C_Master_Transmit+0x184>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d130      	bne.n	8001d58 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f000 f975 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e04d      	b.n	8001dac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	2bff      	cmp	r3, #255	; 0xff
 8001d18:	d90e      	bls.n	8001d38 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	22ff      	movs	r2, #255	; 0xff
 8001d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	8979      	ldrh	r1, [r7, #10]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d30:	68f8      	ldr	r0, [r7, #12]
 8001d32:	f000 faeb 	bl	800230c <I2C_TransferConfig>
 8001d36:	e00f      	b.n	8001d58 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	8979      	ldrh	r1, [r7, #10]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 fada 	bl	800230c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d19e      	bne.n	8001ca0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	6a39      	ldr	r1, [r7, #32]
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	f000 f9c2 	bl	80020f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e01a      	b.n	8001dac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_I2C_Master_Transmit+0x1e4>)
 8001d8a:	400b      	ands	r3, r1
 8001d8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
  }
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	80002000 	.word	0x80002000
 8001db8:	fe00e800 	.word	0xfe00e800

08001dbc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	460b      	mov	r3, r1
 8001dca:	817b      	strh	r3, [r7, #10]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b20      	cmp	r3, #32
 8001dda:	f040 80db 	bne.w	8001f94 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_I2C_Master_Receive+0x30>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e0d4      	b.n	8001f96 <HAL_I2C_Master_Receive+0x1da>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001df4:	f7ff f91c 	bl	8001030 <HAL_GetTick>
 8001df8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	2319      	movs	r3, #25
 8001e00:	2201      	movs	r2, #1
 8001e02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f8f2 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e0bf      	b.n	8001f96 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2222      	movs	r2, #34	; 0x22
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2210      	movs	r2, #16
 8001e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	893a      	ldrh	r2, [r7, #8]
 8001e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2bff      	cmp	r3, #255	; 0xff
 8001e46:	d90e      	bls.n	8001e66 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	22ff      	movs	r2, #255	; 0xff
 8001e4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	8979      	ldrh	r1, [r7, #10]
 8001e56:	4b52      	ldr	r3, [pc, #328]	; (8001fa0 <HAL_I2C_Master_Receive+0x1e4>)
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fa54 	bl	800230c <I2C_TransferConfig>
 8001e64:	e06d      	b.n	8001f42 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	8979      	ldrh	r1, [r7, #10]
 8001e78:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <HAL_I2C_Master_Receive+0x1e4>)
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fa43 	bl	800230c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001e86:	e05c      	b.n	8001f42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	6a39      	ldr	r1, [r7, #32]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f96b 	bl	8002168 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e07c      	b.n	8001f96 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d034      	beq.n	8001f42 <HAL_I2C_Master_Receive+0x186>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d130      	bne.n	8001f42 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	6a3b      	ldr	r3, [r7, #32]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f880 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e04d      	b.n	8001f96 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	2bff      	cmp	r3, #255	; 0xff
 8001f02:	d90e      	bls.n	8001f22 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	22ff      	movs	r2, #255	; 0xff
 8001f08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	8979      	ldrh	r1, [r7, #10]
 8001f12:	2300      	movs	r3, #0
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f9f6 	bl	800230c <I2C_TransferConfig>
 8001f20:	e00f      	b.n	8001f42 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	8979      	ldrh	r1, [r7, #10]
 8001f34:	2300      	movs	r3, #0
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f9e5 	bl	800230c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d19d      	bne.n	8001e88 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	6a39      	ldr	r1, [r7, #32]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f000 f8cd 	bl	80020f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e01a      	b.n	8001f96 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2220      	movs	r2, #32
 8001f66:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6859      	ldr	r1, [r3, #4]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <HAL_I2C_Master_Receive+0x1e8>)
 8001f74:	400b      	ands	r3, r1
 8001f76:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	e000      	b.n	8001f96 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
  }
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3718      	adds	r7, #24
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	80002400 	.word	0x80002400
 8001fa4:	fe00e800 	.word	0xfe00e800

08001fa8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d103      	bne.n	8001fc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d007      	beq.n	8001fe4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	619a      	str	r2, [r3, #24]
  }
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002000:	e022      	b.n	8002048 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002008:	d01e      	beq.n	8002048 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7ff f811 	bl	8001030 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d113      	bne.n	8002048 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	f043 0220 	orr.w	r2, r3, #32
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e00f      	b.n	8002068 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	4013      	ands	r3, r2
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	429a      	cmp	r2, r3
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	429a      	cmp	r2, r3
 8002064:	d0cd      	beq.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800207c:	e02c      	b.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	68b9      	ldr	r1, [r7, #8]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f8dc 	bl	8002240 <I2C_IsAcknowledgeFailed>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e02a      	b.n	80020e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d01e      	beq.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800209a:	f7fe ffc9 	bl	8001030 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d302      	bcc.n	80020b0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d113      	bne.n	80020d8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b4:	f043 0220 	orr.w	r2, r3, #32
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2220      	movs	r2, #32
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e007      	b.n	80020e8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d1cb      	bne.n	800207e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020fc:	e028      	b.n	8002150 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	68b9      	ldr	r1, [r7, #8]
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f89c 	bl	8002240 <I2C_IsAcknowledgeFailed>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e026      	b.n	8002160 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002112:	f7fe ff8d 	bl	8001030 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	d302      	bcc.n	8002128 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d113      	bne.n	8002150 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212c:	f043 0220 	orr.w	r2, r3, #32
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2220      	movs	r2, #32
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e007      	b.n	8002160 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b20      	cmp	r3, #32
 800215c:	d1cf      	bne.n	80020fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002174:	e055      	b.n	8002222 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f860 	bl	8002240 <I2C_IsAcknowledgeFailed>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e053      	b.n	8002232 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b20      	cmp	r3, #32
 8002196:	d129      	bne.n	80021ec <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b04      	cmp	r3, #4
 80021a4:	d105      	bne.n	80021b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e03f      	b.n	8002232 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2220      	movs	r2, #32
 80021b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6859      	ldr	r1, [r3, #4]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b1d      	ldr	r3, [pc, #116]	; (800223c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80021c6:	400b      	ands	r3, r1
 80021c8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e022      	b.n	8002232 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ec:	f7fe ff20 	bl	8001030 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d302      	bcc.n	8002202 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10f      	bne.n	8002222 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f043 0220 	orr.w	r2, r3, #32
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2220      	movs	r2, #32
 8002212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e007      	b.n	8002232 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b04      	cmp	r3, #4
 800222e:	d1a2      	bne.n	8002176 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	fe00e800 	.word	0xfe00e800

08002240 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f003 0310 	and.w	r3, r3, #16
 8002256:	2b10      	cmp	r3, #16
 8002258:	d151      	bne.n	80022fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800225a:	e022      	b.n	80022a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002262:	d01e      	beq.n	80022a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002264:	f7fe fee4 	bl	8001030 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	429a      	cmp	r2, r3
 8002272:	d302      	bcc.n	800227a <I2C_IsAcknowledgeFailed+0x3a>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d113      	bne.n	80022a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	f043 0220 	orr.w	r2, r3, #32
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e02e      	b.n	8002300 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	d1d5      	bne.n	800225c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2210      	movs	r2, #16
 80022b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2220      	movs	r2, #32
 80022be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff fe71 	bl	8001fa8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <I2C_IsAcknowledgeFailed+0xc8>)
 80022d2:	400b      	ands	r3, r1
 80022d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	f043 0204 	orr.w	r2, r3, #4
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2220      	movs	r2, #32
 80022e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	fe00e800 	.word	0xfe00e800

0800230c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	817b      	strh	r3, [r7, #10]
 800231a:	4613      	mov	r3, r2
 800231c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685a      	ldr	r2, [r3, #4]
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	0d5b      	lsrs	r3, r3, #21
 8002328:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <I2C_TransferConfig+0x58>)
 800232e:	430b      	orrs	r3, r1
 8002330:	43db      	mvns	r3, r3
 8002332:	ea02 0103 	and.w	r1, r2, r3
 8002336:	897b      	ldrh	r3, [r7, #10]
 8002338:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800233c:	7a7b      	ldrb	r3, [r7, #9]
 800233e:	041b      	lsls	r3, r3, #16
 8002340:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	431a      	orrs	r2, r3
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	431a      	orrs	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	03ff63ff 	.word	0x03ff63ff

08002368 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b20      	cmp	r3, #32
 800237c:	d138      	bne.n	80023f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002388:	2302      	movs	r3, #2
 800238a:	e032      	b.n	80023f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	; 0x24
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2220      	movs	r2, #32
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	e000      	b.n	80023f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80023f0:	2302      	movs	r3, #2
  }
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80023fe:	b480      	push	{r7}
 8002400:	b085      	sub	sp, #20
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800240e:	b2db      	uxtb	r3, r3
 8002410:	2b20      	cmp	r3, #32
 8002412:	d139      	bne.n	8002488 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800241a:	2b01      	cmp	r3, #1
 800241c:	d101      	bne.n	8002422 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800241e:	2302      	movs	r3, #2
 8002420:	e033      	b.n	800248a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2224      	movs	r2, #36	; 0x24
 800242e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002450:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002484:	2300      	movs	r3, #0
 8002486:	e000      	b.n	800248a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002488:	2302      	movs	r3, #2
  }
}
 800248a:	4618      	mov	r0, r3
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a04      	ldr	r2, [pc, #16]	; (80024b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	58000400 	.word	0x58000400

080024b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024bc:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	58000400 	.word	0x58000400

080024d4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024e6:	d101      	bne.n	80024ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80024fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002506:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800250a:	6013      	str	r3, [r2, #0]
}
 800250c:	bf00      	nop
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002546:	6013      	str	r3, [r2, #0]
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002582:	d101      	bne.n	8002588 <LL_RCC_HSE_IsReady+0x18>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <LL_RCC_HSE_IsReady+0x1a>
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a6:	6013      	str	r3, [r2, #0]
}
 80025a8:	bf00      	nop
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80025b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025c4:	6013      	str	r3, [r2, #0]
}
 80025c6:	bf00      	nop
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80025d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e2:	d101      	bne.n	80025e8 <LL_RCC_HSI_IsReady+0x18>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <LL_RCC_HSI_IsReady+0x1a>
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80025fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	061b      	lsls	r3, r3, #24
 800260a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002626:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800262a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800264c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr

08002662 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002662:	b480      	push	{r7}
 8002664:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b02      	cmp	r3, #2
 8002674:	d101      	bne.n	800267a <LL_RCC_HSI48_IsReady+0x18>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <LL_RCC_HSI48_IsReady+0x1a>
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800268a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800268e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800269e:	bf00      	nop
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80026ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80026ca:	b480      	push	{r7}
 80026cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80026ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026da:	f043 0304 	orr.w	r3, r3, #4
 80026de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80026f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002712:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b02      	cmp	r3, #2
 8002720:	d101      	bne.n	8002726 <LL_RCC_LSE_IsReady+0x18>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <LL_RCC_LSE_IsReady+0x1a>
 8002726:	2300      	movs	r3, #0
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800273a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002758:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800275c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002760:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002764:	f023 0301 	bic.w	r3, r3, #1
 8002768:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800276c:	bf00      	nop
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800277a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800277e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b02      	cmp	r3, #2
 8002788:	d101      	bne.n	800278e <LL_RCC_LSI1_IsReady+0x18>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <LL_RCC_LSI1_IsReady+0x1a>
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80027d4:	bf00      	nop
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80027e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d101      	bne.n	80027f6 <LL_RCC_LSI2_IsReady+0x18>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <LL_RCC_LSI2_IsReady+0x1a>
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800280a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800280e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002812:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6013      	str	r3, [r2, #0]
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800284e:	b480      	push	{r7}
 8002850:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6013      	str	r3, [r2, #0]
}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b02      	cmp	r3, #2
 800287c:	d101      	bne.n	8002882 <LL_RCC_MSI_IsReady+0x16>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <LL_RCC_MSI_IsReady+0x18>
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	600b      	str	r3, [r1, #0]
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80028bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2bb0      	cmp	r3, #176	; 0xb0
 80028cc:	d901      	bls.n	80028d2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80028ce:	23b0      	movs	r3, #176	; 0xb0
 80028d0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80028d2:	687b      	ldr	r3, [r7, #4]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80028e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f023 0203 	bic.w	r2, r3, #3
 800291c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4313      	orrs	r3, r2
 8002924:	608b      	str	r3, [r1, #8]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002932:	b480      	push	{r7}
 8002934:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 030c 	and.w	r3, r3, #12
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800297a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002982:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4313      	orrs	r3, r2
 800298e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80029ae:	f023 020f 	bic.w	r2, r3, #15
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	608b      	str	r3, [r1, #8]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	608b      	str	r3, [r1, #8]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002a20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002aa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ab0:	6013      	str	r3, [r2, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ace:	d101      	bne.n	8002ad4 <LL_RCC_PLL_IsReady+0x18>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <LL_RCC_PLL_IsReady+0x1a>
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0303 	and.w	r3, r3, #3
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002b46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b54:	d101      	bne.n	8002b5a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b7a:	d101      	bne.n	8002b80 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e000      	b.n	8002b82 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b94:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba0:	d101      	bne.n	8002ba6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc4:	d101      	bne.n	8002bca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr

08002bd6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002bd6:	b480      	push	{r7}
 8002bd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002be8:	d101      	bne.n	8002bee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b08d      	sub	sp, #52	; 0x34
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e386      	b.n	800331c <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0320 	and.w	r3, r3, #32
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 808f 	beq.w	8002d3a <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c1c:	f7ff fe89 	bl	8002932 <LL_RCC_GetSysClkSource>
 8002c20:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c22:	f7ff ff82 	bl	8002b2a <LL_RCC_PLL_GetMainSource>
 8002c26:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_RCC_OscConfig+0x3e>
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	2b0c      	cmp	r3, #12
 8002c32:	d149      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d146      	bne.n	8002cc8 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c3a:	f7ff fe17 	bl	800286c <LL_RCC_MSI_IsReady>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_OscConfig+0x54>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e365      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002c54:	f7ff fe2f 	bl	80028b6 <LL_RCC_MSI_GetRange>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	429c      	cmp	r4, r3
 8002c5c:	d914      	bls.n	8002c88 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 fd44 	bl	80036f0 <RCC_SetFlashLatencyFromMSIRange>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e354      	b.n	800331c <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fe09 	bl	800288e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fe2d 	bl	80028e0 <LL_RCC_MSI_SetCalibTrimming>
 8002c86:	e013      	b.n	8002cb0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fdfe 	bl	800288e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fe22 	bl	80028e0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fd25 	bl	80036f0 <RCC_SetFlashLatencyFromMSIRange>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e335      	b.n	800331c <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8002cb0:	f7fe f876 	bl	8000da0 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cb4:	4bb4      	ldr	r3, [pc, #720]	; (8002f88 <HAL_RCC_OscConfig+0x38c>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fe f96b 	bl	8000f94 <HAL_InitTick>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d039      	beq.n	8002d38 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e329      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69db      	ldr	r3, [r3, #28]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d01e      	beq.n	8002d0e <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002cd0:	f7ff fdae 	bl	8002830 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f9ac 	bl	8001030 <HAL_GetTick>
 8002cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002cdc:	f7fe f9a8 	bl	8001030 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e316      	b.n	800331c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002cee:	f7ff fdbd 	bl	800286c <LL_RCC_MSI_IsReady>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f1      	beq.n	8002cdc <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fdc6 	bl	800288e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fdea 	bl	80028e0 <LL_RCC_MSI_SetCalibTrimming>
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002d0e:	f7ff fd9e 	bl	800284e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d12:	f7fe f98d 	bl	8001030 <HAL_GetTick>
 8002d16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d18:	e008      	b.n	8002d2c <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d1a:	f7fe f989 	bl	8001030 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d901      	bls.n	8002d2c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002d28:	2303      	movs	r3, #3
 8002d2a:	e2f7      	b.n	800331c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002d2c:	f7ff fd9e 	bl	800286c <LL_RCC_MSI_IsReady>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f1      	bne.n	8002d1a <HAL_RCC_OscConfig+0x11e>
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d05a      	beq.n	8002dfc <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d46:	f7ff fdf4 	bl	8002932 <LL_RCC_GetSysClkSource>
 8002d4a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d4c:	f7ff feed 	bl	8002b2a <LL_RCC_PLL_GetMainSource>
 8002d50:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_OscConfig+0x168>
 8002d58:	6a3b      	ldr	r3, [r7, #32]
 8002d5a:	2b0c      	cmp	r3, #12
 8002d5c:	d10d      	bne.n	8002d7a <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d10a      	bne.n	8002d7a <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	f7ff fc04 	bl	8002570 <LL_RCC_HSE_IsReady>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d045      	beq.n	8002dfa <HAL_RCC_OscConfig+0x1fe>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d141      	bne.n	8002dfa <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e2d0      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d82:	d102      	bne.n	8002d8a <HAL_RCC_OscConfig+0x18e>
 8002d84:	f7ff fbd6 	bl	8002534 <LL_RCC_HSE_Enable>
 8002d88:	e00d      	b.n	8002da6 <HAL_RCC_OscConfig+0x1aa>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d92:	d104      	bne.n	8002d9e <HAL_RCC_OscConfig+0x1a2>
 8002d94:	f7ff fbb0 	bl	80024f8 <LL_RCC_HSE_EnableBypass>
 8002d98:	f7ff fbcc 	bl	8002534 <LL_RCC_HSE_Enable>
 8002d9c:	e003      	b.n	8002da6 <HAL_RCC_OscConfig+0x1aa>
 8002d9e:	f7ff fbd8 	bl	8002552 <LL_RCC_HSE_Disable>
 8002da2:	f7ff fbb8 	bl	8002516 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d012      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dae:	f7fe f93f 	bl	8001030 <HAL_GetTick>
 8002db2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002db4:	e008      	b.n	8002dc8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002db6:	f7fe f93b 	bl	8001030 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	2b64      	cmp	r3, #100	; 0x64
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e2a9      	b.n	800331c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002dc8:	f7ff fbd2 	bl	8002570 <LL_RCC_HSE_IsReady>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f1      	beq.n	8002db6 <HAL_RCC_OscConfig+0x1ba>
 8002dd2:	e013      	b.n	8002dfc <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd4:	f7fe f92c 	bl	8001030 <HAL_GetTick>
 8002dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7fe f928 	bl	8001030 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e296      	b.n	800331c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002dee:	f7ff fbbf 	bl	8002570 <LL_RCC_HSE_IsReady>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f1      	bne.n	8002ddc <HAL_RCC_OscConfig+0x1e0>
 8002df8:	e000      	b.n	8002dfc <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0302 	and.w	r3, r3, #2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d051      	beq.n	8002eac <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e08:	f7ff fd93 	bl	8002932 <LL_RCC_GetSysClkSource>
 8002e0c:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e0e:	f7ff fe8c 	bl	8002b2a <LL_RCC_PLL_GetMainSource>
 8002e12:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x22a>
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b0c      	cmp	r3, #12
 8002e1e:	d113      	bne.n	8002e48 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d110      	bne.n	8002e48 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e26:	f7ff fbd3 	bl	80025d0 <LL_RCC_HSI_IsReady>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <HAL_RCC_OscConfig+0x240>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e26f      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fbd7 	bl	80025f4 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e46:	e031      	b.n	8002eac <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d019      	beq.n	8002e84 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e50:	f7ff fba0 	bl	8002594 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe f8ec 	bl	8001030 <HAL_GetTick>
 8002e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e5c:	f7fe f8e8 	bl	8001030 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e256      	b.n	800331c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002e6e:	f7ff fbaf 	bl	80025d0 <LL_RCC_HSI_IsReady>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0f1      	beq.n	8002e5c <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fbb9 	bl	80025f4 <LL_RCC_HSI_SetCalibTrimming>
 8002e82:	e013      	b.n	8002eac <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e84:	f7ff fb95 	bl	80025b2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe f8d2 	bl	8001030 <HAL_GetTick>
 8002e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e90:	f7fe f8ce 	bl	8001030 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e23c      	b.n	800331c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002ea2:	f7ff fb95 	bl	80025d0 <LL_RCC_HSI_IsReady>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1f1      	bne.n	8002e90 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0308 	and.w	r3, r3, #8
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80a2 	beq.w	800300a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d075      	beq.n	8002fba <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d046      	beq.n	8002f68 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002eda:	f7ff fc4c 	bl	8002776 <LL_RCC_LSI1_IsReady>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d113      	bne.n	8002f0c <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002ee4:	f7ff fc25 	bl	8002732 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ee8:	f7fe f8a2 	bl	8001030 <HAL_GetTick>
 8002eec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002ef0:	f7fe f89e 	bl	8001030 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e20c      	b.n	800331c <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002f02:	f7ff fc38 	bl	8002776 <LL_RCC_LSI1_IsReady>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f1      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002f0c:	f7ff fc45 	bl	800279a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe f88e 	bl	8001030 <HAL_GetTick>
 8002f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002f18:	f7fe f88a 	bl	8001030 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e1f8      	b.n	800331c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002f2a:	f7ff fc58 	bl	80027de <LL_RCC_LSI2_IsReady>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f1      	beq.n	8002f18 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fc62 	bl	8002802 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8002f3e:	f7ff fc09 	bl	8002754 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7fe f875 	bl	8001030 <HAL_GetTick>
 8002f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f4a:	f7fe f871 	bl	8001030 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e1df      	b.n	800331c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002f5c:	f7ff fc0b 	bl	8002776 <LL_RCC_LSI1_IsReady>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f1      	bne.n	8002f4a <HAL_RCC_OscConfig+0x34e>
 8002f66:	e050      	b.n	800300a <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002f68:	f7ff fbe3 	bl	8002732 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe f860 	bl	8001030 <HAL_GetTick>
 8002f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002f72:	e00b      	b.n	8002f8c <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002f74:	f7fe f85c 	bl	8001030 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d904      	bls.n	8002f8c <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e1ca      	b.n	800331c <HAL_RCC_OscConfig+0x720>
 8002f86:	bf00      	nop
 8002f88:	20000018 	.word	0x20000018
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002f8c:	f7ff fbf3 	bl	8002776 <LL_RCC_LSI1_IsReady>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0ee      	beq.n	8002f74 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002f96:	f7ff fc11 	bl	80027bc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002f9c:	f7fe f848 	bl	8001030 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e1b6      	b.n	800331c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002fae:	f7ff fc16 	bl	80027de <LL_RCC_LSI2_IsReady>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f1      	bne.n	8002f9c <HAL_RCC_OscConfig+0x3a0>
 8002fb8:	e027      	b.n	800300a <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002fba:	f7ff fbff 	bl	80027bc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fe f837 	bl	8001030 <HAL_GetTick>
 8002fc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002fc6:	f7fe f833 	bl	8001030 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e1a1      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002fd8:	f7ff fc01 	bl	80027de <LL_RCC_LSI2_IsReady>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f1      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002fe2:	f7ff fbb7 	bl	8002754 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe6:	f7fe f823 	bl	8001030 <HAL_GetTick>
 8002fea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002fee:	f7fe f81f 	bl	8001030 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e18d      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003000:	f7ff fbb9 	bl	8002776 <LL_RCC_LSI1_IsReady>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f1      	bne.n	8002fee <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	2b00      	cmp	r3, #0
 8003014:	d05b      	beq.n	80030ce <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003016:	4bb5      	ldr	r3, [pc, #724]	; (80032ec <HAL_RCC_OscConfig+0x6f0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d114      	bne.n	800304c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003022:	f7ff fa39 	bl	8002498 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003026:	f7fe f803 	bl	8001030 <HAL_GetTick>
 800302a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800302e:	f7fd ffff 	bl	8001030 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e16d      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003040:	4baa      	ldr	r3, [pc, #680]	; (80032ec <HAL_RCC_OscConfig+0x6f0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003048:	2b00      	cmp	r3, #0
 800304a:	d0f0      	beq.n	800302e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d102      	bne.n	800305a <HAL_RCC_OscConfig+0x45e>
 8003054:	f7ff fb17 	bl	8002686 <LL_RCC_LSE_Enable>
 8003058:	e00c      	b.n	8003074 <HAL_RCC_OscConfig+0x478>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d104      	bne.n	800306c <HAL_RCC_OscConfig+0x470>
 8003062:	f7ff fb32 	bl	80026ca <LL_RCC_LSE_EnableBypass>
 8003066:	f7ff fb0e 	bl	8002686 <LL_RCC_LSE_Enable>
 800306a:	e003      	b.n	8003074 <HAL_RCC_OscConfig+0x478>
 800306c:	f7ff fb1c 	bl	80026a8 <LL_RCC_LSE_Disable>
 8003070:	f7ff fb3c 	bl	80026ec <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d014      	beq.n	80030a6 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fd ffd8 	bl	8001030 <HAL_GetTick>
 8003080:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003082:	e00a      	b.n	800309a <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003084:	f7fd ffd4 	bl	8001030 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e140      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 800309a:	f7ff fb38 	bl	800270e <LL_RCC_LSE_IsReady>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ef      	beq.n	8003084 <HAL_RCC_OscConfig+0x488>
 80030a4:	e013      	b.n	80030ce <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030a6:	f7fd ffc3 	bl	8001030 <HAL_GetTick>
 80030aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80030ac:	e00a      	b.n	80030c4 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ae:	f7fd ffbf 	bl	8001030 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80030bc:	4293      	cmp	r3, r2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e12b      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 80030c4:	f7ff fb23 	bl	800270e <LL_RCC_LSE_IsReady>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ef      	bne.n	80030ae <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d02c      	beq.n	8003134 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d014      	beq.n	800310c <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030e2:	f7ff fa9c 	bl	800261e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e6:	f7fd ffa3 	bl	8001030 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ee:	f7fd ff9f 	bl	8001030 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e10d      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003100:	f7ff faaf 	bl	8002662 <LL_RCC_HSI48_IsReady>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f1      	beq.n	80030ee <HAL_RCC_OscConfig+0x4f2>
 800310a:	e013      	b.n	8003134 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800310c:	f7ff fa98 	bl	8002640 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fd ff8e 	bl	8001030 <HAL_GetTick>
 8003114:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003118:	f7fd ff8a 	bl	8001030 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0f8      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800312a:	f7ff fa9a 	bl	8002662 <LL_RCC_HSI48_IsReady>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f1      	bne.n	8003118 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80ee 	beq.w	800331a <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313e:	f7ff fbf8 	bl	8002932 <LL_RCC_GetSysClkSource>
 8003142:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	2b02      	cmp	r3, #2
 8003152:	f040 80af 	bne.w	80032b4 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0203 	and.w	r2, r3, #3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	429a      	cmp	r2, r3
 8003162:	d123      	bne.n	80031ac <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800316e:	429a      	cmp	r2, r3
 8003170:	d11c      	bne.n	80031ac <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	0a1b      	lsrs	r3, r3, #8
 8003176:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800317e:	429a      	cmp	r2, r3
 8003180:	d114      	bne.n	80031ac <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800318c:	429a      	cmp	r2, r3
 800318e:	d10d      	bne.n	80031ac <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d106      	bne.n	80031ac <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d05d      	beq.n	8003268 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d058      	beq.n	8003264 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80031b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0ab      	b.n	800331c <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80031c4:	f7ff fc6b 	bl	8002a9e <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80031c8:	f7fd ff32 	bl	8001030 <HAL_GetTick>
 80031cc:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d0:	f7fd ff2e 	bl	8001030 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e09c      	b.n	800331c <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1ef      	bne.n	80031d0 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	4b3e      	ldr	r3, [pc, #248]	; (80032f0 <HAL_RCC_OscConfig+0x6f4>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003202:	4311      	orrs	r1, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003208:	0212      	lsls	r2, r2, #8
 800320a:	4311      	orrs	r1, r2
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003210:	4311      	orrs	r1, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003216:	4311      	orrs	r1, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800321c:	430a      	orrs	r2, r1
 800321e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003222:	4313      	orrs	r3, r2
 8003224:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003226:	f7ff fc2b 	bl	8002a80 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800322a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800323a:	f7fd fef9 	bl	8001030 <HAL_GetTick>
 800323e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003242:	f7fd fef5 	bl	8001030 <HAL_GetTick>
 8003246:	4602      	mov	r2, r0
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e063      	b.n	800331c <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ef      	beq.n	8003242 <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003262:	e05a      	b.n	800331a <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e059      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d151      	bne.n	800331a <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003276:	f7ff fc03 	bl	8002a80 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800327a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003288:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800328a:	f7fd fed1 	bl	8001030 <HAL_GetTick>
 800328e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fd fecd 	bl	8001030 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e03b      	b.n	800331c <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0ef      	beq.n	8003292 <HAL_RCC_OscConfig+0x696>
 80032b2:	e032      	b.n	800331a <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b0c      	cmp	r3, #12
 80032b8:	d02d      	beq.n	8003316 <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ba:	f7ff fbf0 	bl	8002a9e <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80032be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032c8:	f023 0303 	bic.w	r3, r3, #3
 80032cc:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80032ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032d8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80032dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032e0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e2:	f7fd fea5 	bl	8001030 <HAL_GetTick>
 80032e6:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032e8:	e00d      	b.n	8003306 <HAL_RCC_OscConfig+0x70a>
 80032ea:	bf00      	nop
 80032ec:	58000400 	.word	0x58000400
 80032f0:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f4:	f7fd fe9c 	bl	8001030 <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e00a      	b.n	800331c <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ef      	bne.n	80032f4 <HAL_RCC_OscConfig+0x6f8>
 8003314:	e001      	b.n	800331a <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e000      	b.n	800331c <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 800331a:	2300      	movs	r3, #0
}
 800331c:	4618      	mov	r0, r3
 800331e:	3734      	adds	r7, #52	; 0x34
 8003320:	46bd      	mov	sp, r7
 8003322:	bd90      	pop	{r4, r7, pc}

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e12a      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003338:	4b97      	ldr	r3, [pc, #604]	; (8003598 <HAL_RCC_ClockConfig+0x274>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	683a      	ldr	r2, [r7, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d91b      	bls.n	800337e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003346:	4b94      	ldr	r3, [pc, #592]	; (8003598 <HAL_RCC_ClockConfig+0x274>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 0207 	bic.w	r2, r3, #7
 800334e:	4992      	ldr	r1, [pc, #584]	; (8003598 <HAL_RCC_ClockConfig+0x274>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003356:	f7fd fe6b 	bl	8001030 <HAL_GetTick>
 800335a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335c:	e008      	b.n	8003370 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800335e:	f7fd fe67 	bl	8001030 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e10e      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003370:	4b89      	ldr	r3, [pc, #548]	; (8003598 <HAL_RCC_ClockConfig+0x274>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d1ef      	bne.n	800335e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d016      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fadb 	bl	800294a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003394:	f7fd fe4c 	bl	8001030 <HAL_GetTick>
 8003398:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800339a:	e008      	b.n	80033ae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800339c:	f7fd fe48 	bl	8001030 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e0ef      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80033ae:	f7ff fbc8 	bl	8002b42 <LL_RCC_IsActiveFlag_HPRE>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f1      	beq.n	800339c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d016      	beq.n	80033f2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fad2 	bl	8002972 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80033ce:	f7fd fe2f 	bl	8001030 <HAL_GetTick>
 80033d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80033d6:	f7fd fe2b 	bl	8001030 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e0d2      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80033e8:	f7ff fbbd 	bl	8002b66 <LL_RCC_IsActiveFlag_C2HPRE>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f1      	beq.n	80033d6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff facb 	bl	800299e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003408:	f7fd fe12 	bl	8001030 <HAL_GetTick>
 800340c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003410:	f7fd fe0e 	bl	8001030 <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e0b5      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003422:	f7ff fbb3 	bl	8002b8c <LL_RCC_IsActiveFlag_SHDHPRE>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f1      	beq.n	8003410 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d016      	beq.n	8003466 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fac5 	bl	80029cc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003442:	f7fd fdf5 	bl	8001030 <HAL_GetTick>
 8003446:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800344a:	f7fd fdf1 	bl	8001030 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e098      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800345c:	f7ff fba9 	bl	8002bb2 <LL_RCC_IsActiveFlag_PPRE1>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d0f1      	beq.n	800344a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b00      	cmp	r3, #0
 8003470:	d017      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fabb 	bl	80029f4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800347e:	f7fd fdd7 	bl	8001030 <HAL_GetTick>
 8003482:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003486:	f7fd fdd3 	bl	8001030 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e07a      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003498:	f7ff fb9d 	bl	8002bd6 <LL_RCC_IsActiveFlag_PPRE2>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0f1      	beq.n	8003486 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d043      	beq.n	8003536 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d106      	bne.n	80034c4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80034b6:	f7ff f85b 	bl	8002570 <LL_RCC_HSE_IsReady>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d11e      	bne.n	80034fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e064      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d106      	bne.n	80034da <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80034cc:	f7ff faf6 	bl	8002abc <LL_RCC_PLL_IsReady>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d113      	bne.n	80034fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e059      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d106      	bne.n	80034f0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80034e2:	f7ff f9c3 	bl	800286c <LL_RCC_MSI_IsReady>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d108      	bne.n	80034fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e04e      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80034f0:	f7ff f86e 	bl	80025d0 <LL_RCC_HSI_IsReady>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e047      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff fa01 	bl	800290a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003508:	f7fd fd92 	bl	8001030 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	e00a      	b.n	8003526 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003510:	f7fd fd8e 	bl	8001030 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	; 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e033      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	f7ff fa04 	bl	8002932 <LL_RCC_GetSysClkSource>
 800352a:	4602      	mov	r2, r0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	429a      	cmp	r2, r3
 8003534:	d1ec      	bne.n	8003510 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003536:	4b18      	ldr	r3, [pc, #96]	; (8003598 <HAL_RCC_ClockConfig+0x274>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d21b      	bcs.n	800357c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003544:	4b14      	ldr	r3, [pc, #80]	; (8003598 <HAL_RCC_ClockConfig+0x274>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f023 0207 	bic.w	r2, r3, #7
 800354c:	4912      	ldr	r1, [pc, #72]	; (8003598 <HAL_RCC_ClockConfig+0x274>)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	4313      	orrs	r3, r2
 8003552:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003554:	f7fd fd6c 	bl	8001030 <HAL_GetTick>
 8003558:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	e008      	b.n	800356e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800355c:	f7fd fd68 	bl	8001030 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e00f      	b.n	800358e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <HAL_RCC_ClockConfig+0x274>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d1ef      	bne.n	800355c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 800357c:	f7fd fc10 	bl	8000da0 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003580:	f7fd fd62 	bl	8001048 <HAL_GetTickPrio>
 8003584:	4603      	mov	r3, r0
 8003586:	4618      	mov	r0, r3
 8003588:	f7fd fd04 	bl	8000f94 <HAL_InitTick>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	58004000 	.word	0x58004000

0800359c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	b590      	push	{r4, r7, lr}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035a2:	f7ff f9c6 	bl	8002932 <LL_RCC_GetSysClkSource>
 80035a6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80035ae:	f7ff f982 	bl	80028b6 <LL_RCC_MSI_GetRange>
 80035b2:	4603      	mov	r3, r0
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	4a2a      	ldr	r2, [pc, #168]	; (8003664 <HAL_RCC_GetSysClockFreq+0xc8>)
 80035bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	e04a      	b.n	800365a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d102      	bne.n	80035d0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035ca:	4b27      	ldr	r3, [pc, #156]	; (8003668 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	e044      	b.n	800365a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d10a      	bne.n	80035ec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80035d6:	f7fe ff7d 	bl	80024d4 <LL_RCC_HSE_IsEnabledDiv2>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d102      	bne.n	80035e6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <HAL_RCC_GetSysClockFreq+0xcc>)
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	e039      	b.n	800365a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80035e6:	4b21      	ldr	r3, [pc, #132]	; (800366c <HAL_RCC_GetSysClockFreq+0xd0>)
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	e036      	b.n	800365a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80035ec:	f7ff fa9d 	bl	8002b2a <LL_RCC_PLL_GetMainSource>
 80035f0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d002      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x62>
 80035f8:	2b03      	cmp	r3, #3
 80035fa:	d003      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x68>
 80035fc:	e00d      	b.n	800361a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80035fe:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003600:	60bb      	str	r3, [r7, #8]
        break;
 8003602:	e015      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003604:	f7fe ff66 	bl	80024d4 <LL_RCC_HSE_IsEnabledDiv2>
 8003608:	4603      	mov	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d102      	bne.n	8003614 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800360e:	4b16      	ldr	r3, [pc, #88]	; (8003668 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003610:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003612:	e00d      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8003614:	4b15      	ldr	r3, [pc, #84]	; (800366c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003616:	60bb      	str	r3, [r7, #8]
        break;
 8003618:	e00a      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800361a:	f7ff f94c 	bl	80028b6 <LL_RCC_MSI_GetRange>
 800361e:	4603      	mov	r3, r0
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	4a0f      	ldr	r2, [pc, #60]	; (8003664 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362c:	60bb      	str	r3, [r7, #8]
        break;
 800362e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8003630:	f7ff fa56 	bl	8002ae0 <LL_RCC_PLL_GetN>
 8003634:	4602      	mov	r2, r0
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	fb03 f402 	mul.w	r4, r3, r2
 800363c:	f7ff fa69 	bl	8002b12 <LL_RCC_PLL_GetDivider>
 8003640:	4603      	mov	r3, r0
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	3301      	adds	r3, #1
 8003646:	fbb4 f4f3 	udiv	r4, r4, r3
 800364a:	f7ff fa56 	bl	8002afa <LL_RCC_PLL_GetR>
 800364e:	4603      	mov	r3, r0
 8003650:	0f5b      	lsrs	r3, r3, #29
 8003652:	3301      	adds	r3, #1
 8003654:	fbb4 f3f3 	udiv	r3, r4, r3
 8003658:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800365a:	68fb      	ldr	r3, [r7, #12]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	bd90      	pop	{r4, r7, pc}
 8003664:	080059f0 	.word	0x080059f0
 8003668:	00f42400 	.word	0x00f42400
 800366c:	01e84800 	.word	0x01e84800

08003670 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b598      	push	{r3, r4, r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003674:	f7ff ff92 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8003678:	4604      	mov	r4, r0
 800367a:	f7ff f9cf 	bl	8002a1c <LL_RCC_GetAHBPrescaler>
 800367e:	4603      	mov	r3, r0
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	4a03      	ldr	r2, [pc, #12]	; (8003694 <HAL_RCC_GetHCLKFreq+0x24>)
 8003688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003690:	4618      	mov	r0, r3
 8003692:	bd98      	pop	{r3, r4, r7, pc}
 8003694:	08005990 	.word	0x08005990

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b598      	push	{r3, r4, r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800369c:	f7ff ffe8 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80036a0:	4604      	mov	r4, r0
 80036a2:	f7ff f9d5 	bl	8002a50 <LL_RCC_GetAPB1Prescaler>
 80036a6:	4603      	mov	r3, r0
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b4:	f003 031f 	and.w	r3, r3, #31
 80036b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd98      	pop	{r3, r4, r7, pc}
 80036c0:	080059d0 	.word	0x080059d0

080036c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c4:	b598      	push	{r3, r4, r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80036c8:	f7ff ffd2 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80036cc:	4604      	mov	r4, r0
 80036ce:	f7ff f9cb 	bl	8002a68 <LL_RCC_GetAPB2Prescaler>
 80036d2:	4603      	mov	r3, r0
 80036d4:	0adb      	lsrs	r3, r3, #11
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	4a04      	ldr	r2, [pc, #16]	; (80036ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80036dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	bd98      	pop	{r3, r4, r7, pc}
 80036ec:	080059d0 	.word	0x080059d0

080036f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2bb0      	cmp	r3, #176	; 0xb0
 80036fc:	d903      	bls.n	8003706 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80036fe:	4b15      	ldr	r3, [pc, #84]	; (8003754 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	e007      	b.n	8003716 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	4a11      	ldr	r2, [pc, #68]	; (8003754 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003714:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003716:	f7ff f98d 	bl	8002a34 <LL_RCC_GetAHB4Prescaler>
 800371a:	4603      	mov	r3, r0
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	4a0d      	ldr	r2, [pc, #52]	; (8003758 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	fbb2 f3f3 	udiv	r3, r2, r3
 800372e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4a0a      	ldr	r2, [pc, #40]	; (800375c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	0c9c      	lsrs	r4, r3, #18
 800373a:	f7fe febd 	bl	80024b8 <HAL_PWREx_GetVoltageRange>
 800373e:	4603      	mov	r3, r0
 8003740:	4619      	mov	r1, r3
 8003742:	4620      	mov	r0, r4
 8003744:	f000 f80c 	bl	8003760 <RCC_SetFlashLatency>
 8003748:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	bd90      	pop	{r4, r7, pc}
 8003752:	bf00      	nop
 8003754:	080059f0 	.word	0x080059f0
 8003758:	08005990 	.word	0x08005990
 800375c:	431bde83 	.word	0x431bde83

08003760 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003760:	b590      	push	{r4, r7, lr}
 8003762:	b093      	sub	sp, #76	; 0x4c
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800376a:	4b39      	ldr	r3, [pc, #228]	; (8003850 <RCC_SetFlashLatency+0xf0>)
 800376c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003772:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003776:	4a37      	ldr	r2, [pc, #220]	; (8003854 <RCC_SetFlashLatency+0xf4>)
 8003778:	f107 031c 	add.w	r3, r7, #28
 800377c:	ca07      	ldmia	r2, {r0, r1, r2}
 800377e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003782:	4b35      	ldr	r3, [pc, #212]	; (8003858 <RCC_SetFlashLatency+0xf8>)
 8003784:	f107 040c 	add.w	r4, r7, #12
 8003788:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800378a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800378e:	2300      	movs	r3, #0
 8003790:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003798:	d11c      	bne.n	80037d4 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800379a:	2300      	movs	r3, #0
 800379c:	643b      	str	r3, [r7, #64]	; 0x40
 800379e:	e015      	b.n	80037cc <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80037a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037a8:	4413      	add	r3, r2
 80037aa:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d808      	bhi.n	80037c6 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80037b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037bc:	4413      	add	r3, r2
 80037be:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80037c2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80037c4:	e022      	b.n	800380c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80037c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037c8:	3301      	adds	r3, #1
 80037ca:	643b      	str	r3, [r7, #64]	; 0x40
 80037cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d9e6      	bls.n	80037a0 <RCC_SetFlashLatency+0x40>
 80037d2:	e01b      	b.n	800380c <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d8:	e015      	b.n	8003806 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80037da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037e2:	4413      	add	r3, r2
 80037e4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d808      	bhi.n	8003800 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80037ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80037f6:	4413      	add	r3, r2
 80037f8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80037fc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80037fe:	e005      	b.n	800380c <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003802:	3301      	adds	r3, #1
 8003804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003808:	2b02      	cmp	r3, #2
 800380a:	d9e6      	bls.n	80037da <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800380c:	4b13      	ldr	r3, [pc, #76]	; (800385c <RCC_SetFlashLatency+0xfc>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f023 0207 	bic.w	r2, r3, #7
 8003814:	4911      	ldr	r1, [pc, #68]	; (800385c <RCC_SetFlashLatency+0xfc>)
 8003816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003818:	4313      	orrs	r3, r2
 800381a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800381c:	f7fd fc08 	bl	8001030 <HAL_GetTick>
 8003820:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003822:	e008      	b.n	8003836 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003824:	f7fd fc04 	bl	8001030 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e007      	b.n	8003846 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003836:	4b09      	ldr	r3, [pc, #36]	; (800385c <RCC_SetFlashLatency+0xfc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003840:	429a      	cmp	r2, r3
 8003842:	d1ef      	bne.n	8003824 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	374c      	adds	r7, #76	; 0x4c
 800384a:	46bd      	mov	sp, r7
 800384c:	bd90      	pop	{r4, r7, pc}
 800384e:	bf00      	nop
 8003850:	08005954 	.word	0x08005954
 8003854:	08005964 	.word	0x08005964
 8003858:	08005970 	.word	0x08005970
 800385c:	58004000 	.word	0x58004000

08003860 <LL_RCC_LSE_IsEnabled>:
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <LL_RCC_LSE_IsEnabled+0x18>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <LL_RCC_LSE_IsEnabled+0x1a>
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <LL_RCC_LSE_IsReady>:
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b02      	cmp	r3, #2
 8003896:	d101      	bne.n	800389c <LL_RCC_LSE_IsReady+0x18>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <LL_RCC_LSE_IsReady+0x1a>
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <LL_RCC_SetRFWKPClockSource>:
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80038b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <LL_RCC_SetSMPSClockSource>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80038dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	f023 0203 	bic.w	r2, r3, #3
 80038e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	624b      	str	r3, [r1, #36]	; 0x24
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <LL_RCC_SetSMPSPrescaler>:
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800390e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4313      	orrs	r3, r2
 8003916:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <LL_RCC_SetUSARTClockSource>:
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800392c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f023 0203 	bic.w	r2, r3, #3
 8003938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_RCC_SetLPUARTClockSource>:
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003960:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003964:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_RCC_SetI2CClockSource>:
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003984:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003988:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003994:	43db      	mvns	r3, r3
 8003996:	401a      	ands	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80039a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <LL_RCC_SetLPTIMClockSource>:
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	0c1b      	lsrs	r3, r3, #16
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	43db      	mvns	r3, r3
 80039ce:	401a      	ands	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	041b      	lsls	r3, r3, #16
 80039d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039d8:	4313      	orrs	r3, r2
 80039da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <LL_RCC_SetSAIClockSource>:
{
 80039ea:	b480      	push	{r7}
 80039ec:	b083      	sub	sp, #12
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80039f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_RCC_SetRNGClockSource>:
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003a2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <LL_RCC_SetCLK48ClockSource>:
{
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <LL_RCC_SetUSBClockSource>:
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f7ff ffe3 	bl	8003a42 <LL_RCC_SetCLK48ClockSource>
}
 8003a7c:	bf00      	nop
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <LL_RCC_SetADCClockSource>:
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <LL_RCC_SetRTCClockSource>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ac4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <LL_RCC_GetRTCClockSource>:
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <LL_RCC_ForceBackupDomainReset>:
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b0e:	bf00      	nop
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003b30:	bf00      	nop
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <LL_RCC_PLLSAI1_Enable>:
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003b3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b4c:	6013      	str	r3, [r2, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <LL_RCC_PLLSAI1_Disable>:
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <LL_RCC_PLLSAI1_IsReady>:
{
 8003b76:	b480      	push	{r7}
 8003b78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b88:	d101      	bne.n	8003b8e <LL_RCC_PLLSAI1_IsReady+0x18>
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr

08003b9a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b088      	sub	sp, #32
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d033      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bbe:	d00c      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003bc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bc4:	d802      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003bca:	e017      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003bcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bd0:	d017      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003bd2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003bd6:	d016      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003bd8:	e010      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bea:	e00d      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	3304      	adds	r3, #4
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 f947 	bl	8003e84 <RCCEx_PLLSAI1_ConfigNP>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003bfa:	e005      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	77fb      	strb	r3, [r7, #31]
        break;
 8003c00:	e002      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003c02:	bf00      	nop
 8003c04:	e000      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8003c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c08:	7ffb      	ldrb	r3, [r7, #31]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d105      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff fee9 	bl	80039ea <LL_RCC_SetSAIClockSource>
 8003c18:	e001      	b.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1a:	7ffb      	ldrb	r3, [r7, #31]
 8003c1c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d046      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003c2a:	f7ff ff57 	bl	8003adc <LL_RCC_GetRTCClockSource>
 8003c2e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d03c      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003c3a:	f7fe fc2d 	bl	8002498 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff ff31 	bl	8003ab0 <LL_RCC_SetRTCClockSource>
 8003c4e:	e02e      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003c5a:	f7ff ff4c 	bl	8003af6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003c5e:	f7ff ff5b 	bl	8003b18 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003c70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003c7a:	f7ff fdf1 	bl	8003860 <LL_RCC_LSE_IsEnabled>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d114      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c84:	f7fd f9d4 	bl	8001030 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c8c:	f7fd f9d0 	bl	8001030 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d902      	bls.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	77fb      	strb	r3, [r7, #31]
              break;
 8003ca2:	e004      	b.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003ca4:	f7ff fdee 	bl	8003884 <LL_RCC_LSE_IsReady>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d1ee      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003cae:	7ffb      	ldrb	r3, [r7, #31]
 8003cb0:	77bb      	strb	r3, [r7, #30]
 8003cb2:	e001      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cb4:	7ffb      	ldrb	r3, [r7, #31]
 8003cb6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f7ff fe2b 	bl	8003924 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fe36 	bl	8003950 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d004      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fe5e 	bl	80039b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d004      	beq.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fe53 	bl	80039b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0304 	and.w	r3, r3, #4
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d004      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fe2b 	bl	800397c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fe20 	bl	800397c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d022      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fe8e 	bl	8003a6e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d5a:	d107      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d6a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d74:	d10b      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f8dd 	bl	8003f3a <RCCEx_PLLSAI1_ConfigNQ>
 8003d80:	4603      	mov	r3, r0
 8003d82:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003d84:	7ffb      	ldrb	r3, [r7, #31]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8003d8a:	7ffb      	ldrb	r3, [r7, #31]
 8003d8c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d02b      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003da2:	d008      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dac:	d003      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d105      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fe2b 	bl	8003a16 <LL_RCC_SetRNGClockSource>
 8003dc0:	e00a      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f7ff fe22 	bl	8003a16 <LL_RCC_SetRNGClockSource>
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f7ff fe35 	bl	8003a42 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003de0:	d107      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d022      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff fe3e 	bl	8003a84 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e10:	d107      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e20:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e2a:	d10b      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4618      	mov	r0, r3
 8003e32:	f000 f8dd 	bl	8003ff0 <RCCEx_PLLSAI1_ConfigNR>
 8003e36:	4603      	mov	r3, r0
 8003e38:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8003e3a:	7ffb      	ldrb	r3, [r7, #31]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8003e40:	7ffb      	ldrb	r3, [r7, #31]
 8003e42:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d004      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff fd27 	bl	80038a8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d009      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff fd46 	bl	80038fc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fd2d 	bl	80038d4 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8003e7a:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3720      	adds	r7, #32
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003e90:	f7ff fe62 	bl	8003b58 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e94:	f7fd f8cc 	bl	8001030 <HAL_GetTick>
 8003e98:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003e9a:	e009      	b.n	8003eb0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e9c:	f7fd f8c8 	bl	8001030 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d902      	bls.n	8003eb0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	73fb      	strb	r3, [r7, #15]
      break;
 8003eae:	e004      	b.n	8003eba <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003eb0:	f7ff fe61 	bl	8003b76 <LL_RCC_PLLSAI1_IsReady>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d137      	bne.n	8003f30 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eea:	4313      	orrs	r3, r2
 8003eec:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003eee:	f7ff fe24 	bl	8003b3a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef2:	f7fd f89d 	bl	8001030 <HAL_GetTick>
 8003ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003ef8:	e009      	b.n	8003f0e <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003efa:	f7fd f899 	bl	8001030 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d902      	bls.n	8003f0e <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	73fb      	strb	r3, [r7, #15]
        break;
 8003f0c:	e004      	b.n	8003f18 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003f0e:	f7ff fe32 	bl	8003b76 <LL_RCC_PLLSAI1_IsReady>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d1f0      	bne.n	8003efa <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d108      	bne.n	8003f30 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f22:	691a      	ldr	r2, [r3, #16]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f42:	2300      	movs	r3, #0
 8003f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003f46:	f7ff fe07 	bl	8003b58 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f4a:	f7fd f871 	bl	8001030 <HAL_GetTick>
 8003f4e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f50:	e009      	b.n	8003f66 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f52:	f7fd f86d 	bl	8001030 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d902      	bls.n	8003f66 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	73fb      	strb	r3, [r7, #15]
      break;
 8003f64:	e004      	b.n	8003f70 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f66:	f7ff fe06 	bl	8003b76 <LL_RCC_PLLSAI1_IsReady>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f0      	bne.n	8003f52 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8003f70:	7bfb      	ldrb	r3, [r7, #15]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d137      	bne.n	8003fe6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	021b      	lsls	r3, r3, #8
 8003f86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8003f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003fa4:	f7ff fdc9 	bl	8003b3a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa8:	f7fd f842 	bl	8001030 <HAL_GetTick>
 8003fac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003fae:	e009      	b.n	8003fc4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fb0:	f7fd f83e 	bl	8001030 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d902      	bls.n	8003fc4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	73fb      	strb	r3, [r7, #15]
        break;
 8003fc2:	e004      	b.n	8003fce <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003fc4:	f7ff fdd7 	bl	8003b76 <LL_RCC_PLLSAI1_IsReady>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d1f0      	bne.n	8003fb0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d108      	bne.n	8003fe6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003ffc:	f7ff fdac 	bl	8003b58 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004000:	f7fd f816 	bl	8001030 <HAL_GetTick>
 8004004:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004006:	e009      	b.n	800401c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004008:	f7fd f812 	bl	8001030 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d902      	bls.n	800401c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	73fb      	strb	r3, [r7, #15]
      break;
 800401a:	e004      	b.n	8004026 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800401c:	f7ff fdab 	bl	8003b76 <LL_RCC_PLLSAI1_IsReady>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004026:	7bfb      	ldrb	r3, [r7, #15]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d137      	bne.n	800409c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	021b      	lsls	r3, r3, #8
 800403c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004040:	4313      	orrs	r3, r2
 8004042:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004056:	4313      	orrs	r3, r2
 8004058:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800405a:	f7ff fd6e 	bl	8003b3a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405e:	f7fc ffe7 	bl	8001030 <HAL_GetTick>
 8004062:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004064:	e009      	b.n	800407a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004066:	f7fc ffe3 	bl	8001030 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	2b02      	cmp	r3, #2
 8004072:	d902      	bls.n	800407a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	73fb      	strb	r3, [r7, #15]
        break;
 8004078:	e004      	b.n	8004084 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800407a:	f7ff fd7c 	bl	8003b76 <LL_RCC_PLLSAI1_IsReady>
 800407e:	4603      	mov	r3, r0
 8004080:	2b01      	cmp	r3, #1
 8004082:	d1f0      	bne.n	8004066 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d108      	bne.n	800409c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800408a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408e:	691a      	ldr	r2, [r3, #16]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004098:	4313      	orrs	r3, r2
 800409a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800409c:	7bfb      	ldrb	r3, [r7, #15]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <LL_RCC_GetUSARTClockSource>:
{
 80040a6:	b480      	push	{r7}
 80040a8:	b083      	sub	sp, #12
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80040ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4013      	ands	r3, r2
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <LL_RCC_GetLPUARTClockSource>:
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80040ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4013      	ands	r3, r2
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d101      	bne.n	80040f8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e042      	b.n	800417e <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7fc fc6a 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2224      	movs	r2, #36	; 0x24
 8004114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 fa57 	bl	80045dc <UART_SetConfig>
 800412e:	4603      	mov	r3, r0
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e022      	b.n	800417e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	2b00      	cmp	r3, #0
 800413e:	d002      	beq.n	8004146 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fc59 	bl	80049f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004154:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004164:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f042 0201 	orr.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 fce0 	bl	8004b3c <UART_CheckIdleState>
 800417c:	4603      	mov	r3, r0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b08a      	sub	sp, #40	; 0x28
 800418a:	af02      	add	r7, sp, #8
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	4613      	mov	r3, r2
 8004194:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800419c:	2b20      	cmp	r3, #32
 800419e:	f040 8083 	bne.w	80042a8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_UART_Transmit+0x28>
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e07b      	b.n	80042aa <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_UART_Transmit+0x3a>
 80041bc:	2302      	movs	r3, #2
 80041be:	e074      	b.n	80042aa <HAL_UART_Transmit+0x124>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2221      	movs	r2, #33	; 0x21
 80041d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80041d8:	f7fc ff2a 	bl	8001030 <HAL_GetTick>
 80041dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	88fa      	ldrh	r2, [r7, #6]
 80041e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	88fa      	ldrh	r2, [r7, #6]
 80041ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f6:	d108      	bne.n	800420a <HAL_UART_Transmit+0x84>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	e003      	b.n	8004212 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800421a:	e02c      	b.n	8004276 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2200      	movs	r2, #0
 8004224:	2180      	movs	r1, #128	; 0x80
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 fcd0 	bl	8004bcc <UART_WaitOnFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e039      	b.n	80042aa <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800424a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	3302      	adds	r3, #2
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	e007      	b.n	8004264 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	781a      	ldrb	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	3301      	adds	r3, #1
 8004262:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1cc      	bne.n	800421c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	2200      	movs	r2, #0
 800428a:	2140      	movs	r1, #64	; 0x40
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 fc9d 	bl	8004bcc <UART_WaitOnFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e006      	b.n	80042aa <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2220      	movs	r2, #32
 80042a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80042a4:	2300      	movs	r3, #0
 80042a6:	e000      	b.n	80042aa <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80042a8:	2302      	movs	r3, #2
  }
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3720      	adds	r7, #32
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b088      	sub	sp, #32
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042d4:	69fa      	ldr	r2, [r7, #28]
 80042d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d118      	bne.n	8004316 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d013      	beq.n	8004316 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d104      	bne.n	8004302 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8145 	beq.w	8004596 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
      }
      return;
 8004314:	e13f      	b.n	8004596 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80e8 	beq.w	80044ee <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	4ba1      	ldr	r3, [pc, #644]	; (80045a8 <HAL_UART_IRQHandler+0x2f4>)
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d105      	bne.n	8004334 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4ba0      	ldr	r3, [pc, #640]	; (80045ac <HAL_UART_IRQHandler+0x2f8>)
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 80dd 	beq.w	80044ee <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d010      	beq.n	8004360 <HAL_UART_IRQHandler+0xac>
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00b      	beq.n	8004360 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2201      	movs	r2, #1
 800434e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004356:	f043 0201 	orr.w	r2, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d010      	beq.n	800438c <HAL_UART_IRQHandler+0xd8>
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00b      	beq.n	800438c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2202      	movs	r2, #2
 800437a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f043 0204 	orr.w	r2, r3, #4
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b00      	cmp	r3, #0
 8004394:	d010      	beq.n	80043b8 <HAL_UART_IRQHandler+0x104>
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00b      	beq.n	80043b8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2204      	movs	r2, #4
 80043a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f043 0202 	orr.w	r2, r3, #2
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d015      	beq.n	80043ee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	f003 0320 	and.w	r3, r3, #32
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4b76      	ldr	r3, [pc, #472]	; (80045a8 <HAL_UART_IRQHandler+0x2f4>)
 80043d0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00b      	beq.n	80043ee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2208      	movs	r2, #8
 80043dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f043 0208 	orr.w	r2, r3, #8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d011      	beq.n	800441c <HAL_UART_IRQHandler+0x168>
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00c      	beq.n	800441c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800440a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f043 0220 	orr.w	r2, r3, #32
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 80b9 	beq.w	800459a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d011      	beq.n	8004456 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d104      	bne.n	8004446 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d004      	beq.n	8004476 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004472:	2b00      	cmp	r3, #0
 8004474:	d031      	beq.n	80044da <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fc28 	bl	8004ccc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b40      	cmp	r3, #64	; 0x40
 8004488:	d123      	bne.n	80044d2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004498:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d013      	beq.n	80044ca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a6:	4a42      	ldr	r2, [pc, #264]	; (80045b0 <HAL_UART_IRQHandler+0x2fc>)
 80044a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fc ffb0 	bl	8001414 <HAL_DMA_Abort_IT>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d017      	beq.n	80044ea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80044c4:	4610      	mov	r0, r2
 80044c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c8:	e00f      	b.n	80044ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 f87c 	bl	80045c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d0:	e00b      	b.n	80044ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f878 	bl	80045c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d8:	e007      	b.n	80044ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f874 	bl	80045c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 80044e8:	e057      	b.n	800459a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ea:	bf00      	nop
    return;
 80044ec:	e055      	b.n	800459a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <HAL_UART_IRQHandler+0x260>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d008      	beq.n	8004514 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800450a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 fc30 	bl	8004d72 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004512:	e045      	b.n	80045a0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451a:	2b00      	cmp	r3, #0
 800451c:	d012      	beq.n	8004544 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004524:	2b00      	cmp	r3, #0
 8004526:	d104      	bne.n	8004532 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	2b00      	cmp	r3, #0
 8004538:	d031      	beq.n	800459e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
    }
    return;
 8004542:	e02c      	b.n	800459e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_UART_IRQHandler+0x2ac>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fbf0 	bl	8004d3e <UART_EndTransmit_IT>
    return;
 800455e:	e01f      	b.n	80045a0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d008      	beq.n	800457c <HAL_UART_IRQHandler+0x2c8>
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fc10 	bl	8004d9a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800457a:	e011      	b.n	80045a0 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00c      	beq.n	80045a0 <HAL_UART_IRQHandler+0x2ec>
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	da09      	bge.n	80045a0 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fbfa 	bl	8004d86 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004592:	bf00      	nop
 8004594:	e004      	b.n	80045a0 <HAL_UART_IRQHandler+0x2ec>
      return;
 8004596:	bf00      	nop
 8004598:	e002      	b.n	80045a0 <HAL_UART_IRQHandler+0x2ec>
    return;
 800459a:	bf00      	nop
 800459c:	e000      	b.n	80045a0 <HAL_UART_IRQHandler+0x2ec>
    return;
 800459e:	bf00      	nop
  }
}
 80045a0:	3720      	adds	r7, #32
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	10000001 	.word	0x10000001
 80045ac:	04000120 	.word	0x04000120
 80045b0:	08004d13 	.word	0x08004d13

080045b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045dc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80045e0:	b088      	sub	sp, #32
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	431a      	orrs	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004606:	69fa      	ldr	r2, [r7, #28]
 8004608:	4313      	orrs	r3, r2
 800460a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	4ba4      	ldr	r3, [pc, #656]	; (80048a4 <UART_SetConfig+0x2c8>)
 8004614:	4013      	ands	r3, r2
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6812      	ldr	r2, [r2, #0]
 800461a:	69f9      	ldr	r1, [r7, #28]
 800461c:	430b      	orrs	r3, r1
 800461e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a99      	ldr	r2, [pc, #612]	; (80048a8 <UART_SetConfig+0x2cc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d004      	beq.n	8004650 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	4313      	orrs	r3, r2
 800464e:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800465a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	69f9      	ldr	r1, [r7, #28]
 8004664:	430b      	orrs	r3, r1
 8004666:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	f023 010f 	bic.w	r1, r3, #15
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a8a      	ldr	r2, [pc, #552]	; (80048ac <UART_SetConfig+0x2d0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d121      	bne.n	80046cc <UART_SetConfig+0xf0>
 8004688:	2003      	movs	r0, #3
 800468a:	f7ff fd0c 	bl	80040a6 <LL_RCC_GetUSARTClockSource>
 800468e:	4603      	mov	r3, r0
 8004690:	2b03      	cmp	r3, #3
 8004692:	d817      	bhi.n	80046c4 <UART_SetConfig+0xe8>
 8004694:	a201      	add	r2, pc, #4	; (adr r2, 800469c <UART_SetConfig+0xc0>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	080046ad 	.word	0x080046ad
 80046a0:	080046b9 	.word	0x080046b9
 80046a4:	080046b3 	.word	0x080046b3
 80046a8:	080046bf 	.word	0x080046bf
 80046ac:	2301      	movs	r3, #1
 80046ae:	76fb      	strb	r3, [r7, #27]
 80046b0:	e038      	b.n	8004724 <UART_SetConfig+0x148>
 80046b2:	2302      	movs	r3, #2
 80046b4:	76fb      	strb	r3, [r7, #27]
 80046b6:	e035      	b.n	8004724 <UART_SetConfig+0x148>
 80046b8:	2304      	movs	r3, #4
 80046ba:	76fb      	strb	r3, [r7, #27]
 80046bc:	e032      	b.n	8004724 <UART_SetConfig+0x148>
 80046be:	2308      	movs	r3, #8
 80046c0:	76fb      	strb	r3, [r7, #27]
 80046c2:	e02f      	b.n	8004724 <UART_SetConfig+0x148>
 80046c4:	2310      	movs	r3, #16
 80046c6:	76fb      	strb	r3, [r7, #27]
 80046c8:	bf00      	nop
 80046ca:	e02b      	b.n	8004724 <UART_SetConfig+0x148>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a75      	ldr	r2, [pc, #468]	; (80048a8 <UART_SetConfig+0x2cc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d124      	bne.n	8004720 <UART_SetConfig+0x144>
 80046d6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80046da:	f7ff fcf4 	bl	80040c6 <LL_RCC_GetLPUARTClockSource>
 80046de:	4603      	mov	r3, r0
 80046e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046e4:	d012      	beq.n	800470c <UART_SetConfig+0x130>
 80046e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ea:	d802      	bhi.n	80046f2 <UART_SetConfig+0x116>
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d007      	beq.n	8004700 <UART_SetConfig+0x124>
 80046f0:	e012      	b.n	8004718 <UART_SetConfig+0x13c>
 80046f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046f6:	d006      	beq.n	8004706 <UART_SetConfig+0x12a>
 80046f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046fc:	d009      	beq.n	8004712 <UART_SetConfig+0x136>
 80046fe:	e00b      	b.n	8004718 <UART_SetConfig+0x13c>
 8004700:	2300      	movs	r3, #0
 8004702:	76fb      	strb	r3, [r7, #27]
 8004704:	e00e      	b.n	8004724 <UART_SetConfig+0x148>
 8004706:	2302      	movs	r3, #2
 8004708:	76fb      	strb	r3, [r7, #27]
 800470a:	e00b      	b.n	8004724 <UART_SetConfig+0x148>
 800470c:	2304      	movs	r3, #4
 800470e:	76fb      	strb	r3, [r7, #27]
 8004710:	e008      	b.n	8004724 <UART_SetConfig+0x148>
 8004712:	2308      	movs	r3, #8
 8004714:	76fb      	strb	r3, [r7, #27]
 8004716:	e005      	b.n	8004724 <UART_SetConfig+0x148>
 8004718:	2310      	movs	r3, #16
 800471a:	76fb      	strb	r3, [r7, #27]
 800471c:	bf00      	nop
 800471e:	e001      	b.n	8004724 <UART_SetConfig+0x148>
 8004720:	2310      	movs	r3, #16
 8004722:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a5f      	ldr	r2, [pc, #380]	; (80048a8 <UART_SetConfig+0x2cc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	f040 808e 	bne.w	800484c <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004730:	7efb      	ldrb	r3, [r7, #27]
 8004732:	2b08      	cmp	r3, #8
 8004734:	d823      	bhi.n	800477e <UART_SetConfig+0x1a2>
 8004736:	a201      	add	r2, pc, #4	; (adr r2, 800473c <UART_SetConfig+0x160>)
 8004738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473c:	08004761 	.word	0x08004761
 8004740:	0800477f 	.word	0x0800477f
 8004744:	08004769 	.word	0x08004769
 8004748:	0800477f 	.word	0x0800477f
 800474c:	0800476f 	.word	0x0800476f
 8004750:	0800477f 	.word	0x0800477f
 8004754:	0800477f 	.word	0x0800477f
 8004758:	0800477f 	.word	0x0800477f
 800475c:	08004777 	.word	0x08004777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004760:	f7fe ff9a 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8004764:	6178      	str	r0, [r7, #20]
        break;
 8004766:	e00f      	b.n	8004788 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004768:	4b51      	ldr	r3, [pc, #324]	; (80048b0 <UART_SetConfig+0x2d4>)
 800476a:	617b      	str	r3, [r7, #20]
        break;
 800476c:	e00c      	b.n	8004788 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476e:	f7fe ff15 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8004772:	6178      	str	r0, [r7, #20]
        break;
 8004774:	e008      	b.n	8004788 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800477a:	617b      	str	r3, [r7, #20]
        break;
 800477c:	e004      	b.n	8004788 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	76bb      	strb	r3, [r7, #26]
        break;
 8004786:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 811c 	beq.w	80049c8 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	4a47      	ldr	r2, [pc, #284]	; (80048b4 <UART_SetConfig+0x2d8>)
 8004796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800479a:	461a      	mov	r2, r3
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a2:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685a      	ldr	r2, [r3, #4]
 80047a8:	4613      	mov	r3, r2
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	4413      	add	r3, r2
 80047ae:	68ba      	ldr	r2, [r7, #8]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d305      	bcc.n	80047c0 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	429a      	cmp	r2, r3
 80047be:	d902      	bls.n	80047c6 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	76bb      	strb	r3, [r7, #26]
 80047c4:	e100      	b.n	80049c8 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f04f 0100 	mov.w	r1, #0
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	4a38      	ldr	r2, [pc, #224]	; (80048b4 <UART_SetConfig+0x2d8>)
 80047d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047d8:	b29b      	uxth	r3, r3
 80047da:	f04f 0400 	mov.w	r4, #0
 80047de:	461a      	mov	r2, r3
 80047e0:	4623      	mov	r3, r4
 80047e2:	f7fb fccb 	bl	800017c <__aeabi_uldivmod>
 80047e6:	4603      	mov	r3, r0
 80047e8:	460c      	mov	r4, r1
 80047ea:	4619      	mov	r1, r3
 80047ec:	4622      	mov	r2, r4
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	f04f 0400 	mov.w	r4, #0
 80047f6:	0214      	lsls	r4, r2, #8
 80047f8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80047fc:	020b      	lsls	r3, r1, #8
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6852      	ldr	r2, [r2, #4]
 8004802:	0852      	lsrs	r2, r2, #1
 8004804:	4611      	mov	r1, r2
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	eb13 0b01 	adds.w	fp, r3, r1
 800480e:	eb44 0c02 	adc.w	ip, r4, r2
 8004812:	4658      	mov	r0, fp
 8004814:	4661      	mov	r1, ip
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f04f 0400 	mov.w	r4, #0
 800481e:	461a      	mov	r2, r3
 8004820:	4623      	mov	r3, r4
 8004822:	f7fb fcab 	bl	800017c <__aeabi_uldivmod>
 8004826:	4603      	mov	r3, r0
 8004828:	460c      	mov	r4, r1
 800482a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004832:	d308      	bcc.n	8004846 <UART_SetConfig+0x26a>
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800483a:	d204      	bcs.n	8004846 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	60da      	str	r2, [r3, #12]
 8004844:	e0c0      	b.n	80049c8 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	76bb      	strb	r3, [r7, #26]
 800484a:	e0bd      	b.n	80049c8 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004854:	d169      	bne.n	800492a <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004856:	7efb      	ldrb	r3, [r7, #27]
 8004858:	3b01      	subs	r3, #1
 800485a:	2b07      	cmp	r3, #7
 800485c:	d82c      	bhi.n	80048b8 <UART_SetConfig+0x2dc>
 800485e:	a201      	add	r2, pc, #4	; (adr r2, 8004864 <UART_SetConfig+0x288>)
 8004860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004864:	08004885 	.word	0x08004885
 8004868:	0800488d 	.word	0x0800488d
 800486c:	080048b9 	.word	0x080048b9
 8004870:	08004893 	.word	0x08004893
 8004874:	080048b9 	.word	0x080048b9
 8004878:	080048b9 	.word	0x080048b9
 800487c:	080048b9 	.word	0x080048b9
 8004880:	0800489b 	.word	0x0800489b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004884:	f7fe ff1e 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 8004888:	6178      	str	r0, [r7, #20]
        break;
 800488a:	e01a      	b.n	80048c2 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800488c:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <UART_SetConfig+0x2d4>)
 800488e:	617b      	str	r3, [r7, #20]
        break;
 8004890:	e017      	b.n	80048c2 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004892:	f7fe fe83 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8004896:	6178      	str	r0, [r7, #20]
        break;
 8004898:	e013      	b.n	80048c2 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800489a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800489e:	617b      	str	r3, [r7, #20]
        break;
 80048a0:	e00f      	b.n	80048c2 <UART_SetConfig+0x2e6>
 80048a2:	bf00      	nop
 80048a4:	cfff69f3 	.word	0xcfff69f3
 80048a8:	40008000 	.word	0x40008000
 80048ac:	40013800 	.word	0x40013800
 80048b0:	00f42400 	.word	0x00f42400
 80048b4:	08005a30 	.word	0x08005a30
      default:
        pclk = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	76bb      	strb	r3, [r7, #26]
        break;
 80048c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d07f      	beq.n	80049c8 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	4a48      	ldr	r2, [pc, #288]	; (80049f0 <UART_SetConfig+0x414>)
 80048ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048d2:	461a      	mov	r2, r3
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048da:	005a      	lsls	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	441a      	add	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	2b0f      	cmp	r3, #15
 80048f4:	d916      	bls.n	8004924 <UART_SetConfig+0x348>
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048fc:	d212      	bcs.n	8004924 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	b29b      	uxth	r3, r3
 8004902:	f023 030f 	bic.w	r3, r3, #15
 8004906:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	b29b      	uxth	r3, r3
 800490e:	f003 0307 	and.w	r3, r3, #7
 8004912:	b29a      	uxth	r2, r3
 8004914:	89fb      	ldrh	r3, [r7, #14]
 8004916:	4313      	orrs	r3, r2
 8004918:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	89fa      	ldrh	r2, [r7, #14]
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	e051      	b.n	80049c8 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	76bb      	strb	r3, [r7, #26]
 8004928:	e04e      	b.n	80049c8 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 800492a:	7efb      	ldrb	r3, [r7, #27]
 800492c:	3b01      	subs	r3, #1
 800492e:	2b07      	cmp	r3, #7
 8004930:	d821      	bhi.n	8004976 <UART_SetConfig+0x39a>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <UART_SetConfig+0x35c>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	08004959 	.word	0x08004959
 800493c:	08004961 	.word	0x08004961
 8004940:	08004977 	.word	0x08004977
 8004944:	08004967 	.word	0x08004967
 8004948:	08004977 	.word	0x08004977
 800494c:	08004977 	.word	0x08004977
 8004950:	08004977 	.word	0x08004977
 8004954:	0800496f 	.word	0x0800496f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004958:	f7fe feb4 	bl	80036c4 <HAL_RCC_GetPCLK2Freq>
 800495c:	6178      	str	r0, [r7, #20]
        break;
 800495e:	e00f      	b.n	8004980 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004960:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <UART_SetConfig+0x418>)
 8004962:	617b      	str	r3, [r7, #20]
        break;
 8004964:	e00c      	b.n	8004980 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004966:	f7fe fe19 	bl	800359c <HAL_RCC_GetSysClockFreq>
 800496a:	6178      	str	r0, [r7, #20]
        break;
 800496c:	e008      	b.n	8004980 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800496e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004972:	617b      	str	r3, [r7, #20]
        break;
 8004974:	e004      	b.n	8004980 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	76bb      	strb	r3, [r7, #26]
        break;
 800497e:	bf00      	nop
    }

    if (pclk != 0U)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d020      	beq.n	80049c8 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	4a19      	ldr	r2, [pc, #100]	; (80049f0 <UART_SetConfig+0x414>)
 800498c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004990:	461a      	mov	r2, r3
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	fbb3 f2f2 	udiv	r2, r3, r2
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	085b      	lsrs	r3, r3, #1
 800499e:	441a      	add	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	2b0f      	cmp	r3, #15
 80049b0:	d908      	bls.n	80049c4 <UART_SetConfig+0x3e8>
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d204      	bcs.n	80049c4 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	e001      	b.n	80049c8 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80049e4:	7ebb      	ldrb	r3, [r7, #26]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80049f0:	08005a30 	.word	0x08005a30
 80049f4:	00f42400 	.word	0x00f42400

080049f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01a      	beq.n	8004b0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004af6:	d10a      	bne.n	8004b0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	605a      	str	r2, [r3, #4]
  }
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004b4c:	f7fc fa70 	bl	8001030 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0308 	and.w	r3, r3, #8
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d10e      	bne.n	8004b7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f82c 	bl	8004bcc <UART_WaitOnFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e022      	b.n	8004bc4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d10e      	bne.n	8004baa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f816 	bl	8004bcc <UART_WaitOnFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e00c      	b.n	8004bc4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2220      	movs	r2, #32
 8004bae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bdc:	e062      	b.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d05e      	beq.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be6:	f7fc fa23 	bl	8001030 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d302      	bcc.n	8004bfc <UART_WaitOnFlagUntilTimeout+0x30>
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d11d      	bne.n	8004c38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c0a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689a      	ldr	r2, [r3, #8]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e045      	b.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d02e      	beq.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	69db      	ldr	r3, [r3, #28]
 8004c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c54:	d126      	bne.n	8004ca4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c5e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c6e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689a      	ldr	r2, [r3, #8]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e00f      	b.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	4013      	ands	r3, r2
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	461a      	mov	r2, r3
 8004cbc:	79fb      	ldrb	r3, [r7, #7]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d08d      	beq.n	8004bde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ce2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7ff fc49 	bl	80045c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b082      	sub	sp, #8
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d54:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2220      	movs	r2, #32
 8004d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff fc25 	bl	80045b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}

08004d72 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b083      	sub	sp, #12
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b085      	sub	sp, #20
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e027      	b.n	8004e14 <HAL_UARTEx_DisableFifoMode+0x66>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2224      	movs	r2, #36	; 0x24
 8004dd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f022 0201 	bic.w	r2, r2, #1
 8004dea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004df2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e12:	2300      	movs	r3, #0
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e02d      	b.n	8004e94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2224      	movs	r2, #36	; 0x24
 8004e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f022 0201 	bic.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f84f 	bl	8004f18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d101      	bne.n	8004eb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	e02d      	b.n	8004f10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2224      	movs	r2, #36	; 0x24
 8004ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0201 	bic.w	r2, r2, #1
 8004eda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f811 	bl	8004f18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	; 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004f20:	4a2f      	ldr	r2, [pc, #188]	; (8004fe0 <UARTEx_SetNbDataToProcess+0xc8>)
 8004f22:	f107 0314 	add.w	r3, r7, #20
 8004f26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f2a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004f2e:	4a2d      	ldr	r2, [pc, #180]	; (8004fe4 <UARTEx_SetNbDataToProcess+0xcc>)
 8004f30:	f107 030c 	add.w	r3, r7, #12
 8004f34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f38:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d108      	bne.n	8004f56 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f54:	e03d      	b.n	8004fd2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f56:	2308      	movs	r3, #8
 8004f58:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f5a:	2308      	movs	r3, #8
 8004f5c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	0e5b      	lsrs	r3, r3, #25
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	0f5b      	lsrs	r3, r3, #29
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	f003 0307 	and.w	r3, r3, #7
 8004f7c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004f7e:	7fbb      	ldrb	r3, [r7, #30]
 8004f80:	7f3a      	ldrb	r2, [r7, #28]
 8004f82:	f107 0120 	add.w	r1, r7, #32
 8004f86:	440a      	add	r2, r1
 8004f88:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004f8c:	fb02 f303 	mul.w	r3, r2, r3
 8004f90:	7f3a      	ldrb	r2, [r7, #28]
 8004f92:	f107 0120 	add.w	r1, r7, #32
 8004f96:	440a      	add	r2, r1
 8004f98:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004f9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fa0:	b29a      	uxth	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004fa8:	7ffb      	ldrb	r3, [r7, #31]
 8004faa:	7f7a      	ldrb	r2, [r7, #29]
 8004fac:	f107 0120 	add.w	r1, r7, #32
 8004fb0:	440a      	add	r2, r1
 8004fb2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	7f7a      	ldrb	r2, [r7, #29]
 8004fbc:	f107 0120 	add.w	r1, r7, #32
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004fc6:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004fd2:	bf00      	nop
 8004fd4:	3724      	adds	r7, #36	; 0x24
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	08005980 	.word	0x08005980
 8004fe4:	08005988 	.word	0x08005988

08004fe8 <__errno>:
 8004fe8:	4b01      	ldr	r3, [pc, #4]	; (8004ff0 <__errno+0x8>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	20000020 	.word	0x20000020

08004ff4 <__libc_init_array>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	4e0d      	ldr	r6, [pc, #52]	; (800502c <__libc_init_array+0x38>)
 8004ff8:	4c0d      	ldr	r4, [pc, #52]	; (8005030 <__libc_init_array+0x3c>)
 8004ffa:	1ba4      	subs	r4, r4, r6
 8004ffc:	10a4      	asrs	r4, r4, #2
 8004ffe:	2500      	movs	r5, #0
 8005000:	42a5      	cmp	r5, r4
 8005002:	d109      	bne.n	8005018 <__libc_init_array+0x24>
 8005004:	4e0b      	ldr	r6, [pc, #44]	; (8005034 <__libc_init_array+0x40>)
 8005006:	4c0c      	ldr	r4, [pc, #48]	; (8005038 <__libc_init_array+0x44>)
 8005008:	f000 fc88 	bl	800591c <_init>
 800500c:	1ba4      	subs	r4, r4, r6
 800500e:	10a4      	asrs	r4, r4, #2
 8005010:	2500      	movs	r5, #0
 8005012:	42a5      	cmp	r5, r4
 8005014:	d105      	bne.n	8005022 <__libc_init_array+0x2e>
 8005016:	bd70      	pop	{r4, r5, r6, pc}
 8005018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800501c:	4798      	blx	r3
 800501e:	3501      	adds	r5, #1
 8005020:	e7ee      	b.n	8005000 <__libc_init_array+0xc>
 8005022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005026:	4798      	blx	r3
 8005028:	3501      	adds	r5, #1
 800502a:	e7f2      	b.n	8005012 <__libc_init_array+0x1e>
 800502c:	08005ab4 	.word	0x08005ab4
 8005030:	08005ab4 	.word	0x08005ab4
 8005034:	08005ab4 	.word	0x08005ab4
 8005038:	08005ab8 	.word	0x08005ab8

0800503c <memset>:
 800503c:	4402      	add	r2, r0
 800503e:	4603      	mov	r3, r0
 8005040:	4293      	cmp	r3, r2
 8005042:	d100      	bne.n	8005046 <memset+0xa>
 8005044:	4770      	bx	lr
 8005046:	f803 1b01 	strb.w	r1, [r3], #1
 800504a:	e7f9      	b.n	8005040 <memset+0x4>

0800504c <_puts_r>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	460e      	mov	r6, r1
 8005050:	4605      	mov	r5, r0
 8005052:	b118      	cbz	r0, 800505c <_puts_r+0x10>
 8005054:	6983      	ldr	r3, [r0, #24]
 8005056:	b90b      	cbnz	r3, 800505c <_puts_r+0x10>
 8005058:	f000 fa0c 	bl	8005474 <__sinit>
 800505c:	69ab      	ldr	r3, [r5, #24]
 800505e:	68ac      	ldr	r4, [r5, #8]
 8005060:	b913      	cbnz	r3, 8005068 <_puts_r+0x1c>
 8005062:	4628      	mov	r0, r5
 8005064:	f000 fa06 	bl	8005474 <__sinit>
 8005068:	4b23      	ldr	r3, [pc, #140]	; (80050f8 <_puts_r+0xac>)
 800506a:	429c      	cmp	r4, r3
 800506c:	d117      	bne.n	800509e <_puts_r+0x52>
 800506e:	686c      	ldr	r4, [r5, #4]
 8005070:	89a3      	ldrh	r3, [r4, #12]
 8005072:	071b      	lsls	r3, r3, #28
 8005074:	d51d      	bpl.n	80050b2 <_puts_r+0x66>
 8005076:	6923      	ldr	r3, [r4, #16]
 8005078:	b1db      	cbz	r3, 80050b2 <_puts_r+0x66>
 800507a:	3e01      	subs	r6, #1
 800507c:	68a3      	ldr	r3, [r4, #8]
 800507e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005082:	3b01      	subs	r3, #1
 8005084:	60a3      	str	r3, [r4, #8]
 8005086:	b9e9      	cbnz	r1, 80050c4 <_puts_r+0x78>
 8005088:	2b00      	cmp	r3, #0
 800508a:	da2e      	bge.n	80050ea <_puts_r+0x9e>
 800508c:	4622      	mov	r2, r4
 800508e:	210a      	movs	r1, #10
 8005090:	4628      	mov	r0, r5
 8005092:	f000 f83f 	bl	8005114 <__swbuf_r>
 8005096:	3001      	adds	r0, #1
 8005098:	d011      	beq.n	80050be <_puts_r+0x72>
 800509a:	200a      	movs	r0, #10
 800509c:	e011      	b.n	80050c2 <_puts_r+0x76>
 800509e:	4b17      	ldr	r3, [pc, #92]	; (80050fc <_puts_r+0xb0>)
 80050a0:	429c      	cmp	r4, r3
 80050a2:	d101      	bne.n	80050a8 <_puts_r+0x5c>
 80050a4:	68ac      	ldr	r4, [r5, #8]
 80050a6:	e7e3      	b.n	8005070 <_puts_r+0x24>
 80050a8:	4b15      	ldr	r3, [pc, #84]	; (8005100 <_puts_r+0xb4>)
 80050aa:	429c      	cmp	r4, r3
 80050ac:	bf08      	it	eq
 80050ae:	68ec      	ldreq	r4, [r5, #12]
 80050b0:	e7de      	b.n	8005070 <_puts_r+0x24>
 80050b2:	4621      	mov	r1, r4
 80050b4:	4628      	mov	r0, r5
 80050b6:	f000 f87f 	bl	80051b8 <__swsetup_r>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d0dd      	beq.n	800507a <_puts_r+0x2e>
 80050be:	f04f 30ff 	mov.w	r0, #4294967295
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	da04      	bge.n	80050d2 <_puts_r+0x86>
 80050c8:	69a2      	ldr	r2, [r4, #24]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	dc06      	bgt.n	80050dc <_puts_r+0x90>
 80050ce:	290a      	cmp	r1, #10
 80050d0:	d004      	beq.n	80050dc <_puts_r+0x90>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	1c5a      	adds	r2, r3, #1
 80050d6:	6022      	str	r2, [r4, #0]
 80050d8:	7019      	strb	r1, [r3, #0]
 80050da:	e7cf      	b.n	800507c <_puts_r+0x30>
 80050dc:	4622      	mov	r2, r4
 80050de:	4628      	mov	r0, r5
 80050e0:	f000 f818 	bl	8005114 <__swbuf_r>
 80050e4:	3001      	adds	r0, #1
 80050e6:	d1c9      	bne.n	800507c <_puts_r+0x30>
 80050e8:	e7e9      	b.n	80050be <_puts_r+0x72>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	200a      	movs	r0, #10
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	6022      	str	r2, [r4, #0]
 80050f2:	7018      	strb	r0, [r3, #0]
 80050f4:	e7e5      	b.n	80050c2 <_puts_r+0x76>
 80050f6:	bf00      	nop
 80050f8:	08005a6c 	.word	0x08005a6c
 80050fc:	08005a8c 	.word	0x08005a8c
 8005100:	08005a4c 	.word	0x08005a4c

08005104 <puts>:
 8005104:	4b02      	ldr	r3, [pc, #8]	; (8005110 <puts+0xc>)
 8005106:	4601      	mov	r1, r0
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	f7ff bf9f 	b.w	800504c <_puts_r>
 800510e:	bf00      	nop
 8005110:	20000020 	.word	0x20000020

08005114 <__swbuf_r>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	460e      	mov	r6, r1
 8005118:	4614      	mov	r4, r2
 800511a:	4605      	mov	r5, r0
 800511c:	b118      	cbz	r0, 8005126 <__swbuf_r+0x12>
 800511e:	6983      	ldr	r3, [r0, #24]
 8005120:	b90b      	cbnz	r3, 8005126 <__swbuf_r+0x12>
 8005122:	f000 f9a7 	bl	8005474 <__sinit>
 8005126:	4b21      	ldr	r3, [pc, #132]	; (80051ac <__swbuf_r+0x98>)
 8005128:	429c      	cmp	r4, r3
 800512a:	d12a      	bne.n	8005182 <__swbuf_r+0x6e>
 800512c:	686c      	ldr	r4, [r5, #4]
 800512e:	69a3      	ldr	r3, [r4, #24]
 8005130:	60a3      	str	r3, [r4, #8]
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	071a      	lsls	r2, r3, #28
 8005136:	d52e      	bpl.n	8005196 <__swbuf_r+0x82>
 8005138:	6923      	ldr	r3, [r4, #16]
 800513a:	b363      	cbz	r3, 8005196 <__swbuf_r+0x82>
 800513c:	6923      	ldr	r3, [r4, #16]
 800513e:	6820      	ldr	r0, [r4, #0]
 8005140:	1ac0      	subs	r0, r0, r3
 8005142:	6963      	ldr	r3, [r4, #20]
 8005144:	b2f6      	uxtb	r6, r6
 8005146:	4283      	cmp	r3, r0
 8005148:	4637      	mov	r7, r6
 800514a:	dc04      	bgt.n	8005156 <__swbuf_r+0x42>
 800514c:	4621      	mov	r1, r4
 800514e:	4628      	mov	r0, r5
 8005150:	f000 f926 	bl	80053a0 <_fflush_r>
 8005154:	bb28      	cbnz	r0, 80051a2 <__swbuf_r+0x8e>
 8005156:	68a3      	ldr	r3, [r4, #8]
 8005158:	3b01      	subs	r3, #1
 800515a:	60a3      	str	r3, [r4, #8]
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	6022      	str	r2, [r4, #0]
 8005162:	701e      	strb	r6, [r3, #0]
 8005164:	6963      	ldr	r3, [r4, #20]
 8005166:	3001      	adds	r0, #1
 8005168:	4283      	cmp	r3, r0
 800516a:	d004      	beq.n	8005176 <__swbuf_r+0x62>
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	07db      	lsls	r3, r3, #31
 8005170:	d519      	bpl.n	80051a6 <__swbuf_r+0x92>
 8005172:	2e0a      	cmp	r6, #10
 8005174:	d117      	bne.n	80051a6 <__swbuf_r+0x92>
 8005176:	4621      	mov	r1, r4
 8005178:	4628      	mov	r0, r5
 800517a:	f000 f911 	bl	80053a0 <_fflush_r>
 800517e:	b190      	cbz	r0, 80051a6 <__swbuf_r+0x92>
 8005180:	e00f      	b.n	80051a2 <__swbuf_r+0x8e>
 8005182:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <__swbuf_r+0x9c>)
 8005184:	429c      	cmp	r4, r3
 8005186:	d101      	bne.n	800518c <__swbuf_r+0x78>
 8005188:	68ac      	ldr	r4, [r5, #8]
 800518a:	e7d0      	b.n	800512e <__swbuf_r+0x1a>
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <__swbuf_r+0xa0>)
 800518e:	429c      	cmp	r4, r3
 8005190:	bf08      	it	eq
 8005192:	68ec      	ldreq	r4, [r5, #12]
 8005194:	e7cb      	b.n	800512e <__swbuf_r+0x1a>
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 f80d 	bl	80051b8 <__swsetup_r>
 800519e:	2800      	cmp	r0, #0
 80051a0:	d0cc      	beq.n	800513c <__swbuf_r+0x28>
 80051a2:	f04f 37ff 	mov.w	r7, #4294967295
 80051a6:	4638      	mov	r0, r7
 80051a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051aa:	bf00      	nop
 80051ac:	08005a6c 	.word	0x08005a6c
 80051b0:	08005a8c 	.word	0x08005a8c
 80051b4:	08005a4c 	.word	0x08005a4c

080051b8 <__swsetup_r>:
 80051b8:	4b32      	ldr	r3, [pc, #200]	; (8005284 <__swsetup_r+0xcc>)
 80051ba:	b570      	push	{r4, r5, r6, lr}
 80051bc:	681d      	ldr	r5, [r3, #0]
 80051be:	4606      	mov	r6, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	b125      	cbz	r5, 80051ce <__swsetup_r+0x16>
 80051c4:	69ab      	ldr	r3, [r5, #24]
 80051c6:	b913      	cbnz	r3, 80051ce <__swsetup_r+0x16>
 80051c8:	4628      	mov	r0, r5
 80051ca:	f000 f953 	bl	8005474 <__sinit>
 80051ce:	4b2e      	ldr	r3, [pc, #184]	; (8005288 <__swsetup_r+0xd0>)
 80051d0:	429c      	cmp	r4, r3
 80051d2:	d10f      	bne.n	80051f4 <__swsetup_r+0x3c>
 80051d4:	686c      	ldr	r4, [r5, #4]
 80051d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051da:	b29a      	uxth	r2, r3
 80051dc:	0715      	lsls	r5, r2, #28
 80051de:	d42c      	bmi.n	800523a <__swsetup_r+0x82>
 80051e0:	06d0      	lsls	r0, r2, #27
 80051e2:	d411      	bmi.n	8005208 <__swsetup_r+0x50>
 80051e4:	2209      	movs	r2, #9
 80051e6:	6032      	str	r2, [r6, #0]
 80051e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ec:	81a3      	strh	r3, [r4, #12]
 80051ee:	f04f 30ff 	mov.w	r0, #4294967295
 80051f2:	e03e      	b.n	8005272 <__swsetup_r+0xba>
 80051f4:	4b25      	ldr	r3, [pc, #148]	; (800528c <__swsetup_r+0xd4>)
 80051f6:	429c      	cmp	r4, r3
 80051f8:	d101      	bne.n	80051fe <__swsetup_r+0x46>
 80051fa:	68ac      	ldr	r4, [r5, #8]
 80051fc:	e7eb      	b.n	80051d6 <__swsetup_r+0x1e>
 80051fe:	4b24      	ldr	r3, [pc, #144]	; (8005290 <__swsetup_r+0xd8>)
 8005200:	429c      	cmp	r4, r3
 8005202:	bf08      	it	eq
 8005204:	68ec      	ldreq	r4, [r5, #12]
 8005206:	e7e6      	b.n	80051d6 <__swsetup_r+0x1e>
 8005208:	0751      	lsls	r1, r2, #29
 800520a:	d512      	bpl.n	8005232 <__swsetup_r+0x7a>
 800520c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800520e:	b141      	cbz	r1, 8005222 <__swsetup_r+0x6a>
 8005210:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005214:	4299      	cmp	r1, r3
 8005216:	d002      	beq.n	800521e <__swsetup_r+0x66>
 8005218:	4630      	mov	r0, r6
 800521a:	f000 fa19 	bl	8005650 <_free_r>
 800521e:	2300      	movs	r3, #0
 8005220:	6363      	str	r3, [r4, #52]	; 0x34
 8005222:	89a3      	ldrh	r3, [r4, #12]
 8005224:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005228:	81a3      	strh	r3, [r4, #12]
 800522a:	2300      	movs	r3, #0
 800522c:	6063      	str	r3, [r4, #4]
 800522e:	6923      	ldr	r3, [r4, #16]
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	f043 0308 	orr.w	r3, r3, #8
 8005238:	81a3      	strh	r3, [r4, #12]
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	b94b      	cbnz	r3, 8005252 <__swsetup_r+0x9a>
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005248:	d003      	beq.n	8005252 <__swsetup_r+0x9a>
 800524a:	4621      	mov	r1, r4
 800524c:	4630      	mov	r0, r6
 800524e:	f000 f9bf 	bl	80055d0 <__smakebuf_r>
 8005252:	89a2      	ldrh	r2, [r4, #12]
 8005254:	f012 0301 	ands.w	r3, r2, #1
 8005258:	d00c      	beq.n	8005274 <__swsetup_r+0xbc>
 800525a:	2300      	movs	r3, #0
 800525c:	60a3      	str	r3, [r4, #8]
 800525e:	6963      	ldr	r3, [r4, #20]
 8005260:	425b      	negs	r3, r3
 8005262:	61a3      	str	r3, [r4, #24]
 8005264:	6923      	ldr	r3, [r4, #16]
 8005266:	b953      	cbnz	r3, 800527e <__swsetup_r+0xc6>
 8005268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800526c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005270:	d1ba      	bne.n	80051e8 <__swsetup_r+0x30>
 8005272:	bd70      	pop	{r4, r5, r6, pc}
 8005274:	0792      	lsls	r2, r2, #30
 8005276:	bf58      	it	pl
 8005278:	6963      	ldrpl	r3, [r4, #20]
 800527a:	60a3      	str	r3, [r4, #8]
 800527c:	e7f2      	b.n	8005264 <__swsetup_r+0xac>
 800527e:	2000      	movs	r0, #0
 8005280:	e7f7      	b.n	8005272 <__swsetup_r+0xba>
 8005282:	bf00      	nop
 8005284:	20000020 	.word	0x20000020
 8005288:	08005a6c 	.word	0x08005a6c
 800528c:	08005a8c 	.word	0x08005a8c
 8005290:	08005a4c 	.word	0x08005a4c

08005294 <__sflush_r>:
 8005294:	898a      	ldrh	r2, [r1, #12]
 8005296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800529a:	4605      	mov	r5, r0
 800529c:	0710      	lsls	r0, r2, #28
 800529e:	460c      	mov	r4, r1
 80052a0:	d458      	bmi.n	8005354 <__sflush_r+0xc0>
 80052a2:	684b      	ldr	r3, [r1, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	dc05      	bgt.n	80052b4 <__sflush_r+0x20>
 80052a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	dc02      	bgt.n	80052b4 <__sflush_r+0x20>
 80052ae:	2000      	movs	r0, #0
 80052b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	d0f9      	beq.n	80052ae <__sflush_r+0x1a>
 80052ba:	2300      	movs	r3, #0
 80052bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052c0:	682f      	ldr	r7, [r5, #0]
 80052c2:	6a21      	ldr	r1, [r4, #32]
 80052c4:	602b      	str	r3, [r5, #0]
 80052c6:	d032      	beq.n	800532e <__sflush_r+0x9a>
 80052c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	075a      	lsls	r2, r3, #29
 80052ce:	d505      	bpl.n	80052dc <__sflush_r+0x48>
 80052d0:	6863      	ldr	r3, [r4, #4]
 80052d2:	1ac0      	subs	r0, r0, r3
 80052d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052d6:	b10b      	cbz	r3, 80052dc <__sflush_r+0x48>
 80052d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052da:	1ac0      	subs	r0, r0, r3
 80052dc:	2300      	movs	r3, #0
 80052de:	4602      	mov	r2, r0
 80052e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052e2:	6a21      	ldr	r1, [r4, #32]
 80052e4:	4628      	mov	r0, r5
 80052e6:	47b0      	blx	r6
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	d106      	bne.n	80052fc <__sflush_r+0x68>
 80052ee:	6829      	ldr	r1, [r5, #0]
 80052f0:	291d      	cmp	r1, #29
 80052f2:	d848      	bhi.n	8005386 <__sflush_r+0xf2>
 80052f4:	4a29      	ldr	r2, [pc, #164]	; (800539c <__sflush_r+0x108>)
 80052f6:	40ca      	lsrs	r2, r1
 80052f8:	07d6      	lsls	r6, r2, #31
 80052fa:	d544      	bpl.n	8005386 <__sflush_r+0xf2>
 80052fc:	2200      	movs	r2, #0
 80052fe:	6062      	str	r2, [r4, #4]
 8005300:	04d9      	lsls	r1, r3, #19
 8005302:	6922      	ldr	r2, [r4, #16]
 8005304:	6022      	str	r2, [r4, #0]
 8005306:	d504      	bpl.n	8005312 <__sflush_r+0x7e>
 8005308:	1c42      	adds	r2, r0, #1
 800530a:	d101      	bne.n	8005310 <__sflush_r+0x7c>
 800530c:	682b      	ldr	r3, [r5, #0]
 800530e:	b903      	cbnz	r3, 8005312 <__sflush_r+0x7e>
 8005310:	6560      	str	r0, [r4, #84]	; 0x54
 8005312:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005314:	602f      	str	r7, [r5, #0]
 8005316:	2900      	cmp	r1, #0
 8005318:	d0c9      	beq.n	80052ae <__sflush_r+0x1a>
 800531a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800531e:	4299      	cmp	r1, r3
 8005320:	d002      	beq.n	8005328 <__sflush_r+0x94>
 8005322:	4628      	mov	r0, r5
 8005324:	f000 f994 	bl	8005650 <_free_r>
 8005328:	2000      	movs	r0, #0
 800532a:	6360      	str	r0, [r4, #52]	; 0x34
 800532c:	e7c0      	b.n	80052b0 <__sflush_r+0x1c>
 800532e:	2301      	movs	r3, #1
 8005330:	4628      	mov	r0, r5
 8005332:	47b0      	blx	r6
 8005334:	1c41      	adds	r1, r0, #1
 8005336:	d1c8      	bne.n	80052ca <__sflush_r+0x36>
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0c5      	beq.n	80052ca <__sflush_r+0x36>
 800533e:	2b1d      	cmp	r3, #29
 8005340:	d001      	beq.n	8005346 <__sflush_r+0xb2>
 8005342:	2b16      	cmp	r3, #22
 8005344:	d101      	bne.n	800534a <__sflush_r+0xb6>
 8005346:	602f      	str	r7, [r5, #0]
 8005348:	e7b1      	b.n	80052ae <__sflush_r+0x1a>
 800534a:	89a3      	ldrh	r3, [r4, #12]
 800534c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005350:	81a3      	strh	r3, [r4, #12]
 8005352:	e7ad      	b.n	80052b0 <__sflush_r+0x1c>
 8005354:	690f      	ldr	r7, [r1, #16]
 8005356:	2f00      	cmp	r7, #0
 8005358:	d0a9      	beq.n	80052ae <__sflush_r+0x1a>
 800535a:	0793      	lsls	r3, r2, #30
 800535c:	680e      	ldr	r6, [r1, #0]
 800535e:	bf08      	it	eq
 8005360:	694b      	ldreq	r3, [r1, #20]
 8005362:	600f      	str	r7, [r1, #0]
 8005364:	bf18      	it	ne
 8005366:	2300      	movne	r3, #0
 8005368:	eba6 0807 	sub.w	r8, r6, r7
 800536c:	608b      	str	r3, [r1, #8]
 800536e:	f1b8 0f00 	cmp.w	r8, #0
 8005372:	dd9c      	ble.n	80052ae <__sflush_r+0x1a>
 8005374:	4643      	mov	r3, r8
 8005376:	463a      	mov	r2, r7
 8005378:	6a21      	ldr	r1, [r4, #32]
 800537a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800537c:	4628      	mov	r0, r5
 800537e:	47b0      	blx	r6
 8005380:	2800      	cmp	r0, #0
 8005382:	dc06      	bgt.n	8005392 <__sflush_r+0xfe>
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800538a:	81a3      	strh	r3, [r4, #12]
 800538c:	f04f 30ff 	mov.w	r0, #4294967295
 8005390:	e78e      	b.n	80052b0 <__sflush_r+0x1c>
 8005392:	4407      	add	r7, r0
 8005394:	eba8 0800 	sub.w	r8, r8, r0
 8005398:	e7e9      	b.n	800536e <__sflush_r+0xda>
 800539a:	bf00      	nop
 800539c:	20400001 	.word	0x20400001

080053a0 <_fflush_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	690b      	ldr	r3, [r1, #16]
 80053a4:	4605      	mov	r5, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	b1db      	cbz	r3, 80053e2 <_fflush_r+0x42>
 80053aa:	b118      	cbz	r0, 80053b4 <_fflush_r+0x14>
 80053ac:	6983      	ldr	r3, [r0, #24]
 80053ae:	b90b      	cbnz	r3, 80053b4 <_fflush_r+0x14>
 80053b0:	f000 f860 	bl	8005474 <__sinit>
 80053b4:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <_fflush_r+0x48>)
 80053b6:	429c      	cmp	r4, r3
 80053b8:	d109      	bne.n	80053ce <_fflush_r+0x2e>
 80053ba:	686c      	ldr	r4, [r5, #4]
 80053bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c0:	b17b      	cbz	r3, 80053e2 <_fflush_r+0x42>
 80053c2:	4621      	mov	r1, r4
 80053c4:	4628      	mov	r0, r5
 80053c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053ca:	f7ff bf63 	b.w	8005294 <__sflush_r>
 80053ce:	4b07      	ldr	r3, [pc, #28]	; (80053ec <_fflush_r+0x4c>)
 80053d0:	429c      	cmp	r4, r3
 80053d2:	d101      	bne.n	80053d8 <_fflush_r+0x38>
 80053d4:	68ac      	ldr	r4, [r5, #8]
 80053d6:	e7f1      	b.n	80053bc <_fflush_r+0x1c>
 80053d8:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <_fflush_r+0x50>)
 80053da:	429c      	cmp	r4, r3
 80053dc:	bf08      	it	eq
 80053de:	68ec      	ldreq	r4, [r5, #12]
 80053e0:	e7ec      	b.n	80053bc <_fflush_r+0x1c>
 80053e2:	2000      	movs	r0, #0
 80053e4:	bd38      	pop	{r3, r4, r5, pc}
 80053e6:	bf00      	nop
 80053e8:	08005a6c 	.word	0x08005a6c
 80053ec:	08005a8c 	.word	0x08005a8c
 80053f0:	08005a4c 	.word	0x08005a4c

080053f4 <std>:
 80053f4:	2300      	movs	r3, #0
 80053f6:	b510      	push	{r4, lr}
 80053f8:	4604      	mov	r4, r0
 80053fa:	e9c0 3300 	strd	r3, r3, [r0]
 80053fe:	6083      	str	r3, [r0, #8]
 8005400:	8181      	strh	r1, [r0, #12]
 8005402:	6643      	str	r3, [r0, #100]	; 0x64
 8005404:	81c2      	strh	r2, [r0, #14]
 8005406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800540a:	6183      	str	r3, [r0, #24]
 800540c:	4619      	mov	r1, r3
 800540e:	2208      	movs	r2, #8
 8005410:	305c      	adds	r0, #92	; 0x5c
 8005412:	f7ff fe13 	bl	800503c <memset>
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <std+0x38>)
 8005418:	6263      	str	r3, [r4, #36]	; 0x24
 800541a:	4b05      	ldr	r3, [pc, #20]	; (8005430 <std+0x3c>)
 800541c:	62a3      	str	r3, [r4, #40]	; 0x28
 800541e:	4b05      	ldr	r3, [pc, #20]	; (8005434 <std+0x40>)
 8005420:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <std+0x44>)
 8005424:	6224      	str	r4, [r4, #32]
 8005426:	6323      	str	r3, [r4, #48]	; 0x30
 8005428:	bd10      	pop	{r4, pc}
 800542a:	bf00      	nop
 800542c:	080057c1 	.word	0x080057c1
 8005430:	080057e3 	.word	0x080057e3
 8005434:	0800581b 	.word	0x0800581b
 8005438:	0800583f 	.word	0x0800583f

0800543c <_cleanup_r>:
 800543c:	4901      	ldr	r1, [pc, #4]	; (8005444 <_cleanup_r+0x8>)
 800543e:	f000 b885 	b.w	800554c <_fwalk_reent>
 8005442:	bf00      	nop
 8005444:	080053a1 	.word	0x080053a1

08005448 <__sfmoreglue>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	1e4a      	subs	r2, r1, #1
 800544c:	2568      	movs	r5, #104	; 0x68
 800544e:	4355      	muls	r5, r2
 8005450:	460e      	mov	r6, r1
 8005452:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005456:	f000 f949 	bl	80056ec <_malloc_r>
 800545a:	4604      	mov	r4, r0
 800545c:	b140      	cbz	r0, 8005470 <__sfmoreglue+0x28>
 800545e:	2100      	movs	r1, #0
 8005460:	e9c0 1600 	strd	r1, r6, [r0]
 8005464:	300c      	adds	r0, #12
 8005466:	60a0      	str	r0, [r4, #8]
 8005468:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800546c:	f7ff fde6 	bl	800503c <memset>
 8005470:	4620      	mov	r0, r4
 8005472:	bd70      	pop	{r4, r5, r6, pc}

08005474 <__sinit>:
 8005474:	6983      	ldr	r3, [r0, #24]
 8005476:	b510      	push	{r4, lr}
 8005478:	4604      	mov	r4, r0
 800547a:	bb33      	cbnz	r3, 80054ca <__sinit+0x56>
 800547c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005480:	6503      	str	r3, [r0, #80]	; 0x50
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <__sinit+0x58>)
 8005484:	4a12      	ldr	r2, [pc, #72]	; (80054d0 <__sinit+0x5c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6282      	str	r2, [r0, #40]	; 0x28
 800548a:	4298      	cmp	r0, r3
 800548c:	bf04      	itt	eq
 800548e:	2301      	moveq	r3, #1
 8005490:	6183      	streq	r3, [r0, #24]
 8005492:	f000 f81f 	bl	80054d4 <__sfp>
 8005496:	6060      	str	r0, [r4, #4]
 8005498:	4620      	mov	r0, r4
 800549a:	f000 f81b 	bl	80054d4 <__sfp>
 800549e:	60a0      	str	r0, [r4, #8]
 80054a0:	4620      	mov	r0, r4
 80054a2:	f000 f817 	bl	80054d4 <__sfp>
 80054a6:	2200      	movs	r2, #0
 80054a8:	60e0      	str	r0, [r4, #12]
 80054aa:	2104      	movs	r1, #4
 80054ac:	6860      	ldr	r0, [r4, #4]
 80054ae:	f7ff ffa1 	bl	80053f4 <std>
 80054b2:	2201      	movs	r2, #1
 80054b4:	2109      	movs	r1, #9
 80054b6:	68a0      	ldr	r0, [r4, #8]
 80054b8:	f7ff ff9c 	bl	80053f4 <std>
 80054bc:	2202      	movs	r2, #2
 80054be:	2112      	movs	r1, #18
 80054c0:	68e0      	ldr	r0, [r4, #12]
 80054c2:	f7ff ff97 	bl	80053f4 <std>
 80054c6:	2301      	movs	r3, #1
 80054c8:	61a3      	str	r3, [r4, #24]
 80054ca:	bd10      	pop	{r4, pc}
 80054cc:	08005a48 	.word	0x08005a48
 80054d0:	0800543d 	.word	0x0800543d

080054d4 <__sfp>:
 80054d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d6:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <__sfp+0x70>)
 80054d8:	681e      	ldr	r6, [r3, #0]
 80054da:	69b3      	ldr	r3, [r6, #24]
 80054dc:	4607      	mov	r7, r0
 80054de:	b913      	cbnz	r3, 80054e6 <__sfp+0x12>
 80054e0:	4630      	mov	r0, r6
 80054e2:	f7ff ffc7 	bl	8005474 <__sinit>
 80054e6:	3648      	adds	r6, #72	; 0x48
 80054e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	d503      	bpl.n	80054f8 <__sfp+0x24>
 80054f0:	6833      	ldr	r3, [r6, #0]
 80054f2:	b133      	cbz	r3, 8005502 <__sfp+0x2e>
 80054f4:	6836      	ldr	r6, [r6, #0]
 80054f6:	e7f7      	b.n	80054e8 <__sfp+0x14>
 80054f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054fc:	b16d      	cbz	r5, 800551a <__sfp+0x46>
 80054fe:	3468      	adds	r4, #104	; 0x68
 8005500:	e7f4      	b.n	80054ec <__sfp+0x18>
 8005502:	2104      	movs	r1, #4
 8005504:	4638      	mov	r0, r7
 8005506:	f7ff ff9f 	bl	8005448 <__sfmoreglue>
 800550a:	6030      	str	r0, [r6, #0]
 800550c:	2800      	cmp	r0, #0
 800550e:	d1f1      	bne.n	80054f4 <__sfp+0x20>
 8005510:	230c      	movs	r3, #12
 8005512:	603b      	str	r3, [r7, #0]
 8005514:	4604      	mov	r4, r0
 8005516:	4620      	mov	r0, r4
 8005518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <__sfp+0x74>)
 800551c:	6665      	str	r5, [r4, #100]	; 0x64
 800551e:	e9c4 5500 	strd	r5, r5, [r4]
 8005522:	60a5      	str	r5, [r4, #8]
 8005524:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005528:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800552c:	2208      	movs	r2, #8
 800552e:	4629      	mov	r1, r5
 8005530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005534:	f7ff fd82 	bl	800503c <memset>
 8005538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800553c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005540:	e7e9      	b.n	8005516 <__sfp+0x42>
 8005542:	bf00      	nop
 8005544:	08005a48 	.word	0x08005a48
 8005548:	ffff0001 	.word	0xffff0001

0800554c <_fwalk_reent>:
 800554c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005550:	4680      	mov	r8, r0
 8005552:	4689      	mov	r9, r1
 8005554:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005558:	2600      	movs	r6, #0
 800555a:	b914      	cbnz	r4, 8005562 <_fwalk_reent+0x16>
 800555c:	4630      	mov	r0, r6
 800555e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005562:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005566:	3f01      	subs	r7, #1
 8005568:	d501      	bpl.n	800556e <_fwalk_reent+0x22>
 800556a:	6824      	ldr	r4, [r4, #0]
 800556c:	e7f5      	b.n	800555a <_fwalk_reent+0xe>
 800556e:	89ab      	ldrh	r3, [r5, #12]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d907      	bls.n	8005584 <_fwalk_reent+0x38>
 8005574:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005578:	3301      	adds	r3, #1
 800557a:	d003      	beq.n	8005584 <_fwalk_reent+0x38>
 800557c:	4629      	mov	r1, r5
 800557e:	4640      	mov	r0, r8
 8005580:	47c8      	blx	r9
 8005582:	4306      	orrs	r6, r0
 8005584:	3568      	adds	r5, #104	; 0x68
 8005586:	e7ee      	b.n	8005566 <_fwalk_reent+0x1a>

08005588 <__swhatbuf_r>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	460e      	mov	r6, r1
 800558c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005590:	2900      	cmp	r1, #0
 8005592:	b096      	sub	sp, #88	; 0x58
 8005594:	4614      	mov	r4, r2
 8005596:	461d      	mov	r5, r3
 8005598:	da07      	bge.n	80055aa <__swhatbuf_r+0x22>
 800559a:	2300      	movs	r3, #0
 800559c:	602b      	str	r3, [r5, #0]
 800559e:	89b3      	ldrh	r3, [r6, #12]
 80055a0:	061a      	lsls	r2, r3, #24
 80055a2:	d410      	bmi.n	80055c6 <__swhatbuf_r+0x3e>
 80055a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055a8:	e00e      	b.n	80055c8 <__swhatbuf_r+0x40>
 80055aa:	466a      	mov	r2, sp
 80055ac:	f000 f96e 	bl	800588c <_fstat_r>
 80055b0:	2800      	cmp	r0, #0
 80055b2:	dbf2      	blt.n	800559a <__swhatbuf_r+0x12>
 80055b4:	9a01      	ldr	r2, [sp, #4]
 80055b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055be:	425a      	negs	r2, r3
 80055c0:	415a      	adcs	r2, r3
 80055c2:	602a      	str	r2, [r5, #0]
 80055c4:	e7ee      	b.n	80055a4 <__swhatbuf_r+0x1c>
 80055c6:	2340      	movs	r3, #64	; 0x40
 80055c8:	2000      	movs	r0, #0
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	b016      	add	sp, #88	; 0x58
 80055ce:	bd70      	pop	{r4, r5, r6, pc}

080055d0 <__smakebuf_r>:
 80055d0:	898b      	ldrh	r3, [r1, #12]
 80055d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055d4:	079d      	lsls	r5, r3, #30
 80055d6:	4606      	mov	r6, r0
 80055d8:	460c      	mov	r4, r1
 80055da:	d507      	bpl.n	80055ec <__smakebuf_r+0x1c>
 80055dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	6123      	str	r3, [r4, #16]
 80055e4:	2301      	movs	r3, #1
 80055e6:	6163      	str	r3, [r4, #20]
 80055e8:	b002      	add	sp, #8
 80055ea:	bd70      	pop	{r4, r5, r6, pc}
 80055ec:	ab01      	add	r3, sp, #4
 80055ee:	466a      	mov	r2, sp
 80055f0:	f7ff ffca 	bl	8005588 <__swhatbuf_r>
 80055f4:	9900      	ldr	r1, [sp, #0]
 80055f6:	4605      	mov	r5, r0
 80055f8:	4630      	mov	r0, r6
 80055fa:	f000 f877 	bl	80056ec <_malloc_r>
 80055fe:	b948      	cbnz	r0, 8005614 <__smakebuf_r+0x44>
 8005600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005604:	059a      	lsls	r2, r3, #22
 8005606:	d4ef      	bmi.n	80055e8 <__smakebuf_r+0x18>
 8005608:	f023 0303 	bic.w	r3, r3, #3
 800560c:	f043 0302 	orr.w	r3, r3, #2
 8005610:	81a3      	strh	r3, [r4, #12]
 8005612:	e7e3      	b.n	80055dc <__smakebuf_r+0xc>
 8005614:	4b0d      	ldr	r3, [pc, #52]	; (800564c <__smakebuf_r+0x7c>)
 8005616:	62b3      	str	r3, [r6, #40]	; 0x28
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	6020      	str	r0, [r4, #0]
 800561c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005620:	81a3      	strh	r3, [r4, #12]
 8005622:	9b00      	ldr	r3, [sp, #0]
 8005624:	6163      	str	r3, [r4, #20]
 8005626:	9b01      	ldr	r3, [sp, #4]
 8005628:	6120      	str	r0, [r4, #16]
 800562a:	b15b      	cbz	r3, 8005644 <__smakebuf_r+0x74>
 800562c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005630:	4630      	mov	r0, r6
 8005632:	f000 f93d 	bl	80058b0 <_isatty_r>
 8005636:	b128      	cbz	r0, 8005644 <__smakebuf_r+0x74>
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	f023 0303 	bic.w	r3, r3, #3
 800563e:	f043 0301 	orr.w	r3, r3, #1
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	431d      	orrs	r5, r3
 8005648:	81a5      	strh	r5, [r4, #12]
 800564a:	e7cd      	b.n	80055e8 <__smakebuf_r+0x18>
 800564c:	0800543d 	.word	0x0800543d

08005650 <_free_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	4605      	mov	r5, r0
 8005654:	2900      	cmp	r1, #0
 8005656:	d045      	beq.n	80056e4 <_free_r+0x94>
 8005658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800565c:	1f0c      	subs	r4, r1, #4
 800565e:	2b00      	cmp	r3, #0
 8005660:	bfb8      	it	lt
 8005662:	18e4      	addlt	r4, r4, r3
 8005664:	f000 f946 	bl	80058f4 <__malloc_lock>
 8005668:	4a1f      	ldr	r2, [pc, #124]	; (80056e8 <_free_r+0x98>)
 800566a:	6813      	ldr	r3, [r2, #0]
 800566c:	4610      	mov	r0, r2
 800566e:	b933      	cbnz	r3, 800567e <_free_r+0x2e>
 8005670:	6063      	str	r3, [r4, #4]
 8005672:	6014      	str	r4, [r2, #0]
 8005674:	4628      	mov	r0, r5
 8005676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800567a:	f000 b93c 	b.w	80058f6 <__malloc_unlock>
 800567e:	42a3      	cmp	r3, r4
 8005680:	d90c      	bls.n	800569c <_free_r+0x4c>
 8005682:	6821      	ldr	r1, [r4, #0]
 8005684:	1862      	adds	r2, r4, r1
 8005686:	4293      	cmp	r3, r2
 8005688:	bf04      	itt	eq
 800568a:	681a      	ldreq	r2, [r3, #0]
 800568c:	685b      	ldreq	r3, [r3, #4]
 800568e:	6063      	str	r3, [r4, #4]
 8005690:	bf04      	itt	eq
 8005692:	1852      	addeq	r2, r2, r1
 8005694:	6022      	streq	r2, [r4, #0]
 8005696:	6004      	str	r4, [r0, #0]
 8005698:	e7ec      	b.n	8005674 <_free_r+0x24>
 800569a:	4613      	mov	r3, r2
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	b10a      	cbz	r2, 80056a4 <_free_r+0x54>
 80056a0:	42a2      	cmp	r2, r4
 80056a2:	d9fa      	bls.n	800569a <_free_r+0x4a>
 80056a4:	6819      	ldr	r1, [r3, #0]
 80056a6:	1858      	adds	r0, r3, r1
 80056a8:	42a0      	cmp	r0, r4
 80056aa:	d10b      	bne.n	80056c4 <_free_r+0x74>
 80056ac:	6820      	ldr	r0, [r4, #0]
 80056ae:	4401      	add	r1, r0
 80056b0:	1858      	adds	r0, r3, r1
 80056b2:	4282      	cmp	r2, r0
 80056b4:	6019      	str	r1, [r3, #0]
 80056b6:	d1dd      	bne.n	8005674 <_free_r+0x24>
 80056b8:	6810      	ldr	r0, [r2, #0]
 80056ba:	6852      	ldr	r2, [r2, #4]
 80056bc:	605a      	str	r2, [r3, #4]
 80056be:	4401      	add	r1, r0
 80056c0:	6019      	str	r1, [r3, #0]
 80056c2:	e7d7      	b.n	8005674 <_free_r+0x24>
 80056c4:	d902      	bls.n	80056cc <_free_r+0x7c>
 80056c6:	230c      	movs	r3, #12
 80056c8:	602b      	str	r3, [r5, #0]
 80056ca:	e7d3      	b.n	8005674 <_free_r+0x24>
 80056cc:	6820      	ldr	r0, [r4, #0]
 80056ce:	1821      	adds	r1, r4, r0
 80056d0:	428a      	cmp	r2, r1
 80056d2:	bf04      	itt	eq
 80056d4:	6811      	ldreq	r1, [r2, #0]
 80056d6:	6852      	ldreq	r2, [r2, #4]
 80056d8:	6062      	str	r2, [r4, #4]
 80056da:	bf04      	itt	eq
 80056dc:	1809      	addeq	r1, r1, r0
 80056de:	6021      	streq	r1, [r4, #0]
 80056e0:	605c      	str	r4, [r3, #4]
 80056e2:	e7c7      	b.n	8005674 <_free_r+0x24>
 80056e4:	bd38      	pop	{r3, r4, r5, pc}
 80056e6:	bf00      	nop
 80056e8:	200000a4 	.word	0x200000a4

080056ec <_malloc_r>:
 80056ec:	b570      	push	{r4, r5, r6, lr}
 80056ee:	1ccd      	adds	r5, r1, #3
 80056f0:	f025 0503 	bic.w	r5, r5, #3
 80056f4:	3508      	adds	r5, #8
 80056f6:	2d0c      	cmp	r5, #12
 80056f8:	bf38      	it	cc
 80056fa:	250c      	movcc	r5, #12
 80056fc:	2d00      	cmp	r5, #0
 80056fe:	4606      	mov	r6, r0
 8005700:	db01      	blt.n	8005706 <_malloc_r+0x1a>
 8005702:	42a9      	cmp	r1, r5
 8005704:	d903      	bls.n	800570e <_malloc_r+0x22>
 8005706:	230c      	movs	r3, #12
 8005708:	6033      	str	r3, [r6, #0]
 800570a:	2000      	movs	r0, #0
 800570c:	bd70      	pop	{r4, r5, r6, pc}
 800570e:	f000 f8f1 	bl	80058f4 <__malloc_lock>
 8005712:	4a21      	ldr	r2, [pc, #132]	; (8005798 <_malloc_r+0xac>)
 8005714:	6814      	ldr	r4, [r2, #0]
 8005716:	4621      	mov	r1, r4
 8005718:	b991      	cbnz	r1, 8005740 <_malloc_r+0x54>
 800571a:	4c20      	ldr	r4, [pc, #128]	; (800579c <_malloc_r+0xb0>)
 800571c:	6823      	ldr	r3, [r4, #0]
 800571e:	b91b      	cbnz	r3, 8005728 <_malloc_r+0x3c>
 8005720:	4630      	mov	r0, r6
 8005722:	f000 f83d 	bl	80057a0 <_sbrk_r>
 8005726:	6020      	str	r0, [r4, #0]
 8005728:	4629      	mov	r1, r5
 800572a:	4630      	mov	r0, r6
 800572c:	f000 f838 	bl	80057a0 <_sbrk_r>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d124      	bne.n	800577e <_malloc_r+0x92>
 8005734:	230c      	movs	r3, #12
 8005736:	6033      	str	r3, [r6, #0]
 8005738:	4630      	mov	r0, r6
 800573a:	f000 f8dc 	bl	80058f6 <__malloc_unlock>
 800573e:	e7e4      	b.n	800570a <_malloc_r+0x1e>
 8005740:	680b      	ldr	r3, [r1, #0]
 8005742:	1b5b      	subs	r3, r3, r5
 8005744:	d418      	bmi.n	8005778 <_malloc_r+0x8c>
 8005746:	2b0b      	cmp	r3, #11
 8005748:	d90f      	bls.n	800576a <_malloc_r+0x7e>
 800574a:	600b      	str	r3, [r1, #0]
 800574c:	50cd      	str	r5, [r1, r3]
 800574e:	18cc      	adds	r4, r1, r3
 8005750:	4630      	mov	r0, r6
 8005752:	f000 f8d0 	bl	80058f6 <__malloc_unlock>
 8005756:	f104 000b 	add.w	r0, r4, #11
 800575a:	1d23      	adds	r3, r4, #4
 800575c:	f020 0007 	bic.w	r0, r0, #7
 8005760:	1ac3      	subs	r3, r0, r3
 8005762:	d0d3      	beq.n	800570c <_malloc_r+0x20>
 8005764:	425a      	negs	r2, r3
 8005766:	50e2      	str	r2, [r4, r3]
 8005768:	e7d0      	b.n	800570c <_malloc_r+0x20>
 800576a:	428c      	cmp	r4, r1
 800576c:	684b      	ldr	r3, [r1, #4]
 800576e:	bf16      	itet	ne
 8005770:	6063      	strne	r3, [r4, #4]
 8005772:	6013      	streq	r3, [r2, #0]
 8005774:	460c      	movne	r4, r1
 8005776:	e7eb      	b.n	8005750 <_malloc_r+0x64>
 8005778:	460c      	mov	r4, r1
 800577a:	6849      	ldr	r1, [r1, #4]
 800577c:	e7cc      	b.n	8005718 <_malloc_r+0x2c>
 800577e:	1cc4      	adds	r4, r0, #3
 8005780:	f024 0403 	bic.w	r4, r4, #3
 8005784:	42a0      	cmp	r0, r4
 8005786:	d005      	beq.n	8005794 <_malloc_r+0xa8>
 8005788:	1a21      	subs	r1, r4, r0
 800578a:	4630      	mov	r0, r6
 800578c:	f000 f808 	bl	80057a0 <_sbrk_r>
 8005790:	3001      	adds	r0, #1
 8005792:	d0cf      	beq.n	8005734 <_malloc_r+0x48>
 8005794:	6025      	str	r5, [r4, #0]
 8005796:	e7db      	b.n	8005750 <_malloc_r+0x64>
 8005798:	200000a4 	.word	0x200000a4
 800579c:	200000a8 	.word	0x200000a8

080057a0 <_sbrk_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4c06      	ldr	r4, [pc, #24]	; (80057bc <_sbrk_r+0x1c>)
 80057a4:	2300      	movs	r3, #0
 80057a6:	4605      	mov	r5, r0
 80057a8:	4608      	mov	r0, r1
 80057aa:	6023      	str	r3, [r4, #0]
 80057ac:	f7fb fa6c 	bl	8000c88 <_sbrk>
 80057b0:	1c43      	adds	r3, r0, #1
 80057b2:	d102      	bne.n	80057ba <_sbrk_r+0x1a>
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	b103      	cbz	r3, 80057ba <_sbrk_r+0x1a>
 80057b8:	602b      	str	r3, [r5, #0]
 80057ba:	bd38      	pop	{r3, r4, r5, pc}
 80057bc:	20000248 	.word	0x20000248

080057c0 <__sread>:
 80057c0:	b510      	push	{r4, lr}
 80057c2:	460c      	mov	r4, r1
 80057c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057c8:	f000 f896 	bl	80058f8 <_read_r>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	bfab      	itete	ge
 80057d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057d2:	89a3      	ldrhlt	r3, [r4, #12]
 80057d4:	181b      	addge	r3, r3, r0
 80057d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057da:	bfac      	ite	ge
 80057dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80057de:	81a3      	strhlt	r3, [r4, #12]
 80057e0:	bd10      	pop	{r4, pc}

080057e2 <__swrite>:
 80057e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057e6:	461f      	mov	r7, r3
 80057e8:	898b      	ldrh	r3, [r1, #12]
 80057ea:	05db      	lsls	r3, r3, #23
 80057ec:	4605      	mov	r5, r0
 80057ee:	460c      	mov	r4, r1
 80057f0:	4616      	mov	r6, r2
 80057f2:	d505      	bpl.n	8005800 <__swrite+0x1e>
 80057f4:	2302      	movs	r3, #2
 80057f6:	2200      	movs	r2, #0
 80057f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057fc:	f000 f868 	bl	80058d0 <_lseek_r>
 8005800:	89a3      	ldrh	r3, [r4, #12]
 8005802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	4632      	mov	r2, r6
 800580e:	463b      	mov	r3, r7
 8005810:	4628      	mov	r0, r5
 8005812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005816:	f000 b817 	b.w	8005848 <_write_r>

0800581a <__sseek>:
 800581a:	b510      	push	{r4, lr}
 800581c:	460c      	mov	r4, r1
 800581e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005822:	f000 f855 	bl	80058d0 <_lseek_r>
 8005826:	1c43      	adds	r3, r0, #1
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	bf15      	itete	ne
 800582c:	6560      	strne	r0, [r4, #84]	; 0x54
 800582e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005832:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005836:	81a3      	strheq	r3, [r4, #12]
 8005838:	bf18      	it	ne
 800583a:	81a3      	strhne	r3, [r4, #12]
 800583c:	bd10      	pop	{r4, pc}

0800583e <__sclose>:
 800583e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005842:	f000 b813 	b.w	800586c <_close_r>
	...

08005848 <_write_r>:
 8005848:	b538      	push	{r3, r4, r5, lr}
 800584a:	4c07      	ldr	r4, [pc, #28]	; (8005868 <_write_r+0x20>)
 800584c:	4605      	mov	r5, r0
 800584e:	4608      	mov	r0, r1
 8005850:	4611      	mov	r1, r2
 8005852:	2200      	movs	r2, #0
 8005854:	6022      	str	r2, [r4, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	f7fb f9c5 	bl	8000be6 <_write>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d102      	bne.n	8005866 <_write_r+0x1e>
 8005860:	6823      	ldr	r3, [r4, #0]
 8005862:	b103      	cbz	r3, 8005866 <_write_r+0x1e>
 8005864:	602b      	str	r3, [r5, #0]
 8005866:	bd38      	pop	{r3, r4, r5, pc}
 8005868:	20000248 	.word	0x20000248

0800586c <_close_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	4c06      	ldr	r4, [pc, #24]	; (8005888 <_close_r+0x1c>)
 8005870:	2300      	movs	r3, #0
 8005872:	4605      	mov	r5, r0
 8005874:	4608      	mov	r0, r1
 8005876:	6023      	str	r3, [r4, #0]
 8005878:	f7fb f9d1 	bl	8000c1e <_close>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_close_r+0x1a>
 8005880:	6823      	ldr	r3, [r4, #0]
 8005882:	b103      	cbz	r3, 8005886 <_close_r+0x1a>
 8005884:	602b      	str	r3, [r5, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	20000248 	.word	0x20000248

0800588c <_fstat_r>:
 800588c:	b538      	push	{r3, r4, r5, lr}
 800588e:	4c07      	ldr	r4, [pc, #28]	; (80058ac <_fstat_r+0x20>)
 8005890:	2300      	movs	r3, #0
 8005892:	4605      	mov	r5, r0
 8005894:	4608      	mov	r0, r1
 8005896:	4611      	mov	r1, r2
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	f7fb f9cc 	bl	8000c36 <_fstat>
 800589e:	1c43      	adds	r3, r0, #1
 80058a0:	d102      	bne.n	80058a8 <_fstat_r+0x1c>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	b103      	cbz	r3, 80058a8 <_fstat_r+0x1c>
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	bd38      	pop	{r3, r4, r5, pc}
 80058aa:	bf00      	nop
 80058ac:	20000248 	.word	0x20000248

080058b0 <_isatty_r>:
 80058b0:	b538      	push	{r3, r4, r5, lr}
 80058b2:	4c06      	ldr	r4, [pc, #24]	; (80058cc <_isatty_r+0x1c>)
 80058b4:	2300      	movs	r3, #0
 80058b6:	4605      	mov	r5, r0
 80058b8:	4608      	mov	r0, r1
 80058ba:	6023      	str	r3, [r4, #0]
 80058bc:	f7fb f9cb 	bl	8000c56 <_isatty>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d102      	bne.n	80058ca <_isatty_r+0x1a>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	b103      	cbz	r3, 80058ca <_isatty_r+0x1a>
 80058c8:	602b      	str	r3, [r5, #0]
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	20000248 	.word	0x20000248

080058d0 <_lseek_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4c07      	ldr	r4, [pc, #28]	; (80058f0 <_lseek_r+0x20>)
 80058d4:	4605      	mov	r5, r0
 80058d6:	4608      	mov	r0, r1
 80058d8:	4611      	mov	r1, r2
 80058da:	2200      	movs	r2, #0
 80058dc:	6022      	str	r2, [r4, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	f7fb f9c4 	bl	8000c6c <_lseek>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_lseek_r+0x1e>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_lseek_r+0x1e>
 80058ec:	602b      	str	r3, [r5, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	20000248 	.word	0x20000248

080058f4 <__malloc_lock>:
 80058f4:	4770      	bx	lr

080058f6 <__malloc_unlock>:
 80058f6:	4770      	bx	lr

080058f8 <_read_r>:
 80058f8:	b538      	push	{r3, r4, r5, lr}
 80058fa:	4c07      	ldr	r4, [pc, #28]	; (8005918 <_read_r+0x20>)
 80058fc:	4605      	mov	r5, r0
 80058fe:	4608      	mov	r0, r1
 8005900:	4611      	mov	r1, r2
 8005902:	2200      	movs	r2, #0
 8005904:	6022      	str	r2, [r4, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	f7fb f950 	bl	8000bac <_read>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d102      	bne.n	8005916 <_read_r+0x1e>
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	b103      	cbz	r3, 8005916 <_read_r+0x1e>
 8005914:	602b      	str	r3, [r5, #0]
 8005916:	bd38      	pop	{r3, r4, r5, pc}
 8005918:	20000248 	.word	0x20000248

0800591c <_init>:
 800591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591e:	bf00      	nop
 8005920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005922:	bc08      	pop	{r3}
 8005924:	469e      	mov	lr, r3
 8005926:	4770      	bx	lr

08005928 <_fini>:
 8005928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800592a:	bf00      	nop
 800592c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800592e:	bc08      	pop	{r3}
 8005930:	469e      	mov	lr, r3
 8005932:	4770      	bx	lr
