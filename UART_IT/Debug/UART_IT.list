
UART_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000515c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800543c  0800543c  0001543c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000004  08005440  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000bc  20000074  080054b0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000130  080054b0  00020130  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010534  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000024bb  00000000  00000000  000305d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001370  00000000  00000000  00032a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001258  00000000  00000000  00033e08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  000223df  00000000  00000000  00035060  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000bac2  00000000  00000000  0005743f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d64b5  00000000  00000000  00062f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  001393b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000055d8  00000000  00000000  00139434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000074 	.word	0x20000074
 8000158:	00000000 	.word	0x00000000
 800015c:	08005280 	.word	0x08005280

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000078 	.word	0x20000078
 8000178:	08005280 	.word	0x08005280

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	4688      	mov	r8, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0803 	orr.w	r8, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e4:	fa1f fc85 	uxth.w	ip, r5
 80001e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f0:	fb07 f10c 	mul.w	r1, r7, ip
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80001fe:	f080 811b 	bcs.w	8000438 <__udivmoddi4+0x28c>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8118 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000220:	45a4      	cmp	ip, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	192c      	adds	r4, r5, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8107 	bcs.w	800043c <__udivmoddi4+0x290>
 800022e:	45a4      	cmp	ip, r4
 8000230:	f240 8104 	bls.w	800043c <__udivmoddi4+0x290>
 8000234:	3802      	subs	r0, #2
 8000236:	442c      	add	r4, r5
 8000238:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023c:	eba4 040c 	sub.w	r4, r4, ip
 8000240:	2700      	movs	r7, #0
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80eb 	beq.w	8000432 <__udivmoddi4+0x286>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d147      	bne.n	8000302 <__udivmoddi4+0x156>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fa 	bhi.w	8000470 <__udivmoddi4+0x2c4>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	1b49      	subs	r1, r1, r5
 80002a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a4:	fa1f f885 	uxth.w	r8, r5
 80002a8:	2701      	movs	r7, #1
 80002aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002ae:	0c23      	lsrs	r3, r4, #16
 80002b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b8:	fb08 f10c 	mul.w	r1, r8, ip
 80002bc:	4299      	cmp	r1, r3
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002c0:	18eb      	adds	r3, r5, r3
 80002c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4299      	cmp	r1, r3
 80002ca:	f200 80cd 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002ce:	4684      	mov	ip, r0
 80002d0:	1a59      	subs	r1, r3, r1
 80002d2:	b2a3      	uxth	r3, r4
 80002d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e0:	fb08 f800 	mul.w	r8, r8, r0
 80002e4:	45a0      	cmp	r8, r4
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0x14c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x14a>
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	f200 80b6 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002f6:	4618      	mov	r0, r3
 80002f8:	eba4 0408 	sub.w	r4, r4, r8
 80002fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000300:	e79f      	b.n	8000242 <__udivmoddi4+0x96>
 8000302:	f1c7 0c20 	rsb	ip, r7, #32
 8000306:	40bb      	lsls	r3, r7
 8000308:	fa22 fe0c 	lsr.w	lr, r2, ip
 800030c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000310:	fa01 f407 	lsl.w	r4, r1, r7
 8000314:	fa20 f50c 	lsr.w	r5, r0, ip
 8000318:	fa21 f30c 	lsr.w	r3, r1, ip
 800031c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000320:	4325      	orrs	r5, r4
 8000322:	fbb3 f9f8 	udiv	r9, r3, r8
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	fb08 3319 	mls	r3, r8, r9, r3
 800032c:	fa1f fa8e 	uxth.w	sl, lr
 8000330:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000334:	fb09 f40a 	mul.w	r4, r9, sl
 8000338:	429c      	cmp	r4, r3
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f107 	lsl.w	r1, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1e 0303 	adds.w	r3, lr, r3
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8087 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000350:	429c      	cmp	r4, r3
 8000352:	f240 8084 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4473      	add	r3, lr
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	b2ad      	uxth	r5, r5
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800036c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000370:	45a2      	cmp	sl, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1e 0404 	adds.w	r4, lr, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295
 800037c:	d26b      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 800037e:	45a2      	cmp	sl, r4
 8000380:	d969      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000382:	3802      	subs	r0, #2
 8000384:	4474      	add	r4, lr
 8000386:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038a:	fba0 8902 	umull	r8, r9, r0, r2
 800038e:	eba4 040a 	sub.w	r4, r4, sl
 8000392:	454c      	cmp	r4, r9
 8000394:	46c2      	mov	sl, r8
 8000396:	464b      	mov	r3, r9
 8000398:	d354      	bcc.n	8000444 <__udivmoddi4+0x298>
 800039a:	d051      	beq.n	8000440 <__udivmoddi4+0x294>
 800039c:	2e00      	cmp	r6, #0
 800039e:	d069      	beq.n	8000474 <__udivmoddi4+0x2c8>
 80003a0:	ebb1 050a 	subs.w	r5, r1, sl
 80003a4:	eb64 0403 	sbc.w	r4, r4, r3
 80003a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003ac:	40fd      	lsrs	r5, r7
 80003ae:	40fc      	lsrs	r4, r7
 80003b0:	ea4c 0505 	orr.w	r5, ip, r5
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f703 	lsr.w	r7, r0, r3
 80003c4:	4095      	lsls	r5, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	fa21 f303 	lsr.w	r3, r1, r3
 80003ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d2:	4338      	orrs	r0, r7
 80003d4:	0c01      	lsrs	r1, r0, #16
 80003d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003da:	fa1f f885 	uxth.w	r8, r5
 80003de:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e6:	fb07 f308 	mul.w	r3, r7, r8
 80003ea:	428b      	cmp	r3, r1
 80003ec:	fa04 f402 	lsl.w	r4, r4, r2
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f2:	1869      	adds	r1, r5, r1
 80003f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3f02      	subs	r7, #2
 8000400:	4429      	add	r1, r5
 8000402:	1acb      	subs	r3, r1, r3
 8000404:	b281      	uxth	r1, r0
 8000406:	fbb3 f0fe 	udiv	r0, r3, lr
 800040a:	fb0e 3310 	mls	r3, lr, r0, r3
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb00 f308 	mul.w	r3, r0, r8
 8000416:	428b      	cmp	r3, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000420:	d217      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000422:	428b      	cmp	r3, r1
 8000424:	d915      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	1ac9      	subs	r1, r1, r3
 800042c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000430:	e73b      	b.n	80002aa <__udivmoddi4+0xfe>
 8000432:	4637      	mov	r7, r6
 8000434:	4630      	mov	r0, r6
 8000436:	e709      	b.n	800024c <__udivmoddi4+0xa0>
 8000438:	4607      	mov	r7, r0
 800043a:	e6e7      	b.n	800020c <__udivmoddi4+0x60>
 800043c:	4618      	mov	r0, r3
 800043e:	e6fb      	b.n	8000238 <__udivmoddi4+0x8c>
 8000440:	4541      	cmp	r1, r8
 8000442:	d2ab      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000444:	ebb8 0a02 	subs.w	sl, r8, r2
 8000448:	eb69 020e 	sbc.w	r2, r9, lr
 800044c:	3801      	subs	r0, #1
 800044e:	4613      	mov	r3, r2
 8000450:	e7a4      	b.n	800039c <__udivmoddi4+0x1f0>
 8000452:	4660      	mov	r0, ip
 8000454:	e7e9      	b.n	800042a <__udivmoddi4+0x27e>
 8000456:	4618      	mov	r0, r3
 8000458:	e795      	b.n	8000386 <__udivmoddi4+0x1da>
 800045a:	4667      	mov	r7, ip
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	4681      	mov	r9, r0
 8000460:	e77c      	b.n	800035c <__udivmoddi4+0x1b0>
 8000462:	3802      	subs	r0, #2
 8000464:	442c      	add	r4, r5
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0x14c>
 8000468:	f1ac 0c02 	sub.w	ip, ip, #2
 800046c:	442b      	add	r3, r5
 800046e:	e72f      	b.n	80002d0 <__udivmoddi4+0x124>
 8000470:	4638      	mov	r0, r7
 8000472:	e708      	b.n	8000286 <__udivmoddi4+0xda>
 8000474:	4637      	mov	r7, r6
 8000476:	e6e9      	b.n	800024c <__udivmoddi4+0xa0>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
	...

080004b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b089      	sub	sp, #36	; 0x24
 80004b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b6:	f000 fc23 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ba:	f000 f82b 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004be:	f000 f8e7 	bl	8000690 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004c2:	f000 f899 	bl	80005f8 <MX_USART1_UART_Init>

    /* USER CODE BEGIN 3 */
	  //	  HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
	  //	  while (HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin) != GPIO_PIN_RESET) {}

	  printf("Using printf \n");
 80004c6:	4810      	ldr	r0, [pc, #64]	; (8000508 <main+0x58>)
 80004c8:	f004 face 	bl	8004a68 <puts>

	  uint8_t data_tx[]= {'U','s','i','n','g',' ','T','X',' ','1','2','3','\n'};
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <main+0x5c>)
 80004ce:	f107 0410 	add.w	r4, r7, #16
 80004d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004d4:	c407      	stmia	r4!, {r0, r1, r2}
 80004d6:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit_IT(&huart1,data_tx,sizeof data_tx);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	220d      	movs	r2, #13
 80004de:	4619      	mov	r1, r3
 80004e0:	480b      	ldr	r0, [pc, #44]	; (8000510 <main+0x60>)
 80004e2:	f002 fedd 	bl	80032a0 <HAL_UART_Transmit_IT>

	  uint8_t data_rx[10];
	  HAL_UART_AbortReceive_IT(&huart1);// Reset buffer
 80004e6:	480a      	ldr	r0, [pc, #40]	; (8000510 <main+0x60>)
 80004e8:	f003 f836 	bl	8003558 <HAL_UART_AbortReceive_IT>
	  HAL_UART_Receive_IT(&huart1,data_rx,sizeof data_rx );
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	220a      	movs	r2, #10
 80004f0:	4619      	mov	r1, r3
 80004f2:	4807      	ldr	r0, [pc, #28]	; (8000510 <main+0x60>)
 80004f4:	f002 ff58 	bl	80033a8 <HAL_UART_Receive_IT>
	  HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f000 fc87 	bl	8000e0c <HAL_Delay>


	  HAL_Delay(1000);
 80004fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000502:	f000 fc83 	bl	8000e0c <HAL_Delay>
  {
 8000506:	e7de      	b.n	80004c6 <main+0x16>
 8000508:	08005298 	.word	0x08005298
 800050c:	080052a8 	.word	0x080052a8
 8000510:	2000009c 	.word	0x2000009c

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b0ae      	sub	sp, #184	; 0xb8
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800051e:	2248      	movs	r2, #72	; 0x48
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f004 fa3c 	bl	80049a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
 8000538:	615a      	str	r2, [r3, #20]
 800053a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2250      	movs	r2, #80	; 0x50
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f004 fa2c 	bl	80049a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <SystemClock_Config+0xe0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000550:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <SystemClock_Config+0xe0>)
 8000552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <SystemClock_Config+0xe0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000564:	2303      	movs	r3, #3
 8000566:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800056c:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000572:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	2340      	movs	r3, #64	; 0x40
 8000576:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057a:	2300      	movs	r3, #0
 800057c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000584:	4618      	mov	r0, r3
 8000586:	f001 fb2f 	bl	8001be8 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000590:	f000 f90a 	bl	80007a8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000594:	236f      	movs	r3, #111	; 0x6f
 8000596:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000598:	2302      	movs	r3, #2
 800059a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005b4:	2101      	movs	r1, #1
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 feaa 	bl	8002310 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005c2:	f000 f8f1 	bl	80007a8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USART1;
 80005c6:	f242 0301 	movw	r3, #8193	; 0x2001
 80005ca:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005cc:	2300      	movs	r3, #0
 80005ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fad3 	bl	8002b86 <HAL_RCCEx_PeriphCLKConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80005e6:	f000 f8df 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80005ea:	bf00      	nop
 80005ec:	37b8      	adds	r7, #184	; 0xb8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	58000400 	.word	0x58000400

080005f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <MX_USART1_UART_Init+0x90>)
 80005fe:	4a23      	ldr	r2, [pc, #140]	; (800068c <MX_USART1_UART_Init+0x94>)
 8000600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000602:	4b21      	ldr	r3, [pc, #132]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_USART1_UART_Init+0x90>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000612:	2200      	movs	r2, #0
 8000614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000618:	2200      	movs	r2, #0
 800061a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_USART1_UART_Init+0x90>)
 800061e:	220c      	movs	r2, #12
 8000620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_USART1_UART_Init+0x90>)
 800062a:	2200      	movs	r2, #0
 800062c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000630:	2200      	movs	r2, #0
 8000632:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000636:	2200      	movs	r2, #0
 8000638:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_USART1_UART_Init+0x90>)
 800063c:	2200      	movs	r2, #0
 800063e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000642:	f002 fd46 	bl	80030d2 <HAL_UART_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800064c:	f000 f8ac 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000650:	2100      	movs	r1, #0
 8000652:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000654:	f004 f895 	bl	8004782 <HAL_UARTEx_SetTxFifoThreshold>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800065e:	f000 f8a3 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000662:	2100      	movs	r1, #0
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000666:	f004 f8ca 	bl	80047fe <HAL_UARTEx_SetRxFifoThreshold>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000670:	f000 f89a 	bl	80007a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_USART1_UART_Init+0x90>)
 8000676:	f004 f84b 	bl	8004710 <HAL_UARTEx_DisableFifoMode>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000680:	f000 f892 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000009c 	.word	0x2000009c
 800068c:	40013800 	.word	0x40013800

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b086      	sub	sp, #24
 8000694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a4:	2004      	movs	r0, #4
 80006a6:	f7ff fee9 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2002      	movs	r0, #2
 80006ac:	f7ff fee6 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b0:	2008      	movs	r0, #8
 80006b2:	f7ff fee3 	bl	800047c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led2_Pin|Led3_Pin|Led1_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2123      	movs	r1, #35	; 0x23
 80006ba:	4815      	ldr	r0, [pc, #84]	; (8000710 <MX_GPIO_Init+0x80>)
 80006bc:	f000 fea6 	bl	800140c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 80006c0:	2310      	movs	r3, #16
 80006c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c8:	2301      	movs	r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4810      	ldr	r0, [pc, #64]	; (8000714 <MX_GPIO_Init+0x84>)
 80006d2:	f000 fd2b 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : Led2_Pin Led3_Pin Led1_Pin */
  GPIO_InitStruct.Pin = Led2_Pin|Led3_Pin|Led1_Pin;
 80006d6:	2323      	movs	r3, #35	; 0x23
 80006d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4809      	ldr	r0, [pc, #36]	; (8000710 <MX_GPIO_Init+0x80>)
 80006ec:	f000 fd1e 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button3_Pin;
 80006f0:	2303      	movs	r3, #3
 80006f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	4619      	mov	r1, r3
 8000700:	4805      	ldr	r0, [pc, #20]	; (8000718 <MX_GPIO_Init+0x88>)
 8000702:	f000 fd13 	bl	800112c <HAL_GPIO_Init>

}
 8000706:	bf00      	nop
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	48000400 	.word	0x48000400
 8000714:	48000800 	.word	0x48000800
 8000718:	48000c00 	.word	0x48000c00

0800071c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000724:	1d39      	adds	r1, r7, #4
 8000726:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800072a:	2201      	movs	r2, #1
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <__io_putchar+0x20>)
 800072e:	f002 fd20 	bl	8003172 <HAL_UART_Transmit>

  return ch;
 8000732:	687b      	ldr	r3, [r7, #4]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	2000009c 	.word	0x2000009c

08000740 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart)
{
 8000740:	b590      	push	{r4, r7, lr}
 8000742:	b087      	sub	sp, #28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	  uint8_t data_tx[]= {'R','X',' ','C','O','M','P','L','E','T','E','D','\n'};
 8000748:	4b08      	ldr	r3, [pc, #32]	; (800076c <HAL_UART_RxCpltCallback+0x2c>)
 800074a:	f107 0408 	add.w	r4, r7, #8
 800074e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000750:	c407      	stmia	r4!, {r0, r1, r2}
 8000752:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart1,data_tx,sizeof data_tx,100);
 8000754:	f107 0108 	add.w	r1, r7, #8
 8000758:	2364      	movs	r3, #100	; 0x64
 800075a:	220d      	movs	r2, #13
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <HAL_UART_RxCpltCallback+0x30>)
 800075e:	f002 fd08 	bl	8003172 <HAL_UART_Transmit>
}
 8000762:	bf00      	nop
 8000764:	371c      	adds	r7, #28
 8000766:	46bd      	mov	sp, r7
 8000768:	bd90      	pop	{r4, r7, pc}
 800076a:	bf00      	nop
 800076c:	080052b8 	.word	0x080052b8
 8000770:	2000009c 	.word	0x2000009c

08000774 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef*huart)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b087      	sub	sp, #28
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	  uint8_t data_tx[]= {'T','X',' ','C','O','M','P','L','E','T','E','D','\n'};
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_UART_TxCpltCallback+0x2c>)
 800077e:	f107 0408 	add.w	r4, r7, #8
 8000782:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000784:	c407      	stmia	r4!, {r0, r1, r2}
 8000786:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart1,data_tx,sizeof data_tx,100);
 8000788:	f107 0108 	add.w	r1, r7, #8
 800078c:	2364      	movs	r3, #100	; 0x64
 800078e:	220d      	movs	r2, #13
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <HAL_UART_TxCpltCallback+0x30>)
 8000792:	f002 fcee 	bl	8003172 <HAL_UART_Transmit>
}
 8000796:	bf00      	nop
 8000798:	371c      	adds	r7, #28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd90      	pop	{r4, r7, pc}
 800079e:	bf00      	nop
 80007a0:	080052c8 	.word	0x080052c8
 80007a4:	2000009c 	.word	0x2000009c

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <LL_AHB2_GRP1_EnableClock>:
{
 80007b6:	b480      	push	{r7}
 80007b8:	b085      	sub	sp, #20
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4013      	ands	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @retval None
*/
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80007f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80007f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	4013      	ands	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800080c:	68fb      	ldr	r3, [r7, #12]
}
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800081a:	b480      	push	{r7}
 800081c:	b085      	sub	sp, #20
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000828:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4313      	orrs	r3, r2
 8000830:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000836:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4013      	ands	r3, r2
 800083c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800083e:	68fb      	ldr	r3, [r7, #12]
}
 8000840:	bf00      	nop
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8000850:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000854:	f7ff ffc8 	bl	80007e8 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	202e      	movs	r0, #46	; 0x2e
 800085e:	f000 fbd2 	bl	8001006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000862:	202e      	movs	r0, #46	; 0x2e
 8000864:	f000 fbe9 	bl	800103a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <HAL_UART_MspInit+0x68>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d11e      	bne.n	80008cc <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800088e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000892:	f7ff ffc2 	bl	800081a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2002      	movs	r0, #2
 8000898:	f7ff ff8d 	bl	80007b6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800089c:	23c0      	movs	r3, #192	; 0xc0
 800089e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ac:	2307      	movs	r3, #7
 80008ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	4619      	mov	r1, r3
 80008b6:	4808      	ldr	r0, [pc, #32]	; (80008d8 <HAL_UART_MspInit+0x6c>)
 80008b8:	f000 fc38 	bl	800112c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008bc:	2200      	movs	r2, #0
 80008be:	2100      	movs	r1, #0
 80008c0:	2024      	movs	r0, #36	; 0x24
 80008c2:	f000 fba0 	bl	8001006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008c6:	2024      	movs	r0, #36	; 0x24
 80008c8:	f000 fbb7 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40013800 	.word	0x40013800
 80008d8:	48000400 	.word	0x48000400

080008dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <MemManage_Handler+0x4>

080008f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <BusFault_Handler+0x4>

080008fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <UsageFault_Handler+0x4>

08000902 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 fa40 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}

08000938 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800093c:	4802      	ldr	r0, [pc, #8]	; (8000948 <USART1_IRQHandler+0x10>)
 800093e:	f002 fe7d 	bl	800363c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	2000009c 	.word	0x2000009c

0800094c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8000950:	f000 fd74 	bl	800143c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
 8000968:	e00a      	b.n	8000980 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800096a:	f3af 8000 	nop.w
 800096e:	4601      	mov	r1, r0
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	60ba      	str	r2, [r7, #8]
 8000976:	b2ca      	uxtb	r2, r1
 8000978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	3301      	adds	r3, #1
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	429a      	cmp	r2, r3
 8000986:	dbf0      	blt.n	800096a <_read+0x12>
	}

return len;
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	e009      	b.n	80009b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	1c5a      	adds	r2, r3, #1
 80009a8:	60ba      	str	r2, [r7, #8]
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff feb5 	bl	800071c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	3301      	adds	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	429a      	cmp	r2, r3
 80009be:	dbf1      	blt.n	80009a4 <_write+0x12>
	}
	return len;
 80009c0:	687b      	ldr	r3, [r7, #4]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <_close>:

int _close(int file)
{
 80009ca:	b480      	push	{r7}
 80009cc:	b083      	sub	sp, #12
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	return -1;
 80009d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr

080009e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f2:	605a      	str	r2, [r3, #4]
	return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <_isatty>:

int _isatty(int file)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
	return 1;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
	return 0;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a3c:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <_sbrk+0x5c>)
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <_sbrk+0x60>)
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <_sbrk+0x64>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <_sbrk+0x68>)
 8000a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d207      	bcs.n	8000a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a64:	f003 ff72 	bl	800494c <__errno>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	e009      	b.n	8000a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <_sbrk+0x64>)
 8000a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a86:	68fb      	ldr	r3, [r7, #12]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20030000 	.word	0x20030000
 8000a94:	00000400 	.word	0x00000400
 8000a98:	20000090 	.word	0x20000090
 8000a9c:	20000130 	.word	0x20000130

08000aa0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <SystemInit+0xa0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <SystemInit+0xa0>)
 8000aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab0:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <SystemInit+0xa0>)
 8000ab2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ab6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ace:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ad2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000ad4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <SystemInit+0xa4>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000af0:	f023 0305 	bic.w	r3, r3, #5
 8000af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b04:	f023 0301 	bic.w	r3, r3, #1
 8000b08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <SystemInit+0xa8>)
 8000b12:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b18:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <SystemInit+0xa8>)
 8000b1a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00
 8000b44:	faf6fefb 	.word	0xfaf6fefb
 8000b48:	22041000 	.word	0x22041000

08000b4c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b087      	sub	sp, #28
 8000b50:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	091b      	lsrs	r3, r3, #4
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	4a47      	ldr	r2, [pc, #284]	; (8000c7c <SystemCoreClockUpdate+0x130>)
 8000b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b64:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b6a:	689b      	ldr	r3, [r3, #8]
 8000b6c:	f003 030c 	and.w	r3, r3, #12
 8000b70:	2b0c      	cmp	r3, #12
 8000b72:	d867      	bhi.n	8000c44 <SystemCoreClockUpdate+0xf8>
 8000b74:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <SystemCoreClockUpdate+0x30>)
 8000b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7a:	bf00      	nop
 8000b7c:	08000bb1 	.word	0x08000bb1
 8000b80:	08000c45 	.word	0x08000c45
 8000b84:	08000c45 	.word	0x08000c45
 8000b88:	08000c45 	.word	0x08000c45
 8000b8c:	08000bb9 	.word	0x08000bb9
 8000b90:	08000c45 	.word	0x08000c45
 8000b94:	08000c45 	.word	0x08000c45
 8000b98:	08000c45 	.word	0x08000c45
 8000b9c:	08000bc1 	.word	0x08000bc1
 8000ba0:	08000c45 	.word	0x08000c45
 8000ba4:	08000c45 	.word	0x08000c45
 8000ba8:	08000c45 	.word	0x08000c45
 8000bac:	08000bc9 	.word	0x08000bc9
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000bb0:	4a33      	ldr	r2, [pc, #204]	; (8000c80 <SystemCoreClockUpdate+0x134>)
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	6013      	str	r3, [r2, #0]
      break;
 8000bb6:	e049      	b.n	8000c4c <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000bb8:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <SystemCoreClockUpdate+0x134>)
 8000bba:	4a32      	ldr	r2, [pc, #200]	; (8000c84 <SystemCoreClockUpdate+0x138>)
 8000bbc:	601a      	str	r2, [r3, #0]
      break;
 8000bbe:	e045      	b.n	8000c4c <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <SystemCoreClockUpdate+0x134>)
 8000bc2:	4a31      	ldr	r2, [pc, #196]	; (8000c88 <SystemCoreClockUpdate+0x13c>)
 8000bc4:	601a      	str	r2, [r3, #0]
      break;
 8000bc6:	e041      	b.n	8000c4c <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	f003 0303 	and.w	r3, r3, #3
 8000bd2:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	091b      	lsrs	r3, r3, #4
 8000bdc:	f003 0307 	and.w	r3, r3, #7
 8000be0:	3301      	adds	r3, #1
 8000be2:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d105      	bne.n	8000bf6 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000bea:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <SystemCoreClockUpdate+0x138>)
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	e00d      	b.n	8000c12 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	2b03      	cmp	r3, #3
 8000bfa:	d105      	bne.n	8000c08 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000bfc:	4a22      	ldr	r2, [pc, #136]	; (8000c88 <SystemCoreClockUpdate+0x13c>)
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e004      	b.n	8000c12 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c10:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	fb02 f303 	mul.w	r3, r2, r3
 8000c24:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0f5b      	lsrs	r3, r3, #29
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	3301      	adds	r3, #1
 8000c34:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <SystemCoreClockUpdate+0x134>)
 8000c40:	6013      	str	r3, [r2, #0]
      break;
 8000c42:	e003      	b.n	8000c4c <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000c44:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <SystemCoreClockUpdate+0x134>)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	6013      	str	r3, [r2, #0]
      break;
 8000c4a:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	091b      	lsrs	r3, r3, #4
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <SystemCoreClockUpdate+0x140>)
 8000c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c5e:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000c60:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <SystemCoreClockUpdate+0x134>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <SystemCoreClockUpdate+0x134>)
 8000c6c:	6013      	str	r3, [r2, #0]

}
 8000c6e:	bf00      	nop
 8000c70:	371c      	adds	r7, #28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	08005374 	.word	0x08005374
 8000c80:	20000004 	.word	0x20000004
 8000c84:	00f42400 	.word	0x00f42400
 8000c88:	01e84800 	.word	0x01e84800
 8000c8c:	08005314 	.word	0x08005314

08000c90 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000c90:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c92:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c94:	3304      	adds	r3, #4

08000c96 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c96:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c98:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000c9a:	d3f9      	bcc.n	8000c90 <CopyDataInit>
  bx lr
 8000c9c:	4770      	bx	lr

08000c9e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000c9e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000ca0:	3004      	adds	r0, #4

08000ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000ca2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000ca4:	d3fb      	bcc.n	8000c9e <FillZerobss>
  bx lr
 8000ca6:	4770      	bx	lr

08000ca8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000caa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000cac:	f7ff fef8 	bl	8000aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <LoopForever+0x8>)
 8000cb2:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <LoopForever+0xc>)
 8000cb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ce8 <LoopForever+0x10>)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f7ff ffed 	bl	8000c96 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <LoopForever+0x14>)
 8000cbe:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <LoopForever+0x18>)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	f7ff ffee 	bl	8000ca2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000cc6:	480b      	ldr	r0, [pc, #44]	; (8000cf4 <LoopForever+0x1c>)
 8000cc8:	490b      	ldr	r1, [pc, #44]	; (8000cf8 <LoopForever+0x20>)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	f7ff ffe9 	bl	8000ca2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cd0:	f003 fe42 	bl	8004958 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000cd4:	f7ff fbec 	bl	80004b0 <main>

08000cd8 <LoopForever>:

LoopForever:
  b LoopForever
 8000cd8:	e7fe      	b.n	8000cd8 <LoopForever>
 8000cda:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000cdc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000ce0:	20000004 	.word	0x20000004
 8000ce4:	20000074 	.word	0x20000074
 8000ce8:	08005440 	.word	0x08005440
  INIT_BSS _sbss, _ebss
 8000cec:	20000074 	.word	0x20000074
 8000cf0:	20000130 	.word	0x20000130
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000cf4:	20030000 	.word	0x20030000
 8000cf8:	20030000 	.word	0x20030000

08000cfc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_Init+0x3c>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <HAL_Init+0x3c>)
 8000d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f000 f96a 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f000 f80f 	bl	8000d40 <HAL_InitTick>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	e001      	b.n	8000d32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d2e:	f7ff fd8d 	bl	800084c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d32:	79fb      	ldrb	r3, [r7, #7]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	58004000 	.word	0x58004000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000d4c:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_InitTick+0x6c>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d024      	beq.n	8000d9e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d54:	f001 fc82 	bl	800265c <HAL_RCC_GetHCLKFreq>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_InitTick+0x6c>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d64:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f972 	bl	8001056 <HAL_SYSTICK_Config>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10f      	bne.n	8000d98 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b0f      	cmp	r3, #15
 8000d7c:	d809      	bhi.n	8000d92 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	f04f 30ff 	mov.w	r0, #4294967295
 8000d86:	f000 f93e 	bl	8001006 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d8a:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <HAL_InitTick+0x70>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	e007      	b.n	8000da2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e004      	b.n	8000da2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e001      	b.n	8000da2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000000c 	.word	0x2000000c
 8000db0:	20000008 	.word	0x20000008

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	2000000c 	.word	0x2000000c
 8000dd8:	20000128 	.word	0x20000128

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000128 	.word	0x20000128

08000df4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000df8:	4b03      	ldr	r3, [pc, #12]	; (8000e08 <HAL_GetTickPrio+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffe2 	bl	8000ddc <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000e26:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <HAL_Delay+0x40>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffd2 	bl	8000ddc <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
    {
    }
  }
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000000c 	.word	0x2000000c

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db0b      	blt.n	8000ede <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec6:	79fb      	ldrb	r3, [r7, #7]
 8000ec8:	f003 021f 	and.w	r2, r3, #31
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <__NVIC_EnableIRQ+0x38>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	095b      	lsrs	r3, r3, #5
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
         );
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
	...

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f7ff ff8e 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff29 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff40 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff90 	bl	8000f44 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5f 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff33 	bl	8000eb4 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa4 	bl	8000fac <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b084      	sub	sp, #16
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d005      	beq.n	8001092 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2204      	movs	r2, #4
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	73fb      	strb	r3, [r7, #15]
 8001090:	e047      	b.n	8001122 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f022 020e 	bic.w	r2, r2, #14
 80010a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0201 	bic.w	r2, r2, #1
 80010b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f003 021c 	and.w	r2, r3, #28
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	2101      	movs	r1, #1
 80010d0:	fa01 f202 	lsl.w	r2, r1, r2
 80010d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80010de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d00c      	beq.n	8001102 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80010f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001100:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2201      	movs	r2, #1
 8001106:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	4798      	blx	r3
    }
  }
  return status;
 8001122:	7bfb      	ldrb	r3, [r7, #15]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b087      	sub	sp, #28
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113a:	e14c      	b.n	80013d6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2101      	movs	r1, #1
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	fa01 f303 	lsl.w	r3, r1, r3
 8001148:	4013      	ands	r3, r2
 800114a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 813e 	beq.w	80013d0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d00b      	beq.n	8001174 <HAL_GPIO_Init+0x48>
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b02      	cmp	r3, #2
 8001162:	d007      	beq.n	8001174 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001168:	2b11      	cmp	r3, #17
 800116a:	d003      	beq.n	8001174 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	2b12      	cmp	r3, #18
 8001172:	d130      	bne.n	80011d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68da      	ldr	r2, [r3, #12]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011aa:	2201      	movs	r2, #1
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	43db      	mvns	r3, r3
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	091b      	lsrs	r3, r3, #4
 80011c0:	f003 0201 	and.w	r2, r3, #1
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	2203      	movs	r2, #3
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	2b02      	cmp	r3, #2
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0xea>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	2b12      	cmp	r3, #18
 8001214:	d123      	bne.n	800125e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	08da      	lsrs	r2, r3, #3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	3208      	adds	r2, #8
 800121e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	220f      	movs	r2, #15
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4013      	ands	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	691a      	ldr	r2, [r3, #16]
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4313      	orrs	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	6939      	ldr	r1, [r7, #16]
 800125a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2203      	movs	r2, #3
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f003 0203 	and.w	r2, r3, #3
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8098 	beq.w	80013d0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80012a0:	4a54      	ldr	r2, [pc, #336]	; (80013f4 <HAL_GPIO_Init+0x2c8>)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	089b      	lsrs	r3, r3, #2
 80012a6:	3302      	adds	r3, #2
 80012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	220f      	movs	r2, #15
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012ca:	d019      	beq.n	8001300 <HAL_GPIO_Init+0x1d4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4a      	ldr	r2, [pc, #296]	; (80013f8 <HAL_GPIO_Init+0x2cc>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d013      	beq.n	80012fc <HAL_GPIO_Init+0x1d0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a49      	ldr	r2, [pc, #292]	; (80013fc <HAL_GPIO_Init+0x2d0>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d00d      	beq.n	80012f8 <HAL_GPIO_Init+0x1cc>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a48      	ldr	r2, [pc, #288]	; (8001400 <HAL_GPIO_Init+0x2d4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d007      	beq.n	80012f4 <HAL_GPIO_Init+0x1c8>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a47      	ldr	r2, [pc, #284]	; (8001404 <HAL_GPIO_Init+0x2d8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d101      	bne.n	80012f0 <HAL_GPIO_Init+0x1c4>
 80012ec:	2304      	movs	r3, #4
 80012ee:	e008      	b.n	8001302 <HAL_GPIO_Init+0x1d6>
 80012f0:	2307      	movs	r3, #7
 80012f2:	e006      	b.n	8001302 <HAL_GPIO_Init+0x1d6>
 80012f4:	2303      	movs	r3, #3
 80012f6:	e004      	b.n	8001302 <HAL_GPIO_Init+0x1d6>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e002      	b.n	8001302 <HAL_GPIO_Init+0x1d6>
 80012fc:	2301      	movs	r3, #1
 80012fe:	e000      	b.n	8001302 <HAL_GPIO_Init+0x1d6>
 8001300:	2300      	movs	r3, #0
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	f002 0203 	and.w	r2, r2, #3
 8001308:	0092      	lsls	r2, r2, #2
 800130a:	4093      	lsls	r3, r2
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001312:	4938      	ldr	r1, [pc, #224]	; (80013f4 <HAL_GPIO_Init+0x2c8>)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001320:	4b39      	ldr	r3, [pc, #228]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 8001322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001346:	4a30      	ldr	r2, [pc, #192]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800134e:	4b2e      	ldr	r3, [pc, #184]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 8001350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001374:	4a24      	ldr	r2, [pc, #144]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013a0:	4a19      	ldr	r2, [pc, #100]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ca:	4a0f      	ldr	r2, [pc, #60]	; (8001408 <HAL_GPIO_Init+0x2dc>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	3301      	adds	r3, #1
 80013d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f47f aeab 	bne.w	800113c <HAL_GPIO_Init+0x10>
  }
}
 80013e6:	bf00      	nop
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40010000 	.word	0x40010000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	48000800 	.word	0x48000800
 8001400:	48000c00 	.word	0x48000c00
 8001404:	48001000 	.word	0x48001000
 8001408:	58000800 	.word	0x58000800

0800140c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	460b      	mov	r3, r1
 8001416:	807b      	strh	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800141c:	787b      	ldrb	r3, [r7, #1]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001422:	887a      	ldrh	r2, [r7, #2]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001428:	e002      	b.n	8001430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142a:	887a      	ldrh	r2, [r7, #2]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_HSEM_IRQHandler+0x30>)
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_HSEM_IRQHandler+0x30>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	43db      	mvns	r3, r3
 8001450:	4906      	ldr	r1, [pc, #24]	; (800146c <HAL_HSEM_IRQHandler+0x30>)
 8001452:	4013      	ands	r3, r2
 8001454:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8001456:	4a05      	ldr	r2, [pc, #20]	; (800146c <HAL_HSEM_IRQHandler+0x30>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 f807 	bl	8001470 <HAL_HSEM_FreeCallback>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	58001500 	.word	0x58001500

08001470 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800148e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	58000400 	.word	0x58000400

080014a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_PWREx_GetVoltageRange+0x18>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	58000400 	.word	0x58000400

080014c0 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80014c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014d2:	d101      	bne.n	80014d8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80014d4:	2301      	movs	r3, #1
 80014d6:	e000      	b.n	80014da <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 80014e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f6:	6013      	str	r3, [r2, #0]
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001514:	6013      	str	r3, [r2, #0]
}
 8001516:	bf00      	nop
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800152e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800154c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800156e:	d101      	bne.n	8001574 <LL_RCC_HSE_IsReady+0x18>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <LL_RCC_HSE_IsReady+0x1a>
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800158e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80015a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80015c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ce:	d101      	bne.n	80015d4 <LL_RCC_HSI_IsReady+0x18>
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <LL_RCC_HSI_IsReady+0x1a>
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80015e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	061b      	lsls	r3, r3, #24
 80015f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015fa:	4313      	orrs	r3, r2
 80015fc:	604b      	str	r3, [r1, #4]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800160e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001616:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001634:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800164e:	b480      	push	{r7}
 8001650:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b02      	cmp	r3, #2
 8001660:	d101      	bne.n	8001666 <LL_RCC_HSI48_IsReady+0x18>
 8001662:	2301      	movs	r3, #1
 8001664:	e000      	b.n	8001668 <LL_RCC_HSI48_IsReady+0x1a>
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800169c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016a4:	f023 0301 	bic.w	r3, r3, #1
 80016a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016c6:	f043 0304 	orr.w	r3, r3, #4
 80016ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80016dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016e8:	f023 0304 	bic.w	r3, r3, #4
 80016ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80016fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b02      	cmp	r3, #2
 800170c:	d101      	bne.n	8001712 <LL_RCC_LSE_IsReady+0x18>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <LL_RCC_LSE_IsReady+0x1a>
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001722:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800174c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001750:	f023 0301 	bic.w	r3, r3, #1
 8001754:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b02      	cmp	r3, #2
 8001774:	d101      	bne.n	800177a <LL_RCC_LSI1_IsReady+0x18>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_RCC_LSI1_IsReady+0x1a>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800178a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001792:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001796:	f043 0304 	orr.w	r3, r3, #4
 800179a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80017ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr

080017ca <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80017ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d101      	bne.n	80017e2 <LL_RCC_LSI2_IsReady+0x18>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <LL_RCC_LSI2_IsReady+0x1a>
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80017f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800180a:	4313      	orrs	r3, r2
 800180c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800182a:	f043 0301 	orr.w	r3, r3, #1
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800183e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6013      	str	r3, [r2, #0]
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800185c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b02      	cmp	r3, #2
 8001868:	d101      	bne.n	800186e <LL_RCC_MSI_IsReady+0x16>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <LL_RCC_MSI_IsReady+0x18>
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800188c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018b2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2bb0      	cmp	r3, #176	; 0xb0
 80018b8:	d901      	bls.n	80018be <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80018ba:	23b0      	movs	r3, #176	; 0xb0
 80018bc:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80018be:	687b      	ldr	r3, [r7, #4]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018e6:	4313      	orrs	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018f6:	b480      	push	{r7}
 80018f8:	b083      	sub	sp, #12
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f023 0203 	bic.w	r2, r3, #3
 8001908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 030c 	and.w	r3, r3, #12
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800193e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001948:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800196a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800196e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001972:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4313      	orrs	r3, r2
 800197a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001996:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800199a:	f023 020f 	bic.w	r2, r3, #15
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019a6:	4313      	orrs	r3, r2
 80019a8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80019e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a28:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a2c:	011b      	lsls	r3, r3, #4
 8001a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a7e:	6013      	str	r3, [r2, #0]
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a9c:	6013      	str	r3, [r2, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001aba:	d101      	bne.n	8001ac0 <LL_RCC_PLL_IsReady+0x18>
 8001abc:	2301      	movs	r3, #1
 8001abe:	e000      	b.n	8001ac2 <LL_RCC_PLL_IsReady+0x1a>
 8001ac0:	2300      	movs	r3, #0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001ad0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	0a1b      	lsrs	r3, r3, #8
 8001ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	f003 0303 	and.w	r3, r3, #3
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b40:	d101      	bne.n	8001b46 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b66:	d101      	bne.n	8001b6c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b8c:	d101      	bne.n	8001b92 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bb0:	d101      	bne.n	8001bb6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bd4:	d101      	bne.n	8001bda <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b08d      	sub	sp, #52	; 0x34
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e386      	b.n	8002308 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0320 	and.w	r3, r3, #32
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 808f 	beq.w	8001d26 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c08:	f7ff fe89 	bl	800191e <LL_RCC_GetSysClkSource>
 8001c0c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c0e:	f7ff ff82 	bl	8001b16 <LL_RCC_PLL_GetMainSource>
 8001c12:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <HAL_RCC_OscConfig+0x3e>
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d149      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d146      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c26:	f7ff fe17 	bl	8001858 <LL_RCC_MSI_IsReady>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_RCC_OscConfig+0x54>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e365      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001c40:	f7ff fe2f 	bl	80018a2 <LL_RCC_MSI_GetRange>
 8001c44:	4603      	mov	r3, r0
 8001c46:	429c      	cmp	r4, r3
 8001c48:	d914      	bls.n	8001c74 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 fd44 	bl	80026dc <RCC_SetFlashLatencyFromMSIRange>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e354      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fe09 	bl	800187a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fe2d 	bl	80018cc <LL_RCC_MSI_SetCalibTrimming>
 8001c72:	e013      	b.n	8001c9c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fdfe 	bl	800187a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a1b      	ldr	r3, [r3, #32]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fe22 	bl	80018cc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fd25 	bl	80026dc <RCC_SetFlashLatencyFromMSIRange>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e335      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 8001c9c:	f7fe ff56 	bl	8000b4c <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ca0:	4bb4      	ldr	r3, [pc, #720]	; (8001f74 <HAL_RCC_OscConfig+0x38c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f84b 	bl	8000d40 <HAL_InitTick>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d039      	beq.n	8001d24 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e329      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d01e      	beq.n	8001cfa <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cbc:	f7ff fdae 	bl	800181c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff f88c 	bl	8000ddc <HAL_GetTick>
 8001cc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f888 	bl	8000ddc <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e316      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cda:	f7ff fdbd 	bl	8001858 <LL_RCC_MSI_IsReady>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0f1      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fdc6 	bl	800187a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff fdea 	bl	80018cc <LL_RCC_MSI_SetCalibTrimming>
 8001cf8:	e015      	b.n	8001d26 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cfa:	f7ff fd9e 	bl	800183a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cfe:	f7ff f86d 	bl	8000ddc <HAL_GetTick>
 8001d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d06:	f7ff f869 	bl	8000ddc <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e2f7      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d18:	f7ff fd9e 	bl	8001858 <LL_RCC_MSI_IsReady>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f1      	bne.n	8001d06 <HAL_RCC_OscConfig+0x11e>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d05a      	beq.n	8001de8 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d32:	f7ff fdf4 	bl	800191e <LL_RCC_GetSysClkSource>
 8001d36:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d38:	f7ff feed 	bl	8001b16 <LL_RCC_PLL_GetMainSource>
 8001d3c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d3e:	6a3b      	ldr	r3, [r7, #32]
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_OscConfig+0x168>
 8001d44:	6a3b      	ldr	r3, [r7, #32]
 8001d46:	2b0c      	cmp	r3, #12
 8001d48:	d10d      	bne.n	8001d66 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d10a      	bne.n	8001d66 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d50:	f7ff fc04 	bl	800155c <LL_RCC_HSE_IsReady>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d045      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1fe>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d141      	bne.n	8001de6 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e2d0      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6e:	d102      	bne.n	8001d76 <HAL_RCC_OscConfig+0x18e>
 8001d70:	f7ff fbd6 	bl	8001520 <LL_RCC_HSE_Enable>
 8001d74:	e00d      	b.n	8001d92 <HAL_RCC_OscConfig+0x1aa>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d7e:	d104      	bne.n	8001d8a <HAL_RCC_OscConfig+0x1a2>
 8001d80:	f7ff fbb0 	bl	80014e4 <LL_RCC_HSE_EnableBypass>
 8001d84:	f7ff fbcc 	bl	8001520 <LL_RCC_HSE_Enable>
 8001d88:	e003      	b.n	8001d92 <HAL_RCC_OscConfig+0x1aa>
 8001d8a:	f7ff fbd8 	bl	800153e <LL_RCC_HSE_Disable>
 8001d8e:	f7ff fbb8 	bl	8001502 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d012      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff f81f 	bl	8000ddc <HAL_GetTick>
 8001d9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da2:	f7ff f81b 	bl	8000ddc <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b64      	cmp	r3, #100	; 0x64
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e2a9      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001db4:	f7ff fbd2 	bl	800155c <LL_RCC_HSE_IsReady>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f1      	beq.n	8001da2 <HAL_RCC_OscConfig+0x1ba>
 8001dbe:	e013      	b.n	8001de8 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff f80c 	bl	8000ddc <HAL_GetTick>
 8001dc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f808 	bl	8000ddc <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b64      	cmp	r3, #100	; 0x64
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e296      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001dda:	f7ff fbbf 	bl	800155c <LL_RCC_HSE_IsReady>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f1      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1e0>
 8001de4:	e000      	b.n	8001de8 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d051      	beq.n	8001e98 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df4:	f7ff fd93 	bl	800191e <LL_RCC_GetSysClkSource>
 8001df8:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dfa:	f7ff fe8c 	bl	8001b16 <LL_RCC_PLL_GetMainSource>
 8001dfe:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d005      	beq.n	8001e12 <HAL_RCC_OscConfig+0x22a>
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	d113      	bne.n	8001e34 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d110      	bne.n	8001e34 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e12:	f7ff fbd3 	bl	80015bc <LL_RCC_HSI_IsReady>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_OscConfig+0x240>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e26f      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fbd7 	bl	80015e0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e32:	e031      	b.n	8001e98 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d019      	beq.n	8001e70 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3c:	f7ff fba0 	bl	8001580 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7fe ffcc 	bl	8000ddc <HAL_GetTick>
 8001e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e48:	f7fe ffc8 	bl	8000ddc <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e256      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e5a:	f7ff fbaf 	bl	80015bc <LL_RCC_HSI_IsReady>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d0f1      	beq.n	8001e48 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fbb9 	bl	80015e0 <LL_RCC_HSI_SetCalibTrimming>
 8001e6e:	e013      	b.n	8001e98 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e70:	f7ff fb95 	bl	800159e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7fe ffb2 	bl	8000ddc <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e7c:	f7fe ffae 	bl	8000ddc <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e23c      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e8e:	f7ff fb95 	bl	80015bc <LL_RCC_HSI_IsReady>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d1f1      	bne.n	8001e7c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80a2 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d075      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d046      	beq.n	8001f54 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001ec6:	f7ff fc4c 	bl	8001762 <LL_RCC_LSI1_IsReady>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d113      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001ed0:	f7ff fc25 	bl	800171e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ed4:	f7fe ff82 	bl	8000ddc <HAL_GetTick>
 8001ed8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001edc:	f7fe ff7e 	bl	8000ddc <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e20c      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8001eee:	f7ff fc38 	bl	8001762 <LL_RCC_LSI1_IsReady>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f1      	beq.n	8001edc <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8001ef8:	f7ff fc45 	bl	8001786 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7fe ff6e 	bl	8000ddc <HAL_GetTick>
 8001f00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f04:	f7fe ff6a 	bl	8000ddc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e1f8      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8001f16:	f7ff fc58 	bl	80017ca <LL_RCC_LSI2_IsReady>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0f1      	beq.n	8001f04 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fc62 	bl	80017ee <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8001f2a:	f7ff fc09 	bl	8001740 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7fe ff55 	bl	8000ddc <HAL_GetTick>
 8001f32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f36:	f7fe ff51 	bl	8000ddc <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e1df      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8001f48:	f7ff fc0b 	bl	8001762 <LL_RCC_LSI1_IsReady>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1f1      	bne.n	8001f36 <HAL_RCC_OscConfig+0x34e>
 8001f52:	e050      	b.n	8001ff6 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001f54:	f7ff fbe3 	bl	800171e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f58:	f7fe ff40 	bl	8000ddc <HAL_GetTick>
 8001f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001f60:	f7fe ff3c 	bl	8000ddc <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d904      	bls.n	8001f78 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1ca      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
 8001f72:	bf00      	nop
 8001f74:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8001f78:	f7ff fbf3 	bl	8001762 <LL_RCC_LSI1_IsReady>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0ee      	beq.n	8001f60 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001f82:	f7ff fc11 	bl	80017a8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001f88:	f7fe ff28 	bl	8000ddc <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e1b6      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001f9a:	f7ff fc16 	bl	80017ca <LL_RCC_LSI2_IsReady>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1f1      	bne.n	8001f88 <HAL_RCC_OscConfig+0x3a0>
 8001fa4:	e027      	b.n	8001ff6 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001fa6:	f7ff fbff 	bl	80017a8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001faa:	f7fe ff17 	bl	8000ddc <HAL_GetTick>
 8001fae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001fb2:	f7fe ff13 	bl	8000ddc <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e1a1      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001fc4:	f7ff fc01 	bl	80017ca <LL_RCC_LSI2_IsReady>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1f1      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001fce:	f7ff fbb7 	bl	8001740 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd2:	f7fe ff03 	bl	8000ddc <HAL_GetTick>
 8001fd6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001fda:	f7fe feff 	bl	8000ddc <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e18d      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8001fec:	f7ff fbb9 	bl	8001762 <LL_RCC_LSI1_IsReady>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f1      	bne.n	8001fda <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0304 	and.w	r3, r3, #4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d05b      	beq.n	80020ba <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002002:	4bb5      	ldr	r3, [pc, #724]	; (80022d8 <HAL_RCC_OscConfig+0x6f0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d114      	bne.n	8002038 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800200e:	f7ff fa39 	bl	8001484 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7fe fee3 	bl	8000ddc <HAL_GetTick>
 8002016:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7fe fedf 	bl	8000ddc <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e16d      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202c:	4baa      	ldr	r3, [pc, #680]	; (80022d8 <HAL_RCC_OscConfig+0x6f0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d102      	bne.n	8002046 <HAL_RCC_OscConfig+0x45e>
 8002040:	f7ff fb17 	bl	8001672 <LL_RCC_LSE_Enable>
 8002044:	e00c      	b.n	8002060 <HAL_RCC_OscConfig+0x478>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b05      	cmp	r3, #5
 800204c:	d104      	bne.n	8002058 <HAL_RCC_OscConfig+0x470>
 800204e:	f7ff fb32 	bl	80016b6 <LL_RCC_LSE_EnableBypass>
 8002052:	f7ff fb0e 	bl	8001672 <LL_RCC_LSE_Enable>
 8002056:	e003      	b.n	8002060 <HAL_RCC_OscConfig+0x478>
 8002058:	f7ff fb1c 	bl	8001694 <LL_RCC_LSE_Disable>
 800205c:	f7ff fb3c 	bl	80016d8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d014      	beq.n	8002092 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002068:	f7fe feb8 	bl	8000ddc <HAL_GetTick>
 800206c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7fe feb4 	bl	8000ddc <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e140      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002086:	f7ff fb38 	bl	80016fa <LL_RCC_LSE_IsReady>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0ef      	beq.n	8002070 <HAL_RCC_OscConfig+0x488>
 8002090:	e013      	b.n	80020ba <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002092:	f7fe fea3 	bl	8000ddc <HAL_GetTick>
 8002096:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209a:	f7fe fe9f 	bl	8000ddc <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e12b      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 80020b0:	f7ff fb23 	bl	80016fa <LL_RCC_LSE_IsReady>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1ef      	bne.n	800209a <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d02c      	beq.n	8002120 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d014      	beq.n	80020f8 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020ce:	f7ff fa9c 	bl	800160a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d2:	f7fe fe83 	bl	8000ddc <HAL_GetTick>
 80020d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020da:	f7fe fe7f 	bl	8000ddc <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e10d      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80020ec:	f7ff faaf 	bl	800164e <LL_RCC_HSI48_IsReady>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0f1      	beq.n	80020da <HAL_RCC_OscConfig+0x4f2>
 80020f6:	e013      	b.n	8002120 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020f8:	f7ff fa98 	bl	800162c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fc:	f7fe fe6e 	bl	8000ddc <HAL_GetTick>
 8002100:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002104:	f7fe fe6a 	bl	8000ddc <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e0f8      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002116:	f7ff fa9a 	bl	800164e <LL_RCC_HSI48_IsReady>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f1      	bne.n	8002104 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	2b00      	cmp	r3, #0
 8002126:	f000 80ee 	beq.w	8002306 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800212a:	f7ff fbf8 	bl	800191e <LL_RCC_GetSysClkSource>
 800212e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213c:	2b02      	cmp	r3, #2
 800213e:	f040 80af 	bne.w	80022a0 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	429a      	cmp	r2, r3
 800214e:	d123      	bne.n	8002198 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d11c      	bne.n	8002198 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	0a1b      	lsrs	r3, r3, #8
 8002162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d114      	bne.n	8002198 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002178:	429a      	cmp	r2, r3
 800217a:	d10d      	bne.n	8002198 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002186:	429a      	cmp	r2, r3
 8002188:	d106      	bne.n	8002198 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002194:	429a      	cmp	r2, r3
 8002196:	d05d      	beq.n	8002254 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	2b0c      	cmp	r3, #12
 800219c:	d058      	beq.n	8002250 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0ab      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021b0:	f7ff fc6b 	bl	8001a8a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021b4:	f7fe fe12 	bl	8000ddc <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe fe0e 	bl	8000ddc <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e09c      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ef      	bne.n	80021bc <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	4b3e      	ldr	r3, [pc, #248]	; (80022dc <HAL_RCC_OscConfig+0x6f4>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021ee:	4311      	orrs	r1, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021f4:	0212      	lsls	r2, r2, #8
 80021f6:	4311      	orrs	r1, r2
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021fc:	4311      	orrs	r1, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002202:	4311      	orrs	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002208:	430a      	orrs	r2, r1
 800220a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800220e:	4313      	orrs	r3, r2
 8002210:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002212:	f7ff fc2b 	bl	8001a6c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002224:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002226:	f7fe fdd9 	bl	8000ddc <HAL_GetTick>
 800222a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222c:	e008      	b.n	8002240 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222e:	f7fe fdd5 	bl	8000ddc <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d901      	bls.n	8002240 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e063      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0ef      	beq.n	800222e <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800224e:	e05a      	b.n	8002306 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e059      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d151      	bne.n	8002306 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002262:	f7ff fc03 	bl	8001a6c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002276:	f7fe fdb1 	bl	8000ddc <HAL_GetTick>
 800227a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227e:	f7fe fdad 	bl	8000ddc <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e03b      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0ef      	beq.n	800227e <HAL_RCC_OscConfig+0x696>
 800229e:	e032      	b.n	8002306 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d02d      	beq.n	8002302 <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	f7ff fbf0 	bl	8001a8a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80022aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b4:	f023 0303 	bic.w	r3, r3, #3
 80022b8:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80022ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022c4:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80022c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022cc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7fe fd85 	bl	8000ddc <HAL_GetTick>
 80022d2:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d4:	e00d      	b.n	80022f2 <HAL_RCC_OscConfig+0x70a>
 80022d6:	bf00      	nop
 80022d8:	58000400 	.word	0x58000400
 80022dc:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe fd7c 	bl	8000ddc <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1ef      	bne.n	80022e0 <HAL_RCC_OscConfig+0x6f8>
 8002300:	e001      	b.n	8002306 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3734      	adds	r7, #52	; 0x34
 800230c:	46bd      	mov	sp, r7
 800230e:	bd90      	pop	{r4, r7, pc}

08002310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e12a      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b97      	ldr	r3, [pc, #604]	; (8002584 <HAL_RCC_ClockConfig+0x274>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d91b      	bls.n	800236a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b94      	ldr	r3, [pc, #592]	; (8002584 <HAL_RCC_ClockConfig+0x274>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 0207 	bic.w	r2, r3, #7
 800233a:	4992      	ldr	r1, [pc, #584]	; (8002584 <HAL_RCC_ClockConfig+0x274>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002342:	f7fe fd4b 	bl	8000ddc <HAL_GetTick>
 8002346:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002348:	e008      	b.n	800235c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800234a:	f7fe fd47 	bl	8000ddc <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e10e      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800235c:	4b89      	ldr	r3, [pc, #548]	; (8002584 <HAL_RCC_ClockConfig+0x274>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d1ef      	bne.n	800234a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d016      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff fadb 	bl	8001936 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002380:	f7fe fd2c 	bl	8000ddc <HAL_GetTick>
 8002384:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002388:	f7fe fd28 	bl	8000ddc <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e0ef      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800239a:	f7ff fbc8 	bl	8001b2e <LL_RCC_IsActiveFlag_HPRE>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f1      	beq.n	8002388 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0320 	and.w	r3, r3, #32
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d016      	beq.n	80023de <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fad2 	bl	800195e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023ba:	f7fe fd0f 	bl	8000ddc <HAL_GetTick>
 80023be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023c2:	f7fe fd0b 	bl	8000ddc <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e0d2      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80023d4:	f7ff fbbd 	bl	8001b52 <LL_RCC_IsActiveFlag_C2HPRE>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f1      	beq.n	80023c2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d016      	beq.n	8002418 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff facb 	bl	800198a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023f4:	f7fe fcf2 	bl	8000ddc <HAL_GetTick>
 80023f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023fc:	f7fe fcee 	bl	8000ddc <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0b5      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800240e:	f7ff fbb3 	bl	8001b78 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f1      	beq.n	80023fc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d016      	beq.n	8002452 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fac5 	bl	80019b8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800242e:	f7fe fcd5 	bl	8000ddc <HAL_GetTick>
 8002432:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002434:	e008      	b.n	8002448 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002436:	f7fe fcd1 	bl	8000ddc <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e098      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002448:	f7ff fba9 	bl	8001b9e <LL_RCC_IsActiveFlag_PPRE1>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f1      	beq.n	8002436 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d017      	beq.n	800248e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fabb 	bl	80019e0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800246a:	f7fe fcb7 	bl	8000ddc <HAL_GetTick>
 800246e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002470:	e008      	b.n	8002484 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002472:	f7fe fcb3 	bl	8000ddc <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e07a      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002484:	f7ff fb9d 	bl	8001bc2 <LL_RCC_IsActiveFlag_PPRE2>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f1      	beq.n	8002472 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d043      	beq.n	8002522 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d106      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80024a2:	f7ff f85b 	bl	800155c <LL_RCC_HSE_IsReady>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d11e      	bne.n	80024ea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e064      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80024b8:	f7ff faf6 	bl	8001aa8 <LL_RCC_PLL_IsReady>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d113      	bne.n	80024ea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e059      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80024ce:	f7ff f9c3 	bl	8001858 <LL_RCC_MSI_IsReady>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d108      	bne.n	80024ea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e04e      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80024dc:	f7ff f86e 	bl	80015bc <LL_RCC_HSI_IsReady>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e047      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fa01 	bl	80018f6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f4:	f7fe fc72 	bl	8000ddc <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fc:	f7fe fc6e 	bl	8000ddc <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e033      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	f7ff fa04 	bl	800191e <LL_RCC_GetSysClkSource>
 8002516:	4602      	mov	r2, r0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	429a      	cmp	r2, r3
 8002520:	d1ec      	bne.n	80024fc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_RCC_ClockConfig+0x274>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d21b      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002530:	4b14      	ldr	r3, [pc, #80]	; (8002584 <HAL_RCC_ClockConfig+0x274>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f023 0207 	bic.w	r2, r3, #7
 8002538:	4912      	ldr	r1, [pc, #72]	; (8002584 <HAL_RCC_ClockConfig+0x274>)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002540:	f7fe fc4c 	bl	8000ddc <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	e008      	b.n	800255a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002548:	f7fe fc48 	bl	8000ddc <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e00f      	b.n	800257a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <HAL_RCC_ClockConfig+0x274>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d1ef      	bne.n	8002548 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002568:	f7fe faf0 	bl	8000b4c <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800256c:	f7fe fc42 	bl	8000df4 <HAL_GetTickPrio>
 8002570:	4603      	mov	r3, r0
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fbe4 	bl	8000d40 <HAL_InitTick>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	58004000 	.word	0x58004000

08002588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258e:	f7ff f9c6 	bl	800191e <LL_RCC_GetSysClkSource>
 8002592:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10a      	bne.n	80025b0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800259a:	f7ff f982 	bl	80018a2 <LL_RCC_MSI_GetRange>
 800259e:	4603      	mov	r3, r0
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	4a2a      	ldr	r2, [pc, #168]	; (8002650 <HAL_RCC_GetSysClockFreq+0xc8>)
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	e04a      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d102      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	e044      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d10a      	bne.n	80025d8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025c2:	f7fe ff7d 	bl	80014c0 <LL_RCC_HSE_IsEnabledDiv2>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d102      	bne.n	80025d2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	e039      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80025d2:	4b21      	ldr	r3, [pc, #132]	; (8002658 <HAL_RCC_GetSysClockFreq+0xd0>)
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	e036      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80025d8:	f7ff fa9d 	bl	8001b16 <LL_RCC_PLL_GetMainSource>
 80025dc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d002      	beq.n	80025ea <HAL_RCC_GetSysClockFreq+0x62>
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d003      	beq.n	80025f0 <HAL_RCC_GetSysClockFreq+0x68>
 80025e8:	e00d      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025ec:	60bb      	str	r3, [r7, #8]
        break;
 80025ee:	e015      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025f0:	f7fe ff66 	bl	80014c0 <LL_RCC_HSE_IsEnabledDiv2>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025fc:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80025fe:	e00d      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002602:	60bb      	str	r3, [r7, #8]
        break;
 8002604:	e00a      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002606:	f7ff f94c 	bl	80018a2 <LL_RCC_MSI_GetRange>
 800260a:	4603      	mov	r3, r0
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	4a0f      	ldr	r2, [pc, #60]	; (8002650 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002618:	60bb      	str	r3, [r7, #8]
        break;
 800261a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800261c:	f7ff fa56 	bl	8001acc <LL_RCC_PLL_GetN>
 8002620:	4602      	mov	r2, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	fb03 f402 	mul.w	r4, r3, r2
 8002628:	f7ff fa69 	bl	8001afe <LL_RCC_PLL_GetDivider>
 800262c:	4603      	mov	r3, r0
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	3301      	adds	r3, #1
 8002632:	fbb4 f4f3 	udiv	r4, r4, r3
 8002636:	f7ff fa56 	bl	8001ae6 <LL_RCC_PLL_GetR>
 800263a:	4603      	mov	r3, r0
 800263c:	0f5b      	lsrs	r3, r3, #29
 800263e:	3301      	adds	r3, #1
 8002640:	fbb4 f3f3 	udiv	r3, r4, r3
 8002644:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002646:	68fb      	ldr	r3, [r7, #12]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}
 8002650:	08005374 	.word	0x08005374
 8002654:	00f42400 	.word	0x00f42400
 8002658:	01e84800 	.word	0x01e84800

0800265c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800265c:	b598      	push	{r3, r4, r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002660:	f7ff ff92 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002664:	4604      	mov	r4, r0
 8002666:	f7ff f9cf 	bl	8001a08 <LL_RCC_GetAHBPrescaler>
 800266a:	4603      	mov	r3, r0
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	4a03      	ldr	r2, [pc, #12]	; (8002680 <HAL_RCC_GetHCLKFreq+0x24>)
 8002674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002678:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd98      	pop	{r3, r4, r7, pc}
 8002680:	08005314 	.word	0x08005314

08002684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002684:	b598      	push	{r3, r4, r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002688:	f7ff ffe8 	bl	800265c <HAL_RCC_GetHCLKFreq>
 800268c:	4604      	mov	r4, r0
 800268e:	f7ff f9d5 	bl	8001a3c <LL_RCC_GetAPB1Prescaler>
 8002692:	4603      	mov	r3, r0
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	4a04      	ldr	r2, [pc, #16]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800269c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a0:	f003 031f 	and.w	r3, r3, #31
 80026a4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd98      	pop	{r3, r4, r7, pc}
 80026ac:	08005354 	.word	0x08005354

080026b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b0:	b598      	push	{r3, r4, r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80026b4:	f7ff ffd2 	bl	800265c <HAL_RCC_GetHCLKFreq>
 80026b8:	4604      	mov	r4, r0
 80026ba:	f7ff f9cb 	bl	8001a54 <LL_RCC_GetAPB2Prescaler>
 80026be:	4603      	mov	r3, r0
 80026c0:	0adb      	lsrs	r3, r3, #11
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	4a04      	ldr	r2, [pc, #16]	; (80026d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026cc:	f003 031f 	and.w	r3, r3, #31
 80026d0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd98      	pop	{r3, r4, r7, pc}
 80026d8:	08005354 	.word	0x08005354

080026dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80026dc:	b590      	push	{r4, r7, lr}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2bb0      	cmp	r3, #176	; 0xb0
 80026e8:	d903      	bls.n	80026f2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	e007      	b.n	8002702 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	091b      	lsrs	r3, r3, #4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	4a11      	ldr	r2, [pc, #68]	; (8002740 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002702:	f7ff f98d 	bl	8001a20 <LL_RCC_GetAHB4Prescaler>
 8002706:	4603      	mov	r3, r0
 8002708:	091b      	lsrs	r3, r3, #4
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	4a0d      	ldr	r2, [pc, #52]	; (8002744 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	fbb2 f3f3 	udiv	r3, r2, r3
 800271a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4a0a      	ldr	r2, [pc, #40]	; (8002748 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002720:	fba2 2303 	umull	r2, r3, r2, r3
 8002724:	0c9c      	lsrs	r4, r3, #18
 8002726:	f7fe febd 	bl	80014a4 <HAL_PWREx_GetVoltageRange>
 800272a:	4603      	mov	r3, r0
 800272c:	4619      	mov	r1, r3
 800272e:	4620      	mov	r0, r4
 8002730:	f000 f80c 	bl	800274c <RCC_SetFlashLatency>
 8002734:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002736:	4618      	mov	r0, r3
 8002738:	3714      	adds	r7, #20
 800273a:	46bd      	mov	sp, r7
 800273c:	bd90      	pop	{r4, r7, pc}
 800273e:	bf00      	nop
 8002740:	08005374 	.word	0x08005374
 8002744:	08005314 	.word	0x08005314
 8002748:	431bde83 	.word	0x431bde83

0800274c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800274c:	b590      	push	{r4, r7, lr}
 800274e:	b093      	sub	sp, #76	; 0x4c
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002756:	4b39      	ldr	r3, [pc, #228]	; (800283c <RCC_SetFlashLatency+0xf0>)
 8002758:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800275c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800275e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002762:	4a37      	ldr	r2, [pc, #220]	; (8002840 <RCC_SetFlashLatency+0xf4>)
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	ca07      	ldmia	r2, {r0, r1, r2}
 800276a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800276e:	4b35      	ldr	r3, [pc, #212]	; (8002844 <RCC_SetFlashLatency+0xf8>)
 8002770:	f107 040c 	add.w	r4, r7, #12
 8002774:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002776:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800277a:	2300      	movs	r3, #0
 800277c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002784:	d11c      	bne.n	80027c0 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002786:	2300      	movs	r3, #0
 8002788:	643b      	str	r3, [r7, #64]	; 0x40
 800278a:	e015      	b.n	80027b8 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800278c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002794:	4413      	add	r3, r2
 8002796:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	429a      	cmp	r2, r3
 800279e:	d808      	bhi.n	80027b2 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027a8:	4413      	add	r3, r2
 80027aa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027ae:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80027b0:	e022      	b.n	80027f8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80027b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027b4:	3301      	adds	r3, #1
 80027b6:	643b      	str	r3, [r7, #64]	; 0x40
 80027b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d9e6      	bls.n	800278c <RCC_SetFlashLatency+0x40>
 80027be:	e01b      	b.n	80027f8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027c4:	e015      	b.n	80027f2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80027c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027ce:	4413      	add	r3, r2
 80027d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d808      	bhi.n	80027ec <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80027e2:	4413      	add	r3, r2
 80027e4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80027e8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80027ea:	e005      	b.n	80027f8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ee:	3301      	adds	r3, #1
 80027f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d9e6      	bls.n	80027c6 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80027f8:	4b13      	ldr	r3, [pc, #76]	; (8002848 <RCC_SetFlashLatency+0xfc>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f023 0207 	bic.w	r2, r3, #7
 8002800:	4911      	ldr	r1, [pc, #68]	; (8002848 <RCC_SetFlashLatency+0xfc>)
 8002802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002804:	4313      	orrs	r3, r2
 8002806:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002808:	f7fe fae8 	bl	8000ddc <HAL_GetTick>
 800280c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800280e:	e008      	b.n	8002822 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002810:	f7fe fae4 	bl	8000ddc <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d901      	bls.n	8002822 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e007      	b.n	8002832 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <RCC_SetFlashLatency+0xfc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800282c:	429a      	cmp	r2, r3
 800282e:	d1ef      	bne.n	8002810 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	374c      	adds	r7, #76	; 0x4c
 8002836:	46bd      	mov	sp, r7
 8002838:	bd90      	pop	{r4, r7, pc}
 800283a:	bf00      	nop
 800283c:	080052d8 	.word	0x080052d8
 8002840:	080052e8 	.word	0x080052e8
 8002844:	080052f4 	.word	0x080052f4
 8002848:	58004000 	.word	0x58004000

0800284c <LL_RCC_LSE_IsEnabled>:
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <LL_RCC_LSE_IsEnabled+0x18>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <LL_RCC_LSE_IsEnabled+0x1a>
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_RCC_LSE_IsReady>:
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002874:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b02      	cmp	r3, #2
 8002882:	d101      	bne.n	8002888 <LL_RCC_LSE_IsReady+0x18>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <LL_RCC_LSE_IsReady+0x1a>
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <LL_RCC_SetRFWKPClockSource>:
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_RCC_SetSMPSClockSource>:
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80028c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f023 0203 	bic.w	r2, r3, #3
 80028d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4313      	orrs	r3, r2
 80028da:	624b      	str	r3, [r1, #36]	; 0x24
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <LL_RCC_SetSMPSPrescaler>:
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80028f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4313      	orrs	r3, r2
 8002902:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_RCC_SetUSARTClockSource>:
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002920:	f023 0203 	bic.w	r2, r3, #3
 8002924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <LL_RCC_SetLPUARTClockSource>:
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002950:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <LL_RCC_SetI2CClockSource>:
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002974:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	091b      	lsrs	r3, r3, #4
 800297c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002980:	43db      	mvns	r3, r3
 8002982:	401a      	ands	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800298c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_SetLPTIMClockSource>:
{
 80029a2:	b480      	push	{r7}
 80029a4:	b083      	sub	sp, #12
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80029aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	0c1b      	lsrs	r3, r3, #16
 80029b6:	041b      	lsls	r3, r3, #16
 80029b8:	43db      	mvns	r3, r3
 80029ba:	401a      	ands	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	041b      	lsls	r3, r3, #16
 80029c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029c4:	4313      	orrs	r3, r2
 80029c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <LL_RCC_SetSAIClockSource>:
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <LL_RCC_SetRNGClockSource>:
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a12:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <LL_RCC_SetCLK48ClockSource>:
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_RCC_SetUSBClockSource>:
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b082      	sub	sp, #8
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff ffe3 	bl	8002a2e <LL_RCC_SetCLK48ClockSource>
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <LL_RCC_SetADCClockSource>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_RCC_SetRTCClockSource>:
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <LL_RCC_GetRTCClockSource>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <LL_RCC_ForceBackupDomainReset>:
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002ae6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <LL_RCC_PLLSAI1_Enable>:
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b38:	6013      	str	r3, [r2, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_RCC_PLLSAI1_Disable>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b56:	6013      	str	r3, [r2, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <LL_RCC_PLLSAI1_IsReady>:
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b74:	d101      	bne.n	8002b7a <LL_RCC_PLLSAI1_IsReady+0x18>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	b088      	sub	sp, #32
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002b8e:	2300      	movs	r3, #0
 8002b90:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002b92:	2300      	movs	r3, #0
 8002b94:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d033      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002baa:	d00c      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002bac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb0:	d802      	bhi.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d010      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bb6:	e017      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002bb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bbc:	d017      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002bbe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002bc2:	d016      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002bc4:	e010      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002bd6:	e00d      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3304      	adds	r3, #4
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 f947 	bl	8002e70 <RCCEx_PLLSAI1_ConfigNP>
 8002be2:	4603      	mov	r3, r0
 8002be4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002be6:	e005      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	77fb      	strb	r3, [r7, #31]
        break;
 8002bec:	e002      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002bee:	bf00      	nop
 8002bf0:	e000      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8002bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bf4:	7ffb      	ldrb	r3, [r7, #31]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fee9 	bl	80029d6 <LL_RCC_SetSAIClockSource>
 8002c04:	e001      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c06:	7ffb      	ldrb	r3, [r7, #31]
 8002c08:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d046      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002c16:	f7ff ff57 	bl	8002ac8 <LL_RCC_GetRTCClockSource>
 8002c1a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d03c      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002c26:	f7fe fc2d 	bl	8001484 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff31 	bl	8002a9c <LL_RCC_SetRTCClockSource>
 8002c3a:	e02e      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c44:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002c46:	f7ff ff4c 	bl	8002ae2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002c4a:	f7ff ff5b 	bl	8002b04 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002c66:	f7ff fdf1 	bl	800284c <LL_RCC_LSE_IsEnabled>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d114      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c70:	f7fe f8b4 	bl	8000ddc <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c76:	e00b      	b.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f7fe f8b0 	bl	8000ddc <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d902      	bls.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	77fb      	strb	r3, [r7, #31]
              break;
 8002c8e:	e004      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002c90:	f7ff fdee 	bl	8002870 <LL_RCC_LSE_IsReady>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d1ee      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002c9a:	7ffb      	ldrb	r3, [r7, #31]
 8002c9c:	77bb      	strb	r3, [r7, #30]
 8002c9e:	e001      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca0:	7ffb      	ldrb	r3, [r7, #31]
 8002ca2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fe2b 	bl	8002910 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fe36 	bl	800293c <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fe5e 	bl	80029a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fe53 	bl	80029a2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d004      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fe2b 	bl	8002968 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d004      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fe20 	bl	8002968 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d022      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fe8e 	bl	8002a5a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d46:	d107      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d56:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d60:	d10b      	bne.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 f8dd 	bl	8002f26 <RCCEx_PLLSAI1_ConfigNQ>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002d70:	7ffb      	ldrb	r3, [r7, #31]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8002d76:	7ffb      	ldrb	r3, [r7, #31]
 8002d78:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02b      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8e:	d008      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d98:	d003      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d105      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x228>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fe2b 	bl	8002a02 <LL_RCC_SetRNGClockSource>
 8002dac:	e00a      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7ff fe22 	bl	8002a02 <LL_RCC_SetRNGClockSource>
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f7ff fe35 	bl	8002a2e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc8:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8002dcc:	d107      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ddc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d022      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7ff fe3e 	bl	8002a70 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e16:	d10b      	bne.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f000 f8dd 	bl	8002fdc <RCCEx_PLLSAI1_ConfigNR>
 8002e22:	4603      	mov	r3, r0
 8002e24:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8002e26:	7ffb      	ldrb	r3, [r7, #31]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8002e2c:	7ffb      	ldrb	r3, [r7, #31]
 8002e2e:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fd27 	bl	8002894 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff fd46 	bl	80028e8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff fd2d 	bl	80028c0 <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

  return status;
 8002e66:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002e7c:	f7ff fe62 	bl	8002b44 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e80:	f7fd ffac 	bl	8000ddc <HAL_GetTick>
 8002e84:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e86:	e009      	b.n	8002e9c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e88:	f7fd ffa8 	bl	8000ddc <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d902      	bls.n	8002e9c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9a:	e004      	b.n	8002ea6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002e9c:	f7ff fe61 	bl	8002b62 <LL_RCC_PLLSAI1_IsReady>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d137      	bne.n	8002f1c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	021b      	lsls	r3, r3, #8
 8002ebc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8002ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002eda:	f7ff fe24 	bl	8002b26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ede:	f7fd ff7d 	bl	8000ddc <HAL_GetTick>
 8002ee2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002ee4:	e009      	b.n	8002efa <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ee6:	f7fd ff79 	bl	8000ddc <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d902      	bls.n	8002efa <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	73fb      	strb	r3, [r7, #15]
        break;
 8002ef8:	e004      	b.n	8002f04 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002efa:	f7ff fe32 	bl	8002b62 <LL_RCC_PLLSAI1_IsReady>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d1f0      	bne.n	8002ee6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d108      	bne.n	8002f1c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	691b      	ldr	r3, [r3, #16]
 8002f14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b084      	sub	sp, #16
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002f32:	f7ff fe07 	bl	8002b44 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f36:	f7fd ff51 	bl	8000ddc <HAL_GetTick>
 8002f3a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f3c:	e009      	b.n	8002f52 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f3e:	f7fd ff4d 	bl	8000ddc <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d902      	bls.n	8002f52 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e004      	b.n	8002f5c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002f52:	f7ff fe06 	bl	8002b62 <LL_RCC_PLLSAI1_IsReady>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1f0      	bne.n	8002f3e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8002f5c:	7bfb      	ldrb	r3, [r7, #15]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d137      	bne.n	8002fd2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002f62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	021b      	lsls	r3, r3, #8
 8002f72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f76:	4313      	orrs	r3, r2
 8002f78:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8002f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002f90:	f7ff fdc9 	bl	8002b26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f94:	f7fd ff22 	bl	8000ddc <HAL_GetTick>
 8002f98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002f9a:	e009      	b.n	8002fb0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f9c:	f7fd ff1e 	bl	8000ddc <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d902      	bls.n	8002fb0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	73fb      	strb	r3, [r7, #15]
        break;
 8002fae:	e004      	b.n	8002fba <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002fb0:	f7ff fdd7 	bl	8002b62 <LL_RCC_PLLSAI1_IsReady>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d1f0      	bne.n	8002f9c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d108      	bne.n	8002fd2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002fe8:	f7ff fdac 	bl	8002b44 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002fec:	f7fd fef6 	bl	8000ddc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002ff2:	e009      	b.n	8003008 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ff4:	f7fd fef2 	bl	8000ddc <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d902      	bls.n	8003008 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	73fb      	strb	r3, [r7, #15]
      break;
 8003006:	e004      	b.n	8003012 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003008:	f7ff fdab 	bl	8002b62 <LL_RCC_PLLSAI1_IsReady>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003012:	7bfb      	ldrb	r3, [r7, #15]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d137      	bne.n	8003088 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800302c:	4313      	orrs	r3, r2
 800302e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003042:	4313      	orrs	r3, r2
 8003044:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003046:	f7ff fd6e 	bl	8002b26 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304a:	f7fd fec7 	bl	8000ddc <HAL_GetTick>
 800304e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003050:	e009      	b.n	8003066 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003052:	f7fd fec3 	bl	8000ddc <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d902      	bls.n	8003066 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	73fb      	strb	r3, [r7, #15]
        break;
 8003064:	e004      	b.n	8003070 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003066:	f7ff fd7c 	bl	8002b62 <LL_RCC_PLLSAI1_IsReady>
 800306a:	4603      	mov	r3, r0
 800306c:	2b01      	cmp	r3, #1
 800306e:	d1f0      	bne.n	8003052 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d108      	bne.n	8003088 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307a:	691a      	ldr	r2, [r3, #16]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003084:	4313      	orrs	r3, r2
 8003086:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <LL_RCC_GetUSARTClockSource>:
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800309a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4013      	ands	r3, r2
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <LL_RCC_GetLPUARTClockSource>:
{
 80030b2:	b480      	push	{r7}
 80030b4:	b083      	sub	sp, #12
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80030ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4013      	ands	r3, r2
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b082      	sub	sp, #8
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e042      	b.n	800316a <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd fbb8 	bl	800086c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2224      	movs	r2, #36	; 0x24
 8003100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0201 	bic.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fc25 	bl	8003964 <UART_SetConfig>
 800311a:	4603      	mov	r3, r0
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e022      	b.n	800316a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	2b00      	cmp	r3, #0
 800312a:	d002      	beq.n	8003132 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fe27 	bl	8003d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003140:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003150:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0201 	orr.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 feae 	bl	8003ec4 <UART_CheckIdleState>
 8003168:	4603      	mov	r3, r0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b08a      	sub	sp, #40	; 0x28
 8003176:	af02      	add	r7, sp, #8
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003188:	2b20      	cmp	r3, #32
 800318a:	f040 8083 	bne.w	8003294 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d002      	beq.n	800319a <HAL_UART_Transmit+0x28>
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e07b      	b.n	8003296 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_UART_Transmit+0x3a>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e074      	b.n	8003296 <HAL_UART_Transmit+0x124>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2221      	movs	r2, #33	; 0x21
 80031c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80031c4:	f7fd fe0a 	bl	8000ddc <HAL_GetTick>
 80031c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	88fa      	ldrh	r2, [r7, #6]
 80031ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	88fa      	ldrh	r2, [r7, #6]
 80031d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e2:	d108      	bne.n	80031f6 <HAL_UART_Transmit+0x84>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d104      	bne.n	80031f6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	61bb      	str	r3, [r7, #24]
 80031f4:	e003      	b.n	80031fe <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8003206:	e02c      	b.n	8003262 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	2200      	movs	r2, #0
 8003210:	2180      	movs	r1, #128	; 0x80
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fe9e 	bl	8003f54 <UART_WaitOnFlagUntilTimeout>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e039      	b.n	8003296 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10b      	bne.n	8003240 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	881b      	ldrh	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003236:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	3302      	adds	r3, #2
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	e007      	b.n	8003250 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	781a      	ldrb	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3301      	adds	r3, #1
 800324e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b29a      	uxth	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1cc      	bne.n	8003208 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2200      	movs	r2, #0
 8003276:	2140      	movs	r1, #64	; 0x40
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 fe6b 	bl	8003f54 <UART_WaitOnFlagUntilTimeout>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e006      	b.n	8003296 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2220      	movs	r2, #32
 800328c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	e000      	b.n	8003296 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003294:	2302      	movs	r3, #2
  }
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d168      	bne.n	800338a <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_UART_Transmit_IT+0x24>
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e061      	b.n	800338c <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_UART_Transmit_IT+0x36>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e05a      	b.n	800338c <HAL_UART_Transmit_IT+0xec>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	88fa      	ldrh	r2, [r7, #6]
 80032e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	88fa      	ldrh	r2, [r7, #6]
 80032f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2221      	movs	r2, #33	; 0x21
 8003306:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800330e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003312:	d11c      	bne.n	800334e <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800331c:	d107      	bne.n	800332e <HAL_UART_Transmit_IT+0x8e>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	4a1b      	ldr	r2, [pc, #108]	; (8003398 <HAL_UART_Transmit_IT+0xf8>)
 800332a:	671a      	str	r2, [r3, #112]	; 0x70
 800332c:	e002      	b.n	8003334 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a1a      	ldr	r2, [pc, #104]	; (800339c <HAL_UART_Transmit_IT+0xfc>)
 8003332:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	e01b      	b.n	8003386 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003356:	d107      	bne.n	8003368 <HAL_UART_Transmit_IT+0xc8>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d103      	bne.n	8003368 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4a0f      	ldr	r2, [pc, #60]	; (80033a0 <HAL_UART_Transmit_IT+0x100>)
 8003364:	671a      	str	r2, [r3, #112]	; 0x70
 8003366:	e002      	b.n	800336e <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <HAL_UART_Transmit_IT+0x104>)
 800336c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003384:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	08004297 	.word	0x08004297
 800339c:	080041fd 	.word	0x080041fd
 80033a0:	0800417f 	.word	0x0800417f
 80033a4:	0800410b 	.word	0x0800410b

080033a8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033bc:	2b20      	cmp	r3, #32
 80033be:	f040 80bc 	bne.w	800353a <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d002      	beq.n	80033ce <HAL_UART_Receive_IT+0x26>
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e0b4      	b.n	800353c <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_UART_Receive_IT+0x38>
 80033dc:	2302      	movs	r3, #2
 80033de:	e0ad      	b.n	800353c <HAL_UART_Receive_IT+0x194>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	88fa      	ldrh	r2, [r7, #6]
 80033f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	88fa      	ldrh	r2, [r7, #6]
 80033fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340c:	d10e      	bne.n	800342c <HAL_UART_Receive_IT+0x84>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d105      	bne.n	8003422 <HAL_UART_Receive_IT+0x7a>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f240 12ff 	movw	r2, #511	; 0x1ff
 800341c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003420:	e02d      	b.n	800347e <HAL_UART_Receive_IT+0xd6>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	22ff      	movs	r2, #255	; 0xff
 8003426:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800342a:	e028      	b.n	800347e <HAL_UART_Receive_IT+0xd6>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10d      	bne.n	8003450 <HAL_UART_Receive_IT+0xa8>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <HAL_UART_Receive_IT+0x9e>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	22ff      	movs	r2, #255	; 0xff
 8003440:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003444:	e01b      	b.n	800347e <HAL_UART_Receive_IT+0xd6>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	227f      	movs	r2, #127	; 0x7f
 800344a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800344e:	e016      	b.n	800347e <HAL_UART_Receive_IT+0xd6>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003458:	d10d      	bne.n	8003476 <HAL_UART_Receive_IT+0xce>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d104      	bne.n	800346c <HAL_UART_Receive_IT+0xc4>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	227f      	movs	r2, #127	; 0x7f
 8003466:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800346a:	e008      	b.n	800347e <HAL_UART_Receive_IT+0xd6>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	223f      	movs	r2, #63	; 0x3f
 8003470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003474:	e003      	b.n	800347e <HAL_UART_Receive_IT+0xd6>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2222      	movs	r2, #34	; 0x22
 800348a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0201 	orr.w	r2, r2, #1
 800349c:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034a6:	d12a      	bne.n	80034fe <HAL_UART_Receive_IT+0x156>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80034ae:	88fa      	ldrh	r2, [r7, #6]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d324      	bcc.n	80034fe <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034bc:	d107      	bne.n	80034ce <HAL_UART_Receive_IT+0x126>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d103      	bne.n	80034ce <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4a1f      	ldr	r2, [pc, #124]	; (8003548 <HAL_UART_Receive_IT+0x1a0>)
 80034ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80034cc:	e002      	b.n	80034d4 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a1e      	ldr	r2, [pc, #120]	; (800354c <HAL_UART_Receive_IT+0x1a4>)
 80034d2:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034ea:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034fa:	609a      	str	r2, [r3, #8]
 80034fc:	e01b      	b.n	8003536 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003506:	d107      	bne.n	8003518 <HAL_UART_Receive_IT+0x170>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d103      	bne.n	8003518 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a0f      	ldr	r2, [pc, #60]	; (8003550 <HAL_UART_Receive_IT+0x1a8>)
 8003514:	66da      	str	r2, [r3, #108]	; 0x6c
 8003516:	e002      	b.n	800351e <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a0e      	ldr	r2, [pc, #56]	; (8003554 <HAL_UART_Receive_IT+0x1ac>)
 800351c:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003534:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 800353a:	2302      	movs	r3, #2
  }
}
 800353c:	4618      	mov	r0, r3
 800353e:	3714      	adds	r7, #20
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	080045cd 	.word	0x080045cd
 800354c:	080044c5 	.word	0x080044c5
 8003550:	08004419 	.word	0x08004419
 8003554:	0800436f 	.word	0x0800436f

08003558 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800356e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800357e:	f023 0301 	bic.w	r3, r3, #1
 8003582:	6093      	str	r3, [r2, #8]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b40      	cmp	r3, #64	; 0x40
 8003590:	d13a      	bne.n	8003608 <HAL_UART_AbortReceive_IT+0xb0>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035a0:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d013      	beq.n	80035d2 <HAL_UART_AbortReceive_IT+0x7a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035ae:	4a22      	ldr	r2, [pc, #136]	; (8003638 <HAL_UART_AbortReceive_IT+0xe0>)
 80035b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fd59 	bl	800106e <HAL_DMA_Abort_IT>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d034      	beq.n	800362c <HAL_UART_AbortReceive_IT+0xd4>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6f92      	ldr	r2, [r2, #120]	; 0x78
 80035cc:	4610      	mov	r0, r2
 80035ce:	4798      	blx	r3
 80035d0:	e02c      	b.n	800362c <HAL_UART_AbortReceive_IT+0xd4>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	659a      	str	r2, [r3, #88]	; 0x58

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	220f      	movs	r2, #15
 80035e6:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0208 	orr.w	r2, r2, #8
 80035f6:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 f9a5 	bl	8003950 <HAL_UART_AbortReceiveCpltCallback>
 8003606:	e011      	b.n	800362c <HAL_UART_AbortReceive_IT+0xd4>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	220f      	movs	r2, #15
 800361c:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f992 	bl	8003950 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	080040c7 	.word	0x080040c7

0800363c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800365c:	69fa      	ldr	r2, [r7, #28]
 800365e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d118      	bne.n	800369e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d013      	beq.n	800369e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8145 	beq.w	800391e <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
      }
      return;
 800369c:	e13f      	b.n	800391e <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80e8 	beq.w	8003876 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4ba1      	ldr	r3, [pc, #644]	; (8003930 <HAL_UART_IRQHandler+0x2f4>)
 80036aa:	4013      	ands	r3, r2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d105      	bne.n	80036bc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80036b0:	69ba      	ldr	r2, [r7, #24]
 80036b2:	4ba0      	ldr	r3, [pc, #640]	; (8003934 <HAL_UART_IRQHandler+0x2f8>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 80dd 	beq.w	8003876 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d010      	beq.n	80036e8 <HAL_UART_IRQHandler+0xac>
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2201      	movs	r2, #1
 80036d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f003 0302 	and.w	r3, r3, #2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d010      	beq.n	8003714 <HAL_UART_IRQHandler+0xd8>
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00b      	beq.n	8003714 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2202      	movs	r2, #2
 8003702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370a:	f043 0204 	orr.w	r2, r3, #4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b00      	cmp	r3, #0
 800371c:	d010      	beq.n	8003740 <HAL_UART_IRQHandler+0x104>
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00b      	beq.n	8003740 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2204      	movs	r2, #4
 800372e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003736:	f043 0202 	orr.w	r2, r3, #2
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d015      	beq.n	8003776 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4b76      	ldr	r3, [pc, #472]	; (8003930 <HAL_UART_IRQHandler+0x2f4>)
 8003758:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00b      	beq.n	8003776 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2208      	movs	r2, #8
 8003764:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f043 0208 	orr.w	r2, r3, #8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377c:	2b00      	cmp	r3, #0
 800377e:	d011      	beq.n	80037a4 <HAL_UART_IRQHandler+0x168>
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00c      	beq.n	80037a4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80b9 	beq.w	8003922 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d011      	beq.n	80037de <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d104      	bne.n	80037ce <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f0:	2b40      	cmp	r3, #64	; 0x40
 80037f2:	d004      	beq.n	80037fe <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d031      	beq.n	8003862 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 fc28 	bl	8004054 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380e:	2b40      	cmp	r3, #64	; 0x40
 8003810:	d123      	bne.n	800385a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003820:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003826:	2b00      	cmp	r3, #0
 8003828:	d013      	beq.n	8003852 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800382e:	4a42      	ldr	r2, [pc, #264]	; (8003938 <HAL_UART_IRQHandler+0x2fc>)
 8003830:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd fc19 	bl	800106e <HAL_DMA_Abort_IT>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d017      	beq.n	8003872 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800384c:	4610      	mov	r0, r2
 800384e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	e00f      	b.n	8003872 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f872 	bl	800393c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003858:	e00b      	b.n	8003872 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f86e 	bl	800393c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003860:	e007      	b.n	8003872 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f86a 	bl	800393c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8003870:	e057      	b.n	8003922 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003872:	bf00      	nop
    return;
 8003874:	e055      	b.n	8003922 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00d      	beq.n	800389c <HAL_UART_IRQHandler+0x260>
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003892:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 ff1d 	bl	80046d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800389a:	e045      	b.n	8003928 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d012      	beq.n	80038cc <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d008      	beq.n	80038cc <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d031      	beq.n	8003926 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	4798      	blx	r3
    }
    return;
 80038ca:	e02c      	b.n	8003926 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d008      	beq.n	80038e8 <HAL_UART_IRQHandler+0x2ac>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fd2a 	bl	800433a <UART_EndTransmit_IT>
    return;
 80038e6:	e01f      	b.n	8003928 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d008      	beq.n	8003904 <HAL_UART_IRQHandler+0x2c8>
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fefd 	bl	80046fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003902:	e011      	b.n	8003928 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00c      	beq.n	8003928 <HAL_UART_IRQHandler+0x2ec>
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	da09      	bge.n	8003928 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fee7 	bl	80046e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800391a:	bf00      	nop
 800391c:	e004      	b.n	8003928 <HAL_UART_IRQHandler+0x2ec>
      return;
 800391e:	bf00      	nop
 8003920:	e002      	b.n	8003928 <HAL_UART_IRQHandler+0x2ec>
    return;
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <HAL_UART_IRQHandler+0x2ec>
    return;
 8003926:	bf00      	nop
  }
}
 8003928:	3720      	adds	r7, #32
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	10000001 	.word	0x10000001
 8003934:	04000120 	.word	0x04000120
 8003938:	0800409b 	.word	0x0800409b

0800393c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003944:	bf00      	nop
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003964:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003968:	b088      	sub	sp, #32
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69db      	ldr	r3, [r3, #28]
 8003986:	4313      	orrs	r3, r2
 8003988:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	4313      	orrs	r3, r2
 8003992:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4ba4      	ldr	r3, [pc, #656]	; (8003c2c <UART_SetConfig+0x2c8>)
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	69f9      	ldr	r1, [r7, #28]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68da      	ldr	r2, [r3, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a99      	ldr	r2, [pc, #612]	; (8003c30 <UART_SetConfig+0x2cc>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d004      	beq.n	80039d8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80039e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6812      	ldr	r2, [r2, #0]
 80039ea:	69f9      	ldr	r1, [r7, #28]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	f023 010f 	bic.w	r1, r3, #15
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a8a      	ldr	r2, [pc, #552]	; (8003c34 <UART_SetConfig+0x2d0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d121      	bne.n	8003a54 <UART_SetConfig+0xf0>
 8003a10:	2003      	movs	r0, #3
 8003a12:	f7ff fb3e 	bl	8003092 <LL_RCC_GetUSARTClockSource>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d817      	bhi.n	8003a4c <UART_SetConfig+0xe8>
 8003a1c:	a201      	add	r2, pc, #4	; (adr r2, 8003a24 <UART_SetConfig+0xc0>)
 8003a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a22:	bf00      	nop
 8003a24:	08003a35 	.word	0x08003a35
 8003a28:	08003a41 	.word	0x08003a41
 8003a2c:	08003a3b 	.word	0x08003a3b
 8003a30:	08003a47 	.word	0x08003a47
 8003a34:	2301      	movs	r3, #1
 8003a36:	76fb      	strb	r3, [r7, #27]
 8003a38:	e038      	b.n	8003aac <UART_SetConfig+0x148>
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	76fb      	strb	r3, [r7, #27]
 8003a3e:	e035      	b.n	8003aac <UART_SetConfig+0x148>
 8003a40:	2304      	movs	r3, #4
 8003a42:	76fb      	strb	r3, [r7, #27]
 8003a44:	e032      	b.n	8003aac <UART_SetConfig+0x148>
 8003a46:	2308      	movs	r3, #8
 8003a48:	76fb      	strb	r3, [r7, #27]
 8003a4a:	e02f      	b.n	8003aac <UART_SetConfig+0x148>
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	76fb      	strb	r3, [r7, #27]
 8003a50:	bf00      	nop
 8003a52:	e02b      	b.n	8003aac <UART_SetConfig+0x148>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a75      	ldr	r2, [pc, #468]	; (8003c30 <UART_SetConfig+0x2cc>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d124      	bne.n	8003aa8 <UART_SetConfig+0x144>
 8003a5e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003a62:	f7ff fb26 	bl	80030b2 <LL_RCC_GetLPUARTClockSource>
 8003a66:	4603      	mov	r3, r0
 8003a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a6c:	d012      	beq.n	8003a94 <UART_SetConfig+0x130>
 8003a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a72:	d802      	bhi.n	8003a7a <UART_SetConfig+0x116>
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <UART_SetConfig+0x124>
 8003a78:	e012      	b.n	8003aa0 <UART_SetConfig+0x13c>
 8003a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a7e:	d006      	beq.n	8003a8e <UART_SetConfig+0x12a>
 8003a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a84:	d009      	beq.n	8003a9a <UART_SetConfig+0x136>
 8003a86:	e00b      	b.n	8003aa0 <UART_SetConfig+0x13c>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	76fb      	strb	r3, [r7, #27]
 8003a8c:	e00e      	b.n	8003aac <UART_SetConfig+0x148>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	76fb      	strb	r3, [r7, #27]
 8003a92:	e00b      	b.n	8003aac <UART_SetConfig+0x148>
 8003a94:	2304      	movs	r3, #4
 8003a96:	76fb      	strb	r3, [r7, #27]
 8003a98:	e008      	b.n	8003aac <UART_SetConfig+0x148>
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	76fb      	strb	r3, [r7, #27]
 8003a9e:	e005      	b.n	8003aac <UART_SetConfig+0x148>
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	76fb      	strb	r3, [r7, #27]
 8003aa4:	bf00      	nop
 8003aa6:	e001      	b.n	8003aac <UART_SetConfig+0x148>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a5f      	ldr	r2, [pc, #380]	; (8003c30 <UART_SetConfig+0x2cc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	f040 808e 	bne.w	8003bd4 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ab8:	7efb      	ldrb	r3, [r7, #27]
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d823      	bhi.n	8003b06 <UART_SetConfig+0x1a2>
 8003abe:	a201      	add	r2, pc, #4	; (adr r2, 8003ac4 <UART_SetConfig+0x160>)
 8003ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ac4:	08003ae9 	.word	0x08003ae9
 8003ac8:	08003b07 	.word	0x08003b07
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003b07 	.word	0x08003b07
 8003ad4:	08003af7 	.word	0x08003af7
 8003ad8:	08003b07 	.word	0x08003b07
 8003adc:	08003b07 	.word	0x08003b07
 8003ae0:	08003b07 	.word	0x08003b07
 8003ae4:	08003aff 	.word	0x08003aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f7fe fdcc 	bl	8002684 <HAL_RCC_GetPCLK1Freq>
 8003aec:	6178      	str	r0, [r7, #20]
        break;
 8003aee:	e00f      	b.n	8003b10 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af0:	4b51      	ldr	r3, [pc, #324]	; (8003c38 <UART_SetConfig+0x2d4>)
 8003af2:	617b      	str	r3, [r7, #20]
        break;
 8003af4:	e00c      	b.n	8003b10 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe fd47 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8003afa:	6178      	str	r0, [r7, #20]
        break;
 8003afc:	e008      	b.n	8003b10 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b02:	617b      	str	r3, [r7, #20]
        break;
 8003b04:	e004      	b.n	8003b10 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	76bb      	strb	r3, [r7, #26]
        break;
 8003b0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 811c 	beq.w	8003d50 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	4a47      	ldr	r2, [pc, #284]	; (8003c3c <UART_SetConfig+0x2d8>)
 8003b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b22:	461a      	mov	r2, r3
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b2a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d305      	bcc.n	8003b48 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d902      	bls.n	8003b4e <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	76bb      	strb	r3, [r7, #26]
 8003b4c:	e100      	b.n	8003d50 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	4a38      	ldr	r2, [pc, #224]	; (8003c3c <UART_SetConfig+0x2d8>)
 8003b5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	f04f 0400 	mov.w	r4, #0
 8003b66:	461a      	mov	r2, r3
 8003b68:	4623      	mov	r3, r4
 8003b6a:	f7fc fb07 	bl	800017c <__aeabi_uldivmod>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	460c      	mov	r4, r1
 8003b72:	4619      	mov	r1, r3
 8003b74:	4622      	mov	r2, r4
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	f04f 0400 	mov.w	r4, #0
 8003b7e:	0214      	lsls	r4, r2, #8
 8003b80:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b84:	020b      	lsls	r3, r1, #8
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6852      	ldr	r2, [r2, #4]
 8003b8a:	0852      	lsrs	r2, r2, #1
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	eb13 0b01 	adds.w	fp, r3, r1
 8003b96:	eb44 0c02 	adc.w	ip, r4, r2
 8003b9a:	4658      	mov	r0, fp
 8003b9c:	4661      	mov	r1, ip
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f04f 0400 	mov.w	r4, #0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4623      	mov	r3, r4
 8003baa:	f7fc fae7 	bl	800017c <__aeabi_uldivmod>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bba:	d308      	bcc.n	8003bce <UART_SetConfig+0x26a>
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc2:	d204      	bcs.n	8003bce <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	e0c0      	b.n	8003d50 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	76bb      	strb	r3, [r7, #26]
 8003bd2:	e0bd      	b.n	8003d50 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bdc:	d169      	bne.n	8003cb2 <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003bde:	7efb      	ldrb	r3, [r7, #27]
 8003be0:	3b01      	subs	r3, #1
 8003be2:	2b07      	cmp	r3, #7
 8003be4:	d82c      	bhi.n	8003c40 <UART_SetConfig+0x2dc>
 8003be6:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <UART_SetConfig+0x288>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003c0d 	.word	0x08003c0d
 8003bf0:	08003c15 	.word	0x08003c15
 8003bf4:	08003c41 	.word	0x08003c41
 8003bf8:	08003c1b 	.word	0x08003c1b
 8003bfc:	08003c41 	.word	0x08003c41
 8003c00:	08003c41 	.word	0x08003c41
 8003c04:	08003c41 	.word	0x08003c41
 8003c08:	08003c23 	.word	0x08003c23
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c0c:	f7fe fd50 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 8003c10:	6178      	str	r0, [r7, #20]
        break;
 8003c12:	e01a      	b.n	8003c4a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c14:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <UART_SetConfig+0x2d4>)
 8003c16:	617b      	str	r3, [r7, #20]
        break;
 8003c18:	e017      	b.n	8003c4a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c1a:	f7fe fcb5 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8003c1e:	6178      	str	r0, [r7, #20]
        break;
 8003c20:	e013      	b.n	8003c4a <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c26:	617b      	str	r3, [r7, #20]
        break;
 8003c28:	e00f      	b.n	8003c4a <UART_SetConfig+0x2e6>
 8003c2a:	bf00      	nop
 8003c2c:	cfff69f3 	.word	0xcfff69f3
 8003c30:	40008000 	.word	0x40008000
 8003c34:	40013800 	.word	0x40013800
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	080053b4 	.word	0x080053b4
      default:
        pclk = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	76bb      	strb	r3, [r7, #26]
        break;
 8003c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d07f      	beq.n	8003d50 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	4a48      	ldr	r2, [pc, #288]	; (8003d78 <UART_SetConfig+0x414>)
 8003c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c62:	005a      	lsls	r2, r3, #1
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	085b      	lsrs	r3, r3, #1
 8003c6a:	441a      	add	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	2b0f      	cmp	r3, #15
 8003c7c:	d916      	bls.n	8003cac <UART_SetConfig+0x348>
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c84:	d212      	bcs.n	8003cac <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	f023 030f 	bic.w	r3, r3, #15
 8003c8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	085b      	lsrs	r3, r3, #1
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	89fb      	ldrh	r3, [r7, #14]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	89fa      	ldrh	r2, [r7, #14]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	e051      	b.n	8003d50 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	76bb      	strb	r3, [r7, #26]
 8003cb0:	e04e      	b.n	8003d50 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cb2:	7efb      	ldrb	r3, [r7, #27]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	2b07      	cmp	r3, #7
 8003cb8:	d821      	bhi.n	8003cfe <UART_SetConfig+0x39a>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <UART_SetConfig+0x35c>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003ce1 	.word	0x08003ce1
 8003cc4:	08003ce9 	.word	0x08003ce9
 8003cc8:	08003cff 	.word	0x08003cff
 8003ccc:	08003cef 	.word	0x08003cef
 8003cd0:	08003cff 	.word	0x08003cff
 8003cd4:	08003cff 	.word	0x08003cff
 8003cd8:	08003cff 	.word	0x08003cff
 8003cdc:	08003cf7 	.word	0x08003cf7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ce0:	f7fe fce6 	bl	80026b0 <HAL_RCC_GetPCLK2Freq>
 8003ce4:	6178      	str	r0, [r7, #20]
        break;
 8003ce6:	e00f      	b.n	8003d08 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ce8:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <UART_SetConfig+0x418>)
 8003cea:	617b      	str	r3, [r7, #20]
        break;
 8003cec:	e00c      	b.n	8003d08 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cee:	f7fe fc4b 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8003cf2:	6178      	str	r0, [r7, #20]
        break;
 8003cf4:	e008      	b.n	8003d08 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfa:	617b      	str	r3, [r7, #20]
        break;
 8003cfc:	e004      	b.n	8003d08 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	76bb      	strb	r3, [r7, #26]
        break;
 8003d06:	bf00      	nop
    }

    if (pclk != 0U)
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d020      	beq.n	8003d50 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <UART_SetConfig+0x414>)
 8003d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d18:	461a      	mov	r2, r3
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	fbb3 f2f2 	udiv	r2, r3, r2
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	441a      	add	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	2b0f      	cmp	r3, #15
 8003d38:	d908      	bls.n	8003d4c <UART_SetConfig+0x3e8>
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d40:	d204      	bcs.n	8003d4c <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	60da      	str	r2, [r3, #12]
 8003d4a:	e001      	b.n	8003d50 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003d6c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3720      	adds	r7, #32
 8003d72:	46bd      	mov	sp, r7
 8003d74:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003d78:	080053b4 	.word	0x080053b4
 8003d7c:	00f42400 	.word	0x00f42400

08003d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01a      	beq.n	8003e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e7e:	d10a      	bne.n	8003e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
  }
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003ed4:	f7fc ff82 	bl	8000ddc <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d10e      	bne.n	8003f06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f82c 	bl	8003f54 <UART_WaitOnFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e022      	b.n	8003f4c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d10e      	bne.n	8003f32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f816 	bl	8003f54 <UART_WaitOnFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e00c      	b.n	8003f4c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003f4a:	2300      	movs	r3, #0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3710      	adds	r7, #16
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	4613      	mov	r3, r2
 8003f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f64:	e062      	b.n	800402c <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d05e      	beq.n	800402c <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6e:	f7fc ff35 	bl	8000ddc <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d302      	bcc.n	8003f84 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d11d      	bne.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f92:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2220      	movs	r2, #32
 8003fa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e045      	b.n	800404c <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d02e      	beq.n	800402c <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fdc:	d126      	bne.n	800402c <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fe6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ff6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2220      	movs	r2, #32
 8004014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e00f      	b.n	800404c <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	69da      	ldr	r2, [r3, #28]
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	4013      	ands	r3, r2
 8004036:	68ba      	ldr	r2, [r7, #8]
 8004038:	429a      	cmp	r2, r3
 800403a:	bf0c      	ite	eq
 800403c:	2301      	moveq	r3, #1
 800403e:	2300      	movne	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	79fb      	ldrb	r3, [r7, #7]
 8004046:	429a      	cmp	r2, r3
 8004048:	d08d      	beq.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800406a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800408e:	bf00      	nop
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr

0800409a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff fc3f 	bl	800393c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040be:	bf00      	nop
 80040c0:	3710      	adds	r7, #16
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b084      	sub	sp, #16
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	220f      	movs	r2, #15
 80040e2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699a      	ldr	r2, [r3, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f042 0208 	orr.w	r2, r2, #8
 80040f2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff fc27 	bl	8003950 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004118:	2b21      	cmp	r3, #33	; 0x21
 800411a:	d12a      	bne.n	8004172 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d110      	bne.n	800414a <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004136:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004146:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004148:	e013      	b.n	8004172 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414e:	781a      	ldrb	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800418c:	2b21      	cmp	r3, #33	; 0x21
 800418e:	d12f      	bne.n	80041f0 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004196:	b29b      	uxth	r3, r3
 8004198:	2b00      	cmp	r3, #0
 800419a:	d110      	bne.n	80041be <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041aa:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041ba:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80041bc:	e018      	b.n	80041f0 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	881b      	ldrh	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d8:	1c9a      	adds	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80041f0:	bf00      	nop
 80041f2:	3714      	adds	r7, #20
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800420a:	2b21      	cmp	r3, #33	; 0x21
 800420c:	d13d      	bne.n	800428a <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004214:	81fb      	strh	r3, [r7, #14]
 8004216:	e035      	b.n	8004284 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d111      	bne.n	8004248 <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004232:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004242:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8004244:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8004246:	e020      	b.n	800428a <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	2b00      	cmp	r3, #0
 8004254:	d013      	beq.n	800427e <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425a:	781a      	ldrb	r2, [r3, #0]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800427e:	89fb      	ldrh	r3, [r7, #14]
 8004280:	3b01      	subs	r3, #1
 8004282:	81fb      	strh	r3, [r7, #14]
 8004284:	89fb      	ldrh	r3, [r7, #14]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1c6      	bne.n	8004218 <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 800428a:	bf00      	nop
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042a4:	2b21      	cmp	r3, #33	; 0x21
 80042a6:	d142      	bne.n	800432e <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80042ae:	81fb      	strh	r3, [r7, #14]
 80042b0:	e03a      	b.n	8004328 <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d111      	bne.n	80042e2 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80042cc:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042dc:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80042de:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 80042e0:	e025      	b.n	800432e <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d018      	beq.n	8004322 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f4:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	881b      	ldrh	r3, [r3, #0]
 80042fa:	461a      	mov	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004304:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430a:	1c9a      	adds	r2, r3, #2
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	3b01      	subs	r3, #1
 8004326:	81fb      	strh	r3, [r7, #14]
 8004328:	89fb      	ldrh	r3, [r7, #14]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1c1      	bne.n	80042b2 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004350:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2220      	movs	r2, #32
 8004356:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f7fc fa07 	bl	8000774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800437c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004384:	2b22      	cmp	r3, #34	; 0x22
 8004386:	d13b      	bne.n	8004400 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004390:	89bb      	ldrh	r3, [r7, #12]
 8004392:	b2d9      	uxtb	r1, r3
 8004394:	89fb      	ldrh	r3, [r7, #14]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439c:	400a      	ands	r2, r1
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d122      	bne.n	8004410 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80043d8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2220      	movs	r2, #32
 80043ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7fc f9a1 	bl	8000740 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043fe:	e007      	b.n	8004410 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	699a      	ldr	r2, [r3, #24]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f042 0208 	orr.w	r2, r2, #8
 800440e:	619a      	str	r2, [r3, #24]
}
 8004410:	bf00      	nop
 8004412:	3710      	adds	r7, #16
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004426:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442e:	2b22      	cmp	r3, #34	; 0x22
 8004430:	d13b      	bne.n	80044aa <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004440:	89ba      	ldrh	r2, [r7, #12]
 8004442:	89fb      	ldrh	r3, [r7, #14]
 8004444:	4013      	ands	r3, r2
 8004446:	b29a      	uxth	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004450:	1c9a      	adds	r2, r3, #2
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800445c:	b29b      	uxth	r3, r3
 800445e:	3b01      	subs	r3, #1
 8004460:	b29a      	uxth	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	d122      	bne.n	80044ba <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004482:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689a      	ldr	r2, [r3, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f022 0201 	bic.w	r2, r2, #1
 8004492:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fc f94c 	bl	8000740 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044a8:	e007      	b.n	80044ba <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699a      	ldr	r2, [r3, #24]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f042 0208 	orr.w	r2, r2, #8
 80044b8:	619a      	str	r2, [r3, #24]
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b084      	sub	sp, #16
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80044d2:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044da:	2b22      	cmp	r3, #34	; 0x22
 80044dc:	d168      	bne.n	80045b0 <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80044e4:	81fb      	strh	r3, [r7, #14]
 80044e6:	e03f      	b.n	8004568 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80044f0:	893b      	ldrh	r3, [r7, #8]
 80044f2:	b2d9      	uxtb	r1, r3
 80044f4:	89bb      	ldrh	r3, [r7, #12]
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	400a      	ands	r2, r1
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d11b      	bne.n	8004562 <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004538:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f7fc f8ef 	bl	8000740 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8004562:	89fb      	ldrh	r3, [r7, #14]
 8004564:	3b01      	subs	r3, #1
 8004566:	81fb      	strh	r3, [r7, #14]
 8004568:	89fb      	ldrh	r3, [r7, #14]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1bc      	bne.n	80044e8 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004574:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004576:	897b      	ldrh	r3, [r7, #10]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d021      	beq.n	80045c0 <UART_RxISR_8BIT_FIFOEN+0xfc>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004582:	897a      	ldrh	r2, [r7, #10]
 8004584:	429a      	cmp	r2, r3
 8004586:	d21b      	bcs.n	80045c0 <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004596:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a0b      	ldr	r2, [pc, #44]	; (80045c8 <UART_RxISR_8BIT_FIFOEN+0x104>)
 800459c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f042 0220 	orr.w	r2, r2, #32
 80045ac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045ae:	e007      	b.n	80045c0 <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	699a      	ldr	r2, [r3, #24]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0208 	orr.w	r2, r2, #8
 80045be:	619a      	str	r2, [r3, #24]
}
 80045c0:	bf00      	nop
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	0800436f 	.word	0x0800436f

080045cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80045da:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e2:	2b22      	cmp	r3, #34	; 0x22
 80045e4:	d168      	bne.n	80046b8 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80045ec:	82fb      	strh	r3, [r7, #22]
 80045ee:	e03f      	b.n	8004670 <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045fc:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80045fe:	8a3a      	ldrh	r2, [r7, #16]
 8004600:	8abb      	ldrh	r3, [r7, #20]
 8004602:	4013      	ands	r3, r2
 8004604:	b29a      	uxth	r2, r3
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460e:	1c9a      	adds	r2, r3, #2
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d11b      	bne.n	800466a <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004640:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	6812      	ldr	r2, [r2, #0]
 800464c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004650:	f023 0301 	bic.w	r3, r3, #1
 8004654:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f7fc f86b 	bl	8000740 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800466a:	8afb      	ldrh	r3, [r7, #22]
 800466c:	3b01      	subs	r3, #1
 800466e:	82fb      	strh	r3, [r7, #22]
 8004670:	8afb      	ldrh	r3, [r7, #22]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1bc      	bne.n	80045f0 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800467c:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800467e:	8a7b      	ldrh	r3, [r7, #18]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d021      	beq.n	80046c8 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800468a:	8a7a      	ldrh	r2, [r7, #18]
 800468c:	429a      	cmp	r2, r3
 800468e:	d21b      	bcs.n	80046c8 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800469e:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a0b      	ldr	r2, [pc, #44]	; (80046d0 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80046a4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0220 	orr.w	r2, r2, #32
 80046b4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046b6:	e007      	b.n	80046c8 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	699a      	ldr	r2, [r3, #24]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0208 	orr.w	r2, r2, #8
 80046c6:	619a      	str	r2, [r3, #24]
}
 80046c8:	bf00      	nop
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	08004419 	.word	0x08004419

080046d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800471e:	2b01      	cmp	r3, #1
 8004720:	d101      	bne.n	8004726 <HAL_UARTEx_DisableFifoMode+0x16>
 8004722:	2302      	movs	r3, #2
 8004724:	e027      	b.n	8004776 <HAL_UARTEx_DisableFifoMode+0x66>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2224      	movs	r2, #36	; 0x24
 8004732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0201 	bic.w	r2, r2, #1
 800474c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004754:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b084      	sub	sp, #16
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004792:	2b01      	cmp	r3, #1
 8004794:	d101      	bne.n	800479a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004796:	2302      	movs	r3, #2
 8004798:	e02d      	b.n	80047f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2224      	movs	r2, #36	; 0x24
 80047a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f022 0201 	bic.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	683a      	ldr	r2, [r7, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f850 	bl	800487c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004812:	2302      	movs	r3, #2
 8004814:	e02d      	b.n	8004872 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2224      	movs	r2, #36	; 0x24
 8004822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0201 	bic.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f812 	bl	800487c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2220      	movs	r2, #32
 8004864:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b089      	sub	sp, #36	; 0x24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004884:	4a2f      	ldr	r2, [pc, #188]	; (8004944 <UARTEx_SetNbDataToProcess+0xc8>)
 8004886:	f107 0314 	add.w	r3, r7, #20
 800488a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800488e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004892:	4a2d      	ldr	r2, [pc, #180]	; (8004948 <UARTEx_SetNbDataToProcess+0xcc>)
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800489c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d108      	bne.n	80048ba <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048b8:	e03d      	b.n	8004936 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048ba:	2308      	movs	r3, #8
 80048bc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048be:	2308      	movs	r3, #8
 80048c0:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	0e5b      	lsrs	r3, r3, #25
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	0f5b      	lsrs	r3, r3, #29
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80048e2:	7fbb      	ldrb	r3, [r7, #30]
 80048e4:	7f3a      	ldrb	r2, [r7, #28]
 80048e6:	f107 0120 	add.w	r1, r7, #32
 80048ea:	440a      	add	r2, r1
 80048ec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80048f0:	fb02 f303 	mul.w	r3, r2, r3
 80048f4:	7f3a      	ldrb	r2, [r7, #28]
 80048f6:	f107 0120 	add.w	r1, r7, #32
 80048fa:	440a      	add	r2, r1
 80048fc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004900:	fb93 f3f2 	sdiv	r3, r3, r2
 8004904:	b29a      	uxth	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800490c:	7ffb      	ldrb	r3, [r7, #31]
 800490e:	7f7a      	ldrb	r2, [r7, #29]
 8004910:	f107 0120 	add.w	r1, r7, #32
 8004914:	440a      	add	r2, r1
 8004916:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
 800491e:	7f7a      	ldrb	r2, [r7, #29]
 8004920:	f107 0120 	add.w	r1, r7, #32
 8004924:	440a      	add	r2, r1
 8004926:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800492a:	fb93 f3f2 	sdiv	r3, r3, r2
 800492e:	b29a      	uxth	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004936:	bf00      	nop
 8004938:	3724      	adds	r7, #36	; 0x24
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	08005304 	.word	0x08005304
 8004948:	0800530c 	.word	0x0800530c

0800494c <__errno>:
 800494c:	4b01      	ldr	r3, [pc, #4]	; (8004954 <__errno+0x8>)
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20000010 	.word	0x20000010

08004958 <__libc_init_array>:
 8004958:	b570      	push	{r4, r5, r6, lr}
 800495a:	4e0d      	ldr	r6, [pc, #52]	; (8004990 <__libc_init_array+0x38>)
 800495c:	4c0d      	ldr	r4, [pc, #52]	; (8004994 <__libc_init_array+0x3c>)
 800495e:	1ba4      	subs	r4, r4, r6
 8004960:	10a4      	asrs	r4, r4, #2
 8004962:	2500      	movs	r5, #0
 8004964:	42a5      	cmp	r5, r4
 8004966:	d109      	bne.n	800497c <__libc_init_array+0x24>
 8004968:	4e0b      	ldr	r6, [pc, #44]	; (8004998 <__libc_init_array+0x40>)
 800496a:	4c0c      	ldr	r4, [pc, #48]	; (800499c <__libc_init_array+0x44>)
 800496c:	f000 fc88 	bl	8005280 <_init>
 8004970:	1ba4      	subs	r4, r4, r6
 8004972:	10a4      	asrs	r4, r4, #2
 8004974:	2500      	movs	r5, #0
 8004976:	42a5      	cmp	r5, r4
 8004978:	d105      	bne.n	8004986 <__libc_init_array+0x2e>
 800497a:	bd70      	pop	{r4, r5, r6, pc}
 800497c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004980:	4798      	blx	r3
 8004982:	3501      	adds	r5, #1
 8004984:	e7ee      	b.n	8004964 <__libc_init_array+0xc>
 8004986:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800498a:	4798      	blx	r3
 800498c:	3501      	adds	r5, #1
 800498e:	e7f2      	b.n	8004976 <__libc_init_array+0x1e>
 8004990:	08005438 	.word	0x08005438
 8004994:	08005438 	.word	0x08005438
 8004998:	08005438 	.word	0x08005438
 800499c:	0800543c 	.word	0x0800543c

080049a0 <memset>:
 80049a0:	4402      	add	r2, r0
 80049a2:	4603      	mov	r3, r0
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d100      	bne.n	80049aa <memset+0xa>
 80049a8:	4770      	bx	lr
 80049aa:	f803 1b01 	strb.w	r1, [r3], #1
 80049ae:	e7f9      	b.n	80049a4 <memset+0x4>

080049b0 <_puts_r>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	460e      	mov	r6, r1
 80049b4:	4605      	mov	r5, r0
 80049b6:	b118      	cbz	r0, 80049c0 <_puts_r+0x10>
 80049b8:	6983      	ldr	r3, [r0, #24]
 80049ba:	b90b      	cbnz	r3, 80049c0 <_puts_r+0x10>
 80049bc:	f000 fa0c 	bl	8004dd8 <__sinit>
 80049c0:	69ab      	ldr	r3, [r5, #24]
 80049c2:	68ac      	ldr	r4, [r5, #8]
 80049c4:	b913      	cbnz	r3, 80049cc <_puts_r+0x1c>
 80049c6:	4628      	mov	r0, r5
 80049c8:	f000 fa06 	bl	8004dd8 <__sinit>
 80049cc:	4b23      	ldr	r3, [pc, #140]	; (8004a5c <_puts_r+0xac>)
 80049ce:	429c      	cmp	r4, r3
 80049d0:	d117      	bne.n	8004a02 <_puts_r+0x52>
 80049d2:	686c      	ldr	r4, [r5, #4]
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	071b      	lsls	r3, r3, #28
 80049d8:	d51d      	bpl.n	8004a16 <_puts_r+0x66>
 80049da:	6923      	ldr	r3, [r4, #16]
 80049dc:	b1db      	cbz	r3, 8004a16 <_puts_r+0x66>
 80049de:	3e01      	subs	r6, #1
 80049e0:	68a3      	ldr	r3, [r4, #8]
 80049e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80049e6:	3b01      	subs	r3, #1
 80049e8:	60a3      	str	r3, [r4, #8]
 80049ea:	b9e9      	cbnz	r1, 8004a28 <_puts_r+0x78>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	da2e      	bge.n	8004a4e <_puts_r+0x9e>
 80049f0:	4622      	mov	r2, r4
 80049f2:	210a      	movs	r1, #10
 80049f4:	4628      	mov	r0, r5
 80049f6:	f000 f83f 	bl	8004a78 <__swbuf_r>
 80049fa:	3001      	adds	r0, #1
 80049fc:	d011      	beq.n	8004a22 <_puts_r+0x72>
 80049fe:	200a      	movs	r0, #10
 8004a00:	e011      	b.n	8004a26 <_puts_r+0x76>
 8004a02:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <_puts_r+0xb0>)
 8004a04:	429c      	cmp	r4, r3
 8004a06:	d101      	bne.n	8004a0c <_puts_r+0x5c>
 8004a08:	68ac      	ldr	r4, [r5, #8]
 8004a0a:	e7e3      	b.n	80049d4 <_puts_r+0x24>
 8004a0c:	4b15      	ldr	r3, [pc, #84]	; (8004a64 <_puts_r+0xb4>)
 8004a0e:	429c      	cmp	r4, r3
 8004a10:	bf08      	it	eq
 8004a12:	68ec      	ldreq	r4, [r5, #12]
 8004a14:	e7de      	b.n	80049d4 <_puts_r+0x24>
 8004a16:	4621      	mov	r1, r4
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f000 f87f 	bl	8004b1c <__swsetup_r>
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d0dd      	beq.n	80049de <_puts_r+0x2e>
 8004a22:	f04f 30ff 	mov.w	r0, #4294967295
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	da04      	bge.n	8004a36 <_puts_r+0x86>
 8004a2c:	69a2      	ldr	r2, [r4, #24]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	dc06      	bgt.n	8004a40 <_puts_r+0x90>
 8004a32:	290a      	cmp	r1, #10
 8004a34:	d004      	beq.n	8004a40 <_puts_r+0x90>
 8004a36:	6823      	ldr	r3, [r4, #0]
 8004a38:	1c5a      	adds	r2, r3, #1
 8004a3a:	6022      	str	r2, [r4, #0]
 8004a3c:	7019      	strb	r1, [r3, #0]
 8004a3e:	e7cf      	b.n	80049e0 <_puts_r+0x30>
 8004a40:	4622      	mov	r2, r4
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f818 	bl	8004a78 <__swbuf_r>
 8004a48:	3001      	adds	r0, #1
 8004a4a:	d1c9      	bne.n	80049e0 <_puts_r+0x30>
 8004a4c:	e7e9      	b.n	8004a22 <_puts_r+0x72>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	200a      	movs	r0, #10
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	6022      	str	r2, [r4, #0]
 8004a56:	7018      	strb	r0, [r3, #0]
 8004a58:	e7e5      	b.n	8004a26 <_puts_r+0x76>
 8004a5a:	bf00      	nop
 8004a5c:	080053f0 	.word	0x080053f0
 8004a60:	08005410 	.word	0x08005410
 8004a64:	080053d0 	.word	0x080053d0

08004a68 <puts>:
 8004a68:	4b02      	ldr	r3, [pc, #8]	; (8004a74 <puts+0xc>)
 8004a6a:	4601      	mov	r1, r0
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	f7ff bf9f 	b.w	80049b0 <_puts_r>
 8004a72:	bf00      	nop
 8004a74:	20000010 	.word	0x20000010

08004a78 <__swbuf_r>:
 8004a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7a:	460e      	mov	r6, r1
 8004a7c:	4614      	mov	r4, r2
 8004a7e:	4605      	mov	r5, r0
 8004a80:	b118      	cbz	r0, 8004a8a <__swbuf_r+0x12>
 8004a82:	6983      	ldr	r3, [r0, #24]
 8004a84:	b90b      	cbnz	r3, 8004a8a <__swbuf_r+0x12>
 8004a86:	f000 f9a7 	bl	8004dd8 <__sinit>
 8004a8a:	4b21      	ldr	r3, [pc, #132]	; (8004b10 <__swbuf_r+0x98>)
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	d12a      	bne.n	8004ae6 <__swbuf_r+0x6e>
 8004a90:	686c      	ldr	r4, [r5, #4]
 8004a92:	69a3      	ldr	r3, [r4, #24]
 8004a94:	60a3      	str	r3, [r4, #8]
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	071a      	lsls	r2, r3, #28
 8004a9a:	d52e      	bpl.n	8004afa <__swbuf_r+0x82>
 8004a9c:	6923      	ldr	r3, [r4, #16]
 8004a9e:	b363      	cbz	r3, 8004afa <__swbuf_r+0x82>
 8004aa0:	6923      	ldr	r3, [r4, #16]
 8004aa2:	6820      	ldr	r0, [r4, #0]
 8004aa4:	1ac0      	subs	r0, r0, r3
 8004aa6:	6963      	ldr	r3, [r4, #20]
 8004aa8:	b2f6      	uxtb	r6, r6
 8004aaa:	4283      	cmp	r3, r0
 8004aac:	4637      	mov	r7, r6
 8004aae:	dc04      	bgt.n	8004aba <__swbuf_r+0x42>
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	f000 f926 	bl	8004d04 <_fflush_r>
 8004ab8:	bb28      	cbnz	r0, 8004b06 <__swbuf_r+0x8e>
 8004aba:	68a3      	ldr	r3, [r4, #8]
 8004abc:	3b01      	subs	r3, #1
 8004abe:	60a3      	str	r3, [r4, #8]
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	6022      	str	r2, [r4, #0]
 8004ac6:	701e      	strb	r6, [r3, #0]
 8004ac8:	6963      	ldr	r3, [r4, #20]
 8004aca:	3001      	adds	r0, #1
 8004acc:	4283      	cmp	r3, r0
 8004ace:	d004      	beq.n	8004ada <__swbuf_r+0x62>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	07db      	lsls	r3, r3, #31
 8004ad4:	d519      	bpl.n	8004b0a <__swbuf_r+0x92>
 8004ad6:	2e0a      	cmp	r6, #10
 8004ad8:	d117      	bne.n	8004b0a <__swbuf_r+0x92>
 8004ada:	4621      	mov	r1, r4
 8004adc:	4628      	mov	r0, r5
 8004ade:	f000 f911 	bl	8004d04 <_fflush_r>
 8004ae2:	b190      	cbz	r0, 8004b0a <__swbuf_r+0x92>
 8004ae4:	e00f      	b.n	8004b06 <__swbuf_r+0x8e>
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <__swbuf_r+0x9c>)
 8004ae8:	429c      	cmp	r4, r3
 8004aea:	d101      	bne.n	8004af0 <__swbuf_r+0x78>
 8004aec:	68ac      	ldr	r4, [r5, #8]
 8004aee:	e7d0      	b.n	8004a92 <__swbuf_r+0x1a>
 8004af0:	4b09      	ldr	r3, [pc, #36]	; (8004b18 <__swbuf_r+0xa0>)
 8004af2:	429c      	cmp	r4, r3
 8004af4:	bf08      	it	eq
 8004af6:	68ec      	ldreq	r4, [r5, #12]
 8004af8:	e7cb      	b.n	8004a92 <__swbuf_r+0x1a>
 8004afa:	4621      	mov	r1, r4
 8004afc:	4628      	mov	r0, r5
 8004afe:	f000 f80d 	bl	8004b1c <__swsetup_r>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	d0cc      	beq.n	8004aa0 <__swbuf_r+0x28>
 8004b06:	f04f 37ff 	mov.w	r7, #4294967295
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	080053f0 	.word	0x080053f0
 8004b14:	08005410 	.word	0x08005410
 8004b18:	080053d0 	.word	0x080053d0

08004b1c <__swsetup_r>:
 8004b1c:	4b32      	ldr	r3, [pc, #200]	; (8004be8 <__swsetup_r+0xcc>)
 8004b1e:	b570      	push	{r4, r5, r6, lr}
 8004b20:	681d      	ldr	r5, [r3, #0]
 8004b22:	4606      	mov	r6, r0
 8004b24:	460c      	mov	r4, r1
 8004b26:	b125      	cbz	r5, 8004b32 <__swsetup_r+0x16>
 8004b28:	69ab      	ldr	r3, [r5, #24]
 8004b2a:	b913      	cbnz	r3, 8004b32 <__swsetup_r+0x16>
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f000 f953 	bl	8004dd8 <__sinit>
 8004b32:	4b2e      	ldr	r3, [pc, #184]	; (8004bec <__swsetup_r+0xd0>)
 8004b34:	429c      	cmp	r4, r3
 8004b36:	d10f      	bne.n	8004b58 <__swsetup_r+0x3c>
 8004b38:	686c      	ldr	r4, [r5, #4]
 8004b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	0715      	lsls	r5, r2, #28
 8004b42:	d42c      	bmi.n	8004b9e <__swsetup_r+0x82>
 8004b44:	06d0      	lsls	r0, r2, #27
 8004b46:	d411      	bmi.n	8004b6c <__swsetup_r+0x50>
 8004b48:	2209      	movs	r2, #9
 8004b4a:	6032      	str	r2, [r6, #0]
 8004b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b50:	81a3      	strh	r3, [r4, #12]
 8004b52:	f04f 30ff 	mov.w	r0, #4294967295
 8004b56:	e03e      	b.n	8004bd6 <__swsetup_r+0xba>
 8004b58:	4b25      	ldr	r3, [pc, #148]	; (8004bf0 <__swsetup_r+0xd4>)
 8004b5a:	429c      	cmp	r4, r3
 8004b5c:	d101      	bne.n	8004b62 <__swsetup_r+0x46>
 8004b5e:	68ac      	ldr	r4, [r5, #8]
 8004b60:	e7eb      	b.n	8004b3a <__swsetup_r+0x1e>
 8004b62:	4b24      	ldr	r3, [pc, #144]	; (8004bf4 <__swsetup_r+0xd8>)
 8004b64:	429c      	cmp	r4, r3
 8004b66:	bf08      	it	eq
 8004b68:	68ec      	ldreq	r4, [r5, #12]
 8004b6a:	e7e6      	b.n	8004b3a <__swsetup_r+0x1e>
 8004b6c:	0751      	lsls	r1, r2, #29
 8004b6e:	d512      	bpl.n	8004b96 <__swsetup_r+0x7a>
 8004b70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b72:	b141      	cbz	r1, 8004b86 <__swsetup_r+0x6a>
 8004b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b78:	4299      	cmp	r1, r3
 8004b7a:	d002      	beq.n	8004b82 <__swsetup_r+0x66>
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	f000 fa19 	bl	8004fb4 <_free_r>
 8004b82:	2300      	movs	r3, #0
 8004b84:	6363      	str	r3, [r4, #52]	; 0x34
 8004b86:	89a3      	ldrh	r3, [r4, #12]
 8004b88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b8c:	81a3      	strh	r3, [r4, #12]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	6063      	str	r3, [r4, #4]
 8004b92:	6923      	ldr	r3, [r4, #16]
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	f043 0308 	orr.w	r3, r3, #8
 8004b9c:	81a3      	strh	r3, [r4, #12]
 8004b9e:	6923      	ldr	r3, [r4, #16]
 8004ba0:	b94b      	cbnz	r3, 8004bb6 <__swsetup_r+0x9a>
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bac:	d003      	beq.n	8004bb6 <__swsetup_r+0x9a>
 8004bae:	4621      	mov	r1, r4
 8004bb0:	4630      	mov	r0, r6
 8004bb2:	f000 f9bf 	bl	8004f34 <__smakebuf_r>
 8004bb6:	89a2      	ldrh	r2, [r4, #12]
 8004bb8:	f012 0301 	ands.w	r3, r2, #1
 8004bbc:	d00c      	beq.n	8004bd8 <__swsetup_r+0xbc>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60a3      	str	r3, [r4, #8]
 8004bc2:	6963      	ldr	r3, [r4, #20]
 8004bc4:	425b      	negs	r3, r3
 8004bc6:	61a3      	str	r3, [r4, #24]
 8004bc8:	6923      	ldr	r3, [r4, #16]
 8004bca:	b953      	cbnz	r3, 8004be2 <__swsetup_r+0xc6>
 8004bcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bd0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004bd4:	d1ba      	bne.n	8004b4c <__swsetup_r+0x30>
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
 8004bd8:	0792      	lsls	r2, r2, #30
 8004bda:	bf58      	it	pl
 8004bdc:	6963      	ldrpl	r3, [r4, #20]
 8004bde:	60a3      	str	r3, [r4, #8]
 8004be0:	e7f2      	b.n	8004bc8 <__swsetup_r+0xac>
 8004be2:	2000      	movs	r0, #0
 8004be4:	e7f7      	b.n	8004bd6 <__swsetup_r+0xba>
 8004be6:	bf00      	nop
 8004be8:	20000010 	.word	0x20000010
 8004bec:	080053f0 	.word	0x080053f0
 8004bf0:	08005410 	.word	0x08005410
 8004bf4:	080053d0 	.word	0x080053d0

08004bf8 <__sflush_r>:
 8004bf8:	898a      	ldrh	r2, [r1, #12]
 8004bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfe:	4605      	mov	r5, r0
 8004c00:	0710      	lsls	r0, r2, #28
 8004c02:	460c      	mov	r4, r1
 8004c04:	d458      	bmi.n	8004cb8 <__sflush_r+0xc0>
 8004c06:	684b      	ldr	r3, [r1, #4]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	dc05      	bgt.n	8004c18 <__sflush_r+0x20>
 8004c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	dc02      	bgt.n	8004c18 <__sflush_r+0x20>
 8004c12:	2000      	movs	r0, #0
 8004c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c1a:	2e00      	cmp	r6, #0
 8004c1c:	d0f9      	beq.n	8004c12 <__sflush_r+0x1a>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c24:	682f      	ldr	r7, [r5, #0]
 8004c26:	6a21      	ldr	r1, [r4, #32]
 8004c28:	602b      	str	r3, [r5, #0]
 8004c2a:	d032      	beq.n	8004c92 <__sflush_r+0x9a>
 8004c2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	075a      	lsls	r2, r3, #29
 8004c32:	d505      	bpl.n	8004c40 <__sflush_r+0x48>
 8004c34:	6863      	ldr	r3, [r4, #4]
 8004c36:	1ac0      	subs	r0, r0, r3
 8004c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c3a:	b10b      	cbz	r3, 8004c40 <__sflush_r+0x48>
 8004c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c3e:	1ac0      	subs	r0, r0, r3
 8004c40:	2300      	movs	r3, #0
 8004c42:	4602      	mov	r2, r0
 8004c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c46:	6a21      	ldr	r1, [r4, #32]
 8004c48:	4628      	mov	r0, r5
 8004c4a:	47b0      	blx	r6
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	89a3      	ldrh	r3, [r4, #12]
 8004c50:	d106      	bne.n	8004c60 <__sflush_r+0x68>
 8004c52:	6829      	ldr	r1, [r5, #0]
 8004c54:	291d      	cmp	r1, #29
 8004c56:	d848      	bhi.n	8004cea <__sflush_r+0xf2>
 8004c58:	4a29      	ldr	r2, [pc, #164]	; (8004d00 <__sflush_r+0x108>)
 8004c5a:	40ca      	lsrs	r2, r1
 8004c5c:	07d6      	lsls	r6, r2, #31
 8004c5e:	d544      	bpl.n	8004cea <__sflush_r+0xf2>
 8004c60:	2200      	movs	r2, #0
 8004c62:	6062      	str	r2, [r4, #4]
 8004c64:	04d9      	lsls	r1, r3, #19
 8004c66:	6922      	ldr	r2, [r4, #16]
 8004c68:	6022      	str	r2, [r4, #0]
 8004c6a:	d504      	bpl.n	8004c76 <__sflush_r+0x7e>
 8004c6c:	1c42      	adds	r2, r0, #1
 8004c6e:	d101      	bne.n	8004c74 <__sflush_r+0x7c>
 8004c70:	682b      	ldr	r3, [r5, #0]
 8004c72:	b903      	cbnz	r3, 8004c76 <__sflush_r+0x7e>
 8004c74:	6560      	str	r0, [r4, #84]	; 0x54
 8004c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c78:	602f      	str	r7, [r5, #0]
 8004c7a:	2900      	cmp	r1, #0
 8004c7c:	d0c9      	beq.n	8004c12 <__sflush_r+0x1a>
 8004c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c82:	4299      	cmp	r1, r3
 8004c84:	d002      	beq.n	8004c8c <__sflush_r+0x94>
 8004c86:	4628      	mov	r0, r5
 8004c88:	f000 f994 	bl	8004fb4 <_free_r>
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	6360      	str	r0, [r4, #52]	; 0x34
 8004c90:	e7c0      	b.n	8004c14 <__sflush_r+0x1c>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4628      	mov	r0, r5
 8004c96:	47b0      	blx	r6
 8004c98:	1c41      	adds	r1, r0, #1
 8004c9a:	d1c8      	bne.n	8004c2e <__sflush_r+0x36>
 8004c9c:	682b      	ldr	r3, [r5, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0c5      	beq.n	8004c2e <__sflush_r+0x36>
 8004ca2:	2b1d      	cmp	r3, #29
 8004ca4:	d001      	beq.n	8004caa <__sflush_r+0xb2>
 8004ca6:	2b16      	cmp	r3, #22
 8004ca8:	d101      	bne.n	8004cae <__sflush_r+0xb6>
 8004caa:	602f      	str	r7, [r5, #0]
 8004cac:	e7b1      	b.n	8004c12 <__sflush_r+0x1a>
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb4:	81a3      	strh	r3, [r4, #12]
 8004cb6:	e7ad      	b.n	8004c14 <__sflush_r+0x1c>
 8004cb8:	690f      	ldr	r7, [r1, #16]
 8004cba:	2f00      	cmp	r7, #0
 8004cbc:	d0a9      	beq.n	8004c12 <__sflush_r+0x1a>
 8004cbe:	0793      	lsls	r3, r2, #30
 8004cc0:	680e      	ldr	r6, [r1, #0]
 8004cc2:	bf08      	it	eq
 8004cc4:	694b      	ldreq	r3, [r1, #20]
 8004cc6:	600f      	str	r7, [r1, #0]
 8004cc8:	bf18      	it	ne
 8004cca:	2300      	movne	r3, #0
 8004ccc:	eba6 0807 	sub.w	r8, r6, r7
 8004cd0:	608b      	str	r3, [r1, #8]
 8004cd2:	f1b8 0f00 	cmp.w	r8, #0
 8004cd6:	dd9c      	ble.n	8004c12 <__sflush_r+0x1a>
 8004cd8:	4643      	mov	r3, r8
 8004cda:	463a      	mov	r2, r7
 8004cdc:	6a21      	ldr	r1, [r4, #32]
 8004cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ce0:	4628      	mov	r0, r5
 8004ce2:	47b0      	blx	r6
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	dc06      	bgt.n	8004cf6 <__sflush_r+0xfe>
 8004ce8:	89a3      	ldrh	r3, [r4, #12]
 8004cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cee:	81a3      	strh	r3, [r4, #12]
 8004cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cf4:	e78e      	b.n	8004c14 <__sflush_r+0x1c>
 8004cf6:	4407      	add	r7, r0
 8004cf8:	eba8 0800 	sub.w	r8, r8, r0
 8004cfc:	e7e9      	b.n	8004cd2 <__sflush_r+0xda>
 8004cfe:	bf00      	nop
 8004d00:	20400001 	.word	0x20400001

08004d04 <_fflush_r>:
 8004d04:	b538      	push	{r3, r4, r5, lr}
 8004d06:	690b      	ldr	r3, [r1, #16]
 8004d08:	4605      	mov	r5, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	b1db      	cbz	r3, 8004d46 <_fflush_r+0x42>
 8004d0e:	b118      	cbz	r0, 8004d18 <_fflush_r+0x14>
 8004d10:	6983      	ldr	r3, [r0, #24]
 8004d12:	b90b      	cbnz	r3, 8004d18 <_fflush_r+0x14>
 8004d14:	f000 f860 	bl	8004dd8 <__sinit>
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <_fflush_r+0x48>)
 8004d1a:	429c      	cmp	r4, r3
 8004d1c:	d109      	bne.n	8004d32 <_fflush_r+0x2e>
 8004d1e:	686c      	ldr	r4, [r5, #4]
 8004d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d24:	b17b      	cbz	r3, 8004d46 <_fflush_r+0x42>
 8004d26:	4621      	mov	r1, r4
 8004d28:	4628      	mov	r0, r5
 8004d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d2e:	f7ff bf63 	b.w	8004bf8 <__sflush_r>
 8004d32:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <_fflush_r+0x4c>)
 8004d34:	429c      	cmp	r4, r3
 8004d36:	d101      	bne.n	8004d3c <_fflush_r+0x38>
 8004d38:	68ac      	ldr	r4, [r5, #8]
 8004d3a:	e7f1      	b.n	8004d20 <_fflush_r+0x1c>
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <_fflush_r+0x50>)
 8004d3e:	429c      	cmp	r4, r3
 8004d40:	bf08      	it	eq
 8004d42:	68ec      	ldreq	r4, [r5, #12]
 8004d44:	e7ec      	b.n	8004d20 <_fflush_r+0x1c>
 8004d46:	2000      	movs	r0, #0
 8004d48:	bd38      	pop	{r3, r4, r5, pc}
 8004d4a:	bf00      	nop
 8004d4c:	080053f0 	.word	0x080053f0
 8004d50:	08005410 	.word	0x08005410
 8004d54:	080053d0 	.word	0x080053d0

08004d58 <std>:
 8004d58:	2300      	movs	r3, #0
 8004d5a:	b510      	push	{r4, lr}
 8004d5c:	4604      	mov	r4, r0
 8004d5e:	e9c0 3300 	strd	r3, r3, [r0]
 8004d62:	6083      	str	r3, [r0, #8]
 8004d64:	8181      	strh	r1, [r0, #12]
 8004d66:	6643      	str	r3, [r0, #100]	; 0x64
 8004d68:	81c2      	strh	r2, [r0, #14]
 8004d6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d6e:	6183      	str	r3, [r0, #24]
 8004d70:	4619      	mov	r1, r3
 8004d72:	2208      	movs	r2, #8
 8004d74:	305c      	adds	r0, #92	; 0x5c
 8004d76:	f7ff fe13 	bl	80049a0 <memset>
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <std+0x38>)
 8004d7c:	6263      	str	r3, [r4, #36]	; 0x24
 8004d7e:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <std+0x3c>)
 8004d80:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d82:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <std+0x40>)
 8004d84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d86:	4b05      	ldr	r3, [pc, #20]	; (8004d9c <std+0x44>)
 8004d88:	6224      	str	r4, [r4, #32]
 8004d8a:	6323      	str	r3, [r4, #48]	; 0x30
 8004d8c:	bd10      	pop	{r4, pc}
 8004d8e:	bf00      	nop
 8004d90:	08005125 	.word	0x08005125
 8004d94:	08005147 	.word	0x08005147
 8004d98:	0800517f 	.word	0x0800517f
 8004d9c:	080051a3 	.word	0x080051a3

08004da0 <_cleanup_r>:
 8004da0:	4901      	ldr	r1, [pc, #4]	; (8004da8 <_cleanup_r+0x8>)
 8004da2:	f000 b885 	b.w	8004eb0 <_fwalk_reent>
 8004da6:	bf00      	nop
 8004da8:	08004d05 	.word	0x08004d05

08004dac <__sfmoreglue>:
 8004dac:	b570      	push	{r4, r5, r6, lr}
 8004dae:	1e4a      	subs	r2, r1, #1
 8004db0:	2568      	movs	r5, #104	; 0x68
 8004db2:	4355      	muls	r5, r2
 8004db4:	460e      	mov	r6, r1
 8004db6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004dba:	f000 f949 	bl	8005050 <_malloc_r>
 8004dbe:	4604      	mov	r4, r0
 8004dc0:	b140      	cbz	r0, 8004dd4 <__sfmoreglue+0x28>
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	e9c0 1600 	strd	r1, r6, [r0]
 8004dc8:	300c      	adds	r0, #12
 8004dca:	60a0      	str	r0, [r4, #8]
 8004dcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004dd0:	f7ff fde6 	bl	80049a0 <memset>
 8004dd4:	4620      	mov	r0, r4
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}

08004dd8 <__sinit>:
 8004dd8:	6983      	ldr	r3, [r0, #24]
 8004dda:	b510      	push	{r4, lr}
 8004ddc:	4604      	mov	r4, r0
 8004dde:	bb33      	cbnz	r3, 8004e2e <__sinit+0x56>
 8004de0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004de4:	6503      	str	r3, [r0, #80]	; 0x50
 8004de6:	4b12      	ldr	r3, [pc, #72]	; (8004e30 <__sinit+0x58>)
 8004de8:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <__sinit+0x5c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6282      	str	r2, [r0, #40]	; 0x28
 8004dee:	4298      	cmp	r0, r3
 8004df0:	bf04      	itt	eq
 8004df2:	2301      	moveq	r3, #1
 8004df4:	6183      	streq	r3, [r0, #24]
 8004df6:	f000 f81f 	bl	8004e38 <__sfp>
 8004dfa:	6060      	str	r0, [r4, #4]
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f000 f81b 	bl	8004e38 <__sfp>
 8004e02:	60a0      	str	r0, [r4, #8]
 8004e04:	4620      	mov	r0, r4
 8004e06:	f000 f817 	bl	8004e38 <__sfp>
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	60e0      	str	r0, [r4, #12]
 8004e0e:	2104      	movs	r1, #4
 8004e10:	6860      	ldr	r0, [r4, #4]
 8004e12:	f7ff ffa1 	bl	8004d58 <std>
 8004e16:	2201      	movs	r2, #1
 8004e18:	2109      	movs	r1, #9
 8004e1a:	68a0      	ldr	r0, [r4, #8]
 8004e1c:	f7ff ff9c 	bl	8004d58 <std>
 8004e20:	2202      	movs	r2, #2
 8004e22:	2112      	movs	r1, #18
 8004e24:	68e0      	ldr	r0, [r4, #12]
 8004e26:	f7ff ff97 	bl	8004d58 <std>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	61a3      	str	r3, [r4, #24]
 8004e2e:	bd10      	pop	{r4, pc}
 8004e30:	080053cc 	.word	0x080053cc
 8004e34:	08004da1 	.word	0x08004da1

08004e38 <__sfp>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ea8 <__sfp+0x70>)
 8004e3c:	681e      	ldr	r6, [r3, #0]
 8004e3e:	69b3      	ldr	r3, [r6, #24]
 8004e40:	4607      	mov	r7, r0
 8004e42:	b913      	cbnz	r3, 8004e4a <__sfp+0x12>
 8004e44:	4630      	mov	r0, r6
 8004e46:	f7ff ffc7 	bl	8004dd8 <__sinit>
 8004e4a:	3648      	adds	r6, #72	; 0x48
 8004e4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e50:	3b01      	subs	r3, #1
 8004e52:	d503      	bpl.n	8004e5c <__sfp+0x24>
 8004e54:	6833      	ldr	r3, [r6, #0]
 8004e56:	b133      	cbz	r3, 8004e66 <__sfp+0x2e>
 8004e58:	6836      	ldr	r6, [r6, #0]
 8004e5a:	e7f7      	b.n	8004e4c <__sfp+0x14>
 8004e5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e60:	b16d      	cbz	r5, 8004e7e <__sfp+0x46>
 8004e62:	3468      	adds	r4, #104	; 0x68
 8004e64:	e7f4      	b.n	8004e50 <__sfp+0x18>
 8004e66:	2104      	movs	r1, #4
 8004e68:	4638      	mov	r0, r7
 8004e6a:	f7ff ff9f 	bl	8004dac <__sfmoreglue>
 8004e6e:	6030      	str	r0, [r6, #0]
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d1f1      	bne.n	8004e58 <__sfp+0x20>
 8004e74:	230c      	movs	r3, #12
 8004e76:	603b      	str	r3, [r7, #0]
 8004e78:	4604      	mov	r4, r0
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e7e:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <__sfp+0x74>)
 8004e80:	6665      	str	r5, [r4, #100]	; 0x64
 8004e82:	e9c4 5500 	strd	r5, r5, [r4]
 8004e86:	60a5      	str	r5, [r4, #8]
 8004e88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004e8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004e90:	2208      	movs	r2, #8
 8004e92:	4629      	mov	r1, r5
 8004e94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e98:	f7ff fd82 	bl	80049a0 <memset>
 8004e9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004ea0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ea4:	e7e9      	b.n	8004e7a <__sfp+0x42>
 8004ea6:	bf00      	nop
 8004ea8:	080053cc 	.word	0x080053cc
 8004eac:	ffff0001 	.word	0xffff0001

08004eb0 <_fwalk_reent>:
 8004eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb4:	4680      	mov	r8, r0
 8004eb6:	4689      	mov	r9, r1
 8004eb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ebc:	2600      	movs	r6, #0
 8004ebe:	b914      	cbnz	r4, 8004ec6 <_fwalk_reent+0x16>
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ec6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004eca:	3f01      	subs	r7, #1
 8004ecc:	d501      	bpl.n	8004ed2 <_fwalk_reent+0x22>
 8004ece:	6824      	ldr	r4, [r4, #0]
 8004ed0:	e7f5      	b.n	8004ebe <_fwalk_reent+0xe>
 8004ed2:	89ab      	ldrh	r3, [r5, #12]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d907      	bls.n	8004ee8 <_fwalk_reent+0x38>
 8004ed8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004edc:	3301      	adds	r3, #1
 8004ede:	d003      	beq.n	8004ee8 <_fwalk_reent+0x38>
 8004ee0:	4629      	mov	r1, r5
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	47c8      	blx	r9
 8004ee6:	4306      	orrs	r6, r0
 8004ee8:	3568      	adds	r5, #104	; 0x68
 8004eea:	e7ee      	b.n	8004eca <_fwalk_reent+0x1a>

08004eec <__swhatbuf_r>:
 8004eec:	b570      	push	{r4, r5, r6, lr}
 8004eee:	460e      	mov	r6, r1
 8004ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ef4:	2900      	cmp	r1, #0
 8004ef6:	b096      	sub	sp, #88	; 0x58
 8004ef8:	4614      	mov	r4, r2
 8004efa:	461d      	mov	r5, r3
 8004efc:	da07      	bge.n	8004f0e <__swhatbuf_r+0x22>
 8004efe:	2300      	movs	r3, #0
 8004f00:	602b      	str	r3, [r5, #0]
 8004f02:	89b3      	ldrh	r3, [r6, #12]
 8004f04:	061a      	lsls	r2, r3, #24
 8004f06:	d410      	bmi.n	8004f2a <__swhatbuf_r+0x3e>
 8004f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f0c:	e00e      	b.n	8004f2c <__swhatbuf_r+0x40>
 8004f0e:	466a      	mov	r2, sp
 8004f10:	f000 f96e 	bl	80051f0 <_fstat_r>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	dbf2      	blt.n	8004efe <__swhatbuf_r+0x12>
 8004f18:	9a01      	ldr	r2, [sp, #4]
 8004f1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f22:	425a      	negs	r2, r3
 8004f24:	415a      	adcs	r2, r3
 8004f26:	602a      	str	r2, [r5, #0]
 8004f28:	e7ee      	b.n	8004f08 <__swhatbuf_r+0x1c>
 8004f2a:	2340      	movs	r3, #64	; 0x40
 8004f2c:	2000      	movs	r0, #0
 8004f2e:	6023      	str	r3, [r4, #0]
 8004f30:	b016      	add	sp, #88	; 0x58
 8004f32:	bd70      	pop	{r4, r5, r6, pc}

08004f34 <__smakebuf_r>:
 8004f34:	898b      	ldrh	r3, [r1, #12]
 8004f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f38:	079d      	lsls	r5, r3, #30
 8004f3a:	4606      	mov	r6, r0
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	d507      	bpl.n	8004f50 <__smakebuf_r+0x1c>
 8004f40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f44:	6023      	str	r3, [r4, #0]
 8004f46:	6123      	str	r3, [r4, #16]
 8004f48:	2301      	movs	r3, #1
 8004f4a:	6163      	str	r3, [r4, #20]
 8004f4c:	b002      	add	sp, #8
 8004f4e:	bd70      	pop	{r4, r5, r6, pc}
 8004f50:	ab01      	add	r3, sp, #4
 8004f52:	466a      	mov	r2, sp
 8004f54:	f7ff ffca 	bl	8004eec <__swhatbuf_r>
 8004f58:	9900      	ldr	r1, [sp, #0]
 8004f5a:	4605      	mov	r5, r0
 8004f5c:	4630      	mov	r0, r6
 8004f5e:	f000 f877 	bl	8005050 <_malloc_r>
 8004f62:	b948      	cbnz	r0, 8004f78 <__smakebuf_r+0x44>
 8004f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f68:	059a      	lsls	r2, r3, #22
 8004f6a:	d4ef      	bmi.n	8004f4c <__smakebuf_r+0x18>
 8004f6c:	f023 0303 	bic.w	r3, r3, #3
 8004f70:	f043 0302 	orr.w	r3, r3, #2
 8004f74:	81a3      	strh	r3, [r4, #12]
 8004f76:	e7e3      	b.n	8004f40 <__smakebuf_r+0xc>
 8004f78:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <__smakebuf_r+0x7c>)
 8004f7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f7c:	89a3      	ldrh	r3, [r4, #12]
 8004f7e:	6020      	str	r0, [r4, #0]
 8004f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f84:	81a3      	strh	r3, [r4, #12]
 8004f86:	9b00      	ldr	r3, [sp, #0]
 8004f88:	6163      	str	r3, [r4, #20]
 8004f8a:	9b01      	ldr	r3, [sp, #4]
 8004f8c:	6120      	str	r0, [r4, #16]
 8004f8e:	b15b      	cbz	r3, 8004fa8 <__smakebuf_r+0x74>
 8004f90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f94:	4630      	mov	r0, r6
 8004f96:	f000 f93d 	bl	8005214 <_isatty_r>
 8004f9a:	b128      	cbz	r0, 8004fa8 <__smakebuf_r+0x74>
 8004f9c:	89a3      	ldrh	r3, [r4, #12]
 8004f9e:	f023 0303 	bic.w	r3, r3, #3
 8004fa2:	f043 0301 	orr.w	r3, r3, #1
 8004fa6:	81a3      	strh	r3, [r4, #12]
 8004fa8:	89a3      	ldrh	r3, [r4, #12]
 8004faa:	431d      	orrs	r5, r3
 8004fac:	81a5      	strh	r5, [r4, #12]
 8004fae:	e7cd      	b.n	8004f4c <__smakebuf_r+0x18>
 8004fb0:	08004da1 	.word	0x08004da1

08004fb4 <_free_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	d045      	beq.n	8005048 <_free_r+0x94>
 8004fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fc0:	1f0c      	subs	r4, r1, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bfb8      	it	lt
 8004fc6:	18e4      	addlt	r4, r4, r3
 8004fc8:	f000 f946 	bl	8005258 <__malloc_lock>
 8004fcc:	4a1f      	ldr	r2, [pc, #124]	; (800504c <_free_r+0x98>)
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	b933      	cbnz	r3, 8004fe2 <_free_r+0x2e>
 8004fd4:	6063      	str	r3, [r4, #4]
 8004fd6:	6014      	str	r4, [r2, #0]
 8004fd8:	4628      	mov	r0, r5
 8004fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fde:	f000 b93c 	b.w	800525a <__malloc_unlock>
 8004fe2:	42a3      	cmp	r3, r4
 8004fe4:	d90c      	bls.n	8005000 <_free_r+0x4c>
 8004fe6:	6821      	ldr	r1, [r4, #0]
 8004fe8:	1862      	adds	r2, r4, r1
 8004fea:	4293      	cmp	r3, r2
 8004fec:	bf04      	itt	eq
 8004fee:	681a      	ldreq	r2, [r3, #0]
 8004ff0:	685b      	ldreq	r3, [r3, #4]
 8004ff2:	6063      	str	r3, [r4, #4]
 8004ff4:	bf04      	itt	eq
 8004ff6:	1852      	addeq	r2, r2, r1
 8004ff8:	6022      	streq	r2, [r4, #0]
 8004ffa:	6004      	str	r4, [r0, #0]
 8004ffc:	e7ec      	b.n	8004fd8 <_free_r+0x24>
 8004ffe:	4613      	mov	r3, r2
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	b10a      	cbz	r2, 8005008 <_free_r+0x54>
 8005004:	42a2      	cmp	r2, r4
 8005006:	d9fa      	bls.n	8004ffe <_free_r+0x4a>
 8005008:	6819      	ldr	r1, [r3, #0]
 800500a:	1858      	adds	r0, r3, r1
 800500c:	42a0      	cmp	r0, r4
 800500e:	d10b      	bne.n	8005028 <_free_r+0x74>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	4401      	add	r1, r0
 8005014:	1858      	adds	r0, r3, r1
 8005016:	4282      	cmp	r2, r0
 8005018:	6019      	str	r1, [r3, #0]
 800501a:	d1dd      	bne.n	8004fd8 <_free_r+0x24>
 800501c:	6810      	ldr	r0, [r2, #0]
 800501e:	6852      	ldr	r2, [r2, #4]
 8005020:	605a      	str	r2, [r3, #4]
 8005022:	4401      	add	r1, r0
 8005024:	6019      	str	r1, [r3, #0]
 8005026:	e7d7      	b.n	8004fd8 <_free_r+0x24>
 8005028:	d902      	bls.n	8005030 <_free_r+0x7c>
 800502a:	230c      	movs	r3, #12
 800502c:	602b      	str	r3, [r5, #0]
 800502e:	e7d3      	b.n	8004fd8 <_free_r+0x24>
 8005030:	6820      	ldr	r0, [r4, #0]
 8005032:	1821      	adds	r1, r4, r0
 8005034:	428a      	cmp	r2, r1
 8005036:	bf04      	itt	eq
 8005038:	6811      	ldreq	r1, [r2, #0]
 800503a:	6852      	ldreq	r2, [r2, #4]
 800503c:	6062      	str	r2, [r4, #4]
 800503e:	bf04      	itt	eq
 8005040:	1809      	addeq	r1, r1, r0
 8005042:	6021      	streq	r1, [r4, #0]
 8005044:	605c      	str	r4, [r3, #4]
 8005046:	e7c7      	b.n	8004fd8 <_free_r+0x24>
 8005048:	bd38      	pop	{r3, r4, r5, pc}
 800504a:	bf00      	nop
 800504c:	20000094 	.word	0x20000094

08005050 <_malloc_r>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	1ccd      	adds	r5, r1, #3
 8005054:	f025 0503 	bic.w	r5, r5, #3
 8005058:	3508      	adds	r5, #8
 800505a:	2d0c      	cmp	r5, #12
 800505c:	bf38      	it	cc
 800505e:	250c      	movcc	r5, #12
 8005060:	2d00      	cmp	r5, #0
 8005062:	4606      	mov	r6, r0
 8005064:	db01      	blt.n	800506a <_malloc_r+0x1a>
 8005066:	42a9      	cmp	r1, r5
 8005068:	d903      	bls.n	8005072 <_malloc_r+0x22>
 800506a:	230c      	movs	r3, #12
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	2000      	movs	r0, #0
 8005070:	bd70      	pop	{r4, r5, r6, pc}
 8005072:	f000 f8f1 	bl	8005258 <__malloc_lock>
 8005076:	4a21      	ldr	r2, [pc, #132]	; (80050fc <_malloc_r+0xac>)
 8005078:	6814      	ldr	r4, [r2, #0]
 800507a:	4621      	mov	r1, r4
 800507c:	b991      	cbnz	r1, 80050a4 <_malloc_r+0x54>
 800507e:	4c20      	ldr	r4, [pc, #128]	; (8005100 <_malloc_r+0xb0>)
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	b91b      	cbnz	r3, 800508c <_malloc_r+0x3c>
 8005084:	4630      	mov	r0, r6
 8005086:	f000 f83d 	bl	8005104 <_sbrk_r>
 800508a:	6020      	str	r0, [r4, #0]
 800508c:	4629      	mov	r1, r5
 800508e:	4630      	mov	r0, r6
 8005090:	f000 f838 	bl	8005104 <_sbrk_r>
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	d124      	bne.n	80050e2 <_malloc_r+0x92>
 8005098:	230c      	movs	r3, #12
 800509a:	6033      	str	r3, [r6, #0]
 800509c:	4630      	mov	r0, r6
 800509e:	f000 f8dc 	bl	800525a <__malloc_unlock>
 80050a2:	e7e4      	b.n	800506e <_malloc_r+0x1e>
 80050a4:	680b      	ldr	r3, [r1, #0]
 80050a6:	1b5b      	subs	r3, r3, r5
 80050a8:	d418      	bmi.n	80050dc <_malloc_r+0x8c>
 80050aa:	2b0b      	cmp	r3, #11
 80050ac:	d90f      	bls.n	80050ce <_malloc_r+0x7e>
 80050ae:	600b      	str	r3, [r1, #0]
 80050b0:	50cd      	str	r5, [r1, r3]
 80050b2:	18cc      	adds	r4, r1, r3
 80050b4:	4630      	mov	r0, r6
 80050b6:	f000 f8d0 	bl	800525a <__malloc_unlock>
 80050ba:	f104 000b 	add.w	r0, r4, #11
 80050be:	1d23      	adds	r3, r4, #4
 80050c0:	f020 0007 	bic.w	r0, r0, #7
 80050c4:	1ac3      	subs	r3, r0, r3
 80050c6:	d0d3      	beq.n	8005070 <_malloc_r+0x20>
 80050c8:	425a      	negs	r2, r3
 80050ca:	50e2      	str	r2, [r4, r3]
 80050cc:	e7d0      	b.n	8005070 <_malloc_r+0x20>
 80050ce:	428c      	cmp	r4, r1
 80050d0:	684b      	ldr	r3, [r1, #4]
 80050d2:	bf16      	itet	ne
 80050d4:	6063      	strne	r3, [r4, #4]
 80050d6:	6013      	streq	r3, [r2, #0]
 80050d8:	460c      	movne	r4, r1
 80050da:	e7eb      	b.n	80050b4 <_malloc_r+0x64>
 80050dc:	460c      	mov	r4, r1
 80050de:	6849      	ldr	r1, [r1, #4]
 80050e0:	e7cc      	b.n	800507c <_malloc_r+0x2c>
 80050e2:	1cc4      	adds	r4, r0, #3
 80050e4:	f024 0403 	bic.w	r4, r4, #3
 80050e8:	42a0      	cmp	r0, r4
 80050ea:	d005      	beq.n	80050f8 <_malloc_r+0xa8>
 80050ec:	1a21      	subs	r1, r4, r0
 80050ee:	4630      	mov	r0, r6
 80050f0:	f000 f808 	bl	8005104 <_sbrk_r>
 80050f4:	3001      	adds	r0, #1
 80050f6:	d0cf      	beq.n	8005098 <_malloc_r+0x48>
 80050f8:	6025      	str	r5, [r4, #0]
 80050fa:	e7db      	b.n	80050b4 <_malloc_r+0x64>
 80050fc:	20000094 	.word	0x20000094
 8005100:	20000098 	.word	0x20000098

08005104 <_sbrk_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4c06      	ldr	r4, [pc, #24]	; (8005120 <_sbrk_r+0x1c>)
 8005108:	2300      	movs	r3, #0
 800510a:	4605      	mov	r5, r0
 800510c:	4608      	mov	r0, r1
 800510e:	6023      	str	r3, [r4, #0]
 8005110:	f7fb fc90 	bl	8000a34 <_sbrk>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_sbrk_r+0x1a>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	b103      	cbz	r3, 800511e <_sbrk_r+0x1a>
 800511c:	602b      	str	r3, [r5, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	2000012c 	.word	0x2000012c

08005124 <__sread>:
 8005124:	b510      	push	{r4, lr}
 8005126:	460c      	mov	r4, r1
 8005128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800512c:	f000 f896 	bl	800525c <_read_r>
 8005130:	2800      	cmp	r0, #0
 8005132:	bfab      	itete	ge
 8005134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005136:	89a3      	ldrhlt	r3, [r4, #12]
 8005138:	181b      	addge	r3, r3, r0
 800513a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800513e:	bfac      	ite	ge
 8005140:	6563      	strge	r3, [r4, #84]	; 0x54
 8005142:	81a3      	strhlt	r3, [r4, #12]
 8005144:	bd10      	pop	{r4, pc}

08005146 <__swrite>:
 8005146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800514a:	461f      	mov	r7, r3
 800514c:	898b      	ldrh	r3, [r1, #12]
 800514e:	05db      	lsls	r3, r3, #23
 8005150:	4605      	mov	r5, r0
 8005152:	460c      	mov	r4, r1
 8005154:	4616      	mov	r6, r2
 8005156:	d505      	bpl.n	8005164 <__swrite+0x1e>
 8005158:	2302      	movs	r3, #2
 800515a:	2200      	movs	r2, #0
 800515c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005160:	f000 f868 	bl	8005234 <_lseek_r>
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800516a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800516e:	81a3      	strh	r3, [r4, #12]
 8005170:	4632      	mov	r2, r6
 8005172:	463b      	mov	r3, r7
 8005174:	4628      	mov	r0, r5
 8005176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800517a:	f000 b817 	b.w	80051ac <_write_r>

0800517e <__sseek>:
 800517e:	b510      	push	{r4, lr}
 8005180:	460c      	mov	r4, r1
 8005182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005186:	f000 f855 	bl	8005234 <_lseek_r>
 800518a:	1c43      	adds	r3, r0, #1
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	bf15      	itete	ne
 8005190:	6560      	strne	r0, [r4, #84]	; 0x54
 8005192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800519a:	81a3      	strheq	r3, [r4, #12]
 800519c:	bf18      	it	ne
 800519e:	81a3      	strhne	r3, [r4, #12]
 80051a0:	bd10      	pop	{r4, pc}

080051a2 <__sclose>:
 80051a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a6:	f000 b813 	b.w	80051d0 <_close_r>
	...

080051ac <_write_r>:
 80051ac:	b538      	push	{r3, r4, r5, lr}
 80051ae:	4c07      	ldr	r4, [pc, #28]	; (80051cc <_write_r+0x20>)
 80051b0:	4605      	mov	r5, r0
 80051b2:	4608      	mov	r0, r1
 80051b4:	4611      	mov	r1, r2
 80051b6:	2200      	movs	r2, #0
 80051b8:	6022      	str	r2, [r4, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	f7fb fbe9 	bl	8000992 <_write>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d102      	bne.n	80051ca <_write_r+0x1e>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	b103      	cbz	r3, 80051ca <_write_r+0x1e>
 80051c8:	602b      	str	r3, [r5, #0]
 80051ca:	bd38      	pop	{r3, r4, r5, pc}
 80051cc:	2000012c 	.word	0x2000012c

080051d0 <_close_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4c06      	ldr	r4, [pc, #24]	; (80051ec <_close_r+0x1c>)
 80051d4:	2300      	movs	r3, #0
 80051d6:	4605      	mov	r5, r0
 80051d8:	4608      	mov	r0, r1
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	f7fb fbf5 	bl	80009ca <_close>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_close_r+0x1a>
 80051e4:	6823      	ldr	r3, [r4, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_close_r+0x1a>
 80051e8:	602b      	str	r3, [r5, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	2000012c 	.word	0x2000012c

080051f0 <_fstat_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4c07      	ldr	r4, [pc, #28]	; (8005210 <_fstat_r+0x20>)
 80051f4:	2300      	movs	r3, #0
 80051f6:	4605      	mov	r5, r0
 80051f8:	4608      	mov	r0, r1
 80051fa:	4611      	mov	r1, r2
 80051fc:	6023      	str	r3, [r4, #0]
 80051fe:	f7fb fbf0 	bl	80009e2 <_fstat>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	d102      	bne.n	800520c <_fstat_r+0x1c>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	b103      	cbz	r3, 800520c <_fstat_r+0x1c>
 800520a:	602b      	str	r3, [r5, #0]
 800520c:	bd38      	pop	{r3, r4, r5, pc}
 800520e:	bf00      	nop
 8005210:	2000012c 	.word	0x2000012c

08005214 <_isatty_r>:
 8005214:	b538      	push	{r3, r4, r5, lr}
 8005216:	4c06      	ldr	r4, [pc, #24]	; (8005230 <_isatty_r+0x1c>)
 8005218:	2300      	movs	r3, #0
 800521a:	4605      	mov	r5, r0
 800521c:	4608      	mov	r0, r1
 800521e:	6023      	str	r3, [r4, #0]
 8005220:	f7fb fbef 	bl	8000a02 <_isatty>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_isatty_r+0x1a>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	b103      	cbz	r3, 800522e <_isatty_r+0x1a>
 800522c:	602b      	str	r3, [r5, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	2000012c 	.word	0x2000012c

08005234 <_lseek_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4c07      	ldr	r4, [pc, #28]	; (8005254 <_lseek_r+0x20>)
 8005238:	4605      	mov	r5, r0
 800523a:	4608      	mov	r0, r1
 800523c:	4611      	mov	r1, r2
 800523e:	2200      	movs	r2, #0
 8005240:	6022      	str	r2, [r4, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	f7fb fbe8 	bl	8000a18 <_lseek>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_lseek_r+0x1e>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	b103      	cbz	r3, 8005252 <_lseek_r+0x1e>
 8005250:	602b      	str	r3, [r5, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	2000012c 	.word	0x2000012c

08005258 <__malloc_lock>:
 8005258:	4770      	bx	lr

0800525a <__malloc_unlock>:
 800525a:	4770      	bx	lr

0800525c <_read_r>:
 800525c:	b538      	push	{r3, r4, r5, lr}
 800525e:	4c07      	ldr	r4, [pc, #28]	; (800527c <_read_r+0x20>)
 8005260:	4605      	mov	r5, r0
 8005262:	4608      	mov	r0, r1
 8005264:	4611      	mov	r1, r2
 8005266:	2200      	movs	r2, #0
 8005268:	6022      	str	r2, [r4, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	f7fb fb74 	bl	8000958 <_read>
 8005270:	1c43      	adds	r3, r0, #1
 8005272:	d102      	bne.n	800527a <_read_r+0x1e>
 8005274:	6823      	ldr	r3, [r4, #0]
 8005276:	b103      	cbz	r3, 800527a <_read_r+0x1e>
 8005278:	602b      	str	r3, [r5, #0]
 800527a:	bd38      	pop	{r3, r4, r5, pc}
 800527c:	2000012c 	.word	0x2000012c

08005280 <_init>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	bf00      	nop
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr

0800528c <_fini>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	bf00      	nop
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr
