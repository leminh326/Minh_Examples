
I2C_TwoBoards_ComPolling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08004a14  08004a14  00014a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004b8c  08004b8c  00014b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004b94  08004b94  00014b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000004  08004b9c  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d0  20000074  08004c0c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000244  08004c0c  00020244  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010be3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000023b4  00000000  00000000  00030c87  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001240  00000000  00000000  00033040  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001128  00000000  00000000  00034280  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002233f  00000000  00000000  000353a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000c27f  00000000  00000000  000576e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d7f5d  00000000  00000000  00063966  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  0013b8c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000051c0  00000000  00000000  0013b940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000074 	.word	0x20000074
 8000158:	00000000 	.word	0x00000000
 800015c:	080049fc 	.word	0x080049fc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000078 	.word	0x20000078
 8000178:	080049fc 	.word	0x080049fc

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	4604      	mov	r4, r0
 80001b4:	4688      	mov	r8, r1
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	d14b      	bne.n	8000252 <__udivmoddi4+0xa6>
 80001ba:	428a      	cmp	r2, r1
 80001bc:	4615      	mov	r5, r2
 80001be:	d967      	bls.n	8000290 <__udivmoddi4+0xe4>
 80001c0:	fab2 f282 	clz	r2, r2
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0720 	rsb	r7, r2, #32
 80001ca:	fa01 f302 	lsl.w	r3, r1, r2
 80001ce:	fa20 f707 	lsr.w	r7, r0, r7
 80001d2:	4095      	lsls	r5, r2
 80001d4:	ea47 0803 	orr.w	r8, r7, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80001de:	0c23      	lsrs	r3, r4, #16
 80001e0:	fbb8 f7fe 	udiv	r7, r8, lr
 80001e4:	fa1f fc85 	uxth.w	ip, r5
 80001e8:	fb0e 8817 	mls	r8, lr, r7, r8
 80001ec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001f0:	fb07 f10c 	mul.w	r1, r7, ip
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d909      	bls.n	800020c <__udivmoddi4+0x60>
 80001f8:	18eb      	adds	r3, r5, r3
 80001fa:	f107 30ff 	add.w	r0, r7, #4294967295
 80001fe:	f080 811b 	bcs.w	8000438 <__udivmoddi4+0x28c>
 8000202:	4299      	cmp	r1, r3
 8000204:	f240 8118 	bls.w	8000438 <__udivmoddi4+0x28c>
 8000208:	3f02      	subs	r7, #2
 800020a:	442b      	add	r3, r5
 800020c:	1a5b      	subs	r3, r3, r1
 800020e:	b2a4      	uxth	r4, r4
 8000210:	fbb3 f0fe 	udiv	r0, r3, lr
 8000214:	fb0e 3310 	mls	r3, lr, r0, r3
 8000218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800021c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000220:	45a4      	cmp	ip, r4
 8000222:	d909      	bls.n	8000238 <__udivmoddi4+0x8c>
 8000224:	192c      	adds	r4, r5, r4
 8000226:	f100 33ff 	add.w	r3, r0, #4294967295
 800022a:	f080 8107 	bcs.w	800043c <__udivmoddi4+0x290>
 800022e:	45a4      	cmp	ip, r4
 8000230:	f240 8104 	bls.w	800043c <__udivmoddi4+0x290>
 8000234:	3802      	subs	r0, #2
 8000236:	442c      	add	r4, r5
 8000238:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800023c:	eba4 040c 	sub.w	r4, r4, ip
 8000240:	2700      	movs	r7, #0
 8000242:	b11e      	cbz	r6, 800024c <__udivmoddi4+0xa0>
 8000244:	40d4      	lsrs	r4, r2
 8000246:	2300      	movs	r3, #0
 8000248:	e9c6 4300 	strd	r4, r3, [r6]
 800024c:	4639      	mov	r1, r7
 800024e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000252:	428b      	cmp	r3, r1
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0xbe>
 8000256:	2e00      	cmp	r6, #0
 8000258:	f000 80eb 	beq.w	8000432 <__udivmoddi4+0x286>
 800025c:	2700      	movs	r7, #0
 800025e:	e9c6 0100 	strd	r0, r1, [r6]
 8000262:	4638      	mov	r0, r7
 8000264:	4639      	mov	r1, r7
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f783 	clz	r7, r3
 800026e:	2f00      	cmp	r7, #0
 8000270:	d147      	bne.n	8000302 <__udivmoddi4+0x156>
 8000272:	428b      	cmp	r3, r1
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd0>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80fa 	bhi.w	8000470 <__udivmoddi4+0x2c4>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb61 0303 	sbc.w	r3, r1, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e0      	beq.n	800024c <__udivmoddi4+0xa0>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7dd      	b.n	800024c <__udivmoddi4+0xa0>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xe8>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 808f 	bne.w	80003bc <__udivmoddi4+0x210>
 800029e:	1b49      	subs	r1, r1, r5
 80002a0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a4:	fa1f f885 	uxth.w	r8, r5
 80002a8:	2701      	movs	r7, #1
 80002aa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002ae:	0c23      	lsrs	r3, r4, #16
 80002b0:	fb0e 111c 	mls	r1, lr, ip, r1
 80002b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b8:	fb08 f10c 	mul.w	r1, r8, ip
 80002bc:	4299      	cmp	r1, r3
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0x124>
 80002c0:	18eb      	adds	r3, r5, r3
 80002c2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x122>
 80002c8:	4299      	cmp	r1, r3
 80002ca:	f200 80cd 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002ce:	4684      	mov	ip, r0
 80002d0:	1a59      	subs	r1, r3, r1
 80002d2:	b2a3      	uxth	r3, r4
 80002d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002d8:	fb0e 1410 	mls	r4, lr, r0, r1
 80002dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80002e0:	fb08 f800 	mul.w	r8, r8, r0
 80002e4:	45a0      	cmp	r8, r4
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0x14c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0x14a>
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	f200 80b6 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002f6:	4618      	mov	r0, r3
 80002f8:	eba4 0408 	sub.w	r4, r4, r8
 80002fc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000300:	e79f      	b.n	8000242 <__udivmoddi4+0x96>
 8000302:	f1c7 0c20 	rsb	ip, r7, #32
 8000306:	40bb      	lsls	r3, r7
 8000308:	fa22 fe0c 	lsr.w	lr, r2, ip
 800030c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000310:	fa01 f407 	lsl.w	r4, r1, r7
 8000314:	fa20 f50c 	lsr.w	r5, r0, ip
 8000318:	fa21 f30c 	lsr.w	r3, r1, ip
 800031c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000320:	4325      	orrs	r5, r4
 8000322:	fbb3 f9f8 	udiv	r9, r3, r8
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	fb08 3319 	mls	r3, r8, r9, r3
 800032c:	fa1f fa8e 	uxth.w	sl, lr
 8000330:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000334:	fb09 f40a 	mul.w	r4, r9, sl
 8000338:	429c      	cmp	r4, r3
 800033a:	fa02 f207 	lsl.w	r2, r2, r7
 800033e:	fa00 f107 	lsl.w	r1, r0, r7
 8000342:	d90b      	bls.n	800035c <__udivmoddi4+0x1b0>
 8000344:	eb1e 0303 	adds.w	r3, lr, r3
 8000348:	f109 30ff 	add.w	r0, r9, #4294967295
 800034c:	f080 8087 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000350:	429c      	cmp	r4, r3
 8000352:	f240 8084 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000356:	f1a9 0902 	sub.w	r9, r9, #2
 800035a:	4473      	add	r3, lr
 800035c:	1b1b      	subs	r3, r3, r4
 800035e:	b2ad      	uxth	r5, r5
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800036c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000370:	45a2      	cmp	sl, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x1da>
 8000374:	eb1e 0404 	adds.w	r4, lr, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295
 800037c:	d26b      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 800037e:	45a2      	cmp	sl, r4
 8000380:	d969      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000382:	3802      	subs	r0, #2
 8000384:	4474      	add	r4, lr
 8000386:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800038a:	fba0 8902 	umull	r8, r9, r0, r2
 800038e:	eba4 040a 	sub.w	r4, r4, sl
 8000392:	454c      	cmp	r4, r9
 8000394:	46c2      	mov	sl, r8
 8000396:	464b      	mov	r3, r9
 8000398:	d354      	bcc.n	8000444 <__udivmoddi4+0x298>
 800039a:	d051      	beq.n	8000440 <__udivmoddi4+0x294>
 800039c:	2e00      	cmp	r6, #0
 800039e:	d069      	beq.n	8000474 <__udivmoddi4+0x2c8>
 80003a0:	ebb1 050a 	subs.w	r5, r1, sl
 80003a4:	eb64 0403 	sbc.w	r4, r4, r3
 80003a8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003ac:	40fd      	lsrs	r5, r7
 80003ae:	40fc      	lsrs	r4, r7
 80003b0:	ea4c 0505 	orr.w	r5, ip, r5
 80003b4:	e9c6 5400 	strd	r5, r4, [r6]
 80003b8:	2700      	movs	r7, #0
 80003ba:	e747      	b.n	800024c <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f703 	lsr.w	r7, r0, r3
 80003c4:	4095      	lsls	r5, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	fa21 f303 	lsr.w	r3, r1, r3
 80003ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d2:	4338      	orrs	r0, r7
 80003d4:	0c01      	lsrs	r1, r0, #16
 80003d6:	fbb3 f7fe 	udiv	r7, r3, lr
 80003da:	fa1f f885 	uxth.w	r8, r5
 80003de:	fb0e 3317 	mls	r3, lr, r7, r3
 80003e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e6:	fb07 f308 	mul.w	r3, r7, r8
 80003ea:	428b      	cmp	r3, r1
 80003ec:	fa04 f402 	lsl.w	r4, r4, r2
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f2:	1869      	adds	r1, r5, r1
 80003f4:	f107 3cff 	add.w	ip, r7, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3f02      	subs	r7, #2
 8000400:	4429      	add	r1, r5
 8000402:	1acb      	subs	r3, r1, r3
 8000404:	b281      	uxth	r1, r0
 8000406:	fbb3 f0fe 	udiv	r0, r3, lr
 800040a:	fb0e 3310 	mls	r3, lr, r0, r3
 800040e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000412:	fb00 f308 	mul.w	r3, r0, r8
 8000416:	428b      	cmp	r3, r1
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x27e>
 800041a:	1869      	adds	r1, r5, r1
 800041c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000420:	d217      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000422:	428b      	cmp	r3, r1
 8000424:	d915      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000426:	3802      	subs	r0, #2
 8000428:	4429      	add	r1, r5
 800042a:	1ac9      	subs	r1, r1, r3
 800042c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000430:	e73b      	b.n	80002aa <__udivmoddi4+0xfe>
 8000432:	4637      	mov	r7, r6
 8000434:	4630      	mov	r0, r6
 8000436:	e709      	b.n	800024c <__udivmoddi4+0xa0>
 8000438:	4607      	mov	r7, r0
 800043a:	e6e7      	b.n	800020c <__udivmoddi4+0x60>
 800043c:	4618      	mov	r0, r3
 800043e:	e6fb      	b.n	8000238 <__udivmoddi4+0x8c>
 8000440:	4541      	cmp	r1, r8
 8000442:	d2ab      	bcs.n	800039c <__udivmoddi4+0x1f0>
 8000444:	ebb8 0a02 	subs.w	sl, r8, r2
 8000448:	eb69 020e 	sbc.w	r2, r9, lr
 800044c:	3801      	subs	r0, #1
 800044e:	4613      	mov	r3, r2
 8000450:	e7a4      	b.n	800039c <__udivmoddi4+0x1f0>
 8000452:	4660      	mov	r0, ip
 8000454:	e7e9      	b.n	800042a <__udivmoddi4+0x27e>
 8000456:	4618      	mov	r0, r3
 8000458:	e795      	b.n	8000386 <__udivmoddi4+0x1da>
 800045a:	4667      	mov	r7, ip
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	4681      	mov	r9, r0
 8000460:	e77c      	b.n	800035c <__udivmoddi4+0x1b0>
 8000462:	3802      	subs	r0, #2
 8000464:	442c      	add	r4, r5
 8000466:	e747      	b.n	80002f8 <__udivmoddi4+0x14c>
 8000468:	f1ac 0c02 	sub.w	ip, ip, #2
 800046c:	442b      	add	r3, r5
 800046e:	e72f      	b.n	80002d0 <__udivmoddi4+0x124>
 8000470:	4638      	mov	r0, r7
 8000472:	e708      	b.n	8000286 <__udivmoddi4+0xda>
 8000474:	4637      	mov	r7, r6
 8000476:	e6e9      	b.n	800024c <__udivmoddi4+0xa0>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004ae:	b480      	push	{r7}
 80004b0:	b085      	sub	sp, #20
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	4313      	orrs	r3, r2
 80004c4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4013      	ands	r3, r2
 80004d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004d2:	68fb      	ldr	r3, [r7, #12]
}
 80004d4:	bf00      	nop
 80004d6:	3714      	adds	r7, #20
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e4:	f000 fc94 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e8:	f000 f81a 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ec:	f000 f914 	bl	8000718 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f0:	f000 f8f8 	bl	80006e4 <MX_DMA_Init>
  MX_I2C1_Init();
 80004f4:	f000 f866 	bl	80005c4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80004f8:	f000 f8a8 	bl	800064c <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(10);
 80004fc:	200a      	movs	r0, #10
 80004fe:	f000 fd0d 	bl	8000f1c <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("!!! Start !!! \n");
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <main+0x38>)
 8000504:	f003 fe6e 	bl	80041e4 <puts>
//	  HAL_GPIO_TogglePin(Led3_GPIO_Port, Led3_Pin);
//#endif

	  while (1)
	  {
		  HAL_Delay(1000);
 8000508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050c:	f000 fd06 	bl	8000f1c <HAL_Delay>
//		  char tx_buff[]={'A','B','C','D','1','2','3','4','5','6'};
//		  HAL_UART_Transmit(&huart1,tx_buff,10,1000);
//		  HAL_UART_Transmit_DMA(&huart1,tx_buff,10);
		  printf("!!! Loop !!! \n");
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <main+0x3c>)
 8000512:	f003 fe67 	bl	80041e4 <puts>
		  HAL_Delay(1000);
 8000516:	e7f7      	b.n	8000508 <main+0x28>
 8000518:	08004a14 	.word	0x08004a14
 800051c:	08004a24 	.word	0x08004a24

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b09a      	sub	sp, #104	; 0x68
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2248      	movs	r2, #72	; 0x48
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f003 fdf4 	bl	800411c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]
 8000542:	615a      	str	r2, [r3, #20]
 8000544:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000546:	2320      	movs	r3, #32
 8000548:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800054a:	2301      	movs	r3, #1
 800054c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800054e:	2300      	movs	r3, #0
 8000550:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000552:	2360      	movs	r3, #96	; 0x60
 8000554:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000556:	2302      	movs	r3, #2
 8000558:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800055a:	2301      	movs	r3, #1
 800055c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8000562:	2320      	movs	r3, #32
 8000564:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 8000566:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800056a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800056c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000570:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000572:	2304      	movs	r3, #4
 8000574:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0320 	add.w	r3, r7, #32
 800057a:	4618      	mov	r0, r3
 800057c:	f001 ff46 	bl	800240c <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000586:	f000 f91f 	bl	80007c8 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800058a:	236f      	movs	r3, #111	; 0x6f
 800058c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2303      	movs	r3, #3
 8000590:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005a6:	1d3b      	adds	r3, r7, #4
 80005a8:	2103      	movs	r1, #3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f002 fac2 	bl	8002b34 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005b6:	f000 f907 	bl	80007c8 <Error_Handler>
  /** Initializes the peripherals clocks
  */
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80005ba:	bf00      	nop
 80005bc:	3768      	adds	r7, #104	; 0x68
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
	...

080005c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c8:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_I2C1_Init+0x7c>)
 80005ca:	4a1e      	ldr	r2, [pc, #120]	; (8000644 <MX_I2C1_Init+0x80>)
 80005cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00400B27;
 80005ce:	4b1c      	ldr	r3, [pc, #112]	; (8000640 <MX_I2C1_Init+0x7c>)
 80005d0:	4a1d      	ldr	r2, [pc, #116]	; (8000648 <MX_I2C1_Init+0x84>)
 80005d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = I2C_ADDRESS;
 80005d4:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_I2C1_Init+0x7c>)
 80005d6:	f240 320f 	movw	r2, #783	; 0x30f
 80005da:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_I2C1_Init+0x7c>)
 80005de:	2202      	movs	r2, #2
 80005e0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_I2C1_Init+0x7c>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_I2C1_Init+0x7c>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_I2C1_Init+0x7c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_I2C1_Init+0x7c>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_I2C1_Init+0x7c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000600:	480f      	ldr	r0, [pc, #60]	; (8000640 <MX_I2C1_Init+0x7c>)
 8000602:	f001 fa19 	bl	8001a38 <HAL_I2C_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800060c:	f000 f8dc 	bl	80007c8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000610:	2100      	movs	r1, #0
 8000612:	480b      	ldr	r0, [pc, #44]	; (8000640 <MX_I2C1_Init+0x7c>)
 8000614:	f001 fa9f 	bl	8001b56 <HAL_I2CEx_ConfigAnalogFilter>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800061e:	f000 f8d3 	bl	80007c8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000622:	2100      	movs	r1, #0
 8000624:	4806      	ldr	r0, [pc, #24]	; (8000640 <MX_I2C1_Init+0x7c>)
 8000626:	f001 fae1 	bl	8001bec <HAL_I2CEx_ConfigDigitalFilter>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000630:	f000 f8ca 	bl	80007c8 <Error_Handler>
  }
  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000634:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000638:	f001 fb24 	bl	8001c84 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000009c 	.word	0x2000009c
 8000644:	40005400 	.word	0x40005400
 8000648:	00400b27 	.word	0x00400b27

0800064c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000650:	4b22      	ldr	r3, [pc, #136]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000652:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <MX_USART1_UART_Init+0x94>)
 8000654:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <MX_USART1_UART_Init+0x90>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <MX_USART1_UART_Init+0x90>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <MX_USART1_UART_Init+0x90>)
 800068a:	2200      	movs	r2, #0
 800068c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000690:	2200      	movs	r2, #0
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000694:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_USART1_UART_Init+0x90>)
 8000696:	f002 fd0d 	bl	80030b4 <HAL_UART_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006a0:	f000 f892 	bl	80007c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	480d      	ldr	r0, [pc, #52]	; (80006dc <MX_USART1_UART_Init+0x90>)
 80006a8:	f003 fc2a 	bl	8003f00 <HAL_UARTEx_SetTxFifoThreshold>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006b2:	f000 f889 	bl	80007c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b6:	2100      	movs	r1, #0
 80006b8:	4808      	ldr	r0, [pc, #32]	; (80006dc <MX_USART1_UART_Init+0x90>)
 80006ba:	f003 fc5f 	bl	8003f7c <HAL_UARTEx_SetRxFifoThreshold>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006c4:	f000 f880 	bl	80007c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_USART1_UART_Init+0x90>)
 80006ca:	f003 fbe0 	bl	8003e8e <HAL_UARTEx_DisableFifoMode>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006d4:	f000 f878 	bl	80007c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200001a8 	.word	0x200001a8
 80006e0:	40013800 	.word	0x40013800

080006e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006e8:	2004      	movs	r0, #4
 80006ea:	f7ff fec7 	bl	800047c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ee:	2001      	movs	r0, #1
 80006f0:	f7ff fec4 	bl	800047c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2100      	movs	r1, #0
 80006f8:	200b      	movs	r0, #11
 80006fa:	f000 fd0c 	bl	8001116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006fe:	200b      	movs	r0, #11
 8000700:	f000 fd23 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	200c      	movs	r0, #12
 800070a:	f000 fd04 	bl	8001116 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800070e:	200c      	movs	r0, #12
 8000710:	f000 fd1b 	bl	800114a <HAL_NVIC_EnableIRQ>

}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072c:	2002      	movs	r0, #2
 800072e:	f7ff febe 	bl	80004ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2004      	movs	r0, #4
 8000734:	f7ff febb 	bl	80004ae <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000738:	2008      	movs	r0, #8
 800073a:	f7ff feb8 	bl	80004ae <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led2_Pin|Led3_Pin|Led1_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2123      	movs	r1, #35	; 0x23
 8000742:	4815      	ldr	r0, [pc, #84]	; (8000798 <MX_GPIO_Init+0x80>)
 8000744:	f001 f960 	bl	8001a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button1_Pin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000748:	2310      	movs	r3, #16
 800074a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000750:	2301      	movs	r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4619      	mov	r1, r3
 8000758:	4810      	ldr	r0, [pc, #64]	; (800079c <MX_GPIO_Init+0x84>)
 800075a:	f000 ffe5 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led2_Pin Led3_Pin Led1_Pin */
  GPIO_InitStruct.Pin = Led2_Pin|Led3_Pin|Led1_Pin;
 800075e:	2323      	movs	r3, #35	; 0x23
 8000760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	4809      	ldr	r0, [pc, #36]	; (8000798 <MX_GPIO_Init+0x80>)
 8000774:	f000 ffd8 	bl	8001728 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button3_Pin;
 8000778:	2303      	movs	r3, #3
 800077a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000780:	2301      	movs	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_GPIO_Init+0x88>)
 800078a:	f000 ffcd 	bl	8001728 <HAL_GPIO_Init>

}
 800078e:	bf00      	nop
 8000790:	3718      	adds	r7, #24
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	48000400 	.word	0x48000400
 800079c:	48000800 	.word	0x48000800
 80007a0:	48000c00 	.word	0x48000c00

080007a4 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
//  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
  HAL_UART_Transmit_DMA(&huart1, (uint8_t *)&ch, 1);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2201      	movs	r2, #1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4804      	ldr	r0, [pc, #16]	; (80007c4 <__io_putchar+0x20>)
 80007b4:	f002 fcce 	bl	8003154 <HAL_UART_Transmit_DMA>
  return ch;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200001a8 	.word	0x200001a8

080007c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <LL_AHB2_GRP1_EnableClock>:
{
 80007d6:	b480      	push	{r7}
 80007d8:	b085      	sub	sp, #20
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	4013      	ands	r3, r2
 80007f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007fa:	68fb      	ldr	r3, [r7, #12]
}
 80007fc:	bf00      	nop
 80007fe:	3714      	adds	r7, #20
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr

08000808 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_USB
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000816:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	4313      	orrs	r3, r2
 800081e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000824:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800082c:	68fb      	ldr	r3, [r7, #12]
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800083a:	b480      	push	{r7}
 800083c:	b085      	sub	sp, #20
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000846:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000848:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4313      	orrs	r3, r2
 8000850:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000856:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4013      	ands	r3, r2
 800085c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800085e:	68fb      	ldr	r3, [r7, #12]
}
 8000860:	bf00      	nop
 8000862:	3714      	adds	r7, #20
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr
	...

0800087c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a0f      	ldr	r2, [pc, #60]	; (80008d8 <HAL_I2C_MspInit+0x5c>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d117      	bne.n	80008ce <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2002      	movs	r0, #2
 80008a0:	f7ff ff99 	bl	80007d6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008aa:	2312      	movs	r3, #18
 80008ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008b6:	2304      	movs	r3, #4
 80008b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4806      	ldr	r0, [pc, #24]	; (80008dc <HAL_I2C_MspInit+0x60>)
 80008c2:	f000 ff31 	bl	8001728 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008c6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80008ca:	f7ff ff9d 	bl	8000808 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008ce:	bf00      	nop
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40005400 	.word	0x40005400
 80008dc:	48000400 	.word	0x48000400

080008e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a3b      	ldr	r2, [pc, #236]	; (80009ec <HAL_UART_MspInit+0x10c>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d170      	bne.n	80009e4 <HAL_UART_MspInit+0x104>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000902:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000906:	f7ff ff98 	bl	800083a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2002      	movs	r0, #2
 800090c:	f7ff ff63 	bl	80007d6 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000910:	23c0      	movs	r3, #192	; 0xc0
 8000912:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000920:	2307      	movs	r3, #7
 8000922:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	4619      	mov	r1, r3
 800092a:	4831      	ldr	r0, [pc, #196]	; (80009f0 <HAL_UART_MspInit+0x110>)
 800092c:	f000 fefc 	bl	8001728 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000930:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <HAL_UART_MspInit+0x114>)
 8000932:	4a31      	ldr	r2, [pc, #196]	; (80009f8 <HAL_UART_MspInit+0x118>)
 8000934:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <HAL_UART_MspInit+0x114>)
 8000938:	220f      	movs	r2, #15
 800093a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800093c:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <HAL_UART_MspInit+0x114>)
 800093e:	2210      	movs	r2, #16
 8000940:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <HAL_UART_MspInit+0x114>)
 8000944:	2200      	movs	r2, #0
 8000946:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000948:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <HAL_UART_MspInit+0x114>)
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800094e:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <HAL_UART_MspInit+0x114>)
 8000950:	2200      	movs	r2, #0
 8000952:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000954:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <HAL_UART_MspInit+0x114>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800095a:	4b26      	ldr	r3, [pc, #152]	; (80009f4 <HAL_UART_MspInit+0x114>)
 800095c:	2200      	movs	r2, #0
 800095e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000960:	4b24      	ldr	r3, [pc, #144]	; (80009f4 <HAL_UART_MspInit+0x114>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000966:	4823      	ldr	r0, [pc, #140]	; (80009f4 <HAL_UART_MspInit+0x114>)
 8000968:	f000 fc0a 	bl	8001180 <HAL_DMA_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_UART_MspInit+0x96>
    {
      Error_Handler();
 8000972:	f7ff ff29 	bl	80007c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4a1e      	ldr	r2, [pc, #120]	; (80009f4 <HAL_UART_MspInit+0x114>)
 800097a:	675a      	str	r2, [r3, #116]	; 0x74
 800097c:	4a1d      	ldr	r2, [pc, #116]	; (80009f4 <HAL_UART_MspInit+0x114>)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <HAL_UART_MspInit+0x11c>)
 8000984:	4a1e      	ldr	r2, [pc, #120]	; (8000a00 <HAL_UART_MspInit+0x120>)
 8000986:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_UART_MspInit+0x11c>)
 800098a:	220e      	movs	r2, #14
 800098c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800098e:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <HAL_UART_MspInit+0x11c>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_UART_MspInit+0x11c>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <HAL_UART_MspInit+0x11c>)
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_UART_MspInit+0x11c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_UART_MspInit+0x11c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_UART_MspInit+0x11c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_UART_MspInit+0x11c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009b8:	4810      	ldr	r0, [pc, #64]	; (80009fc <HAL_UART_MspInit+0x11c>)
 80009ba:	f000 fbe1 	bl	8001180 <HAL_DMA_Init>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80009c4:	f7ff ff00 	bl	80007c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <HAL_UART_MspInit+0x11c>)
 80009cc:	679a      	str	r2, [r3, #120]	; 0x78
 80009ce:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <HAL_UART_MspInit+0x11c>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2024      	movs	r0, #36	; 0x24
 80009da:	f000 fb9c 	bl	8001116 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009de:	2024      	movs	r0, #36	; 0x24
 80009e0:	f000 fbb3 	bl	800114a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009e4:	bf00      	nop
 80009e6:	3720      	adds	r7, #32
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40013800 	.word	0x40013800
 80009f0:	48000400 	.word	0x48000400
 80009f4:	200000e8 	.word	0x200000e8
 80009f8:	40020008 	.word	0x40020008
 80009fc:	20000148 	.word	0x20000148
 8000a00:	4002001c 	.word	0x4002001c

08000a04 <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 fa4e 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <DMA1_Channel1_IRQHandler+0x10>)
 8000a32:	f000 fd27 	bl	8001484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	200000e8 	.word	0x200000e8

08000a40 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a44:	4802      	ldr	r0, [pc, #8]	; (8000a50 <DMA1_Channel2_IRQHandler+0x10>)
 8000a46:	f000 fd1d 	bl	8001484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000148 	.word	0x20000148

08000a54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <USART1_IRQHandler+0x10>)
 8000a5a:	f002 fbfb 	bl	8003254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200001a8 	.word	0x200001a8

08000a68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	e00a      	b.n	8000a90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a7a:	f3af 8000 	nop.w
 8000a7e:	4601      	mov	r1, r0
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1c5a      	adds	r2, r3, #1
 8000a84:	60ba      	str	r2, [r7, #8]
 8000a86:	b2ca      	uxtb	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	697a      	ldr	r2, [r7, #20]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	dbf0      	blt.n	8000a7a <_read+0x12>
	}

return len;
 8000a98:	687b      	ldr	r3, [r7, #4]
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3718      	adds	r7, #24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b086      	sub	sp, #24
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	60f8      	str	r0, [r7, #12]
 8000aaa:	60b9      	str	r1, [r7, #8]
 8000aac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	2300      	movs	r3, #0
 8000ab0:	617b      	str	r3, [r7, #20]
 8000ab2:	e009      	b.n	8000ac8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	1c5a      	adds	r2, r3, #1
 8000ab8:	60ba      	str	r2, [r7, #8]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe71 	bl	80007a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac2:	697b      	ldr	r3, [r7, #20]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbf1      	blt.n	8000ab4 <_write+0x12>
	}
	return len;
 8000ad0:	687b      	ldr	r3, [r7, #4]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3718      	adds	r7, #24
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <_close>:

int _close(int file)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b083      	sub	sp, #12
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b02:	605a      	str	r2, [r3, #4]
	return 0;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_isatty>:

int _isatty(int file)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
	return 1;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
	return 0;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
	...

08000b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <_sbrk+0x5c>)
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <_sbrk+0x60>)
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d102      	bne.n	8000b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b60:	4b11      	ldr	r3, [pc, #68]	; (8000ba8 <_sbrk+0x64>)
 8000b62:	4a12      	ldr	r2, [pc, #72]	; (8000bac <_sbrk+0x68>)
 8000b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <_sbrk+0x64>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d207      	bcs.n	8000b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b74:	f003 faa8 	bl	80040c8 <__errno>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b82:	e009      	b.n	8000b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <_sbrk+0x64>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <_sbrk+0x64>)
 8000b94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b96:	68fb      	ldr	r3, [r7, #12]
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3718      	adds	r7, #24
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20030000 	.word	0x20030000
 8000ba4:	00000400 	.word	0x00000400
 8000ba8:	20000090 	.word	0x20000090
 8000bac:	20000248 	.word	0x20000248

08000bb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8000bb4:	4b26      	ldr	r3, [pc, #152]	; (8000c50 <SystemInit+0xa0>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8000bba:	4b25      	ldr	r3, [pc, #148]	; (8000c50 <SystemInit+0xa0>)
 8000bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc0:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <SystemInit+0xa0>)
 8000bc2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bc6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bde:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000be2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be8:	681a      	ldr	r2, [r3, #0]
 8000bea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <SystemInit+0xa4>)
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000bfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c00:	f023 0305 	bic.w	r3, r3, #5
 8000c04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c14:	f023 0301 	bic.w	r3, r3, #1
 8000c18:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000c1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <SystemInit+0xa8>)
 8000c22:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c28:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <SystemInit+0xa8>)
 8000c2a:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	e000ed00 	.word	0xe000ed00
 8000c54:	faf6fefb 	.word	0xfaf6fefb
 8000c58:	22041000 	.word	0x22041000

08000c5c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 8000c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	091b      	lsrs	r3, r3, #4
 8000c6a:	f003 030f 	and.w	r3, r3, #15
 8000c6e:	4a47      	ldr	r2, [pc, #284]	; (8000d8c <SystemCoreClockUpdate+0x130>)
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f003 030c 	and.w	r3, r3, #12
 8000c80:	2b0c      	cmp	r3, #12
 8000c82:	d867      	bhi.n	8000d54 <SystemCoreClockUpdate+0xf8>
 8000c84:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <SystemCoreClockUpdate+0x30>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000cc1 	.word	0x08000cc1
 8000c90:	08000d55 	.word	0x08000d55
 8000c94:	08000d55 	.word	0x08000d55
 8000c98:	08000d55 	.word	0x08000d55
 8000c9c:	08000cc9 	.word	0x08000cc9
 8000ca0:	08000d55 	.word	0x08000d55
 8000ca4:	08000d55 	.word	0x08000d55
 8000ca8:	08000d55 	.word	0x08000d55
 8000cac:	08000cd1 	.word	0x08000cd1
 8000cb0:	08000d55 	.word	0x08000d55
 8000cb4:	08000d55 	.word	0x08000d55
 8000cb8:	08000d55 	.word	0x08000d55
 8000cbc:	08000cd9 	.word	0x08000cd9
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000cc0:	4a33      	ldr	r2, [pc, #204]	; (8000d90 <SystemCoreClockUpdate+0x134>)
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	6013      	str	r3, [r2, #0]
      break;
 8000cc6:	e049      	b.n	8000d5c <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8000cc8:	4b31      	ldr	r3, [pc, #196]	; (8000d90 <SystemCoreClockUpdate+0x134>)
 8000cca:	4a32      	ldr	r2, [pc, #200]	; (8000d94 <SystemCoreClockUpdate+0x138>)
 8000ccc:	601a      	str	r2, [r3, #0]
      break;
 8000cce:	e045      	b.n	8000d5c <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000cd0:	4b2f      	ldr	r3, [pc, #188]	; (8000d90 <SystemCoreClockUpdate+0x134>)
 8000cd2:	4a31      	ldr	r2, [pc, #196]	; (8000d98 <SystemCoreClockUpdate+0x13c>)
 8000cd4:	601a      	str	r2, [r3, #0]
      break;
 8000cd6:	e041      	b.n	8000d5c <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000cd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 8000ce4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	091b      	lsrs	r3, r3, #4
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d105      	bne.n	8000d06 <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8000cfa:	4a26      	ldr	r2, [pc, #152]	; (8000d94 <SystemCoreClockUpdate+0x138>)
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	e00d      	b.n	8000d22 <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	2b03      	cmp	r3, #3
 8000d0a:	d105      	bne.n	8000d18 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8000d0c:	4a22      	ldr	r2, [pc, #136]	; (8000d98 <SystemCoreClockUpdate+0x13c>)
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	e004      	b.n	8000d22 <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d20:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8000d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fb02 f303 	mul.w	r3, r2, r3
 8000d34:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8000d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0f5b      	lsrs	r3, r3, #29
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	3301      	adds	r3, #1
 8000d44:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 8000d46:	697a      	ldr	r2, [r7, #20]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4e:	4a10      	ldr	r2, [pc, #64]	; (8000d90 <SystemCoreClockUpdate+0x134>)
 8000d50:	6013      	str	r3, [r2, #0]
      break;
 8000d52:	e003      	b.n	8000d5c <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 8000d54:	4a0e      	ldr	r2, [pc, #56]	; (8000d90 <SystemCoreClockUpdate+0x134>)
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	6013      	str	r3, [r2, #0]
      break;
 8000d5a:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	091b      	lsrs	r3, r3, #4
 8000d64:	f003 030f 	and.w	r3, r3, #15
 8000d68:	4a0c      	ldr	r2, [pc, #48]	; (8000d9c <SystemCoreClockUpdate+0x140>)
 8000d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6e:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <SystemCoreClockUpdate+0x134>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7a:	4a05      	ldr	r2, [pc, #20]	; (8000d90 <SystemCoreClockUpdate+0x134>)
 8000d7c:	6013      	str	r3, [r2, #0]

}
 8000d7e:	bf00      	nop
 8000d80:	371c      	adds	r7, #28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	08004ad0 	.word	0x08004ad0
 8000d90:	20000004 	.word	0x20000004
 8000d94:	00f42400 	.word	0x00f42400
 8000d98:	007a1200 	.word	0x007a1200
 8000d9c:	08004a70 	.word	0x08004a70

08000da0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8000da0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da4:	3304      	adds	r3, #4

08000da6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000daa:	d3f9      	bcc.n	8000da0 <CopyDataInit>
  bx lr
 8000dac:	4770      	bx	lr

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8000dae:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8000db0:	3004      	adds	r0, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8000db2:	4288      	cmp	r0, r1
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>
  bx lr
 8000db6:	4770      	bx	lr

08000db8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8000dba:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dbc:	f7ff fef8 	bl	8000bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8000dc0:	480b      	ldr	r0, [pc, #44]	; (8000df0 <LoopForever+0x8>)
 8000dc2:	490c      	ldr	r1, [pc, #48]	; (8000df4 <LoopForever+0xc>)
 8000dc4:	4a0c      	ldr	r2, [pc, #48]	; (8000df8 <LoopForever+0x10>)
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f7ff ffed 	bl	8000da6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8000dcc:	480b      	ldr	r0, [pc, #44]	; (8000dfc <LoopForever+0x14>)
 8000dce:	490c      	ldr	r1, [pc, #48]	; (8000e00 <LoopForever+0x18>)
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f7ff ffee 	bl	8000db2 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000dd6:	480b      	ldr	r0, [pc, #44]	; (8000e04 <LoopForever+0x1c>)
 8000dd8:	490b      	ldr	r1, [pc, #44]	; (8000e08 <LoopForever+0x20>)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f7ff ffe9 	bl	8000db2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000de0:	f003 f978 	bl	80040d4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8000de4:	f7ff fb7c 	bl	80004e0 <main>

08000de8 <LoopForever>:

LoopForever:
  b LoopForever
 8000de8:	e7fe      	b.n	8000de8 <LoopForever>
 8000dea:	0000      	.short	0x0000
  ldr   r0, =_estack
 8000dec:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8000df0:	20000004 	.word	0x20000004
 8000df4:	20000074 	.word	0x20000074
 8000df8:	08004b9c 	.word	0x08004b9c
  INIT_BSS _sbss, _ebss
 8000dfc:	20000074 	.word	0x20000074
 8000e00:	20000244 	.word	0x20000244
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8000e04:	20030000 	.word	0x20030000
 8000e08:	20030000 	.word	0x20030000

08000e0c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC1_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <HAL_Init+0x3c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <HAL_Init+0x3c>)
 8000e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e26:	2003      	movs	r0, #3
 8000e28:	f000 f96a 	bl	8001100 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 f80f 	bl	8000e50 <HAL_InitTick>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	e001      	b.n	8000e42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e3e:	f7ff fd15 	bl	800086c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e42:	79fb      	ldrb	r3, [r7, #7]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	58004000 	.word	0x58004000

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_InitTick+0x6c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d024      	beq.n	8000eae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e64:	f002 f80e 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_InitTick+0x6c>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e74:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f972 	bl	8001166 <HAL_SYSTICK_Config>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10f      	bne.n	8000ea8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	d809      	bhi.n	8000ea2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	f04f 30ff 	mov.w	r0, #4294967295
 8000e96:	f000 f93e 	bl	8001116 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9a:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <HAL_InitTick+0x70>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e007      	b.n	8000eb2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	e004      	b.n	8000eb2 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e001      	b.n	8000eb2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec8:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_IncTick+0x20>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_IncTick+0x24>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	2000000c 	.word	0x2000000c
 8000ee8:	2000023c 	.word	0x2000023c

08000eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	; (8000f00 <HAL_GetTick+0x14>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	2000023c 	.word	0x2000023c

08000f04 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTickPrio+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffe2 	bl	8000eec <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_Delay+0x40>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffd2 	bl	8000eec <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
    {
    }
  }
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000000c 	.word	0x2000000c

08000f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	68ba      	ldr	r2, [r7, #8]
 8000f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fac:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	0a1b      	lsrs	r3, r3, #8
 8000fb2:	f003 0307 	and.w	r3, r3, #7
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db0b      	blt.n	8000fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	f003 021f 	and.w	r2, r3, #31
 8000fdc:	4907      	ldr	r1, [pc, #28]	; (8000ffc <__NVIC_EnableIRQ+0x38>)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	095b      	lsrs	r3, r3, #5
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000e100 	.word	0xe000e100

08001000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	2b00      	cmp	r3, #0
 8001012:	db0a      	blt.n	800102a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	b2da      	uxtb	r2, r3
 8001018:	490c      	ldr	r1, [pc, #48]	; (800104c <__NVIC_SetPriority+0x4c>)
 800101a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101e:	0112      	lsls	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	440b      	add	r3, r1
 8001024:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001028:	e00a      	b.n	8001040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	b2da      	uxtb	r2, r3
 800102e:	4908      	ldr	r1, [pc, #32]	; (8001050 <__NVIC_SetPriority+0x50>)
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	3b04      	subs	r3, #4
 8001038:	0112      	lsls	r2, r2, #4
 800103a:	b2d2      	uxtb	r2, r2
 800103c:	440b      	add	r3, r1
 800103e:	761a      	strb	r2, [r3, #24]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000e100 	.word	0xe000e100
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001054:	b480      	push	{r7}
 8001056:	b089      	sub	sp, #36	; 0x24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f1c3 0307 	rsb	r3, r3, #7
 800106e:	2b04      	cmp	r3, #4
 8001070:	bf28      	it	cs
 8001072:	2304      	movcs	r3, #4
 8001074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3304      	adds	r3, #4
 800107a:	2b06      	cmp	r3, #6
 800107c:	d902      	bls.n	8001084 <NVIC_EncodePriority+0x30>
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3b03      	subs	r3, #3
 8001082:	e000      	b.n	8001086 <NVIC_EncodePriority+0x32>
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	f04f 32ff 	mov.w	r2, #4294967295
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43da      	mvns	r2, r3
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	401a      	ands	r2, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800109c:	f04f 31ff 	mov.w	r1, #4294967295
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa01 f303 	lsl.w	r3, r1, r3
 80010a6:	43d9      	mvns	r1, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ac:	4313      	orrs	r3, r2
         );
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3724      	adds	r7, #36	; 0x24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
	...

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010cc:	d301      	bcc.n	80010d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00f      	b.n	80010f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d2:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <SysTick_Config+0x40>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010da:	210f      	movs	r1, #15
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f7ff ff8e 	bl	8001000 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <SysTick_Config+0x40>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <SysTick_Config+0x40>)
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	e000e010 	.word	0xe000e010

08001100 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff29 	bl	8000f60 <__NVIC_SetPriorityGrouping>
}
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001124:	f7ff ff40 	bl	8000fa8 <__NVIC_GetPriorityGrouping>
 8001128:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	68b9      	ldr	r1, [r7, #8]
 800112e:	6978      	ldr	r0, [r7, #20]
 8001130:	f7ff ff90 	bl	8001054 <NVIC_EncodePriority>
 8001134:	4602      	mov	r2, r0
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	4611      	mov	r1, r2
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ff5f 	bl	8001000 <__NVIC_SetPriority>
}
 8001142:	bf00      	nop
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	4603      	mov	r3, r0
 8001152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff33 	bl	8000fc4 <__NVIC_EnableIRQ>
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffa4 	bl	80010bc <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e08e      	b.n	80012b0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	4b47      	ldr	r3, [pc, #284]	; (80012b8 <HAL_DMA_Init+0x138>)
 800119a:	429a      	cmp	r2, r3
 800119c:	d80f      	bhi.n	80011be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b45      	ldr	r3, [pc, #276]	; (80012bc <HAL_DMA_Init+0x13c>)
 80011a6:	4413      	add	r3, r2
 80011a8:	4a45      	ldr	r2, [pc, #276]	; (80012c0 <HAL_DMA_Init+0x140>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	091b      	lsrs	r3, r3, #4
 80011b0:	009a      	lsls	r2, r3, #2
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a42      	ldr	r2, [pc, #264]	; (80012c4 <HAL_DMA_Init+0x144>)
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
 80011bc:	e00e      	b.n	80011dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <HAL_DMA_Init+0x148>)
 80011c6:	4413      	add	r3, r2
 80011c8:	4a3d      	ldr	r2, [pc, #244]	; (80012c0 <HAL_DMA_Init+0x140>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	009a      	lsls	r2, r3, #2
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a3c      	ldr	r2, [pc, #240]	; (80012cc <HAL_DMA_Init+0x14c>)
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2202      	movs	r2, #2
 80011e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80011f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691b      	ldr	r3, [r3, #16]
 8001206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800120c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 fa16 	bl	8001660 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800123c:	d102      	bne.n	8001244 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2200      	movs	r2, #0
 8001242:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001250:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800125a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d010      	beq.n	8001286 <HAL_DMA_Init+0x106>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b04      	cmp	r3, #4
 800126a:	d80c      	bhi.n	8001286 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 fa35 	bl	80016dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	e008      	b.n	8001298 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40020407 	.word	0x40020407
 80012bc:	bffdfff8 	.word	0xbffdfff8
 80012c0:	cccccccd 	.word	0xcccccccd
 80012c4:	40020000 	.word	0x40020000
 80012c8:	bffdfbf8 	.word	0xbffdfbf8
 80012cc:	40020400 	.word	0x40020400

080012d0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <HAL_DMA_Start_IT+0x20>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e066      	b.n	80013be <HAL_DMA_Start_IT+0xee>
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b01      	cmp	r3, #1
 8001302:	d155      	bne.n	80013b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2202      	movs	r2, #2
 8001308:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2200      	movs	r2, #0
 8001310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	68b9      	ldr	r1, [r7, #8]
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 f95a 	bl	80015e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	2b00      	cmp	r3, #0
 8001334:	d008      	beq.n	8001348 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f042 020e 	orr.w	r2, r2, #14
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	e00f      	b.n	8001368 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0204 	bic.w	r2, r2, #4
 8001356:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 020a 	orr.w	r2, r2, #10
 8001366:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d007      	beq.n	8001386 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001384:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800138a:	2b00      	cmp	r3, #0
 800138c:	d007      	beq.n	800139e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800139c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e005      	b.n	80013bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80013b8:	2302      	movs	r3, #2
 80013ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d005      	beq.n	80013ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2204      	movs	r2, #4
 80013e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	73fb      	strb	r3, [r7, #15]
 80013e8:	e047      	b.n	800147a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 020e 	bic.w	r2, r2, #14
 80013f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f022 0201 	bic.w	r2, r2, #1
 8001408:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001414:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001418:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	f003 021c 	and.w	r2, r3, #28
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	2101      	movs	r1, #1
 8001428:	fa01 f202 	lsl.w	r2, r1, r2
 800142c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001436:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00c      	beq.n	800145a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800144e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001458:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	4798      	blx	r3
    }
  }
  return status;
 800147a:	7bfb      	ldrb	r3, [r7, #15]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	f003 031c 	and.w	r3, r3, #28
 80014a4:	2204      	movs	r2, #4
 80014a6:	409a      	lsls	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d026      	beq.n	80014fe <HAL_DMA_IRQHandler+0x7a>
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f003 0304 	and.w	r3, r3, #4
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d021      	beq.n	80014fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0320 	and.w	r3, r3, #32
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d107      	bne.n	80014d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f022 0204 	bic.w	r2, r2, #4
 80014d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014dc:	f003 021c 	and.w	r2, r3, #28
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	2104      	movs	r1, #4
 80014e6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d071      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80014fc:	e06c      	b.n	80015d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001502:	f003 031c 	and.w	r3, r3, #28
 8001506:	2202      	movs	r2, #2
 8001508:	409a      	lsls	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d02e      	beq.n	8001570 <HAL_DMA_IRQHandler+0xec>
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d029      	beq.n	8001570 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10b      	bne.n	8001542 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 020a 	bic.w	r2, r2, #10
 8001538:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2201      	movs	r2, #1
 800153e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f003 021c 	and.w	r2, r3, #28
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	2102      	movs	r1, #2
 8001550:	fa01 f202 	lsl.w	r2, r1, r2
 8001554:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	2b00      	cmp	r3, #0
 8001564:	d038      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800156e:	e033      	b.n	80015d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001574:	f003 031c 	and.w	r3, r3, #28
 8001578:	2208      	movs	r2, #8
 800157a:	409a      	lsls	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d02a      	beq.n	80015da <HAL_DMA_IRQHandler+0x156>
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d025      	beq.n	80015da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 020e 	bic.w	r2, r2, #14
 800159c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f003 021c 	and.w	r2, r3, #28
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	2101      	movs	r1, #1
 80015ac:	fa01 f202 	lsl.w	r2, r1, r2
 80015b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d004      	beq.n	80015da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
}
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
 80015ee:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015f8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800160a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001610:	f003 021c 	and.w	r2, r3, #28
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	2101      	movs	r1, #1
 800161a:	fa01 f202 	lsl.w	r2, r1, r2
 800161e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b10      	cmp	r3, #16
 800162e:	d108      	bne.n	8001642 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001640:	e007      	b.n	8001652 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	60da      	str	r2, [r3, #12]
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	461a      	mov	r2, r3
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001670:	429a      	cmp	r2, r3
 8001672:	d80a      	bhi.n	800168a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001680:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6493      	str	r3, [r2, #72]	; 0x48
 8001688:	e007      	b.n	800169a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	009a      	lsls	r2, r3, #2
 8001692:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001694:	4413      	add	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	3b08      	subs	r3, #8
 80016a2:	4a0c      	ldr	r2, [pc, #48]	; (80016d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80016a4:	fba2 2303 	umull	r2, r3, r2, r3
 80016a8:	091b      	lsrs	r3, r3, #4
 80016aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80016b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	2201      	movs	r2, #1
 80016ba:	409a      	lsls	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	40020407 	.word	0x40020407
 80016d0:	4002081c 	.word	0x4002081c
 80016d4:	cccccccd 	.word	0xcccccccd
 80016d8:	40020880 	.word	0x40020880

080016dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016ec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80016f2:	4413      	add	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	461a      	mov	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8001700:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3b01      	subs	r3, #1
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2201      	movs	r2, #1
 800170c:	409a      	lsls	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	1000823f 	.word	0x1000823f
 8001724:	40020940 	.word	0x40020940

08001728 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001728:	b480      	push	{r7}
 800172a:	b087      	sub	sp, #28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001736:	e14c      	b.n	80019d2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	fa01 f303 	lsl.w	r3, r1, r3
 8001744:	4013      	ands	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 813e 	beq.w	80019cc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d00b      	beq.n	8001770 <HAL_GPIO_Init+0x48>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b02      	cmp	r3, #2
 800175e:	d007      	beq.n	8001770 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001764:	2b11      	cmp	r3, #17
 8001766:	d003      	beq.n	8001770 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b12      	cmp	r3, #18
 800176e:	d130      	bne.n	80017d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017a6:	2201      	movs	r2, #1
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 0201 	and.w	r2, r3, #1
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0xea>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b12      	cmp	r3, #18
 8001810:	d123      	bne.n	800185a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	08da      	lsrs	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3208      	adds	r2, #8
 800181a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	220f      	movs	r2, #15
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	fa02 f303 	lsl.w	r3, r2, r3
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	6939      	ldr	r1, [r7, #16]
 8001856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0203 	and.w	r2, r3, #3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	fa02 f303 	lsl.w	r3, r2, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4313      	orrs	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8098 	beq.w	80019cc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800189c:	4a54      	ldr	r2, [pc, #336]	; (80019f0 <HAL_GPIO_Init+0x2c8>)
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	089b      	lsrs	r3, r3, #2
 80018a2:	3302      	adds	r3, #2
 80018a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018c6:	d019      	beq.n	80018fc <HAL_GPIO_Init+0x1d4>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	4a4a      	ldr	r2, [pc, #296]	; (80019f4 <HAL_GPIO_Init+0x2cc>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d013      	beq.n	80018f8 <HAL_GPIO_Init+0x1d0>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a49      	ldr	r2, [pc, #292]	; (80019f8 <HAL_GPIO_Init+0x2d0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d00d      	beq.n	80018f4 <HAL_GPIO_Init+0x1cc>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4a48      	ldr	r2, [pc, #288]	; (80019fc <HAL_GPIO_Init+0x2d4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d007      	beq.n	80018f0 <HAL_GPIO_Init+0x1c8>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a47      	ldr	r2, [pc, #284]	; (8001a00 <HAL_GPIO_Init+0x2d8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d101      	bne.n	80018ec <HAL_GPIO_Init+0x1c4>
 80018e8:	2304      	movs	r3, #4
 80018ea:	e008      	b.n	80018fe <HAL_GPIO_Init+0x1d6>
 80018ec:	2307      	movs	r3, #7
 80018ee:	e006      	b.n	80018fe <HAL_GPIO_Init+0x1d6>
 80018f0:	2303      	movs	r3, #3
 80018f2:	e004      	b.n	80018fe <HAL_GPIO_Init+0x1d6>
 80018f4:	2302      	movs	r3, #2
 80018f6:	e002      	b.n	80018fe <HAL_GPIO_Init+0x1d6>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <HAL_GPIO_Init+0x1d6>
 80018fc:	2300      	movs	r3, #0
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	f002 0203 	and.w	r2, r2, #3
 8001904:	0092      	lsls	r2, r2, #2
 8001906:	4093      	lsls	r3, r2
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800190e:	4938      	ldr	r1, [pc, #224]	; (80019f0 <HAL_GPIO_Init+0x2c8>)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <HAL_GPIO_Init+0x2dc>)
 800191e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001942:	4a30      	ldr	r2, [pc, #192]	; (8001a04 <HAL_GPIO_Init+0x2dc>)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <HAL_GPIO_Init+0x2dc>)
 800194c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	43db      	mvns	r3, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001970:	4a24      	ldr	r2, [pc, #144]	; (8001a04 <HAL_GPIO_Init+0x2dc>)
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_GPIO_Init+0x2dc>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800199c:	4a19      	ldr	r2, [pc, #100]	; (8001a04 <HAL_GPIO_Init+0x2dc>)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019a2:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_GPIO_Init+0x2dc>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019c6:	4a0f      	ldr	r2, [pc, #60]	; (8001a04 <HAL_GPIO_Init+0x2dc>)
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fa22 f303 	lsr.w	r3, r2, r3
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f47f aeab 	bne.w	8001738 <HAL_GPIO_Init+0x10>
  }
}
 80019e2:	bf00      	nop
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40010000 	.word	0x40010000
 80019f4:	48000400 	.word	0x48000400
 80019f8:	48000800 	.word	0x48000800
 80019fc:	48000c00 	.word	0x48000c00
 8001a00:	48001000 	.word	0x48001000
 8001a04:	58000800 	.word	0x58000800

08001a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	807b      	strh	r3, [r7, #2]
 8001a14:	4613      	mov	r3, r2
 8001a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a18:	787b      	ldrb	r3, [r7, #1]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a1e:	887a      	ldrh	r2, [r7, #2]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a24:	e002      	b.n	8001a2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e081      	b.n	8001b4e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d106      	bne.n	8001a64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe ff0c 	bl	800087c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2224      	movs	r2, #36	; 0x24
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 0201 	bic.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d107      	bne.n	8001ab2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	e006      	b.n	8001ac0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001abe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d104      	bne.n	8001ad2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ad0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ae4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001af4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	ea42 0103 	orr.w	r1, r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	021a      	lsls	r2, r3, #8
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69d9      	ldr	r1, [r3, #28]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1a      	ldr	r2, [r3, #32]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f042 0201 	orr.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2220      	movs	r2, #32
 8001b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d138      	bne.n	8001bde <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e032      	b.n	8001be0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2224      	movs	r2, #36	; 0x24
 8001b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0201 	bic.w	r2, r2, #1
 8001b98:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ba8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6819      	ldr	r1, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2220      	movs	r2, #32
 8001bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	e000      	b.n	8001be0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001bde:	2302      	movs	r3, #2
  }
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b20      	cmp	r3, #32
 8001c00:	d139      	bne.n	8001c76 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d101      	bne.n	8001c10 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	e033      	b.n	8001c78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2224      	movs	r2, #36	; 0x24
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f022 0201 	bic.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68fa      	ldr	r2, [r7, #12]
 8001c50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c76:	2302      	movs	r3, #2
  }
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8001c8c:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4904      	ldr	r1, [pc, #16]	; (8001ca4 <HAL_I2CEx_EnableFastModePlus+0x20>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	604b      	str	r3, [r1, #4]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40010000 	.word	0x40010000

08001ca8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	58000400 	.word	0x58000400

08001cc8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	58000400 	.word	0x58000400

08001ce4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cf6:	d101      	bne.n	8001cfc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e000      	b.n	8001cfe <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d38:	6013      	str	r3, [r2, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d74:	6013      	str	r3, [r2, #0]
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d92:	d101      	bne.n	8001d98 <LL_RCC_HSE_IsReady+0x18>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <LL_RCC_HSE_IsReady+0x1a>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd4:	6013      	str	r3, [r2, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df2:	d101      	bne.n	8001df8 <LL_RCC_HSI_IsReady+0x18>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <LL_RCC_HSI_IsReady+0x1a>
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	061b      	lsls	r3, r3, #24
 8001e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	604b      	str	r3, [r1, #4]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001e76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d101      	bne.n	8001e8a <LL_RCC_HSI48_IsReady+0x18>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <LL_RCC_HSI48_IsReady+0x1a>
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001eae:	bf00      	nop
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ec8:	f023 0301 	bic.w	r3, r3, #1
 8001ecc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001eda:	b480      	push	{r7}
 8001edc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f0c:	f023 0304 	bic.w	r3, r3, #4
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d101      	bne.n	8001f36 <LL_RCC_LSE_IsReady+0x18>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_RCC_LSE_IsReady+0x1a>
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d101      	bne.n	8001f9e <LL_RCC_LSI1_IsReady+0x18>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <LL_RCC_LSI1_IsReady+0x1a>
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fba:	f043 0304 	orr.w	r3, r3, #4
 8001fbe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001fc2:	bf00      	nop
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001fd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fdc:	f023 0304 	bic.w	r3, r3, #4
 8001fe0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d101      	bne.n	8002006 <LL_RCC_LSI2_IsReady+0x18>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <LL_RCC_LSI2_IsReady+0x1a>
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002022:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	021b      	lsls	r3, r3, #8
 800202a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr

0800205e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800205e:	b480      	push	{r7}
 8002060:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800206c:	f023 0301 	bic.w	r3, r3, #1
 8002070:	6013      	str	r3, [r2, #0]
}
 8002072:	bf00      	nop
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002080:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b02      	cmp	r3, #2
 800208c:	d101      	bne.n	8002092 <LL_RCC_MSI_IsReady+0x16>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <LL_RCC_MSI_IsReady+0x18>
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	b083      	sub	sp, #12
 80020ca:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80020cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2bb0      	cmp	r3, #176	; 0xb0
 80020dc:	d901      	bls.n	80020e2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80020de:	23b0      	movs	r3, #176	; 0xb0
 80020e0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80020e2:	687b      	ldr	r3, [r7, #4]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f023 0203 	bic.w	r2, r3, #3
 800212c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 030c 	and.w	r3, r3, #12
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4313      	orrs	r3, r2
 8002174:	608b      	str	r3, [r1, #8]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800218a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002192:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002196:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80021b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ba:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021be:	f023 020f 	bic.w	r2, r3, #15
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80021e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4313      	orrs	r3, r2
 800221e:	608b      	str	r3, [r1, #8]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr

08002278 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002286:	4618      	mov	r0, r3
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800229e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a2:	6013      	str	r3, [r2, #0]
}
 80022a4:	bf00      	nop
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022c0:	6013      	str	r3, [r2, #0]
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80022d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022de:	d101      	bne.n	80022e4 <LL_RCC_PLL_IsReady+0x18>
 80022e0:	2301      	movs	r3, #1
 80022e2:	e000      	b.n	80022e6 <LL_RCC_PLL_IsReady+0x1a>
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002300:	4618      	mov	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002318:	4618      	mov	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002322:	b480      	push	{r7}
 8002324:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0303 	and.w	r3, r3, #3
}
 8002348:	4618      	mov	r0, r3
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr

08002352 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002352:	b480      	push	{r7}
 8002354:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002364:	d101      	bne.n	800236a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002376:	b480      	push	{r7}
 8002378:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800238a:	d101      	bne.n	8002390 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800238c:	2301      	movs	r3, #1
 800238e:	e000      	b.n	8002392 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b0:	d101      	bne.n	80023b6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80023c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023d4:	d101      	bne.n	80023da <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80023d6:	2301      	movs	r3, #1
 80023d8:	e000      	b.n	80023dc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80023e6:	b480      	push	{r7}
 80023e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80023ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023f8:	d101      	bne.n	80023fe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800240c:	b590      	push	{r4, r7, lr}
 800240e:	b08d      	sub	sp, #52	; 0x34
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e386      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0320 	and.w	r3, r3, #32
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 808f 	beq.w	800254a <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800242c:	f7ff fe89 	bl	8002142 <LL_RCC_GetSysClkSource>
 8002430:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002432:	f7ff ff82 	bl	800233a <LL_RCC_PLL_GetMainSource>
 8002436:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <HAL_RCC_OscConfig+0x3e>
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	2b0c      	cmp	r3, #12
 8002442:	d149      	bne.n	80024d8 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	2b01      	cmp	r3, #1
 8002448:	d146      	bne.n	80024d8 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800244a:	f7ff fe17 	bl	800207c <LL_RCC_MSI_IsReady>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_OscConfig+0x54>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e365      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002464:	f7ff fe2f 	bl	80020c6 <LL_RCC_MSI_GetRange>
 8002468:	4603      	mov	r3, r0
 800246a:	429c      	cmp	r4, r3
 800246c:	d914      	bls.n	8002498 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	4618      	mov	r0, r3
 8002474:	f000 fd46 	bl	8002f04 <RCC_SetFlashLatencyFromMSIRange>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e354      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fe09 	bl	800209e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fe2d 	bl	80020f0 <LL_RCC_MSI_SetCalibTrimming>
 8002496:	e013      	b.n	80024c0 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fdfe 	bl	800209e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff fe22 	bl	80020f0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fd27 	bl	8002f04 <RCC_SetFlashLatencyFromMSIRange>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e335      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 80024c0:	f7fe fbcc 	bl	8000c5c <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024c4:	4bb4      	ldr	r3, [pc, #720]	; (8002798 <HAL_RCC_OscConfig+0x38c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fcc1 	bl	8000e50 <HAL_InitTick>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d039      	beq.n	8002548 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e329      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01e      	beq.n	800251e <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024e0:	f7ff fdae 	bl	8002040 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024e4:	f7fe fd02 	bl	8000eec <HAL_GetTick>
 80024e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024ec:	f7fe fcfe 	bl	8000eec <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e316      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 80024fe:	f7ff fdbd 	bl	800207c <LL_RCC_MSI_IsReady>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f1      	beq.n	80024ec <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fdc6 	bl	800209e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fdea 	bl	80020f0 <LL_RCC_MSI_SetCalibTrimming>
 800251c:	e015      	b.n	800254a <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800251e:	f7ff fd9e 	bl	800205e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002522:	f7fe fce3 	bl	8000eec <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800252a:	f7fe fcdf 	bl	8000eec <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e2f7      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 800253c:	f7ff fd9e 	bl	800207c <LL_RCC_MSI_IsReady>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f1      	bne.n	800252a <HAL_RCC_OscConfig+0x11e>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d05a      	beq.n	800260c <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002556:	f7ff fdf4 	bl	8002142 <LL_RCC_GetSysClkSource>
 800255a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800255c:	f7ff feed 	bl	800233a <LL_RCC_PLL_GetMainSource>
 8002560:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d005      	beq.n	8002574 <HAL_RCC_OscConfig+0x168>
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	2b0c      	cmp	r3, #12
 800256c:	d10d      	bne.n	800258a <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d10a      	bne.n	800258a <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002574:	f7ff fc04 	bl	8001d80 <LL_RCC_HSE_IsReady>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d045      	beq.n	800260a <HAL_RCC_OscConfig+0x1fe>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d141      	bne.n	800260a <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e2d0      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002592:	d102      	bne.n	800259a <HAL_RCC_OscConfig+0x18e>
 8002594:	f7ff fbd6 	bl	8001d44 <LL_RCC_HSE_Enable>
 8002598:	e00d      	b.n	80025b6 <HAL_RCC_OscConfig+0x1aa>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025a2:	d104      	bne.n	80025ae <HAL_RCC_OscConfig+0x1a2>
 80025a4:	f7ff fbb0 	bl	8001d08 <LL_RCC_HSE_EnableBypass>
 80025a8:	f7ff fbcc 	bl	8001d44 <LL_RCC_HSE_Enable>
 80025ac:	e003      	b.n	80025b6 <HAL_RCC_OscConfig+0x1aa>
 80025ae:	f7ff fbd8 	bl	8001d62 <LL_RCC_HSE_Disable>
 80025b2:	f7ff fbb8 	bl	8001d26 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d012      	beq.n	80025e4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe fc95 	bl	8000eec <HAL_GetTick>
 80025c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80025c4:	e008      	b.n	80025d8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c6:	f7fe fc91 	bl	8000eec <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	2b64      	cmp	r3, #100	; 0x64
 80025d2:	d901      	bls.n	80025d8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e2a9      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 80025d8:	f7ff fbd2 	bl	8001d80 <LL_RCC_HSE_IsReady>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0f1      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1ba>
 80025e2:	e013      	b.n	800260c <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fc82 	bl	8000eec <HAL_GetTick>
 80025e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fc7e 	bl	8000eec <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e296      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 80025fe:	f7ff fbbf 	bl	8001d80 <LL_RCC_HSE_IsReady>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f1      	bne.n	80025ec <HAL_RCC_OscConfig+0x1e0>
 8002608:	e000      	b.n	800260c <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d051      	beq.n	80026bc <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002618:	f7ff fd93 	bl	8002142 <LL_RCC_GetSysClkSource>
 800261c:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800261e:	f7ff fe8c 	bl	800233a <LL_RCC_PLL_GetMainSource>
 8002622:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b04      	cmp	r3, #4
 8002628:	d005      	beq.n	8002636 <HAL_RCC_OscConfig+0x22a>
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b0c      	cmp	r3, #12
 800262e:	d113      	bne.n	8002658 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d110      	bne.n	8002658 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002636:	f7ff fbd3 	bl	8001de0 <LL_RCC_HSI_IsReady>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_RCC_OscConfig+0x240>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e26f      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fbd7 	bl	8001e04 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002656:	e031      	b.n	80026bc <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d019      	beq.n	8002694 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002660:	f7ff fba0 	bl	8001da4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fc42 	bl	8000eec <HAL_GetTick>
 8002668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266c:	f7fe fc3e 	bl	8000eec <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e256      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 800267e:	f7ff fbaf 	bl	8001de0 <LL_RCC_HSI_IsReady>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0f1      	beq.n	800266c <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fbb9 	bl	8001e04 <LL_RCC_HSI_SetCalibTrimming>
 8002692:	e013      	b.n	80026bc <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002694:	f7ff fb95 	bl	8001dc2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002698:	f7fe fc28 	bl	8000eec <HAL_GetTick>
 800269c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a0:	f7fe fc24 	bl	8000eec <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e23c      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 80026b2:	f7ff fb95 	bl	8001de0 <LL_RCC_HSI_IsReady>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f1      	bne.n	80026a0 <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a2 	beq.w	800281a <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d075      	beq.n	80027ca <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d046      	beq.n	8002778 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80026ea:	f7ff fc4c 	bl	8001f86 <LL_RCC_LSI1_IsReady>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d113      	bne.n	800271c <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80026f4:	f7ff fc25 	bl	8001f42 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026f8:	f7fe fbf8 	bl	8000eec <HAL_GetTick>
 80026fc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002700:	f7fe fbf4 	bl	8000eec <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e20c      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002712:	f7ff fc38 	bl	8001f86 <LL_RCC_LSI1_IsReady>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0f1      	beq.n	8002700 <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800271c:	f7ff fc45 	bl	8001faa <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002720:	f7fe fbe4 	bl	8000eec <HAL_GetTick>
 8002724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002728:	f7fe fbe0 	bl	8000eec <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b03      	cmp	r3, #3
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e1f8      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800273a:	f7ff fc58 	bl	8001fee <LL_RCC_LSI2_IsReady>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d0f1      	beq.n	8002728 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fc62 	bl	8002012 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800274e:	f7ff fc09 	bl	8001f64 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fbcb 	bl	8000eec <HAL_GetTick>
 8002756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800275a:	f7fe fbc7 	bl	8000eec <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e1df      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800276c:	f7ff fc0b 	bl	8001f86 <LL_RCC_LSI1_IsReady>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f1      	bne.n	800275a <HAL_RCC_OscConfig+0x34e>
 8002776:	e050      	b.n	800281a <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002778:	f7ff fbe3 	bl	8001f42 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fbb6 	bl	8000eec <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002782:	e00b      	b.n	800279c <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002784:	f7fe fbb2 	bl	8000eec <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d904      	bls.n	800279c <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e1ca      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
 8002796:	bf00      	nop
 8002798:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 800279c:	f7ff fbf3 	bl	8001f86 <LL_RCC_LSI1_IsReady>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0ee      	beq.n	8002784 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80027a6:	f7ff fc11 	bl	8001fcc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80027ac:	f7fe fb9e 	bl	8000eec <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1b6      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80027be:	f7ff fc16 	bl	8001fee <LL_RCC_LSI2_IsReady>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f1      	bne.n	80027ac <HAL_RCC_OscConfig+0x3a0>
 80027c8:	e027      	b.n	800281a <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80027ca:	f7ff fbff 	bl	8001fcc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ce:	f7fe fb8d 	bl	8000eec <HAL_GetTick>
 80027d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80027d6:	f7fe fb89 	bl	8000eec <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e1a1      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80027e8:	f7ff fc01 	bl	8001fee <LL_RCC_LSI2_IsReady>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f1      	bne.n	80027d6 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80027f2:	f7ff fbb7 	bl	8001f64 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7fe fb79 	bl	8000eec <HAL_GetTick>
 80027fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80027fe:	f7fe fb75 	bl	8000eec <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e18d      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002810:	f7ff fbb9 	bl	8001f86 <LL_RCC_LSI1_IsReady>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f1      	bne.n	80027fe <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0304 	and.w	r3, r3, #4
 8002822:	2b00      	cmp	r3, #0
 8002824:	d05b      	beq.n	80028de <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002826:	4bb5      	ldr	r3, [pc, #724]	; (8002afc <HAL_RCC_OscConfig+0x6f0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d114      	bne.n	800285c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002832:	f7ff fa39 	bl	8001ca8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002836:	f7fe fb59 	bl	8000eec <HAL_GetTick>
 800283a:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283e:	f7fe fb55 	bl	8000eec <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e16d      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002850:	4baa      	ldr	r3, [pc, #680]	; (8002afc <HAL_RCC_OscConfig+0x6f0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_RCC_OscConfig+0x45e>
 8002864:	f7ff fb17 	bl	8001e96 <LL_RCC_LSE_Enable>
 8002868:	e00c      	b.n	8002884 <HAL_RCC_OscConfig+0x478>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b05      	cmp	r3, #5
 8002870:	d104      	bne.n	800287c <HAL_RCC_OscConfig+0x470>
 8002872:	f7ff fb32 	bl	8001eda <LL_RCC_LSE_EnableBypass>
 8002876:	f7ff fb0e 	bl	8001e96 <LL_RCC_LSE_Enable>
 800287a:	e003      	b.n	8002884 <HAL_RCC_OscConfig+0x478>
 800287c:	f7ff fb1c 	bl	8001eb8 <LL_RCC_LSE_Disable>
 8002880:	f7ff fb3c 	bl	8001efc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d014      	beq.n	80028b6 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7fe fb2e 	bl	8000eec <HAL_GetTick>
 8002890:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002892:	e00a      	b.n	80028aa <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002894:	f7fe fb2a 	bl	8000eec <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e140      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 80028aa:	f7ff fb38 	bl	8001f1e <LL_RCC_LSE_IsReady>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ef      	beq.n	8002894 <HAL_RCC_OscConfig+0x488>
 80028b4:	e013      	b.n	80028de <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b6:	f7fe fb19 	bl	8000eec <HAL_GetTick>
 80028ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80028bc:	e00a      	b.n	80028d4 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028be:	f7fe fb15 	bl	8000eec <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e12b      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 80028d4:	f7ff fb23 	bl	8001f1e <LL_RCC_LSE_IsReady>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1ef      	bne.n	80028be <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d02c      	beq.n	8002944 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d014      	beq.n	800291c <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028f2:	f7ff fa9c 	bl	8001e2e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7fe faf9 	bl	8000eec <HAL_GetTick>
 80028fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028fe:	f7fe faf5 	bl	8000eec <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e10d      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002910:	f7ff faaf 	bl	8001e72 <LL_RCC_HSI48_IsReady>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0f1      	beq.n	80028fe <HAL_RCC_OscConfig+0x4f2>
 800291a:	e013      	b.n	8002944 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800291c:	f7ff fa98 	bl	8001e50 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002920:	f7fe fae4 	bl	8000eec <HAL_GetTick>
 8002924:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002928:	f7fe fae0 	bl	8000eec <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0f8      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800293a:	f7ff fa9a 	bl	8001e72 <LL_RCC_HSI48_IsReady>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f1      	bne.n	8002928 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80ee 	beq.w	8002b2a <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800294e:	f7ff fbf8 	bl	8002142 <LL_RCC_GetSysClkSource>
 8002952:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	2b02      	cmp	r3, #2
 8002962:	f040 80af 	bne.w	8002ac4 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f003 0203 	and.w	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	429a      	cmp	r2, r3
 8002972:	d123      	bne.n	80029bc <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d11c      	bne.n	80029bc <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d114      	bne.n	80029bc <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d10d      	bne.n	80029bc <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d106      	bne.n	80029bc <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d05d      	beq.n	8002a78 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d058      	beq.n	8002a74 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e0ab      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029d4:	f7ff fc6b 	bl	80022ae <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029d8:	f7fe fa88 	bl	8000eec <HAL_GetTick>
 80029dc:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fa84 	bl	8000eec <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e09c      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ef      	bne.n	80029e0 <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a04:	68da      	ldr	r2, [r3, #12]
 8002a06:	4b3e      	ldr	r3, [pc, #248]	; (8002b00 <HAL_RCC_OscConfig+0x6f4>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a12:	4311      	orrs	r1, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a18:	0212      	lsls	r2, r2, #8
 8002a1a:	4311      	orrs	r1, r2
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a20:	4311      	orrs	r1, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a26:	4311      	orrs	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a36:	f7ff fc2b 	bl	8002290 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a48:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a4a:	f7fe fa4f 	bl	8000eec <HAL_GetTick>
 8002a4e:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a52:	f7fe fa4b 	bl	8000eec <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e063      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0ef      	beq.n	8002a52 <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a72:	e05a      	b.n	8002b2a <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e059      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d151      	bne.n	8002b2a <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a86:	f7ff fc03 	bl	8002290 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a98:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a9a:	f7fe fa27 	bl	8000eec <HAL_GetTick>
 8002a9e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe fa23 	bl	8000eec <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e03b      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ef      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x696>
 8002ac2:	e032      	b.n	8002b2a <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	2b0c      	cmp	r3, #12
 8002ac8:	d02d      	beq.n	8002b26 <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aca:	f7ff fbf0 	bl	80022ae <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad8:	f023 0303 	bic.w	r3, r3, #3
 8002adc:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8002ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae8:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8002aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af2:	f7fe f9fb 	bl	8000eec <HAL_GetTick>
 8002af6:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002af8:	e00d      	b.n	8002b16 <HAL_RCC_OscConfig+0x70a>
 8002afa:	bf00      	nop
 8002afc:	58000400 	.word	0x58000400
 8002b00:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b04:	f7fe f9f2 	bl	8000eec <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e00a      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d1ef      	bne.n	8002b04 <HAL_RCC_OscConfig+0x6f8>
 8002b24:	e001      	b.n	8002b2a <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e000      	b.n	8002b2c <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3734      	adds	r7, #52	; 0x34
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd90      	pop	{r4, r7, pc}

08002b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e12a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b48:	4b97      	ldr	r3, [pc, #604]	; (8002da8 <HAL_RCC_ClockConfig+0x274>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d91b      	bls.n	8002b8e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b94      	ldr	r3, [pc, #592]	; (8002da8 <HAL_RCC_ClockConfig+0x274>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 0207 	bic.w	r2, r3, #7
 8002b5e:	4992      	ldr	r1, [pc, #584]	; (8002da8 <HAL_RCC_ClockConfig+0x274>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b66:	f7fe f9c1 	bl	8000eec <HAL_GetTick>
 8002b6a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b6e:	f7fe f9bd 	bl	8000eec <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e10e      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b80:	4b89      	ldr	r3, [pc, #548]	; (8002da8 <HAL_RCC_ClockConfig+0x274>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d1ef      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fadb 	bl	800215a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002ba4:	f7fe f9a2 	bl	8000eec <HAL_GetTick>
 8002ba8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002bac:	f7fe f99e 	bl	8000eec <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e0ef      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002bbe:	f7ff fbc8 	bl	8002352 <LL_RCC_IsActiveFlag_HPRE>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0f1      	beq.n	8002bac <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d016      	beq.n	8002c02 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fad2 	bl	8002182 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002bde:	f7fe f985 	bl	8000eec <HAL_GetTick>
 8002be2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002be6:	f7fe f981 	bl	8000eec <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e0d2      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002bf8:	f7ff fbbd 	bl	8002376 <LL_RCC_IsActiveFlag_C2HPRE>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f1      	beq.n	8002be6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff facb 	bl	80021ae <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c18:	f7fe f968 	bl	8000eec <HAL_GetTick>
 8002c1c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c20:	f7fe f964 	bl	8000eec <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e0b5      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002c32:	f7ff fbb3 	bl	800239c <LL_RCC_IsActiveFlag_SHDHPRE>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f1      	beq.n	8002c20 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d016      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7ff fac5 	bl	80021dc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c52:	f7fe f94b 	bl	8000eec <HAL_GetTick>
 8002c56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c5a:	f7fe f947 	bl	8000eec <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e098      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002c6c:	f7ff fba9 	bl	80023c2 <LL_RCC_IsActiveFlag_PPRE1>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f1      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d017      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fabb 	bl	8002204 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002c8e:	f7fe f92d 	bl	8000eec <HAL_GetTick>
 8002c92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002c96:	f7fe f929 	bl	8000eec <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e07a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002ca8:	f7ff fb9d 	bl	80023e6 <LL_RCC_IsActiveFlag_PPRE2>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f1      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d043      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d106      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002cc6:	f7ff f85b 	bl	8001d80 <LL_RCC_HSE_IsReady>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11e      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e064      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002cdc:	f7ff faf6 	bl	80022cc <LL_RCC_PLL_IsReady>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d113      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e059      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002cf2:	f7ff f9c3 	bl	800207c <LL_RCC_MSI_IsReady>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d108      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e04e      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002d00:	f7ff f86e 	bl	8001de0 <LL_RCC_HSI_IsReady>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e047      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fa01 	bl	800211a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d18:	f7fe f8e8 	bl	8000eec <HAL_GetTick>
 8002d1c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1e:	e00a      	b.n	8002d36 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d20:	f7fe f8e4 	bl	8000eec <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e033      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d36:	f7ff fa04 	bl	8002142 <LL_RCC_GetSysClkSource>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d1ec      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <HAL_RCC_ClockConfig+0x274>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d21b      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d54:	4b14      	ldr	r3, [pc, #80]	; (8002da8 <HAL_RCC_ClockConfig+0x274>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 0207 	bic.w	r2, r3, #7
 8002d5c:	4912      	ldr	r1, [pc, #72]	; (8002da8 <HAL_RCC_ClockConfig+0x274>)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d64:	f7fe f8c2 	bl	8000eec <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d6c:	f7fe f8be 	bl	8000eec <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e00f      	b.n	8002d9e <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7e:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <HAL_RCC_ClockConfig+0x274>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d1ef      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8002d8c:	f7fd ff66 	bl	8000c5c <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002d90:	f7fe f8b8 	bl	8000f04 <HAL_GetTickPrio>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe f85a 	bl	8000e50 <HAL_InitTick>
 8002d9c:	4603      	mov	r3, r0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	58004000 	.word	0x58004000

08002dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dac:	b590      	push	{r4, r7, lr}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002db2:	f7ff f9c6 	bl	8002142 <LL_RCC_GetSysClkSource>
 8002db6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10a      	bne.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002dbe:	f7ff f982 	bl	80020c6 <LL_RCC_MSI_GetRange>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	4a2a      	ldr	r2, [pc, #168]	; (8002e74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e04a      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d102      	bne.n	8002de0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dda:	4b27      	ldr	r3, [pc, #156]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	e044      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d10a      	bne.n	8002dfc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002de6:	f7fe ff7d 	bl	8001ce4 <LL_RCC_HSE_IsEnabledDiv2>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d102      	bne.n	8002df6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002df0:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	e039      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002df6:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002df8:	60fb      	str	r3, [r7, #12]
 8002dfa:	e036      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002dfc:	f7ff fa9d 	bl	800233a <LL_RCC_PLL_GetMainSource>
 8002e00:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d002      	beq.n	8002e0e <HAL_RCC_GetSysClockFreq+0x62>
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d003      	beq.n	8002e14 <HAL_RCC_GetSysClockFreq+0x68>
 8002e0c:	e00d      	b.n	8002e2a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e10:	60bb      	str	r3, [r7, #8]
        break;
 8002e12:	e015      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002e14:	f7fe ff66 	bl	8001ce4 <LL_RCC_HSE_IsEnabledDiv2>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e20:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002e22:	e00d      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8002e24:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002e26:	60bb      	str	r3, [r7, #8]
        break;
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002e2a:	f7ff f94c 	bl	80020c6 <LL_RCC_MSI_GetRange>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	4a0f      	ldr	r2, [pc, #60]	; (8002e74 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3c:	60bb      	str	r3, [r7, #8]
        break;
 8002e3e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8002e40:	f7ff fa56 	bl	80022f0 <LL_RCC_PLL_GetN>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	fb03 f402 	mul.w	r4, r3, r2
 8002e4c:	f7ff fa69 	bl	8002322 <LL_RCC_PLL_GetDivider>
 8002e50:	4603      	mov	r3, r0
 8002e52:	091b      	lsrs	r3, r3, #4
 8002e54:	3301      	adds	r3, #1
 8002e56:	fbb4 f4f3 	udiv	r4, r4, r3
 8002e5a:	f7ff fa56 	bl	800230a <LL_RCC_PLL_GetR>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	0f5b      	lsrs	r3, r3, #29
 8002e62:	3301      	adds	r3, #1
 8002e64:	fbb4 f3f3 	udiv	r3, r4, r3
 8002e68:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd90      	pop	{r4, r7, pc}
 8002e74:	08004ad0 	.word	0x08004ad0
 8002e78:	00f42400 	.word	0x00f42400
 8002e7c:	003d0900 	.word	0x003d0900
 8002e80:	007a1200 	.word	0x007a1200

08002e84 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e84:	b598      	push	{r3, r4, r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002e88:	f7ff ff90 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	f7ff f9cd 	bl	800222c <LL_RCC_GetAHBPrescaler>
 8002e92:	4603      	mov	r3, r0
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	4a03      	ldr	r2, [pc, #12]	; (8002ea8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	bd98      	pop	{r3, r4, r7, pc}
 8002ea8:	08004a70 	.word	0x08004a70

08002eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eac:	b598      	push	{r3, r4, r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002eb0:	f7ff ffe8 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	f7ff f9d3 	bl	8002260 <LL_RCC_GetAPB1Prescaler>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	bd98      	pop	{r3, r4, r7, pc}
 8002ed4:	08004ab0 	.word	0x08004ab0

08002ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed8:	b598      	push	{r3, r4, r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002edc:	f7ff ffd2 	bl	8002e84 <HAL_RCC_GetHCLKFreq>
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	f7ff f9c9 	bl	8002278 <LL_RCC_GetAPB2Prescaler>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	0adb      	lsrs	r3, r3, #11
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	bd98      	pop	{r3, r4, r7, pc}
 8002f00:	08004ab0 	.word	0x08004ab0

08002f04 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002f04:	b590      	push	{r4, r7, lr}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2bb0      	cmp	r3, #176	; 0xb0
 8002f10:	d903      	bls.n	8002f1a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002f12:	4b15      	ldr	r3, [pc, #84]	; (8002f68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e007      	b.n	8002f2a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	4a11      	ldr	r2, [pc, #68]	; (8002f68 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f28:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002f2a:	f7ff f98b 	bl	8002244 <LL_RCC_GetAHB4Prescaler>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	091b      	lsrs	r3, r3, #4
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	4a0d      	ldr	r2, [pc, #52]	; (8002f6c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	0c9c      	lsrs	r4, r3, #18
 8002f4e:	f7fe febb 	bl	8001cc8 <HAL_PWREx_GetVoltageRange>
 8002f52:	4603      	mov	r3, r0
 8002f54:	4619      	mov	r1, r3
 8002f56:	4620      	mov	r0, r4
 8002f58:	f000 f80c 	bl	8002f74 <RCC_SetFlashLatency>
 8002f5c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd90      	pop	{r4, r7, pc}
 8002f66:	bf00      	nop
 8002f68:	08004ad0 	.word	0x08004ad0
 8002f6c:	08004a70 	.word	0x08004a70
 8002f70:	431bde83 	.word	0x431bde83

08002f74 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b093      	sub	sp, #76	; 0x4c
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002f7e:	4b39      	ldr	r3, [pc, #228]	; (8003064 <RCC_SetFlashLatency+0xf0>)
 8002f80:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002f84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002f8a:	4a37      	ldr	r2, [pc, #220]	; (8003068 <RCC_SetFlashLatency+0xf4>)
 8002f8c:	f107 031c 	add.w	r3, r7, #28
 8002f90:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002f96:	4b35      	ldr	r3, [pc, #212]	; (800306c <RCC_SetFlashLatency+0xf8>)
 8002f98:	f107 040c 	add.w	r4, r7, #12
 8002f9c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fac:	d11c      	bne.n	8002fe8 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002fae:	2300      	movs	r3, #0
 8002fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fb2:	e015      	b.n	8002fe0 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d808      	bhi.n	8002fda <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002fd0:	4413      	add	r3, r2
 8002fd2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002fd6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002fd8:	e022      	b.n	8003020 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fdc:	3301      	adds	r3, #1
 8002fde:	643b      	str	r3, [r7, #64]	; 0x40
 8002fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe2:	2b03      	cmp	r3, #3
 8002fe4:	d9e6      	bls.n	8002fb4 <RCC_SetFlashLatency+0x40>
 8002fe6:	e01b      	b.n	8003020 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002fe8:	2300      	movs	r3, #0
 8002fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fec:	e015      	b.n	800301a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002fee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d808      	bhi.n	8003014 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800300a:	4413      	add	r3, r2
 800300c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003010:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003012:	e005      	b.n	8003020 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003016:	3301      	adds	r3, #1
 8003018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800301a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800301c:	2b02      	cmp	r3, #2
 800301e:	d9e6      	bls.n	8002fee <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8003020:	4b13      	ldr	r3, [pc, #76]	; (8003070 <RCC_SetFlashLatency+0xfc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f023 0207 	bic.w	r2, r3, #7
 8003028:	4911      	ldr	r1, [pc, #68]	; (8003070 <RCC_SetFlashLatency+0xfc>)
 800302a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003030:	f7fd ff5c 	bl	8000eec <HAL_GetTick>
 8003034:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003036:	e008      	b.n	800304a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003038:	f7fd ff58 	bl	8000eec <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e007      	b.n	800305a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <RCC_SetFlashLatency+0xfc>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003054:	429a      	cmp	r2, r3
 8003056:	d1ef      	bne.n	8003038 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	374c      	adds	r7, #76	; 0x4c
 800305e:	46bd      	mov	sp, r7
 8003060:	bd90      	pop	{r4, r7, pc}
 8003062:	bf00      	nop
 8003064:	08004a34 	.word	0x08004a34
 8003068:	08004a44 	.word	0x08004a44
 800306c:	08004a50 	.word	0x08004a50
 8003070:	58004000 	.word	0x58004000

08003074 <LL_RCC_GetUSARTClockSource>:
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003080:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4013      	ands	r3, r2
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <LL_RCC_GetLPUARTClockSource>:
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800309c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4013      	ands	r3, r2
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e042      	b.n	800314c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7fd fc01 	bl	80008e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2224      	movs	r2, #36	; 0x24
 80030e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0201 	bic.w	r2, r2, #1
 80030f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 fa4a 	bl	8003590 <UART_SetConfig>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e022      	b.n	800314c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	d002      	beq.n	8003114 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 fc4c 	bl	80039ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003122:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003132:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fcd3 	bl	8003af0 <UART_CheckIdleState>
 800314a:	4603      	mov	r3, r0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	4613      	mov	r3, r2
 8003160:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003168:	2b20      	cmp	r3, #32
 800316a:	d168      	bne.n	800323e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_UART_Transmit_DMA+0x24>
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e061      	b.n	8003240 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_UART_Transmit_DMA+0x36>
 8003186:	2302      	movs	r3, #2
 8003188:	e05a      	b.n	8003240 <HAL_UART_Transmit_DMA+0xec>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	88fa      	ldrh	r2, [r7, #6]
 800319c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	88fa      	ldrh	r2, [r7, #6]
 80031a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2221      	movs	r2, #33	; 0x21
 80031b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d02c      	beq.n	800321a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031c4:	4a20      	ldr	r2, [pc, #128]	; (8003248 <HAL_UART_Transmit_DMA+0xf4>)
 80031c6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031cc:	4a1f      	ldr	r2, [pc, #124]	; (800324c <HAL_UART_Transmit_DMA+0xf8>)
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d4:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <HAL_UART_Transmit_DMA+0xfc>)
 80031d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031dc:	2200      	movs	r2, #0
 80031de:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031e8:	4619      	mov	r1, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3328      	adds	r3, #40	; 0x28
 80031f0:	461a      	mov	r2, r3
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	f7fe f86c 	bl	80012d0 <HAL_DMA_Start_IT>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00d      	beq.n	800321a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2210      	movs	r2, #16
 8003202:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e012      	b.n	8003240 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2240      	movs	r2, #64	; 0x40
 8003220:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003238:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	e000      	b.n	8003240 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
  }
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	08003d03 	.word	0x08003d03
 800324c:	08003d57 	.word	0x08003d57
 8003250:	08003d73 	.word	0x08003d73

08003254 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	f640 030f 	movw	r3, #2063	; 0x80f
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d118      	bne.n	80032b6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d013      	beq.n	80032b6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f003 0320 	and.w	r3, r3, #32
 8003294:	2b00      	cmp	r3, #0
 8003296:	d104      	bne.n	80032a2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 8145 	beq.w	8003536 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	4798      	blx	r3
      }
      return;
 80032b4:	e13f      	b.n	8003536 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	f000 80e8 	beq.w	800348e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	4ba1      	ldr	r3, [pc, #644]	; (8003548 <HAL_UART_IRQHandler+0x2f4>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d105      	bne.n	80032d4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4ba0      	ldr	r3, [pc, #640]	; (800354c <HAL_UART_IRQHandler+0x2f8>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80dd 	beq.w	800348e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d010      	beq.n	8003300 <HAL_UART_IRQHandler+0xac>
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d00b      	beq.n	8003300 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2201      	movs	r2, #1
 80032ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f043 0201 	orr.w	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d010      	beq.n	800332c <HAL_UART_IRQHandler+0xd8>
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00b      	beq.n	800332c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2202      	movs	r2, #2
 800331a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003322:	f043 0204 	orr.w	r2, r3, #4
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	d010      	beq.n	8003358 <HAL_UART_IRQHandler+0x104>
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2204      	movs	r2, #4
 8003346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334e:	f043 0202 	orr.w	r2, r3, #2
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0308 	and.w	r3, r3, #8
 800335e:	2b00      	cmp	r3, #0
 8003360:	d015      	beq.n	800338e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	f003 0320 	and.w	r3, r3, #32
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800336c:	697a      	ldr	r2, [r7, #20]
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_UART_IRQHandler+0x2f4>)
 8003370:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00b      	beq.n	800338e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2208      	movs	r2, #8
 800337c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003384:	f043 0208 	orr.w	r2, r3, #8
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003394:	2b00      	cmp	r3, #0
 8003396:	d011      	beq.n	80033bc <HAL_UART_IRQHandler+0x168>
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00c      	beq.n	80033bc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b2:	f043 0220 	orr.w	r2, r3, #32
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80b9 	beq.w	800353a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d011      	beq.n	80033f6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d104      	bne.n	80033e6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d007      	beq.n	80033f6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003408:	2b40      	cmp	r3, #64	; 0x40
 800340a:	d004      	beq.n	8003416 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003412:	2b00      	cmp	r3, #0
 8003414:	d031      	beq.n	800347a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fc50 	bl	8003cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003426:	2b40      	cmp	r3, #64	; 0x40
 8003428:	d123      	bne.n	8003472 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003438:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800343e:	2b00      	cmp	r3, #0
 8003440:	d013      	beq.n	800346a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003446:	4a42      	ldr	r2, [pc, #264]	; (8003550 <HAL_UART_IRQHandler+0x2fc>)
 8003448:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd ffb9 	bl	80013c6 <HAL_DMA_Abort_IT>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d017      	beq.n	800348a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003464:	4610      	mov	r0, r2
 8003466:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003468:	e00f      	b.n	800348a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f886 	bl	800357c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003470:	e00b      	b.n	800348a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f882 	bl	800357c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003478:	e007      	b.n	800348a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f87e 	bl	800357c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8003488:	e057      	b.n	800353a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348a:	bf00      	nop
    return;
 800348c:	e055      	b.n	800353a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00d      	beq.n	80034b4 <HAL_UART_IRQHandler+0x260>
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d008      	beq.n	80034b4 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fcd0 	bl	8003e52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034b2:	e045      	b.n	8003540 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d012      	beq.n	80034e4 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d104      	bne.n	80034d2 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d008      	beq.n	80034e4 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d031      	beq.n	800353e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
    }
    return;
 80034e2:	e02c      	b.n	800353e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <HAL_UART_IRQHandler+0x2ac>
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 fc90 	bl	8003e1e <UART_EndTransmit_IT>
    return;
 80034fe:	e01f      	b.n	8003540 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d008      	beq.n	800351c <HAL_UART_IRQHandler+0x2c8>
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fcb0 	bl	8003e7a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800351a:	e011      	b.n	8003540 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00c      	beq.n	8003540 <HAL_UART_IRQHandler+0x2ec>
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	da09      	bge.n	8003540 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fc9a 	bl	8003e66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003532:	bf00      	nop
 8003534:	e004      	b.n	8003540 <HAL_UART_IRQHandler+0x2ec>
      return;
 8003536:	bf00      	nop
 8003538:	e002      	b.n	8003540 <HAL_UART_IRQHandler+0x2ec>
    return;
 800353a:	bf00      	nop
 800353c:	e000      	b.n	8003540 <HAL_UART_IRQHandler+0x2ec>
    return;
 800353e:	bf00      	nop
  }
}
 8003540:	3720      	adds	r7, #32
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	10000001 	.word	0x10000001
 800354c:	04000120 	.word	0x04000120
 8003550:	08003df3 	.word	0x08003df3

08003554 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003590:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003594:	b088      	sub	sp, #32
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	689a      	ldr	r2, [r3, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	4313      	orrs	r3, r2
 80035be:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4ba4      	ldr	r3, [pc, #656]	; (8003858 <UART_SetConfig+0x2c8>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	69f9      	ldr	r1, [r7, #28]
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a99      	ldr	r2, [pc, #612]	; (800385c <UART_SetConfig+0x2cc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	69fa      	ldr	r2, [r7, #28]
 8003600:	4313      	orrs	r3, r2
 8003602:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800360e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6812      	ldr	r2, [r2, #0]
 8003616:	69f9      	ldr	r1, [r7, #28]
 8003618:	430b      	orrs	r3, r1
 800361a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	f023 010f 	bic.w	r1, r3, #15
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a8a      	ldr	r2, [pc, #552]	; (8003860 <UART_SetConfig+0x2d0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d121      	bne.n	8003680 <UART_SetConfig+0xf0>
 800363c:	2003      	movs	r0, #3
 800363e:	f7ff fd19 	bl	8003074 <LL_RCC_GetUSARTClockSource>
 8003642:	4603      	mov	r3, r0
 8003644:	2b03      	cmp	r3, #3
 8003646:	d817      	bhi.n	8003678 <UART_SetConfig+0xe8>
 8003648:	a201      	add	r2, pc, #4	; (adr r2, 8003650 <UART_SetConfig+0xc0>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003661 	.word	0x08003661
 8003654:	0800366d 	.word	0x0800366d
 8003658:	08003667 	.word	0x08003667
 800365c:	08003673 	.word	0x08003673
 8003660:	2301      	movs	r3, #1
 8003662:	76fb      	strb	r3, [r7, #27]
 8003664:	e038      	b.n	80036d8 <UART_SetConfig+0x148>
 8003666:	2302      	movs	r3, #2
 8003668:	76fb      	strb	r3, [r7, #27]
 800366a:	e035      	b.n	80036d8 <UART_SetConfig+0x148>
 800366c:	2304      	movs	r3, #4
 800366e:	76fb      	strb	r3, [r7, #27]
 8003670:	e032      	b.n	80036d8 <UART_SetConfig+0x148>
 8003672:	2308      	movs	r3, #8
 8003674:	76fb      	strb	r3, [r7, #27]
 8003676:	e02f      	b.n	80036d8 <UART_SetConfig+0x148>
 8003678:	2310      	movs	r3, #16
 800367a:	76fb      	strb	r3, [r7, #27]
 800367c:	bf00      	nop
 800367e:	e02b      	b.n	80036d8 <UART_SetConfig+0x148>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a75      	ldr	r2, [pc, #468]	; (800385c <UART_SetConfig+0x2cc>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d124      	bne.n	80036d4 <UART_SetConfig+0x144>
 800368a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800368e:	f7ff fd01 	bl	8003094 <LL_RCC_GetLPUARTClockSource>
 8003692:	4603      	mov	r3, r0
 8003694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003698:	d012      	beq.n	80036c0 <UART_SetConfig+0x130>
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	d802      	bhi.n	80036a6 <UART_SetConfig+0x116>
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d007      	beq.n	80036b4 <UART_SetConfig+0x124>
 80036a4:	e012      	b.n	80036cc <UART_SetConfig+0x13c>
 80036a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036aa:	d006      	beq.n	80036ba <UART_SetConfig+0x12a>
 80036ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036b0:	d009      	beq.n	80036c6 <UART_SetConfig+0x136>
 80036b2:	e00b      	b.n	80036cc <UART_SetConfig+0x13c>
 80036b4:	2300      	movs	r3, #0
 80036b6:	76fb      	strb	r3, [r7, #27]
 80036b8:	e00e      	b.n	80036d8 <UART_SetConfig+0x148>
 80036ba:	2302      	movs	r3, #2
 80036bc:	76fb      	strb	r3, [r7, #27]
 80036be:	e00b      	b.n	80036d8 <UART_SetConfig+0x148>
 80036c0:	2304      	movs	r3, #4
 80036c2:	76fb      	strb	r3, [r7, #27]
 80036c4:	e008      	b.n	80036d8 <UART_SetConfig+0x148>
 80036c6:	2308      	movs	r3, #8
 80036c8:	76fb      	strb	r3, [r7, #27]
 80036ca:	e005      	b.n	80036d8 <UART_SetConfig+0x148>
 80036cc:	2310      	movs	r3, #16
 80036ce:	76fb      	strb	r3, [r7, #27]
 80036d0:	bf00      	nop
 80036d2:	e001      	b.n	80036d8 <UART_SetConfig+0x148>
 80036d4:	2310      	movs	r3, #16
 80036d6:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a5f      	ldr	r2, [pc, #380]	; (800385c <UART_SetConfig+0x2cc>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	f040 808e 	bne.w	8003800 <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036e4:	7efb      	ldrb	r3, [r7, #27]
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d823      	bhi.n	8003732 <UART_SetConfig+0x1a2>
 80036ea:	a201      	add	r2, pc, #4	; (adr r2, 80036f0 <UART_SetConfig+0x160>)
 80036ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f0:	08003715 	.word	0x08003715
 80036f4:	08003733 	.word	0x08003733
 80036f8:	0800371d 	.word	0x0800371d
 80036fc:	08003733 	.word	0x08003733
 8003700:	08003723 	.word	0x08003723
 8003704:	08003733 	.word	0x08003733
 8003708:	08003733 	.word	0x08003733
 800370c:	08003733 	.word	0x08003733
 8003710:	0800372b 	.word	0x0800372b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003714:	f7ff fbca 	bl	8002eac <HAL_RCC_GetPCLK1Freq>
 8003718:	6178      	str	r0, [r7, #20]
        break;
 800371a:	e00f      	b.n	800373c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800371c:	4b51      	ldr	r3, [pc, #324]	; (8003864 <UART_SetConfig+0x2d4>)
 800371e:	617b      	str	r3, [r7, #20]
        break;
 8003720:	e00c      	b.n	800373c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003722:	f7ff fb43 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8003726:	6178      	str	r0, [r7, #20]
        break;
 8003728:	e008      	b.n	800373c <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800372a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800372e:	617b      	str	r3, [r7, #20]
        break;
 8003730:	e004      	b.n	800373c <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	76bb      	strb	r3, [r7, #26]
        break;
 800373a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 811c 	beq.w	800397c <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	4a47      	ldr	r2, [pc, #284]	; (8003868 <UART_SetConfig+0x2d8>)
 800374a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800374e:	461a      	mov	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	fbb3 f3f2 	udiv	r3, r3, r2
 8003756:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685a      	ldr	r2, [r3, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	4413      	add	r3, r2
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	d305      	bcc.n	8003774 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	d902      	bls.n	800377a <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	76bb      	strb	r3, [r7, #26]
 8003778:	e100      	b.n	800397c <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	4618      	mov	r0, r3
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	4a38      	ldr	r2, [pc, #224]	; (8003868 <UART_SetConfig+0x2d8>)
 8003788:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800378c:	b29b      	uxth	r3, r3
 800378e:	f04f 0400 	mov.w	r4, #0
 8003792:	461a      	mov	r2, r3
 8003794:	4623      	mov	r3, r4
 8003796:	f7fc fcf1 	bl	800017c <__aeabi_uldivmod>
 800379a:	4603      	mov	r3, r0
 800379c:	460c      	mov	r4, r1
 800379e:	4619      	mov	r1, r3
 80037a0:	4622      	mov	r2, r4
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	f04f 0400 	mov.w	r4, #0
 80037aa:	0214      	lsls	r4, r2, #8
 80037ac:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80037b0:	020b      	lsls	r3, r1, #8
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6852      	ldr	r2, [r2, #4]
 80037b6:	0852      	lsrs	r2, r2, #1
 80037b8:	4611      	mov	r1, r2
 80037ba:	f04f 0200 	mov.w	r2, #0
 80037be:	eb13 0b01 	adds.w	fp, r3, r1
 80037c2:	eb44 0c02 	adc.w	ip, r4, r2
 80037c6:	4658      	mov	r0, fp
 80037c8:	4661      	mov	r1, ip
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f04f 0400 	mov.w	r4, #0
 80037d2:	461a      	mov	r2, r3
 80037d4:	4623      	mov	r3, r4
 80037d6:	f7fc fcd1 	bl	800017c <__aeabi_uldivmod>
 80037da:	4603      	mov	r3, r0
 80037dc:	460c      	mov	r4, r1
 80037de:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037e6:	d308      	bcc.n	80037fa <UART_SetConfig+0x26a>
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037ee:	d204      	bcs.n	80037fa <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	60da      	str	r2, [r3, #12]
 80037f8:	e0c0      	b.n	800397c <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	76bb      	strb	r3, [r7, #26]
 80037fe:	e0bd      	b.n	800397c <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003808:	d169      	bne.n	80038de <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800380a:	7efb      	ldrb	r3, [r7, #27]
 800380c:	3b01      	subs	r3, #1
 800380e:	2b07      	cmp	r3, #7
 8003810:	d82c      	bhi.n	800386c <UART_SetConfig+0x2dc>
 8003812:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <UART_SetConfig+0x288>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	08003839 	.word	0x08003839
 800381c:	08003841 	.word	0x08003841
 8003820:	0800386d 	.word	0x0800386d
 8003824:	08003847 	.word	0x08003847
 8003828:	0800386d 	.word	0x0800386d
 800382c:	0800386d 	.word	0x0800386d
 8003830:	0800386d 	.word	0x0800386d
 8003834:	0800384f 	.word	0x0800384f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003838:	f7ff fb4e 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 800383c:	6178      	str	r0, [r7, #20]
        break;
 800383e:	e01a      	b.n	8003876 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <UART_SetConfig+0x2d4>)
 8003842:	617b      	str	r3, [r7, #20]
        break;
 8003844:	e017      	b.n	8003876 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003846:	f7ff fab1 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 800384a:	6178      	str	r0, [r7, #20]
        break;
 800384c:	e013      	b.n	8003876 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003852:	617b      	str	r3, [r7, #20]
        break;
 8003854:	e00f      	b.n	8003876 <UART_SetConfig+0x2e6>
 8003856:	bf00      	nop
 8003858:	cfff69f3 	.word	0xcfff69f3
 800385c:	40008000 	.word	0x40008000
 8003860:	40013800 	.word	0x40013800
 8003864:	00f42400 	.word	0x00f42400
 8003868:	08004b10 	.word	0x08004b10
      default:
        pclk = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	76bb      	strb	r3, [r7, #26]
        break;
 8003874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d07f      	beq.n	800397c <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	4a48      	ldr	r2, [pc, #288]	; (80039a4 <UART_SetConfig+0x414>)
 8003882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003886:	461a      	mov	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	fbb3 f3f2 	udiv	r3, r3, r2
 800388e:	005a      	lsls	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	441a      	add	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b0f      	cmp	r3, #15
 80038a8:	d916      	bls.n	80038d8 <UART_SetConfig+0x348>
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b0:	d212      	bcs.n	80038d8 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	f023 030f 	bic.w	r3, r3, #15
 80038ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	89fb      	ldrh	r3, [r7, #14]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	89fa      	ldrh	r2, [r7, #14]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	e051      	b.n	800397c <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	76bb      	strb	r3, [r7, #26]
 80038dc:	e04e      	b.n	800397c <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038de:	7efb      	ldrb	r3, [r7, #27]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	2b07      	cmp	r3, #7
 80038e4:	d821      	bhi.n	800392a <UART_SetConfig+0x39a>
 80038e6:	a201      	add	r2, pc, #4	; (adr r2, 80038ec <UART_SetConfig+0x35c>)
 80038e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ec:	0800390d 	.word	0x0800390d
 80038f0:	08003915 	.word	0x08003915
 80038f4:	0800392b 	.word	0x0800392b
 80038f8:	0800391b 	.word	0x0800391b
 80038fc:	0800392b 	.word	0x0800392b
 8003900:	0800392b 	.word	0x0800392b
 8003904:	0800392b 	.word	0x0800392b
 8003908:	08003923 	.word	0x08003923
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800390c:	f7ff fae4 	bl	8002ed8 <HAL_RCC_GetPCLK2Freq>
 8003910:	6178      	str	r0, [r7, #20]
        break;
 8003912:	e00f      	b.n	8003934 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <UART_SetConfig+0x418>)
 8003916:	617b      	str	r3, [r7, #20]
        break;
 8003918:	e00c      	b.n	8003934 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800391a:	f7ff fa47 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 800391e:	6178      	str	r0, [r7, #20]
        break;
 8003920:	e008      	b.n	8003934 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003926:	617b      	str	r3, [r7, #20]
        break;
 8003928:	e004      	b.n	8003934 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	76bb      	strb	r3, [r7, #26]
        break;
 8003932:	bf00      	nop
    }

    if (pclk != 0U)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d020      	beq.n	800397c <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	4a19      	ldr	r2, [pc, #100]	; (80039a4 <UART_SetConfig+0x414>)
 8003940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003944:	461a      	mov	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fbb3 f2f2 	udiv	r2, r3, r2
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	085b      	lsrs	r3, r3, #1
 8003952:	441a      	add	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	fbb2 f3f3 	udiv	r3, r2, r3
 800395c:	b29b      	uxth	r3, r3
 800395e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	2b0f      	cmp	r3, #15
 8003964:	d908      	bls.n	8003978 <UART_SetConfig+0x3e8>
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800396c:	d204      	bcs.n	8003978 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	e001      	b.n	800397c <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003998:	7ebb      	ldrb	r3, [r7, #26]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3720      	adds	r7, #32
 800399e:	46bd      	mov	sp, r7
 80039a0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80039a4:	08004b10 	.word	0x08004b10
 80039a8:	00f42400 	.word	0x00f42400

080039ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1e:	f003 0308 	and.w	r3, r3, #8
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d01a      	beq.n	8003ac2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aaa:	d10a      	bne.n	8003ac2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  }
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b00:	f7fd f9f4 	bl	8000eec <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0308 	and.w	r3, r3, #8
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d10e      	bne.n	8003b32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f82c 	bl	8003b80 <UART_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e022      	b.n	8003b78 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d10e      	bne.n	8003b5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f816 	bl	8003b80 <UART_WaitOnFlagUntilTimeout>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e00c      	b.n	8003b78 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b90:	e062      	b.n	8003c58 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d05e      	beq.n	8003c58 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9a:	f7fd f9a7 	bl	8000eec <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d11d      	bne.n	8003bec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003bbe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	689a      	ldr	r2, [r3, #8]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 0201 	bic.w	r2, r2, #1
 8003bce:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e045      	b.n	8003c78 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d02e      	beq.n	8003c58 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c08:	d126      	bne.n	8003c58 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c12:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c22:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689a      	ldr	r2, [r3, #8]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0201 	bic.w	r2, r2, #1
 8003c32:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2220      	movs	r2, #32
 8003c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e00f      	b.n	8003c78 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69da      	ldr	r2, [r3, #28]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4013      	ands	r3, r2
 8003c62:	68ba      	ldr	r2, [r7, #8]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	bf0c      	ite	eq
 8003c68:	2301      	moveq	r3, #1
 8003c6a:	2300      	movne	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	461a      	mov	r2, r3
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d08d      	beq.n	8003b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003c96:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689a      	ldr	r2, [r3, #8]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003ca6:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003cd2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	6812      	ldr	r2, [r2, #0]
 8003cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003cf6:	bf00      	nop
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0320 	and.w	r3, r3, #32
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d114      	bne.n	8003d48 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d34:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d44:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d46:	e002      	b.n	8003d4e <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f7ff fc03 	bl	8003554 <HAL_UART_TxCpltCallback>
}
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff fbff 	bl	8003568 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b086      	sub	sp, #24
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d86:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d9a:	2b80      	cmp	r3, #128	; 0x80
 8003d9c:	d109      	bne.n	8003db2 <UART_DMAError+0x40>
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	2b21      	cmp	r3, #33	; 0x21
 8003da2:	d106      	bne.n	8003db2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8003dac:	6978      	ldr	r0, [r7, #20]
 8003dae:	f7ff ff67 	bl	8003c80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d109      	bne.n	8003dd4 <UART_DMAError+0x62>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b22      	cmp	r3, #34	; 0x22
 8003dc4:	d106      	bne.n	8003dd4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8003dce:	6978      	ldr	r0, [r7, #20]
 8003dd0:	f7ff ff74 	bl	8003cbc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dda:	f043 0210 	orr.w	r2, r3, #16
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003de4:	6978      	ldr	r0, [r7, #20]
 8003de6:	f7ff fbc9 	bl	800357c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dea:	bf00      	nop
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003df2:	b580      	push	{r7, lr}
 8003df4:	b084      	sub	sp, #16
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff fbb3 	bl	800357c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b082      	sub	sp, #8
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e34:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2220      	movs	r2, #32
 8003e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff fb85 	bl	8003554 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e5a:	bf00      	nop
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b085      	sub	sp, #20
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e027      	b.n	8003ef4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2224      	movs	r2, #36	; 0x24
 8003eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0201 	bic.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ed2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e02d      	b.n	8003f74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	683a      	ldr	r2, [r7, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f84f 	bl	8003ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e02d      	b.n	8003ff0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f811 	bl	8003ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b089      	sub	sp, #36	; 0x24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004000:	4a2f      	ldr	r2, [pc, #188]	; (80040c0 <UARTEx_SetNbDataToProcess+0xc8>)
 8004002:	f107 0314 	add.w	r3, r7, #20
 8004006:	e892 0003 	ldmia.w	r2, {r0, r1}
 800400a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800400e:	4a2d      	ldr	r2, [pc, #180]	; (80040c4 <UARTEx_SetNbDataToProcess+0xcc>)
 8004010:	f107 030c 	add.w	r3, r7, #12
 8004014:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004018:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004020:	2b00      	cmp	r3, #0
 8004022:	d108      	bne.n	8004036 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004034:	e03d      	b.n	80040b2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004036:	2308      	movs	r3, #8
 8004038:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800403a:	2308      	movs	r3, #8
 800403c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	0e5b      	lsrs	r3, r3, #25
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	0f5b      	lsrs	r3, r3, #29
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800405e:	7fbb      	ldrb	r3, [r7, #30]
 8004060:	7f3a      	ldrb	r2, [r7, #28]
 8004062:	f107 0120 	add.w	r1, r7, #32
 8004066:	440a      	add	r2, r1
 8004068:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800406c:	fb02 f303 	mul.w	r3, r2, r3
 8004070:	7f3a      	ldrb	r2, [r7, #28]
 8004072:	f107 0120 	add.w	r1, r7, #32
 8004076:	440a      	add	r2, r1
 8004078:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800407c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004080:	b29a      	uxth	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004088:	7ffb      	ldrb	r3, [r7, #31]
 800408a:	7f7a      	ldrb	r2, [r7, #29]
 800408c:	f107 0120 	add.w	r1, r7, #32
 8004090:	440a      	add	r2, r1
 8004092:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004096:	fb02 f303 	mul.w	r3, r2, r3
 800409a:	7f7a      	ldrb	r2, [r7, #29]
 800409c:	f107 0120 	add.w	r1, r7, #32
 80040a0:	440a      	add	r2, r1
 80040a2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80040a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80040b2:	bf00      	nop
 80040b4:	3724      	adds	r7, #36	; 0x24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	08004a60 	.word	0x08004a60
 80040c4:	08004a68 	.word	0x08004a68

080040c8 <__errno>:
 80040c8:	4b01      	ldr	r3, [pc, #4]	; (80040d0 <__errno+0x8>)
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000010 	.word	0x20000010

080040d4 <__libc_init_array>:
 80040d4:	b570      	push	{r4, r5, r6, lr}
 80040d6:	4e0d      	ldr	r6, [pc, #52]	; (800410c <__libc_init_array+0x38>)
 80040d8:	4c0d      	ldr	r4, [pc, #52]	; (8004110 <__libc_init_array+0x3c>)
 80040da:	1ba4      	subs	r4, r4, r6
 80040dc:	10a4      	asrs	r4, r4, #2
 80040de:	2500      	movs	r5, #0
 80040e0:	42a5      	cmp	r5, r4
 80040e2:	d109      	bne.n	80040f8 <__libc_init_array+0x24>
 80040e4:	4e0b      	ldr	r6, [pc, #44]	; (8004114 <__libc_init_array+0x40>)
 80040e6:	4c0c      	ldr	r4, [pc, #48]	; (8004118 <__libc_init_array+0x44>)
 80040e8:	f000 fc88 	bl	80049fc <_init>
 80040ec:	1ba4      	subs	r4, r4, r6
 80040ee:	10a4      	asrs	r4, r4, #2
 80040f0:	2500      	movs	r5, #0
 80040f2:	42a5      	cmp	r5, r4
 80040f4:	d105      	bne.n	8004102 <__libc_init_array+0x2e>
 80040f6:	bd70      	pop	{r4, r5, r6, pc}
 80040f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80040fc:	4798      	blx	r3
 80040fe:	3501      	adds	r5, #1
 8004100:	e7ee      	b.n	80040e0 <__libc_init_array+0xc>
 8004102:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004106:	4798      	blx	r3
 8004108:	3501      	adds	r5, #1
 800410a:	e7f2      	b.n	80040f2 <__libc_init_array+0x1e>
 800410c:	08004b94 	.word	0x08004b94
 8004110:	08004b94 	.word	0x08004b94
 8004114:	08004b94 	.word	0x08004b94
 8004118:	08004b98 	.word	0x08004b98

0800411c <memset>:
 800411c:	4402      	add	r2, r0
 800411e:	4603      	mov	r3, r0
 8004120:	4293      	cmp	r3, r2
 8004122:	d100      	bne.n	8004126 <memset+0xa>
 8004124:	4770      	bx	lr
 8004126:	f803 1b01 	strb.w	r1, [r3], #1
 800412a:	e7f9      	b.n	8004120 <memset+0x4>

0800412c <_puts_r>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	460e      	mov	r6, r1
 8004130:	4605      	mov	r5, r0
 8004132:	b118      	cbz	r0, 800413c <_puts_r+0x10>
 8004134:	6983      	ldr	r3, [r0, #24]
 8004136:	b90b      	cbnz	r3, 800413c <_puts_r+0x10>
 8004138:	f000 fa0c 	bl	8004554 <__sinit>
 800413c:	69ab      	ldr	r3, [r5, #24]
 800413e:	68ac      	ldr	r4, [r5, #8]
 8004140:	b913      	cbnz	r3, 8004148 <_puts_r+0x1c>
 8004142:	4628      	mov	r0, r5
 8004144:	f000 fa06 	bl	8004554 <__sinit>
 8004148:	4b23      	ldr	r3, [pc, #140]	; (80041d8 <_puts_r+0xac>)
 800414a:	429c      	cmp	r4, r3
 800414c:	d117      	bne.n	800417e <_puts_r+0x52>
 800414e:	686c      	ldr	r4, [r5, #4]
 8004150:	89a3      	ldrh	r3, [r4, #12]
 8004152:	071b      	lsls	r3, r3, #28
 8004154:	d51d      	bpl.n	8004192 <_puts_r+0x66>
 8004156:	6923      	ldr	r3, [r4, #16]
 8004158:	b1db      	cbz	r3, 8004192 <_puts_r+0x66>
 800415a:	3e01      	subs	r6, #1
 800415c:	68a3      	ldr	r3, [r4, #8]
 800415e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004162:	3b01      	subs	r3, #1
 8004164:	60a3      	str	r3, [r4, #8]
 8004166:	b9e9      	cbnz	r1, 80041a4 <_puts_r+0x78>
 8004168:	2b00      	cmp	r3, #0
 800416a:	da2e      	bge.n	80041ca <_puts_r+0x9e>
 800416c:	4622      	mov	r2, r4
 800416e:	210a      	movs	r1, #10
 8004170:	4628      	mov	r0, r5
 8004172:	f000 f83f 	bl	80041f4 <__swbuf_r>
 8004176:	3001      	adds	r0, #1
 8004178:	d011      	beq.n	800419e <_puts_r+0x72>
 800417a:	200a      	movs	r0, #10
 800417c:	e011      	b.n	80041a2 <_puts_r+0x76>
 800417e:	4b17      	ldr	r3, [pc, #92]	; (80041dc <_puts_r+0xb0>)
 8004180:	429c      	cmp	r4, r3
 8004182:	d101      	bne.n	8004188 <_puts_r+0x5c>
 8004184:	68ac      	ldr	r4, [r5, #8]
 8004186:	e7e3      	b.n	8004150 <_puts_r+0x24>
 8004188:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <_puts_r+0xb4>)
 800418a:	429c      	cmp	r4, r3
 800418c:	bf08      	it	eq
 800418e:	68ec      	ldreq	r4, [r5, #12]
 8004190:	e7de      	b.n	8004150 <_puts_r+0x24>
 8004192:	4621      	mov	r1, r4
 8004194:	4628      	mov	r0, r5
 8004196:	f000 f87f 	bl	8004298 <__swsetup_r>
 800419a:	2800      	cmp	r0, #0
 800419c:	d0dd      	beq.n	800415a <_puts_r+0x2e>
 800419e:	f04f 30ff 	mov.w	r0, #4294967295
 80041a2:	bd70      	pop	{r4, r5, r6, pc}
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da04      	bge.n	80041b2 <_puts_r+0x86>
 80041a8:	69a2      	ldr	r2, [r4, #24]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	dc06      	bgt.n	80041bc <_puts_r+0x90>
 80041ae:	290a      	cmp	r1, #10
 80041b0:	d004      	beq.n	80041bc <_puts_r+0x90>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	6022      	str	r2, [r4, #0]
 80041b8:	7019      	strb	r1, [r3, #0]
 80041ba:	e7cf      	b.n	800415c <_puts_r+0x30>
 80041bc:	4622      	mov	r2, r4
 80041be:	4628      	mov	r0, r5
 80041c0:	f000 f818 	bl	80041f4 <__swbuf_r>
 80041c4:	3001      	adds	r0, #1
 80041c6:	d1c9      	bne.n	800415c <_puts_r+0x30>
 80041c8:	e7e9      	b.n	800419e <_puts_r+0x72>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	200a      	movs	r0, #10
 80041ce:	1c5a      	adds	r2, r3, #1
 80041d0:	6022      	str	r2, [r4, #0]
 80041d2:	7018      	strb	r0, [r3, #0]
 80041d4:	e7e5      	b.n	80041a2 <_puts_r+0x76>
 80041d6:	bf00      	nop
 80041d8:	08004b4c 	.word	0x08004b4c
 80041dc:	08004b6c 	.word	0x08004b6c
 80041e0:	08004b2c 	.word	0x08004b2c

080041e4 <puts>:
 80041e4:	4b02      	ldr	r3, [pc, #8]	; (80041f0 <puts+0xc>)
 80041e6:	4601      	mov	r1, r0
 80041e8:	6818      	ldr	r0, [r3, #0]
 80041ea:	f7ff bf9f 	b.w	800412c <_puts_r>
 80041ee:	bf00      	nop
 80041f0:	20000010 	.word	0x20000010

080041f4 <__swbuf_r>:
 80041f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f6:	460e      	mov	r6, r1
 80041f8:	4614      	mov	r4, r2
 80041fa:	4605      	mov	r5, r0
 80041fc:	b118      	cbz	r0, 8004206 <__swbuf_r+0x12>
 80041fe:	6983      	ldr	r3, [r0, #24]
 8004200:	b90b      	cbnz	r3, 8004206 <__swbuf_r+0x12>
 8004202:	f000 f9a7 	bl	8004554 <__sinit>
 8004206:	4b21      	ldr	r3, [pc, #132]	; (800428c <__swbuf_r+0x98>)
 8004208:	429c      	cmp	r4, r3
 800420a:	d12a      	bne.n	8004262 <__swbuf_r+0x6e>
 800420c:	686c      	ldr	r4, [r5, #4]
 800420e:	69a3      	ldr	r3, [r4, #24]
 8004210:	60a3      	str	r3, [r4, #8]
 8004212:	89a3      	ldrh	r3, [r4, #12]
 8004214:	071a      	lsls	r2, r3, #28
 8004216:	d52e      	bpl.n	8004276 <__swbuf_r+0x82>
 8004218:	6923      	ldr	r3, [r4, #16]
 800421a:	b363      	cbz	r3, 8004276 <__swbuf_r+0x82>
 800421c:	6923      	ldr	r3, [r4, #16]
 800421e:	6820      	ldr	r0, [r4, #0]
 8004220:	1ac0      	subs	r0, r0, r3
 8004222:	6963      	ldr	r3, [r4, #20]
 8004224:	b2f6      	uxtb	r6, r6
 8004226:	4283      	cmp	r3, r0
 8004228:	4637      	mov	r7, r6
 800422a:	dc04      	bgt.n	8004236 <__swbuf_r+0x42>
 800422c:	4621      	mov	r1, r4
 800422e:	4628      	mov	r0, r5
 8004230:	f000 f926 	bl	8004480 <_fflush_r>
 8004234:	bb28      	cbnz	r0, 8004282 <__swbuf_r+0x8e>
 8004236:	68a3      	ldr	r3, [r4, #8]
 8004238:	3b01      	subs	r3, #1
 800423a:	60a3      	str	r3, [r4, #8]
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	6022      	str	r2, [r4, #0]
 8004242:	701e      	strb	r6, [r3, #0]
 8004244:	6963      	ldr	r3, [r4, #20]
 8004246:	3001      	adds	r0, #1
 8004248:	4283      	cmp	r3, r0
 800424a:	d004      	beq.n	8004256 <__swbuf_r+0x62>
 800424c:	89a3      	ldrh	r3, [r4, #12]
 800424e:	07db      	lsls	r3, r3, #31
 8004250:	d519      	bpl.n	8004286 <__swbuf_r+0x92>
 8004252:	2e0a      	cmp	r6, #10
 8004254:	d117      	bne.n	8004286 <__swbuf_r+0x92>
 8004256:	4621      	mov	r1, r4
 8004258:	4628      	mov	r0, r5
 800425a:	f000 f911 	bl	8004480 <_fflush_r>
 800425e:	b190      	cbz	r0, 8004286 <__swbuf_r+0x92>
 8004260:	e00f      	b.n	8004282 <__swbuf_r+0x8e>
 8004262:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <__swbuf_r+0x9c>)
 8004264:	429c      	cmp	r4, r3
 8004266:	d101      	bne.n	800426c <__swbuf_r+0x78>
 8004268:	68ac      	ldr	r4, [r5, #8]
 800426a:	e7d0      	b.n	800420e <__swbuf_r+0x1a>
 800426c:	4b09      	ldr	r3, [pc, #36]	; (8004294 <__swbuf_r+0xa0>)
 800426e:	429c      	cmp	r4, r3
 8004270:	bf08      	it	eq
 8004272:	68ec      	ldreq	r4, [r5, #12]
 8004274:	e7cb      	b.n	800420e <__swbuf_r+0x1a>
 8004276:	4621      	mov	r1, r4
 8004278:	4628      	mov	r0, r5
 800427a:	f000 f80d 	bl	8004298 <__swsetup_r>
 800427e:	2800      	cmp	r0, #0
 8004280:	d0cc      	beq.n	800421c <__swbuf_r+0x28>
 8004282:	f04f 37ff 	mov.w	r7, #4294967295
 8004286:	4638      	mov	r0, r7
 8004288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800428a:	bf00      	nop
 800428c:	08004b4c 	.word	0x08004b4c
 8004290:	08004b6c 	.word	0x08004b6c
 8004294:	08004b2c 	.word	0x08004b2c

08004298 <__swsetup_r>:
 8004298:	4b32      	ldr	r3, [pc, #200]	; (8004364 <__swsetup_r+0xcc>)
 800429a:	b570      	push	{r4, r5, r6, lr}
 800429c:	681d      	ldr	r5, [r3, #0]
 800429e:	4606      	mov	r6, r0
 80042a0:	460c      	mov	r4, r1
 80042a2:	b125      	cbz	r5, 80042ae <__swsetup_r+0x16>
 80042a4:	69ab      	ldr	r3, [r5, #24]
 80042a6:	b913      	cbnz	r3, 80042ae <__swsetup_r+0x16>
 80042a8:	4628      	mov	r0, r5
 80042aa:	f000 f953 	bl	8004554 <__sinit>
 80042ae:	4b2e      	ldr	r3, [pc, #184]	; (8004368 <__swsetup_r+0xd0>)
 80042b0:	429c      	cmp	r4, r3
 80042b2:	d10f      	bne.n	80042d4 <__swsetup_r+0x3c>
 80042b4:	686c      	ldr	r4, [r5, #4]
 80042b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	0715      	lsls	r5, r2, #28
 80042be:	d42c      	bmi.n	800431a <__swsetup_r+0x82>
 80042c0:	06d0      	lsls	r0, r2, #27
 80042c2:	d411      	bmi.n	80042e8 <__swsetup_r+0x50>
 80042c4:	2209      	movs	r2, #9
 80042c6:	6032      	str	r2, [r6, #0]
 80042c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042cc:	81a3      	strh	r3, [r4, #12]
 80042ce:	f04f 30ff 	mov.w	r0, #4294967295
 80042d2:	e03e      	b.n	8004352 <__swsetup_r+0xba>
 80042d4:	4b25      	ldr	r3, [pc, #148]	; (800436c <__swsetup_r+0xd4>)
 80042d6:	429c      	cmp	r4, r3
 80042d8:	d101      	bne.n	80042de <__swsetup_r+0x46>
 80042da:	68ac      	ldr	r4, [r5, #8]
 80042dc:	e7eb      	b.n	80042b6 <__swsetup_r+0x1e>
 80042de:	4b24      	ldr	r3, [pc, #144]	; (8004370 <__swsetup_r+0xd8>)
 80042e0:	429c      	cmp	r4, r3
 80042e2:	bf08      	it	eq
 80042e4:	68ec      	ldreq	r4, [r5, #12]
 80042e6:	e7e6      	b.n	80042b6 <__swsetup_r+0x1e>
 80042e8:	0751      	lsls	r1, r2, #29
 80042ea:	d512      	bpl.n	8004312 <__swsetup_r+0x7a>
 80042ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042ee:	b141      	cbz	r1, 8004302 <__swsetup_r+0x6a>
 80042f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042f4:	4299      	cmp	r1, r3
 80042f6:	d002      	beq.n	80042fe <__swsetup_r+0x66>
 80042f8:	4630      	mov	r0, r6
 80042fa:	f000 fa19 	bl	8004730 <_free_r>
 80042fe:	2300      	movs	r3, #0
 8004300:	6363      	str	r3, [r4, #52]	; 0x34
 8004302:	89a3      	ldrh	r3, [r4, #12]
 8004304:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004308:	81a3      	strh	r3, [r4, #12]
 800430a:	2300      	movs	r3, #0
 800430c:	6063      	str	r3, [r4, #4]
 800430e:	6923      	ldr	r3, [r4, #16]
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	f043 0308 	orr.w	r3, r3, #8
 8004318:	81a3      	strh	r3, [r4, #12]
 800431a:	6923      	ldr	r3, [r4, #16]
 800431c:	b94b      	cbnz	r3, 8004332 <__swsetup_r+0x9a>
 800431e:	89a3      	ldrh	r3, [r4, #12]
 8004320:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004324:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004328:	d003      	beq.n	8004332 <__swsetup_r+0x9a>
 800432a:	4621      	mov	r1, r4
 800432c:	4630      	mov	r0, r6
 800432e:	f000 f9bf 	bl	80046b0 <__smakebuf_r>
 8004332:	89a2      	ldrh	r2, [r4, #12]
 8004334:	f012 0301 	ands.w	r3, r2, #1
 8004338:	d00c      	beq.n	8004354 <__swsetup_r+0xbc>
 800433a:	2300      	movs	r3, #0
 800433c:	60a3      	str	r3, [r4, #8]
 800433e:	6963      	ldr	r3, [r4, #20]
 8004340:	425b      	negs	r3, r3
 8004342:	61a3      	str	r3, [r4, #24]
 8004344:	6923      	ldr	r3, [r4, #16]
 8004346:	b953      	cbnz	r3, 800435e <__swsetup_r+0xc6>
 8004348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800434c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004350:	d1ba      	bne.n	80042c8 <__swsetup_r+0x30>
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	0792      	lsls	r2, r2, #30
 8004356:	bf58      	it	pl
 8004358:	6963      	ldrpl	r3, [r4, #20]
 800435a:	60a3      	str	r3, [r4, #8]
 800435c:	e7f2      	b.n	8004344 <__swsetup_r+0xac>
 800435e:	2000      	movs	r0, #0
 8004360:	e7f7      	b.n	8004352 <__swsetup_r+0xba>
 8004362:	bf00      	nop
 8004364:	20000010 	.word	0x20000010
 8004368:	08004b4c 	.word	0x08004b4c
 800436c:	08004b6c 	.word	0x08004b6c
 8004370:	08004b2c 	.word	0x08004b2c

08004374 <__sflush_r>:
 8004374:	898a      	ldrh	r2, [r1, #12]
 8004376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800437a:	4605      	mov	r5, r0
 800437c:	0710      	lsls	r0, r2, #28
 800437e:	460c      	mov	r4, r1
 8004380:	d458      	bmi.n	8004434 <__sflush_r+0xc0>
 8004382:	684b      	ldr	r3, [r1, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	dc05      	bgt.n	8004394 <__sflush_r+0x20>
 8004388:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800438a:	2b00      	cmp	r3, #0
 800438c:	dc02      	bgt.n	8004394 <__sflush_r+0x20>
 800438e:	2000      	movs	r0, #0
 8004390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004396:	2e00      	cmp	r6, #0
 8004398:	d0f9      	beq.n	800438e <__sflush_r+0x1a>
 800439a:	2300      	movs	r3, #0
 800439c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043a0:	682f      	ldr	r7, [r5, #0]
 80043a2:	6a21      	ldr	r1, [r4, #32]
 80043a4:	602b      	str	r3, [r5, #0]
 80043a6:	d032      	beq.n	800440e <__sflush_r+0x9a>
 80043a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043aa:	89a3      	ldrh	r3, [r4, #12]
 80043ac:	075a      	lsls	r2, r3, #29
 80043ae:	d505      	bpl.n	80043bc <__sflush_r+0x48>
 80043b0:	6863      	ldr	r3, [r4, #4]
 80043b2:	1ac0      	subs	r0, r0, r3
 80043b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043b6:	b10b      	cbz	r3, 80043bc <__sflush_r+0x48>
 80043b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043ba:	1ac0      	subs	r0, r0, r3
 80043bc:	2300      	movs	r3, #0
 80043be:	4602      	mov	r2, r0
 80043c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043c2:	6a21      	ldr	r1, [r4, #32]
 80043c4:	4628      	mov	r0, r5
 80043c6:	47b0      	blx	r6
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	89a3      	ldrh	r3, [r4, #12]
 80043cc:	d106      	bne.n	80043dc <__sflush_r+0x68>
 80043ce:	6829      	ldr	r1, [r5, #0]
 80043d0:	291d      	cmp	r1, #29
 80043d2:	d848      	bhi.n	8004466 <__sflush_r+0xf2>
 80043d4:	4a29      	ldr	r2, [pc, #164]	; (800447c <__sflush_r+0x108>)
 80043d6:	40ca      	lsrs	r2, r1
 80043d8:	07d6      	lsls	r6, r2, #31
 80043da:	d544      	bpl.n	8004466 <__sflush_r+0xf2>
 80043dc:	2200      	movs	r2, #0
 80043de:	6062      	str	r2, [r4, #4]
 80043e0:	04d9      	lsls	r1, r3, #19
 80043e2:	6922      	ldr	r2, [r4, #16]
 80043e4:	6022      	str	r2, [r4, #0]
 80043e6:	d504      	bpl.n	80043f2 <__sflush_r+0x7e>
 80043e8:	1c42      	adds	r2, r0, #1
 80043ea:	d101      	bne.n	80043f0 <__sflush_r+0x7c>
 80043ec:	682b      	ldr	r3, [r5, #0]
 80043ee:	b903      	cbnz	r3, 80043f2 <__sflush_r+0x7e>
 80043f0:	6560      	str	r0, [r4, #84]	; 0x54
 80043f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80043f4:	602f      	str	r7, [r5, #0]
 80043f6:	2900      	cmp	r1, #0
 80043f8:	d0c9      	beq.n	800438e <__sflush_r+0x1a>
 80043fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80043fe:	4299      	cmp	r1, r3
 8004400:	d002      	beq.n	8004408 <__sflush_r+0x94>
 8004402:	4628      	mov	r0, r5
 8004404:	f000 f994 	bl	8004730 <_free_r>
 8004408:	2000      	movs	r0, #0
 800440a:	6360      	str	r0, [r4, #52]	; 0x34
 800440c:	e7c0      	b.n	8004390 <__sflush_r+0x1c>
 800440e:	2301      	movs	r3, #1
 8004410:	4628      	mov	r0, r5
 8004412:	47b0      	blx	r6
 8004414:	1c41      	adds	r1, r0, #1
 8004416:	d1c8      	bne.n	80043aa <__sflush_r+0x36>
 8004418:	682b      	ldr	r3, [r5, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0c5      	beq.n	80043aa <__sflush_r+0x36>
 800441e:	2b1d      	cmp	r3, #29
 8004420:	d001      	beq.n	8004426 <__sflush_r+0xb2>
 8004422:	2b16      	cmp	r3, #22
 8004424:	d101      	bne.n	800442a <__sflush_r+0xb6>
 8004426:	602f      	str	r7, [r5, #0]
 8004428:	e7b1      	b.n	800438e <__sflush_r+0x1a>
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004430:	81a3      	strh	r3, [r4, #12]
 8004432:	e7ad      	b.n	8004390 <__sflush_r+0x1c>
 8004434:	690f      	ldr	r7, [r1, #16]
 8004436:	2f00      	cmp	r7, #0
 8004438:	d0a9      	beq.n	800438e <__sflush_r+0x1a>
 800443a:	0793      	lsls	r3, r2, #30
 800443c:	680e      	ldr	r6, [r1, #0]
 800443e:	bf08      	it	eq
 8004440:	694b      	ldreq	r3, [r1, #20]
 8004442:	600f      	str	r7, [r1, #0]
 8004444:	bf18      	it	ne
 8004446:	2300      	movne	r3, #0
 8004448:	eba6 0807 	sub.w	r8, r6, r7
 800444c:	608b      	str	r3, [r1, #8]
 800444e:	f1b8 0f00 	cmp.w	r8, #0
 8004452:	dd9c      	ble.n	800438e <__sflush_r+0x1a>
 8004454:	4643      	mov	r3, r8
 8004456:	463a      	mov	r2, r7
 8004458:	6a21      	ldr	r1, [r4, #32]
 800445a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800445c:	4628      	mov	r0, r5
 800445e:	47b0      	blx	r6
 8004460:	2800      	cmp	r0, #0
 8004462:	dc06      	bgt.n	8004472 <__sflush_r+0xfe>
 8004464:	89a3      	ldrh	r3, [r4, #12]
 8004466:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800446a:	81a3      	strh	r3, [r4, #12]
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	e78e      	b.n	8004390 <__sflush_r+0x1c>
 8004472:	4407      	add	r7, r0
 8004474:	eba8 0800 	sub.w	r8, r8, r0
 8004478:	e7e9      	b.n	800444e <__sflush_r+0xda>
 800447a:	bf00      	nop
 800447c:	20400001 	.word	0x20400001

08004480 <_fflush_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	690b      	ldr	r3, [r1, #16]
 8004484:	4605      	mov	r5, r0
 8004486:	460c      	mov	r4, r1
 8004488:	b1db      	cbz	r3, 80044c2 <_fflush_r+0x42>
 800448a:	b118      	cbz	r0, 8004494 <_fflush_r+0x14>
 800448c:	6983      	ldr	r3, [r0, #24]
 800448e:	b90b      	cbnz	r3, 8004494 <_fflush_r+0x14>
 8004490:	f000 f860 	bl	8004554 <__sinit>
 8004494:	4b0c      	ldr	r3, [pc, #48]	; (80044c8 <_fflush_r+0x48>)
 8004496:	429c      	cmp	r4, r3
 8004498:	d109      	bne.n	80044ae <_fflush_r+0x2e>
 800449a:	686c      	ldr	r4, [r5, #4]
 800449c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044a0:	b17b      	cbz	r3, 80044c2 <_fflush_r+0x42>
 80044a2:	4621      	mov	r1, r4
 80044a4:	4628      	mov	r0, r5
 80044a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044aa:	f7ff bf63 	b.w	8004374 <__sflush_r>
 80044ae:	4b07      	ldr	r3, [pc, #28]	; (80044cc <_fflush_r+0x4c>)
 80044b0:	429c      	cmp	r4, r3
 80044b2:	d101      	bne.n	80044b8 <_fflush_r+0x38>
 80044b4:	68ac      	ldr	r4, [r5, #8]
 80044b6:	e7f1      	b.n	800449c <_fflush_r+0x1c>
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <_fflush_r+0x50>)
 80044ba:	429c      	cmp	r4, r3
 80044bc:	bf08      	it	eq
 80044be:	68ec      	ldreq	r4, [r5, #12]
 80044c0:	e7ec      	b.n	800449c <_fflush_r+0x1c>
 80044c2:	2000      	movs	r0, #0
 80044c4:	bd38      	pop	{r3, r4, r5, pc}
 80044c6:	bf00      	nop
 80044c8:	08004b4c 	.word	0x08004b4c
 80044cc:	08004b6c 	.word	0x08004b6c
 80044d0:	08004b2c 	.word	0x08004b2c

080044d4 <std>:
 80044d4:	2300      	movs	r3, #0
 80044d6:	b510      	push	{r4, lr}
 80044d8:	4604      	mov	r4, r0
 80044da:	e9c0 3300 	strd	r3, r3, [r0]
 80044de:	6083      	str	r3, [r0, #8]
 80044e0:	8181      	strh	r1, [r0, #12]
 80044e2:	6643      	str	r3, [r0, #100]	; 0x64
 80044e4:	81c2      	strh	r2, [r0, #14]
 80044e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044ea:	6183      	str	r3, [r0, #24]
 80044ec:	4619      	mov	r1, r3
 80044ee:	2208      	movs	r2, #8
 80044f0:	305c      	adds	r0, #92	; 0x5c
 80044f2:	f7ff fe13 	bl	800411c <memset>
 80044f6:	4b05      	ldr	r3, [pc, #20]	; (800450c <std+0x38>)
 80044f8:	6263      	str	r3, [r4, #36]	; 0x24
 80044fa:	4b05      	ldr	r3, [pc, #20]	; (8004510 <std+0x3c>)
 80044fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80044fe:	4b05      	ldr	r3, [pc, #20]	; (8004514 <std+0x40>)
 8004500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <std+0x44>)
 8004504:	6224      	str	r4, [r4, #32]
 8004506:	6323      	str	r3, [r4, #48]	; 0x30
 8004508:	bd10      	pop	{r4, pc}
 800450a:	bf00      	nop
 800450c:	080048a1 	.word	0x080048a1
 8004510:	080048c3 	.word	0x080048c3
 8004514:	080048fb 	.word	0x080048fb
 8004518:	0800491f 	.word	0x0800491f

0800451c <_cleanup_r>:
 800451c:	4901      	ldr	r1, [pc, #4]	; (8004524 <_cleanup_r+0x8>)
 800451e:	f000 b885 	b.w	800462c <_fwalk_reent>
 8004522:	bf00      	nop
 8004524:	08004481 	.word	0x08004481

08004528 <__sfmoreglue>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	1e4a      	subs	r2, r1, #1
 800452c:	2568      	movs	r5, #104	; 0x68
 800452e:	4355      	muls	r5, r2
 8004530:	460e      	mov	r6, r1
 8004532:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004536:	f000 f949 	bl	80047cc <_malloc_r>
 800453a:	4604      	mov	r4, r0
 800453c:	b140      	cbz	r0, 8004550 <__sfmoreglue+0x28>
 800453e:	2100      	movs	r1, #0
 8004540:	e9c0 1600 	strd	r1, r6, [r0]
 8004544:	300c      	adds	r0, #12
 8004546:	60a0      	str	r0, [r4, #8]
 8004548:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800454c:	f7ff fde6 	bl	800411c <memset>
 8004550:	4620      	mov	r0, r4
 8004552:	bd70      	pop	{r4, r5, r6, pc}

08004554 <__sinit>:
 8004554:	6983      	ldr	r3, [r0, #24]
 8004556:	b510      	push	{r4, lr}
 8004558:	4604      	mov	r4, r0
 800455a:	bb33      	cbnz	r3, 80045aa <__sinit+0x56>
 800455c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004560:	6503      	str	r3, [r0, #80]	; 0x50
 8004562:	4b12      	ldr	r3, [pc, #72]	; (80045ac <__sinit+0x58>)
 8004564:	4a12      	ldr	r2, [pc, #72]	; (80045b0 <__sinit+0x5c>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6282      	str	r2, [r0, #40]	; 0x28
 800456a:	4298      	cmp	r0, r3
 800456c:	bf04      	itt	eq
 800456e:	2301      	moveq	r3, #1
 8004570:	6183      	streq	r3, [r0, #24]
 8004572:	f000 f81f 	bl	80045b4 <__sfp>
 8004576:	6060      	str	r0, [r4, #4]
 8004578:	4620      	mov	r0, r4
 800457a:	f000 f81b 	bl	80045b4 <__sfp>
 800457e:	60a0      	str	r0, [r4, #8]
 8004580:	4620      	mov	r0, r4
 8004582:	f000 f817 	bl	80045b4 <__sfp>
 8004586:	2200      	movs	r2, #0
 8004588:	60e0      	str	r0, [r4, #12]
 800458a:	2104      	movs	r1, #4
 800458c:	6860      	ldr	r0, [r4, #4]
 800458e:	f7ff ffa1 	bl	80044d4 <std>
 8004592:	2201      	movs	r2, #1
 8004594:	2109      	movs	r1, #9
 8004596:	68a0      	ldr	r0, [r4, #8]
 8004598:	f7ff ff9c 	bl	80044d4 <std>
 800459c:	2202      	movs	r2, #2
 800459e:	2112      	movs	r1, #18
 80045a0:	68e0      	ldr	r0, [r4, #12]
 80045a2:	f7ff ff97 	bl	80044d4 <std>
 80045a6:	2301      	movs	r3, #1
 80045a8:	61a3      	str	r3, [r4, #24]
 80045aa:	bd10      	pop	{r4, pc}
 80045ac:	08004b28 	.word	0x08004b28
 80045b0:	0800451d 	.word	0x0800451d

080045b4 <__sfp>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <__sfp+0x70>)
 80045b8:	681e      	ldr	r6, [r3, #0]
 80045ba:	69b3      	ldr	r3, [r6, #24]
 80045bc:	4607      	mov	r7, r0
 80045be:	b913      	cbnz	r3, 80045c6 <__sfp+0x12>
 80045c0:	4630      	mov	r0, r6
 80045c2:	f7ff ffc7 	bl	8004554 <__sinit>
 80045c6:	3648      	adds	r6, #72	; 0x48
 80045c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80045cc:	3b01      	subs	r3, #1
 80045ce:	d503      	bpl.n	80045d8 <__sfp+0x24>
 80045d0:	6833      	ldr	r3, [r6, #0]
 80045d2:	b133      	cbz	r3, 80045e2 <__sfp+0x2e>
 80045d4:	6836      	ldr	r6, [r6, #0]
 80045d6:	e7f7      	b.n	80045c8 <__sfp+0x14>
 80045d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045dc:	b16d      	cbz	r5, 80045fa <__sfp+0x46>
 80045de:	3468      	adds	r4, #104	; 0x68
 80045e0:	e7f4      	b.n	80045cc <__sfp+0x18>
 80045e2:	2104      	movs	r1, #4
 80045e4:	4638      	mov	r0, r7
 80045e6:	f7ff ff9f 	bl	8004528 <__sfmoreglue>
 80045ea:	6030      	str	r0, [r6, #0]
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d1f1      	bne.n	80045d4 <__sfp+0x20>
 80045f0:	230c      	movs	r3, #12
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	4604      	mov	r4, r0
 80045f6:	4620      	mov	r0, r4
 80045f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <__sfp+0x74>)
 80045fc:	6665      	str	r5, [r4, #100]	; 0x64
 80045fe:	e9c4 5500 	strd	r5, r5, [r4]
 8004602:	60a5      	str	r5, [r4, #8]
 8004604:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004608:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800460c:	2208      	movs	r2, #8
 800460e:	4629      	mov	r1, r5
 8004610:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004614:	f7ff fd82 	bl	800411c <memset>
 8004618:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800461c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004620:	e7e9      	b.n	80045f6 <__sfp+0x42>
 8004622:	bf00      	nop
 8004624:	08004b28 	.word	0x08004b28
 8004628:	ffff0001 	.word	0xffff0001

0800462c <_fwalk_reent>:
 800462c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004630:	4680      	mov	r8, r0
 8004632:	4689      	mov	r9, r1
 8004634:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004638:	2600      	movs	r6, #0
 800463a:	b914      	cbnz	r4, 8004642 <_fwalk_reent+0x16>
 800463c:	4630      	mov	r0, r6
 800463e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004642:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004646:	3f01      	subs	r7, #1
 8004648:	d501      	bpl.n	800464e <_fwalk_reent+0x22>
 800464a:	6824      	ldr	r4, [r4, #0]
 800464c:	e7f5      	b.n	800463a <_fwalk_reent+0xe>
 800464e:	89ab      	ldrh	r3, [r5, #12]
 8004650:	2b01      	cmp	r3, #1
 8004652:	d907      	bls.n	8004664 <_fwalk_reent+0x38>
 8004654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004658:	3301      	adds	r3, #1
 800465a:	d003      	beq.n	8004664 <_fwalk_reent+0x38>
 800465c:	4629      	mov	r1, r5
 800465e:	4640      	mov	r0, r8
 8004660:	47c8      	blx	r9
 8004662:	4306      	orrs	r6, r0
 8004664:	3568      	adds	r5, #104	; 0x68
 8004666:	e7ee      	b.n	8004646 <_fwalk_reent+0x1a>

08004668 <__swhatbuf_r>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	460e      	mov	r6, r1
 800466c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004670:	2900      	cmp	r1, #0
 8004672:	b096      	sub	sp, #88	; 0x58
 8004674:	4614      	mov	r4, r2
 8004676:	461d      	mov	r5, r3
 8004678:	da07      	bge.n	800468a <__swhatbuf_r+0x22>
 800467a:	2300      	movs	r3, #0
 800467c:	602b      	str	r3, [r5, #0]
 800467e:	89b3      	ldrh	r3, [r6, #12]
 8004680:	061a      	lsls	r2, r3, #24
 8004682:	d410      	bmi.n	80046a6 <__swhatbuf_r+0x3e>
 8004684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004688:	e00e      	b.n	80046a8 <__swhatbuf_r+0x40>
 800468a:	466a      	mov	r2, sp
 800468c:	f000 f96e 	bl	800496c <_fstat_r>
 8004690:	2800      	cmp	r0, #0
 8004692:	dbf2      	blt.n	800467a <__swhatbuf_r+0x12>
 8004694:	9a01      	ldr	r2, [sp, #4]
 8004696:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800469a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800469e:	425a      	negs	r2, r3
 80046a0:	415a      	adcs	r2, r3
 80046a2:	602a      	str	r2, [r5, #0]
 80046a4:	e7ee      	b.n	8004684 <__swhatbuf_r+0x1c>
 80046a6:	2340      	movs	r3, #64	; 0x40
 80046a8:	2000      	movs	r0, #0
 80046aa:	6023      	str	r3, [r4, #0]
 80046ac:	b016      	add	sp, #88	; 0x58
 80046ae:	bd70      	pop	{r4, r5, r6, pc}

080046b0 <__smakebuf_r>:
 80046b0:	898b      	ldrh	r3, [r1, #12]
 80046b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80046b4:	079d      	lsls	r5, r3, #30
 80046b6:	4606      	mov	r6, r0
 80046b8:	460c      	mov	r4, r1
 80046ba:	d507      	bpl.n	80046cc <__smakebuf_r+0x1c>
 80046bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	6123      	str	r3, [r4, #16]
 80046c4:	2301      	movs	r3, #1
 80046c6:	6163      	str	r3, [r4, #20]
 80046c8:	b002      	add	sp, #8
 80046ca:	bd70      	pop	{r4, r5, r6, pc}
 80046cc:	ab01      	add	r3, sp, #4
 80046ce:	466a      	mov	r2, sp
 80046d0:	f7ff ffca 	bl	8004668 <__swhatbuf_r>
 80046d4:	9900      	ldr	r1, [sp, #0]
 80046d6:	4605      	mov	r5, r0
 80046d8:	4630      	mov	r0, r6
 80046da:	f000 f877 	bl	80047cc <_malloc_r>
 80046de:	b948      	cbnz	r0, 80046f4 <__smakebuf_r+0x44>
 80046e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046e4:	059a      	lsls	r2, r3, #22
 80046e6:	d4ef      	bmi.n	80046c8 <__smakebuf_r+0x18>
 80046e8:	f023 0303 	bic.w	r3, r3, #3
 80046ec:	f043 0302 	orr.w	r3, r3, #2
 80046f0:	81a3      	strh	r3, [r4, #12]
 80046f2:	e7e3      	b.n	80046bc <__smakebuf_r+0xc>
 80046f4:	4b0d      	ldr	r3, [pc, #52]	; (800472c <__smakebuf_r+0x7c>)
 80046f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	6020      	str	r0, [r4, #0]
 80046fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004700:	81a3      	strh	r3, [r4, #12]
 8004702:	9b00      	ldr	r3, [sp, #0]
 8004704:	6163      	str	r3, [r4, #20]
 8004706:	9b01      	ldr	r3, [sp, #4]
 8004708:	6120      	str	r0, [r4, #16]
 800470a:	b15b      	cbz	r3, 8004724 <__smakebuf_r+0x74>
 800470c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004710:	4630      	mov	r0, r6
 8004712:	f000 f93d 	bl	8004990 <_isatty_r>
 8004716:	b128      	cbz	r0, 8004724 <__smakebuf_r+0x74>
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	f023 0303 	bic.w	r3, r3, #3
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	81a3      	strh	r3, [r4, #12]
 8004724:	89a3      	ldrh	r3, [r4, #12]
 8004726:	431d      	orrs	r5, r3
 8004728:	81a5      	strh	r5, [r4, #12]
 800472a:	e7cd      	b.n	80046c8 <__smakebuf_r+0x18>
 800472c:	0800451d 	.word	0x0800451d

08004730 <_free_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4605      	mov	r5, r0
 8004734:	2900      	cmp	r1, #0
 8004736:	d045      	beq.n	80047c4 <_free_r+0x94>
 8004738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800473c:	1f0c      	subs	r4, r1, #4
 800473e:	2b00      	cmp	r3, #0
 8004740:	bfb8      	it	lt
 8004742:	18e4      	addlt	r4, r4, r3
 8004744:	f000 f946 	bl	80049d4 <__malloc_lock>
 8004748:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <_free_r+0x98>)
 800474a:	6813      	ldr	r3, [r2, #0]
 800474c:	4610      	mov	r0, r2
 800474e:	b933      	cbnz	r3, 800475e <_free_r+0x2e>
 8004750:	6063      	str	r3, [r4, #4]
 8004752:	6014      	str	r4, [r2, #0]
 8004754:	4628      	mov	r0, r5
 8004756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800475a:	f000 b93c 	b.w	80049d6 <__malloc_unlock>
 800475e:	42a3      	cmp	r3, r4
 8004760:	d90c      	bls.n	800477c <_free_r+0x4c>
 8004762:	6821      	ldr	r1, [r4, #0]
 8004764:	1862      	adds	r2, r4, r1
 8004766:	4293      	cmp	r3, r2
 8004768:	bf04      	itt	eq
 800476a:	681a      	ldreq	r2, [r3, #0]
 800476c:	685b      	ldreq	r3, [r3, #4]
 800476e:	6063      	str	r3, [r4, #4]
 8004770:	bf04      	itt	eq
 8004772:	1852      	addeq	r2, r2, r1
 8004774:	6022      	streq	r2, [r4, #0]
 8004776:	6004      	str	r4, [r0, #0]
 8004778:	e7ec      	b.n	8004754 <_free_r+0x24>
 800477a:	4613      	mov	r3, r2
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	b10a      	cbz	r2, 8004784 <_free_r+0x54>
 8004780:	42a2      	cmp	r2, r4
 8004782:	d9fa      	bls.n	800477a <_free_r+0x4a>
 8004784:	6819      	ldr	r1, [r3, #0]
 8004786:	1858      	adds	r0, r3, r1
 8004788:	42a0      	cmp	r0, r4
 800478a:	d10b      	bne.n	80047a4 <_free_r+0x74>
 800478c:	6820      	ldr	r0, [r4, #0]
 800478e:	4401      	add	r1, r0
 8004790:	1858      	adds	r0, r3, r1
 8004792:	4282      	cmp	r2, r0
 8004794:	6019      	str	r1, [r3, #0]
 8004796:	d1dd      	bne.n	8004754 <_free_r+0x24>
 8004798:	6810      	ldr	r0, [r2, #0]
 800479a:	6852      	ldr	r2, [r2, #4]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	4401      	add	r1, r0
 80047a0:	6019      	str	r1, [r3, #0]
 80047a2:	e7d7      	b.n	8004754 <_free_r+0x24>
 80047a4:	d902      	bls.n	80047ac <_free_r+0x7c>
 80047a6:	230c      	movs	r3, #12
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	e7d3      	b.n	8004754 <_free_r+0x24>
 80047ac:	6820      	ldr	r0, [r4, #0]
 80047ae:	1821      	adds	r1, r4, r0
 80047b0:	428a      	cmp	r2, r1
 80047b2:	bf04      	itt	eq
 80047b4:	6811      	ldreq	r1, [r2, #0]
 80047b6:	6852      	ldreq	r2, [r2, #4]
 80047b8:	6062      	str	r2, [r4, #4]
 80047ba:	bf04      	itt	eq
 80047bc:	1809      	addeq	r1, r1, r0
 80047be:	6021      	streq	r1, [r4, #0]
 80047c0:	605c      	str	r4, [r3, #4]
 80047c2:	e7c7      	b.n	8004754 <_free_r+0x24>
 80047c4:	bd38      	pop	{r3, r4, r5, pc}
 80047c6:	bf00      	nop
 80047c8:	20000094 	.word	0x20000094

080047cc <_malloc_r>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	1ccd      	adds	r5, r1, #3
 80047d0:	f025 0503 	bic.w	r5, r5, #3
 80047d4:	3508      	adds	r5, #8
 80047d6:	2d0c      	cmp	r5, #12
 80047d8:	bf38      	it	cc
 80047da:	250c      	movcc	r5, #12
 80047dc:	2d00      	cmp	r5, #0
 80047de:	4606      	mov	r6, r0
 80047e0:	db01      	blt.n	80047e6 <_malloc_r+0x1a>
 80047e2:	42a9      	cmp	r1, r5
 80047e4:	d903      	bls.n	80047ee <_malloc_r+0x22>
 80047e6:	230c      	movs	r3, #12
 80047e8:	6033      	str	r3, [r6, #0]
 80047ea:	2000      	movs	r0, #0
 80047ec:	bd70      	pop	{r4, r5, r6, pc}
 80047ee:	f000 f8f1 	bl	80049d4 <__malloc_lock>
 80047f2:	4a21      	ldr	r2, [pc, #132]	; (8004878 <_malloc_r+0xac>)
 80047f4:	6814      	ldr	r4, [r2, #0]
 80047f6:	4621      	mov	r1, r4
 80047f8:	b991      	cbnz	r1, 8004820 <_malloc_r+0x54>
 80047fa:	4c20      	ldr	r4, [pc, #128]	; (800487c <_malloc_r+0xb0>)
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	b91b      	cbnz	r3, 8004808 <_malloc_r+0x3c>
 8004800:	4630      	mov	r0, r6
 8004802:	f000 f83d 	bl	8004880 <_sbrk_r>
 8004806:	6020      	str	r0, [r4, #0]
 8004808:	4629      	mov	r1, r5
 800480a:	4630      	mov	r0, r6
 800480c:	f000 f838 	bl	8004880 <_sbrk_r>
 8004810:	1c43      	adds	r3, r0, #1
 8004812:	d124      	bne.n	800485e <_malloc_r+0x92>
 8004814:	230c      	movs	r3, #12
 8004816:	6033      	str	r3, [r6, #0]
 8004818:	4630      	mov	r0, r6
 800481a:	f000 f8dc 	bl	80049d6 <__malloc_unlock>
 800481e:	e7e4      	b.n	80047ea <_malloc_r+0x1e>
 8004820:	680b      	ldr	r3, [r1, #0]
 8004822:	1b5b      	subs	r3, r3, r5
 8004824:	d418      	bmi.n	8004858 <_malloc_r+0x8c>
 8004826:	2b0b      	cmp	r3, #11
 8004828:	d90f      	bls.n	800484a <_malloc_r+0x7e>
 800482a:	600b      	str	r3, [r1, #0]
 800482c:	50cd      	str	r5, [r1, r3]
 800482e:	18cc      	adds	r4, r1, r3
 8004830:	4630      	mov	r0, r6
 8004832:	f000 f8d0 	bl	80049d6 <__malloc_unlock>
 8004836:	f104 000b 	add.w	r0, r4, #11
 800483a:	1d23      	adds	r3, r4, #4
 800483c:	f020 0007 	bic.w	r0, r0, #7
 8004840:	1ac3      	subs	r3, r0, r3
 8004842:	d0d3      	beq.n	80047ec <_malloc_r+0x20>
 8004844:	425a      	negs	r2, r3
 8004846:	50e2      	str	r2, [r4, r3]
 8004848:	e7d0      	b.n	80047ec <_malloc_r+0x20>
 800484a:	428c      	cmp	r4, r1
 800484c:	684b      	ldr	r3, [r1, #4]
 800484e:	bf16      	itet	ne
 8004850:	6063      	strne	r3, [r4, #4]
 8004852:	6013      	streq	r3, [r2, #0]
 8004854:	460c      	movne	r4, r1
 8004856:	e7eb      	b.n	8004830 <_malloc_r+0x64>
 8004858:	460c      	mov	r4, r1
 800485a:	6849      	ldr	r1, [r1, #4]
 800485c:	e7cc      	b.n	80047f8 <_malloc_r+0x2c>
 800485e:	1cc4      	adds	r4, r0, #3
 8004860:	f024 0403 	bic.w	r4, r4, #3
 8004864:	42a0      	cmp	r0, r4
 8004866:	d005      	beq.n	8004874 <_malloc_r+0xa8>
 8004868:	1a21      	subs	r1, r4, r0
 800486a:	4630      	mov	r0, r6
 800486c:	f000 f808 	bl	8004880 <_sbrk_r>
 8004870:	3001      	adds	r0, #1
 8004872:	d0cf      	beq.n	8004814 <_malloc_r+0x48>
 8004874:	6025      	str	r5, [r4, #0]
 8004876:	e7db      	b.n	8004830 <_malloc_r+0x64>
 8004878:	20000094 	.word	0x20000094
 800487c:	20000098 	.word	0x20000098

08004880 <_sbrk_r>:
 8004880:	b538      	push	{r3, r4, r5, lr}
 8004882:	4c06      	ldr	r4, [pc, #24]	; (800489c <_sbrk_r+0x1c>)
 8004884:	2300      	movs	r3, #0
 8004886:	4605      	mov	r5, r0
 8004888:	4608      	mov	r0, r1
 800488a:	6023      	str	r3, [r4, #0]
 800488c:	f7fc f95a 	bl	8000b44 <_sbrk>
 8004890:	1c43      	adds	r3, r0, #1
 8004892:	d102      	bne.n	800489a <_sbrk_r+0x1a>
 8004894:	6823      	ldr	r3, [r4, #0]
 8004896:	b103      	cbz	r3, 800489a <_sbrk_r+0x1a>
 8004898:	602b      	str	r3, [r5, #0]
 800489a:	bd38      	pop	{r3, r4, r5, pc}
 800489c:	20000240 	.word	0x20000240

080048a0 <__sread>:
 80048a0:	b510      	push	{r4, lr}
 80048a2:	460c      	mov	r4, r1
 80048a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a8:	f000 f896 	bl	80049d8 <_read_r>
 80048ac:	2800      	cmp	r0, #0
 80048ae:	bfab      	itete	ge
 80048b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048b2:	89a3      	ldrhlt	r3, [r4, #12]
 80048b4:	181b      	addge	r3, r3, r0
 80048b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048ba:	bfac      	ite	ge
 80048bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80048be:	81a3      	strhlt	r3, [r4, #12]
 80048c0:	bd10      	pop	{r4, pc}

080048c2 <__swrite>:
 80048c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c6:	461f      	mov	r7, r3
 80048c8:	898b      	ldrh	r3, [r1, #12]
 80048ca:	05db      	lsls	r3, r3, #23
 80048cc:	4605      	mov	r5, r0
 80048ce:	460c      	mov	r4, r1
 80048d0:	4616      	mov	r6, r2
 80048d2:	d505      	bpl.n	80048e0 <__swrite+0x1e>
 80048d4:	2302      	movs	r3, #2
 80048d6:	2200      	movs	r2, #0
 80048d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048dc:	f000 f868 	bl	80049b0 <_lseek_r>
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048ea:	81a3      	strh	r3, [r4, #12]
 80048ec:	4632      	mov	r2, r6
 80048ee:	463b      	mov	r3, r7
 80048f0:	4628      	mov	r0, r5
 80048f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f6:	f000 b817 	b.w	8004928 <_write_r>

080048fa <__sseek>:
 80048fa:	b510      	push	{r4, lr}
 80048fc:	460c      	mov	r4, r1
 80048fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004902:	f000 f855 	bl	80049b0 <_lseek_r>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	89a3      	ldrh	r3, [r4, #12]
 800490a:	bf15      	itete	ne
 800490c:	6560      	strne	r0, [r4, #84]	; 0x54
 800490e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004916:	81a3      	strheq	r3, [r4, #12]
 8004918:	bf18      	it	ne
 800491a:	81a3      	strhne	r3, [r4, #12]
 800491c:	bd10      	pop	{r4, pc}

0800491e <__sclose>:
 800491e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004922:	f000 b813 	b.w	800494c <_close_r>
	...

08004928 <_write_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4c07      	ldr	r4, [pc, #28]	; (8004948 <_write_r+0x20>)
 800492c:	4605      	mov	r5, r0
 800492e:	4608      	mov	r0, r1
 8004930:	4611      	mov	r1, r2
 8004932:	2200      	movs	r2, #0
 8004934:	6022      	str	r2, [r4, #0]
 8004936:	461a      	mov	r2, r3
 8004938:	f7fc f8b3 	bl	8000aa2 <_write>
 800493c:	1c43      	adds	r3, r0, #1
 800493e:	d102      	bne.n	8004946 <_write_r+0x1e>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	b103      	cbz	r3, 8004946 <_write_r+0x1e>
 8004944:	602b      	str	r3, [r5, #0]
 8004946:	bd38      	pop	{r3, r4, r5, pc}
 8004948:	20000240 	.word	0x20000240

0800494c <_close_r>:
 800494c:	b538      	push	{r3, r4, r5, lr}
 800494e:	4c06      	ldr	r4, [pc, #24]	; (8004968 <_close_r+0x1c>)
 8004950:	2300      	movs	r3, #0
 8004952:	4605      	mov	r5, r0
 8004954:	4608      	mov	r0, r1
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	f7fc f8bf 	bl	8000ada <_close>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_close_r+0x1a>
 8004960:	6823      	ldr	r3, [r4, #0]
 8004962:	b103      	cbz	r3, 8004966 <_close_r+0x1a>
 8004964:	602b      	str	r3, [r5, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	20000240 	.word	0x20000240

0800496c <_fstat_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	4c07      	ldr	r4, [pc, #28]	; (800498c <_fstat_r+0x20>)
 8004970:	2300      	movs	r3, #0
 8004972:	4605      	mov	r5, r0
 8004974:	4608      	mov	r0, r1
 8004976:	4611      	mov	r1, r2
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	f7fc f8ba 	bl	8000af2 <_fstat>
 800497e:	1c43      	adds	r3, r0, #1
 8004980:	d102      	bne.n	8004988 <_fstat_r+0x1c>
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	b103      	cbz	r3, 8004988 <_fstat_r+0x1c>
 8004986:	602b      	str	r3, [r5, #0]
 8004988:	bd38      	pop	{r3, r4, r5, pc}
 800498a:	bf00      	nop
 800498c:	20000240 	.word	0x20000240

08004990 <_isatty_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4c06      	ldr	r4, [pc, #24]	; (80049ac <_isatty_r+0x1c>)
 8004994:	2300      	movs	r3, #0
 8004996:	4605      	mov	r5, r0
 8004998:	4608      	mov	r0, r1
 800499a:	6023      	str	r3, [r4, #0]
 800499c:	f7fc f8b9 	bl	8000b12 <_isatty>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d102      	bne.n	80049aa <_isatty_r+0x1a>
 80049a4:	6823      	ldr	r3, [r4, #0]
 80049a6:	b103      	cbz	r3, 80049aa <_isatty_r+0x1a>
 80049a8:	602b      	str	r3, [r5, #0]
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	20000240 	.word	0x20000240

080049b0 <_lseek_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4c07      	ldr	r4, [pc, #28]	; (80049d0 <_lseek_r+0x20>)
 80049b4:	4605      	mov	r5, r0
 80049b6:	4608      	mov	r0, r1
 80049b8:	4611      	mov	r1, r2
 80049ba:	2200      	movs	r2, #0
 80049bc:	6022      	str	r2, [r4, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	f7fc f8b2 	bl	8000b28 <_lseek>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d102      	bne.n	80049ce <_lseek_r+0x1e>
 80049c8:	6823      	ldr	r3, [r4, #0]
 80049ca:	b103      	cbz	r3, 80049ce <_lseek_r+0x1e>
 80049cc:	602b      	str	r3, [r5, #0]
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	20000240 	.word	0x20000240

080049d4 <__malloc_lock>:
 80049d4:	4770      	bx	lr

080049d6 <__malloc_unlock>:
 80049d6:	4770      	bx	lr

080049d8 <_read_r>:
 80049d8:	b538      	push	{r3, r4, r5, lr}
 80049da:	4c07      	ldr	r4, [pc, #28]	; (80049f8 <_read_r+0x20>)
 80049dc:	4605      	mov	r5, r0
 80049de:	4608      	mov	r0, r1
 80049e0:	4611      	mov	r1, r2
 80049e2:	2200      	movs	r2, #0
 80049e4:	6022      	str	r2, [r4, #0]
 80049e6:	461a      	mov	r2, r3
 80049e8:	f7fc f83e 	bl	8000a68 <_read>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_read_r+0x1e>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_read_r+0x1e>
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	20000240 	.word	0x20000240

080049fc <_init>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr

08004a08 <_fini>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr
